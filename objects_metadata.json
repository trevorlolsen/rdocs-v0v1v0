{"base::!":{"description":"These operators act on raw, logical and number-like vectors.\n","example_call":"!(x)"},"base::$":{"description":"Operators acting on vectors, matrices, arrays and lists to extract or\nreplace parts.\n","example_call":"NULL"},"base::&":{"description":"These operators act on raw, logical and number-like vectors.\n","example_call":"&(e1, e2)"},"base::(":{"description":"Open parenthesis, (, and open brace, {, are\n.Primitive functions in R.\n","example_call":"NULL"},"base::*":{"description":"These unary and binary operators perform arithmetic on numeric or\ncomplex vectors (or objects which can be coerced to them).\n","example_call":"*(e1, e2)"},"base::+":{"description":"These unary and binary operators perform arithmetic on numeric or\ncomplex vectors (or objects which can be coerced to them).\n","example_call":"+(e1, e2)"},"base::-":{"description":"These unary and binary operators perform arithmetic on numeric or\ncomplex vectors (or objects which can be coerced to them).\n","example_call":"-(e1, e2)"},"base::/":{"description":"These unary and binary operators perform arithmetic on numeric or\ncomplex vectors (or objects which can be coerced to them).\n","example_call":"/(e1, e2)"},"base:::":{"description":"Generate regular sequences.\n","example_call":"NULL"},"base::<":{"description":"Binary operators which allow the comparison of values in atomic vectors.\n","example_call":"<(e1, e2)"},"base::=":{"description":"Assign a value to a name.\n","example_call":"NULL"},"base::>":{"description":"Binary operators which allow the comparison of values in atomic vectors.\n","example_call":">(e1, e2)"},"base::as.matrix.data.frame":{"description":"matrix creates a matrix from the given set of values.\n","example_call":"as.matrix.data.frame(x, rownames.force = NA, ...)"},"base::@":{"description":"Extract or replace the contents of a slot or property of an object.\n","example_call":"NULL"},"base::F":{"description":"Create or test for objects of type \"logical\", and the basic\nlogical constants.\n","example_call":"NULL"},"base::I":{"description":"Change the class of an object to indicate that it should be treated\n<U+2018>as is<U+2019>.\n","example_call":"I(x)"},"base::registerS3methods":{"description":"Internal namespace support functions.  Not intended to be called\ndirectly, and only visible because of the special nature of the\nbase namespace.\n","example_call":"registerS3methods(info, package, env)"},"base::as.POSIXct.Date":{"description":"Functions to manipulate objects of classes \"POSIXlt\" and\n\"POSIXct\" representing calendar dates and times.\n","example_call":"as.POSIXct.Date(x, tz = \"UTC\", ...)"},"base::T":{"description":"Create or test for objects of type \"logical\", and the basic\nlogical constants.\n","example_call":"NULL"},"base::[":{"description":"Operators acting on vectors, matrices, arrays and lists to extract or\nreplace parts.\n","example_call":"NULL"},"base::^":{"description":"These unary and binary operators perform arithmetic on numeric or\ncomplex vectors (or objects which can be coerced to them).\n","example_call":"^(e1, e2)"},"base::c":{"description":"This is a generic function which combines its arguments.\n","example_call":"c(...)"},"base::q":{"description":"The function quit or its alias q terminate the current\nR session.\n","example_call":"q(save = \"default\", status = 0, runLast = TRUE)"},"base::t":{"description":"Given a matrix or data.frame x,\nt returns the transpose of x.\n","example_call":"t(x)"},"base::array2DF":{"description":"array2DF converts an array, including list arrays commonly\nreturned by tapply, into data frames for use in further\nanalysis or plotting functions.\n","example_call":"array2DF(x, responseName = \"Value\", sep = \"\", base = list(LETTERS),"},"base::{":{"description":"Open parenthesis, (, and open brace, {, are\n.Primitive functions in R.\n","example_call":"NULL"},"base::|":{"description":"These operators act on raw, logical and number-like vectors.\n","example_call":"|(e1, e2)"},"base::~":{"description":"Tilde is used to separate the left- and right-hand sides in a model formula.\n","example_call":"NULL"},"base::qr.solve":{"description":"qr computes the QR decomposition of a matrix.\n","example_call":"qr.solve(a, b, tol = 1e-07)"},"base::str2expression":{"description":"parse() returns the parsed but unevaluated expressions in an\nexpression, a <U+201C>list<U+201D> of calls.\n","example_call":"str2expression(text)"},"base::dynGet":{"description":"Search by name for an object (get) or zero or more objects\n(mget).\n","example_call":"dynGet(x, ifnotfound = stop(gettextf(\"%s not found\", sQuote(x)),"},"base::as.single":{"description":"Create, coerce to or test for a double-precision vector.\n","example_call":"as.single(x, ...)"},"base::interaction":{"description":"interaction computes a factor which represents the interaction\nof the given factors.  The result of interaction is always unordered.\n","example_call":"interaction(..., drop = FALSE, sep = \".\", lex.order = FALSE)"},"base::as.POSIXlt.default":{"description":"Functions to manipulate objects of classes \"POSIXlt\" and\n\"POSIXct\" representing calendar dates and times.\n","example_call":"as.POSIXlt.default(x, tz = \"\", optional = FALSE, ...)"},"base::gamma":{"description":"Special mathematical functions related to the beta and gamma\nfunctions.\n","example_call":"gamma(x)"},"base::as.package_version":{"description":"A simple S3 class for representing numeric versions\nincluding package versions, and associated methods.","example_call":"as.package_version(x)"},"base::.GlobalEnv":{"description":"Get, set, test for and create environments.\n","example_call":"NULL"},"base::getNativeSymbolInfo":{"description":"This finds and returns a description of one or more dynamically loaded\nor <U+2018>exported<U+2019> built-in native symbols.  For each name, it\nreturns information about the name of the symbol, the library in which\nit is located and, if available, the number of arguments it expects\nand by which interface it should be called (i.e .Call,\n.C, .Fortran, or\n.External). Additionally, it returns the address of the\nsymbol and this can be passed to other C routines.  Specifically, this\nprovides a way to explicitly share symbols between different\ndynamically loaded package libraries.  Also, it provides a way to\nquery where symbols were resolved, and aids diagnosing strange\nbehavior associated with dynamic resolution.\n","example_call":"getNativeSymbolInfo(name, PACKAGE, unlist = TRUE, withRegistrationInfo = FALSE)"},"base::print.srcfile":{"description":"These functions are for working with source files and more generally\nwith <U+201C>source references<U+201D> (\"srcref\"), i.e., references to\nsource code.  The resulting data is used for printing and source level\ndebugging, and is typically available in interactive R sessions,\nnamely when options(keep.source = TRUE).\n","example_call":"print.srcfile(x, ...)"},"base::is.na<-":{"description":"NA is a logical constant of length 1 which contains a missing\nvalue indicator.  NA can be coerced to any other vector\ntype except raw.  There are also constants NA_integer_,\nNA_real_, NA_complex_ and NA_character_ of the\nother atomic vector types which support missing values: all of these\nare reserved words in the R language.\n","example_call":"is.na<-(x, value)"},"base::packageHasNamespace":{"description":"Internal namespace support functions.  Not intended to be called\ndirectly, and only visible because of the special nature of the\nbase namespace.\n","example_call":"packageHasNamespace(package, package.lib)"},"base::!=":{"description":"Binary operators which allow the comparison of values in atomic vectors.\n","example_call":"!=(e1, e2)"},"base::.handleSimpleError":{"description":"These functions provide a mechanism for handling unusual conditions,\nincluding errors and warnings.\n","example_call":".handleSimpleError(h, msg, call)"},"base::%%":{"description":"These unary and binary operators perform arithmetic on numeric or\ncomplex vectors (or objects which can be coerced to them).\n","example_call":"%%(e1, e2)"},"base::&&":{"description":"These operators act on raw, logical and number-like vectors.\n","example_call":"NULL"},"base::xtfrm.AsIs":{"description":"A generic auxiliary function that produces a numeric vector which\nwill sort in the same order as x.\n","example_call":"xtfrm.AsIs(x)"},"base::colnames<-":{"description":"Retrieve or set the row or column names of a matrix-like object.\n","example_call":"colnames<-(x, value)"},"base::file.choose":{"description":"Choose a file interactively.\n","example_call":"file.choose(new = FALSE)"},"base::summary.connection":{"description":"Functions to create, open and close connections, i.e.,\n<U+201C>generalized files<U+201D>, such as possibly compressed files, URLs,\npipes, etc.\n","example_call":"summary.connection(object, ...)"},"base::.C":{"description":"Functions to make calls to compiled code that has been loaded into R.\n","example_call":".C(.NAME, ..., NAOK = FALSE, DUP = TRUE, PACKAGE, ENCODING)"},"base::subset.default":{"description":"Return subsets of vectors, matrices or data frames which meet conditions.\n","example_call":"subset.default(x, subset, ...)"},"base::warningCondition":{"description":"These functions provide a mechanism for handling unusual conditions,\nincluding errors and warnings.\n","example_call":"warningCondition(message, ..., class = NULL, call = NULL)"},"base::utf8ToInt":{"description":"Conversion of UTF-8 encoded character vectors to and from integer\nvectors representing a UTF-32 encoding.\n","example_call":"utf8ToInt(x)"},"base::baseenv":{"description":"Get, set, test for and create environments.\n","example_call":"baseenv()"},"base::.set_row_names":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":".set_row_names(n)"},"base::Ops.POSIXt":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"Ops.POSIXt(e1, e2)"},"base::quote":{"description":"substitute returns the parse tree for the (unevaluated)\nexpression expr, substituting any variables bound in\nenv.\n","example_call":"quote(expr)"},"base::::":{"description":"Accessing exported and internal variables, i.e. R objects\n(including lazy loaded data sets) in a namespace.\n","example_call":"::(pkg, name)"},"base::inverse.rle":{"description":"Compute the lengths and values of runs of equal values in a vector\n<U+2013> or the reverse operation.\n","example_call":"inverse.rle(x, ...)"},"base::<-":{"description":"Assign a value to a name.\n","example_call":"NULL"},"base::<=":{"description":"Binary operators which allow the comparison of values in atomic vectors.\n","example_call":"<=(e1, e2)"},"base::==":{"description":"Binary operators which allow the comparison of values in atomic vectors.\n","example_call":"==(e1, e2)"},"base::>=":{"description":"Binary operators which allow the comparison of values in atomic vectors.\n","example_call":">=(e1, e2)"},"base::memory.profile":{"description":"Lists the usage of the cons cells by SEXPREC type.\n","example_call":"memory.profile()"},"base::split.POSIXct":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"split.POSIXct(x, f, drop = FALSE, ...)"},"base::unique.numeric_version":{"description":"A simple S3 class for representing numeric versions\nincluding package versions, and associated methods.","example_call":"unique.numeric_version(x, incomparables = FALSE, ...)"},"base::infoRDS":{"description":"Functions to write a single R object to a file, and to restore it.\n","example_call":"infoRDS(file)"},"base::length.POSIXlt":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"length.POSIXlt(x)"},"base::getOption":{"description":"Allow the user to set and examine a variety of global options\nwhich affect the way in which R computes and displays its results.\n","example_call":"getOption(x, default = NULL)"},"base::Im":{"description":"Basic functions which support complex arithmetic in R, in addition to\nthe arithmetic operators +, -, *, /, and ^.\n","example_call":"Im(z)"},"base::qr.Q":{"description":"Returns the original matrix from which the object was constructed or\nthe components of the decomposition.\n","example_call":"qr.Q(qr, complete = FALSE, Dvec)"},"base::qr.R":{"description":"Returns the original matrix from which the object was constructed or\nthe components of the decomposition.\n","example_call":"qr.R(qr, complete = FALSE)"},"base::rapply":{"description":"rapply is a recursive version of lapply with\nflexibility in how the result is structured (how = \"..\").\n","example_call":"rapply(object, f, classes = \"ANY\", deflt = NULL, how = c(\"unlist\","},"base::qr.X":{"description":"Returns the original matrix from which the object was constructed or\nthe components of the decomposition.\n","example_call":"qr.X(qr, complete = FALSE, ncol = if (complete) nrow(R) else min(dim(R)))"},"base::library.dynam":{"description":"Load the specified file of compiled code if it has not been loaded\nalready, or unloads it.\n","example_call":"library.dynam(chname, package, lib.loc, verbose = getOption(\"verbose\"),"},"base::evalq":{"description":"Evaluate an R expression in a specified environment.\n","example_call":"evalq(expr, envir = parent.frame(), enclos = if (is.list(envir) ||"},"base::units.difftime":{"description":"Time intervals creation, printing, and some arithmetic.  The\nprint() method calls these <U+201C>time differences<U+201D>.\n","example_call":"units.difftime(x)"},"base::Re":{"description":"Basic functions which support complex arithmetic in R, in addition to\nthe arithmetic operators +, -, *, /, and ^.\n","example_call":"Re(z)"},"base::package_version":{"description":"A simple S3 class for representing numeric versions\nincluding package versions, and associated methods.","example_call":"package_version(x, strict = TRUE)"},"base::is.name":{"description":"A <U+2018>name<U+2019> (also known as a <U+2018>symbol<U+2019>) is a way to refer to\nR objects by name (rather than the value of the object, if any, bound\nto that name).\n","example_call":"is.name(x)"},"base::as.data.frame.matrix":{"description":"Functions to check if an object is a data frame, or coerce it if possible.\n","example_call":"as.data.frame.matrix(x, row.names = NULL, optional = FALSE, make.names = TRUE,"},"base::.NotYetImplemented":{"description":"In order to pinpoint missing functionality, the R core team uses\nthese functions for missing R functions and not yet used arguments of\nexisting R functions (which are typically there for compatibility\npurposes).\n","example_call":".NotYetImplemented()"},"base::LETTERS":{"description":"Constants built into R.\n","example_call":"NULL"},"base::unique.array":{"description":"unique returns a vector, data frame or array like x\nbut with duplicate elements/rows removed.\n","example_call":"unique.array(x, incomparables = FALSE, MARGIN = 1, fromLast = FALSE,"},"base::.LC.categories":{"description":"Get details of or set aspects of the locale for the R process.\n","example_call":"NULL"},"base::[[":{"description":"Operators acting on vectors, matrices, arrays and lists to extract or\nreplace parts.\n","example_call":"NULL"},"base::dimnames.data.frame":{"description":"Retrieve or set the dimnames of an object.\n","example_call":"dimnames.data.frame(x)"},"base::require":{"description":"library and require load and attach add-on packages.\n","example_call":"require(package, lib.loc = NULL, quietly = FALSE, warn.conflicts,"},"base::parse":{"description":"parse() returns the parsed but unevaluated expressions in an\nexpression, a <U+201C>list<U+201D> of calls.\n","example_call":"parse(file = \"\", n = NULL, text = NULL, prompt = \"?\", keep.source = getOption(\"keep.source\"),"},"base::by":{"description":"Function by is an object-oriented wrapper for\ntapply applied to data frames.\n","example_call":"by(data, INDICES, FUN, ..., simplify = TRUE)"},"base::gc":{"description":"A call of gc causes a garbage collection to take place.\ngcinfo sets a flag so that\nautomatic collection is either silent (verbose = FALSE) or\nprints memory usage statistics (verbose = TRUE).\n","example_call":"gc(verbose = getOption(\"verbose\"), reset = FALSE, full = TRUE)"},"base::gl":{"description":"Generate factors by specifying the pattern of their levels.\n","example_call":"gl(n, k, length = n * k, labels = seq_len(n), ordered = FALSE)"},"base::if":{"description":"These are the basic control-flow constructs of the R language.  They\nfunction in much the same way as control statements in any Algol-like\nlanguage.  They are all reserved words.\n","example_call":"NULL"},"base::ls":{"description":"ls and objects return a vector of character strings\ngiving the names of the objects in the specified environment.  When\ninvoked with no argument at the top level prompt, ls shows what\ndata sets and functions a user has defined.  When invoked with no\nargument inside a function, ls returns the names of the\nfunction's local variables: this is useful in conjunction with\nbrowser.\n","example_call":"ls(name, pos = -1L, envir = as.environment(pos), all.names = FALSE,"},"base::unique.warnings":{"description":"warnings and its print method print the\nvariable last.warning in a pleasing form.\n","example_call":"unique.warnings(x, incomparables = FALSE, ...)"},"base::pi":{"description":"Constants built into R.\n","example_call":"NULL"},"base::gzcon":{"description":"gzcon provides a modified connection that wraps an existing\nconnection, and decompresses reads or compresses writes through that\nconnection.  Standard gzip headers are assumed.\n","example_call":"gzcon(con, level = 6, allowNonCompressed = TRUE, text = FALSE)"},"base::qr":{"description":"qr computes the QR decomposition of a matrix.\n","example_call":"qr(x, ...)"},"base::lapply":{"description":"lapply returns a list of the same length as X, each\nelement of which is the result of applying FUN to the\ncorresponding element of X.\n","example_call":"lapply(X, FUN, ...)"},"base::rm":{"description":"remove and rm are identical R functions that\ncan be used to remove objects.  These can\nbe specified successively as character strings, or in the character\nvector list, or through a combination of both.  All objects\nthus specified will be removed.\n","example_call":"rm(..., list = character(), pos = -1, envir = as.environment(pos),"},"base::paste":{"description":"Concatenate vectors after converting to character.\nConcatenation happens in two basically different ways, determined by\ncollapse being a string or not.\n","example_call":"paste(..., sep = \" \", collapse = NULL, recycle0 = FALSE)"},"base::match":{"description":"match returns a vector of the positions of (first) matches of\nits first argument in its second.\n","example_call":"match(x, table, nomatch = NA_integer_, incomparables = NULL)"},"base::order":{"description":"order returns a permutation which rearranges its first\nargument into ascending or descending order, breaking ties by further\narguments.  sort.list does the same, using only one argument.\nSee the examples for how to use these functions to sort data frames,\netc.\n","example_call":"order(..., na.last = TRUE, decreasing = FALSE, method = c(\"auto\","},"base::xpdrows.data.frame":{"description":"Internal auxiliary functions for use with data frames.\n","example_call":"xpdrows.data.frame(x, old.rows, new.rows)"},"base::rank":{"description":"Returns the sample ranks of the values in a vector.  Ties (i.e., equal\nvalues) and missing values can be handled in several ways.\n","example_call":"rank(x, na.last = TRUE, ties.method = c(\"average\", \"first\","},"base::||":{"description":"These operators act on raw, logical and number-like vectors.\n","example_call":"NULL"},"base::seq.default":{"description":"Generate regular sequences.  seq is a standard generic with a\ndefault method.  seq.int is a primitive which can be\nmuch faster but has a few restrictions.  seq_along and\nseq_len are very fast primitives for two common cases.\n","example_call":"seq.default(from = 1, to = 1, by = ((to - from)/(length.out - 1)),"},"base::startsWith":{"description":"Determines if entries of x start or end with string (entries of)\nprefix or suffix respectively, where strings are\nrecycled to common lengths.\n","example_call":"startsWith(x, prefix)"},"base::[<-.Date":{"description":"Description of the class \"Date\" representing calendar dates.\n","example_call":"[<-.Date(x, ..., value)"},"base::.noGenerics":{"description":"library and require load and attach add-on packages.\n","example_call":"NULL"},"base::aperm.default":{"description":"Transpose an array by permuting its dimensions and optionally resizing\nit.\n","example_call":"aperm.default(a, perm = NULL, resize = TRUE, ...)"},"base::kronecker":{"description":"Computes the generalised Kronecker product of two arrays,\nX and Y.\n","example_call":"kronecker(X, Y, FUN = \"*\", make.dimnames = FALSE, ...)"},"base::traceback":{"description":"By default traceback() prints the call stack of the last\nuncaught error, i.e., the sequence of calls that lead to the error.\nThis is useful when an error occurs with an unidentifiable error\nmessage.  It can also be used to print the current stack or\narbitrary lists of calls.\n","example_call":"traceback(x = NULL, max.lines = getOption(\"traceback.max.lines\","},"base::as.character.hexmode":{"description":"Integers which are displayed in hexadecimal (short <U+2018>hex<U+2019>) format,\nwith as many digits as are needed to display the largest, using leading\nzeroes as necessary.\n","example_call":"as.character.hexmode(x, keepStr = FALSE, ...)"},"base::simpleError":{"description":"These functions provide a mechanism for handling unusual conditions,\nincluding errors and warnings.\n","example_call":"simpleError(message, call = NULL)"},"base::warnings":{"description":"warnings and its print method print the\nvariable last.warning in a pleasing form.\n","example_call":"warnings(...)"},"base::as.Date.POSIXct":{"description":"Functions to convert between character representations and objects of\nclass \"Date\" representing calendar dates.\n","example_call":"as.Date.POSIXct(x, tz = \"UTC\", ...)"},"base::kappa.qr":{"description":"The condition number of a regular (square) matrix is the product of\nthe norm of the matrix and the norm of its inverse (or\npseudo-inverse), and hence depends on the kind of matrix-norm.\n","example_call":"kappa.qr(z, ...)"},"base::isNamespace":{"description":"Internal namespace support functions.  Not intended to be called\ndirectly, and only visible because of the special nature of the\nbase namespace.\n","example_call":"isNamespace(ns)"},"base::attr<-":{"description":"Get or set specific attributes of an object.\n","example_call":"attr<-(x, which, value)"},"base::is.finite.POSIXlt":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"is.finite.POSIXlt(x)"},"base::colMeans":{"description":"Form row and column sums and means for numeric arrays (or data frames).\n","example_call":"colMeans(x, na.rm = FALSE, dims = 1L)"},"base::as.Date.POSIXlt":{"description":"Functions to convert between character representations and objects of\nclass \"Date\" representing calendar dates.\n","example_call":"as.Date.POSIXlt(x, ...)"},"base::asNamespace":{"description":"Internal namespace support functions.  Not intended to be called\ndirectly, and only visible because of the special nature of the\nbase namespace.\n","example_call":"asNamespace(ns, base.OK = TRUE)"},"base::xtfrm.difftime":{"description":"A generic auxiliary function that produces a numeric vector which\nwill sort in the same order as x.\n","example_call":"xtfrm.difftime(x)"},"base::quit":{"description":"The function quit or its alias q terminate the current\nR session.\n","example_call":"quit(save = \"default\", status = 0, runLast = TRUE)"},"base::kappa.lm":{"description":"The condition number of a regular (square) matrix is the product of\nthe norm of the matrix and the norm of its inverse (or\npseudo-inverse), and hence depends on the kind of matrix-norm.\n","example_call":"kappa.lm(z, ...)"},"base::setSessionTimeLimit":{"description":"Functions to set CPU and/or elapsed time limits for top-level\ncomputations or the current session.\n","example_call":"setSessionTimeLimit(cpu = Inf, elapsed = Inf)"},"base::find.package":{"description":"Find the paths to one or more packages.\n","example_call":"find.package(package = NULL, lib.loc = NULL, quiet = FALSE, verbose = getOption(\"verbose\"))"},"base::weekdays.POSIXt":{"description":"Extract the weekday, month or quarter, or the Julian time\n(days since some origin).  These are generic functions: the methods\nfor the internal date-time classes are documented here.\n","example_call":"weekdays.POSIXt(x, abbreviate = FALSE)"},"base::eval":{"description":"Evaluate an R expression in a specified environment.\n","example_call":"eval(expr, envir = parent.frame(), enclos = if (is.list(envir) ||"},"base::c.numeric_version":{"description":"A simple S3 class for representing numeric versions\nincluding package versions, and associated methods.","example_call":"c.numeric_version(..., recursive = FALSE)"},"base::deparse1":{"description":"Turn unevaluated expressions into character strings.\n","example_call":"deparse1(expr, collapse = \" \", width.cutoff = 500L, ...)"},"base::split.Date":{"description":"Description of the class \"Date\" representing calendar dates.\n","example_call":"split.Date(x, f, drop = FALSE, ...)"},"base::readChar":{"description":"Transfer character strings to and from connections, without assuming\nthey are null-terminated on the connection.\n","example_call":"readChar(con, nchars, useBytes = FALSE)"},"base::autoloader":{"description":"autoload creates a promise-to-evaluate autoloader and\nstores it with name name in .AutoloadEnv environment.\nWhen R attempts to evaluate name, autoloader is run,\nthe package is loaded and name is re-evaluated in the new\npackage's environment.  The result is that R behaves as if\npackage was loaded but it does not occupy memory.\n","example_call":"autoloader(name, package, ...)"},"base::[.POSIXct":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"[.POSIXct(x, ..., drop = TRUE)"},"base::untracemem":{"description":"This function marks an object so that a message is printed whenever the\ninternal code copies the object.  It is a\nmajor cause of hard-to-predict memory use in R.\n","example_call":"untracemem(x)"},"base::Encoding":{"description":"Read or set the declared encodings for a character vector.\n","example_call":"Encoding(x)"},"base::debuggingState":{"description":"Set, unset or query the debugging flag on a function.\nThe text and condition arguments are the same as those\nthat can be supplied via a call to browser.  They can be retrieved\nby the user once the browser has been entered, and provide a mechanism to\nallow users to identify which breakpoint has been activated.\n","example_call":"debuggingState(on = NULL)"},"base::[.POSIXlt":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"[.POSIXlt(x, i, j, drop = TRUE)"},"base::do.call":{"description":"do.call constructs and executes a function call from a name or\na function and a list of arguments to be passed to it.\n","example_call":"do.call(what, args, quote = FALSE, envir = parent.frame())"},"base::.cache_class":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":".cache_class(class, extends)"},"base::regmatches<-":{"description":"Extract or replace matched substrings from match data obtained by\nregexpr, gregexpr,\nregexec or gregexec.\n","example_call":"regmatches<-(x, m, invert = FALSE, value)"},"base::.getRequiredPackages2":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":".getRequiredPackages2(pkgInfo, quietly = FALSE, lib.loc = NULL, useImports = FALSE)"},"base::chooseOpsMethod.default":{"description":"chooseOpsMethod is a function called by the Ops Group Generic when two\nsuitable methods are found for a given call. It determines which method to\nuse for the operation based on the objects being dispatched.\n","example_call":"chooseOpsMethod.default(x, y, mx, my, cl, reverse)"},"base::levels.default":{"description":"levels provides access to the levels attribute of a variable.\nThe first form returns the value of the levels of its argument\nand the second sets the attribute.\n","example_call":"levels.default(x)"},"base::computeRestarts":{"description":"These functions provide a mechanism for handling unusual conditions,\nincluding errors and warnings.\n","example_call":"computeRestarts(cond = NULL)"},"base::readBin":{"description":"Read binary data from or write binary data to a connection or raw vector.\n","example_call":"readBin(con, what, n = 1L, size = NA_integer_, signed = TRUE,"},"base::[[<-":{"description":"Operators acting on vectors, matrices, arrays and lists to extract or\nreplace parts.\n","example_call":"NULL"},"base::as.double.difftime":{"description":"Time intervals creation, printing, and some arithmetic.  The\nprint() method calls these <U+201C>time differences<U+201D>.\n","example_call":"as.double.difftime(x, units = \"auto\", ...)"},"base::sys.call":{"description":"These functions provide access to environments\n(<U+2018>frames<U+2019> in S terminology) associated with functions further\nup the calling stack.\n","example_call":"sys.call(which = 0L)"},"base::length<-.difftime":{"description":"Time intervals creation, printing, and some arithmetic.  The\nprint() method calls these <U+201C>time differences<U+201D>.\n","example_call":"length<-.difftime(x, value)"},"base::path.expand":{"description":"Expand a path name, for example by replacing a leading tilde by the\nuser's home directory (if defined on that platform).\n","example_call":"path.expand(path)"},"base::fifo":{"description":"Functions to create, open and close connections, i.e.,\n<U+201C>generalized files<U+201D>, such as possibly compressed files, URLs,\npipes, etc.\n","example_call":"fifo(description, open = \"\", blocking = FALSE, encoding = getOption(\"encoding\"))"},"base::substitute":{"description":"substitute returns the parse tree for the (unevaluated)\nexpression expr, substituting any variables bound in\nenv.\n","example_call":"substitute(expr, env)"},"base::data.matrix":{"description":"Return the matrix obtained by converting all the variables in a data\nframe to numeric mode and then binding them together as the columns of\na matrix.  Factors and ordered factors are replaced by their internal\ncodes.\n","example_call":"data.matrix(frame, rownames.force = NA)"},"base::all.equal.formula":{"description":"all.equal(x, y) is a utility to compare R objects x\nand y testing <U+2018>near equality<U+2019>.  If they are different,\ncomparison is still made to some extent, and a report of the\ndifferences is returned.    Do not use all.equal directly in\nif expressions<U+2014>either use isTRUE(all.equal(....)) or\nidentical if appropriate.\n","example_call":"all.equal.formula(target, current, ...)"},"base::as.logical.factor":{"description":"Create or test for objects of type \"logical\", and the basic\nlogical constants.\n","example_call":"as.logical.factor(x, ...)"},"base::file":{"description":"Functions to create, open and close connections, i.e.,\n<U+201C>generalized files<U+201D>, such as possibly compressed files, URLs,\npipes, etc.\n","example_call":"file(description = \"\", open = \"\", blocking = TRUE, encoding = getOption(\"encoding\"),"},"base::srcfilealias":{"description":"These functions are for working with source files and more generally\nwith <U+201C>source references<U+201D> (\"srcref\"), i.e., references to\nsource code.  The resulting data is used for printing and source level\ndebugging, and is typically available in interactive R sessions,\nnamely when options(keep.source = TRUE).\n","example_call":"srcfilealias(filename, srcfile)"},"base::determinant":{"description":"det calculates the determinant of a matrix.  determinant\nis a generic function that returns separately the modulus of the determinant,\noptionally on the logarithm scale, and the sign of the determinant.\n","example_call":"determinant(x, logarithm = TRUE, ...)"},"base::units<-.difftime":{"description":"Time intervals creation, printing, and some arithmetic.  The\nprint() method calls these <U+201C>time differences<U+201D>.\n","example_call":"units<-.difftime(x, value)"},"base::print.noquote":{"description":"Print character strings without quotes.\n","example_call":"print.noquote(x, quote = FALSE, right = FALSE, ...)"},"base::by.default":{"description":"Function by is an object-oriented wrapper for\ntapply applied to data frames.\n","example_call":"by.default(data, INDICES, FUN, ..., simplify = TRUE)"},"base::Ops.ordered":{"description":"The function factor is used to encode a vector as a factor (the\nterms <U+2018>category<U+2019> and <U+2018>enumerated type<U+2019> are also used for\nfactors).  If argument ordered is TRUE, the factor\nlevels are assumed to be ordered.  For compatibility with S there is\nalso a function ordered.\n","example_call":"Ops.ordered(e1, e2)"},"base::getNamespace":{"description":"Internal functions to support reflection on namespace objects.\n","example_call":"getNamespace(name)"},"base::as.POSIXct.default":{"description":"Functions to manipulate objects of classes \"POSIXlt\" and\n\"POSIXct\" representing calendar dates and times.\n","example_call":"as.POSIXct.default(x, tz = \"\", ...)"},"base::conditionMessage.condition":{"description":"These functions provide a mechanism for handling unusual conditions,\nincluding errors and warnings.\n","example_call":"conditionMessage.condition(c)"},"base::.OptRequireMethods":{"description":"In R, the startup mechanism is as follows.\n","example_call":".OptRequireMethods()"},"base::mean.POSIXct":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"mean.POSIXct(x, ...)"},"base::as.POSIXct.POSIXlt":{"description":"Functions to manipulate objects of classes \"POSIXlt\" and\n\"POSIXct\" representing calendar dates and times.\n","example_call":"as.POSIXct.POSIXlt(x, tz = \"\", ...)"},"base::mean.POSIXlt":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"mean.POSIXlt(x, ...)"},"base::as.character.octmode":{"description":"Integers which are displayed in octal (base-8 number system) format, with as\nmany digits as are needed to display the largest, using leading zeroes as\nnecessary.\n","example_call":"as.character.octmode(x, keepStr = FALSE, ...)"},"base::.makeMessage":{"description":"Generate a diagnostic message from its arguments.\n","example_call":".makeMessage(..., domain = NULL, appendLF = FALSE)"},"base::browserSetDebug":{"description":"A call to browser can provide context by supplying either a text\nargument or a condition argument.  These functions can be used to\nretrieve either of these arguments.\n","example_call":"browserSetDebug(n = 1L)"},"base::parent.env":{"description":"Get, set, test for and create environments.\n","example_call":"parent.env(env)"},"base::print.listof":{"description":"print prints its argument and returns it invisibly (via\ninvisible(x)).  It is a generic function which means that\nnew printing methods can be easily added for new classes.\n","example_call":"print.listof(x, nl = TRUE, ...)"},"base::close.srcfile":{"description":"These functions are for working with source files and more generally\nwith <U+201C>source references<U+201D> (\"srcref\"), i.e., references to\nsource code.  The resulting data is used for printing and source level\ndebugging, and is typically available in interactive R sessions,\nnamely when options(keep.source = TRUE).\n","example_call":"close.srcfile(con, ...)"},"base::anyNA.numeric_version":{"description":"A simple S3 class for representing numeric versions\nincluding package versions, and associated methods.","example_call":"anyNA.numeric_version(x, recursive = FALSE)"},"base::*.difftime":{"description":"Time intervals creation, printing, and some arithmetic.  The\nprint() method calls these <U+201C>time differences<U+201D>.\n","example_call":"*.difftime(e1, e2)"},"base::chooseOpsMethod":{"description":"chooseOpsMethod is a function called by the Ops Group Generic when two\nsuitable methods are found for a given call. It determines which method to\nuse for the operation based on the objects being dispatched.\n","example_call":"chooseOpsMethod(x, y, mx, my, cl, reverse)"},"base::socketAccept":{"description":"Functions to create, open and close connections, i.e.,\n<U+201C>generalized files<U+201D>, such as possibly compressed files, URLs,\npipes, etc.\n","example_call":"socketAccept(socket, blocking = FALSE, open = \"a+\", encoding = getOption(\"encoding\"),"},"base::transform.data.frame":{"description":"transform is a generic function, which<U+2014>at least\ncurrently<U+2014>only does anything useful with\ndata frames.  transform.default converts its first argument to\na data frame if possible and calls transform.data.frame.\n","example_call":"transform.data.frame(`_data`, ...)"},"base::interactive":{"description":"Return TRUE when R is being used interactively and\nFALSE otherwise.\n","example_call":"interactive()"},"base::unname":{"description":"Remove the names or dimnames attribute of\nan R object.\n","example_call":"unname(obj, force = FALSE)"},"base::remove":{"description":"remove and rm are identical R functions that\ncan be used to remove objects.  These can\nbe specified successively as character strings, or in the character\nvector list, or through a combination of both.  All objects\nthus specified will be removed.\n","example_call":"remove(..., list = character(), pos = -1, envir = as.environment(pos),"},"base::sample":{"description":"sample takes a sample of the specified size from the elements\nof x using either with or without replacement.\n","example_call":"sample(x, size, replace = FALSE, prob = NULL)"},"base::getNamespaceVersion":{"description":"Internal functions to support reflection on namespace objects.\n","example_call":"getNamespaceVersion(ns)"},"base::removeTaskCallback":{"description":"addTaskCallback registers an R function\nthat is to be called each time a top-level task\nis completed.\n","example_call":"removeTaskCallback(id)"},"base::scale":{"description":"scale is generic function whose default method centers and/or\nscales the columns of a numeric matrix.\n","example_call":"scale(x, center = TRUE, scale = TRUE)"},"base::is.data.frame":{"description":"Functions to check if an object is a data frame, or coerce it if possible.\n","example_call":"is.data.frame(x)"},"base::textConnectionValue":{"description":"Input and output text connections.\n","example_call":"textConnectionValue(con)"},"base::transform":{"description":"transform is a generic function, which<U+2014>at least\ncurrently<U+2014>only does anything useful with\ndata frames.  transform.default converts its first argument to\na data frame if possible and calls transform.data.frame.\n","example_call":"transform(`_data`, ...)"},"base::lchoose":{"description":"Special mathematical functions related to the beta and gamma\nfunctions.\n","example_call":"lchoose(n, k)"},"base::format.POSIXct":{"description":"Functions to convert between character representations and objects of\nclasses \"POSIXlt\" and \"POSIXct\" representing calendar\ndates and times.\n","example_call":"format.POSIXct(x, format = \"\", tz = \"\", usetz = FALSE, ...)"},"base::is.call":{"description":"Create or test for objects of mode \"call\" (or\n\"(\", see Details).\n","example_call":"is.call(x)"},"base::.packages":{"description":".packages returns information about package availability.\n","example_call":".packages(all.available = FALSE, lib.loc = NULL)"},"base::row.names":{"description":"All data frames have row names, a character vector of\nlength the number of rows with no duplicates nor missing values.\n","example_call":"row.names(x)"},"base::[.octmode":{"description":"Integers which are displayed in octal (base-8 number system) format, with as\nmany digits as are needed to display the largest, using leading zeroes as\nnecessary.\n","example_call":"[.octmode(x, i)"},"base::str2lang":{"description":"parse() returns the parsed but unevaluated expressions in an\nexpression, a <U+201C>list<U+201D> of calls.\n","example_call":"str2lang(s)"},"base::sort_by.data.frame":{"description":"Generic function to sort an object in the order determined by one or\nmore other objects, typically vectors. A method is defined for data\nframes to sort its rows (typically by one or more columns), and the\ndefault method handles vector-like objects.\n","example_call":"sort_by.data.frame(x, y, ...)"},"base::print.factor":{"description":"print prints its argument and returns it invisibly (via\ninvisible(x)).  It is a generic function which means that\nnew printing methods can be easily added for new classes.\n","example_call":"print.factor(x, quote = FALSE, max.levels = NULL, width = getOption(\"width\"),"},"base::format.POSIXlt":{"description":"Functions to convert between character representations and objects of\nclasses \"POSIXlt\" and \"POSIXct\" representing calendar\ndates and times.\n","example_call":"format.POSIXlt(x, format = \"\", usetz = FALSE, digits = getOption(\"digits.secs\"),"},"base::switch":{"description":"switch evaluates EXPR and accordingly chooses one of the\nfurther arguments (in ...).\n","example_call":"switch(EXPR, ...)"},"base::getElement":{"description":"Operators acting on vectors, matrices, arrays and lists to extract or\nreplace parts.\n","example_call":"getElement(object, name)"},"base::.amatch_costs":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":".amatch_costs(x = NULL)"},"base::lengths":{"description":"Get the length of each element of a list or atomic\nvector (is.atomic) as an integer or numeric vector.\n","example_call":"lengths(x, use.names = TRUE)"},"base::dimnames<-":{"description":"Retrieve or set the dimnames of an object.\n","example_call":"dimnames<-(x, value)"},"base::save":{"description":"save writes an external representation of R objects to the\nspecified file.  The objects can be read back from the file at a later\ndate by using the function load or attach\n(or data in some cases).\n","example_call":"save(..., list = character(), file = stop(\"'file' must be specified\"),"},"base::function":{"description":"These functions provide the base mechanisms for defining\nnew functions in the R language.\n","example_call":"NULL"},"base::is.single":{"description":"is.single reports an error.  There are no single precision\nvalues in R.\n","example_call":"is.single(x)"},"base::default.stringsAsFactors":{"description":"The functions or variables listed here are no longer part of R as\nthey are no longer needed.\n","example_call":"default.stringsAsFactors()"},"base::pmatch":{"description":"pmatch seeks matches for the elements of its first argument\namong those of its second.\n","example_call":"pmatch(x, table, nomatch = NA_integer_, duplicates.ok = FALSE)"},"base::withRestarts":{"description":"These functions provide a mechanism for handling unusual conditions,\nincluding errors and warnings.\n","example_call":"withRestarts(expr, ...)"},"base::scan":{"description":"Read data into a vector or list from the console or file.\n","example_call":"scan(file = \"\", what = double(), nmax = -1L, n = -1L, sep = \"\","},"base::is.null":{"description":"NULL represents the null object in R: it is a reserved\nword.  NULL is often returned by expressions and functions\nwhose value is undefined.\n","example_call":"is.null(x)"},"base::sink.number":{"description":"sink diverts R output to a connection (and stops such diversions).\n","example_call":"sink.number(type = c(\"output\", \"message\"))"},"base::pretty":{"description":"Compute a  sequence of about n+1 equally spaced <U+2018>round<U+2019>\nvalues which cover the range of the values in x.\nThe values are chosen so that they are 1, 2 or 5 times a power of 10.\n","example_call":"pretty(x, ...)"},"base::Summary.Date":{"description":"Description of the class \"Date\" representing calendar dates.\n","example_call":"Summary.Date(..., na.rm)"},"base::library.dynam.unload":{"description":"Load the specified file of compiled code if it has not been loaded\nalready, or unloads it.\n","example_call":"library.dynam.unload(chname, libpath, verbose = getOption(\"verbose\"), file.ext = .Platform$dynlib.ext)"},"base::letters":{"description":"Constants built into R.\n","example_call":"NULL"},"base::diff.difftime":{"description":"Time intervals creation, printing, and some arithmetic.  The\nprint() method calls these <U+201C>time differences<U+201D>.\n","example_call":"diff.difftime(x, ...)"},"base::browserCondition":{"description":"A call to browser can provide context by supplying either a text\nargument or a condition argument.  These functions can be used to\nretrieve either of these arguments.\n","example_call":"browserCondition(n = 1L)"},"base::dir.exists":{"description":"These functions provide a low-level interface to the computer's\nfile system.\n","example_call":"dir.exists(paths)"},"base::print.srcref":{"description":"These functions are for working with source files and more generally\nwith <U+201C>source references<U+201D> (\"srcref\"), i.e., references to\nsource code.  The resulting data is used for printing and source level\ndebugging, and is typically available in interactive R sessions,\nnamely when options(keep.source = TRUE).\n","example_call":"print.srcref(x, useSource = TRUE, ...)"},"base::range.POSIXct":{"description":"range returns a vector containing the minimum and maximum of\nall the given arguments.\n","example_call":"range.POSIXct(..., na.rm = FALSE, finite = FALSE)"},"base::arrayInd":{"description":"Give the TRUE indices of a logical object, allowing for array\nindices.\n","example_call":"arrayInd(ind, .dim, .dimnames = NULL, useNames = FALSE)"},"base::casefold":{"description":"Translate characters in character vectors, in particular from upper to\nlower case or vice versa.\n","example_call":"casefold(x, upper = FALSE)"},"base::anyNA":{"description":"NA is a logical constant of length 1 which contains a missing\nvalue indicator.  NA can be coerced to any other vector\ntype except raw.  There are also constants NA_integer_,\nNA_real_, NA_complex_ and NA_character_ of the\nother atomic vector types which support missing values: all of these\nare reserved words in the R language.\n","example_call":"anyNA(x, recursive = FALSE)"},"base::suppressWarnings":{"description":"Generates a warning message that corresponds to its argument(s) and\n(optionally) the expression or function from which it was called.\n","example_call":"suppressWarnings(expr, classes = \"warning\")"},"base::seek":{"description":"Functions to re-position connections.\n","example_call":"seek(con, ...)"},"base::is.language":{"description":"is.language returns TRUE if x is a\nvariable name, a call, or an\nexpression.\n","example_call":"is.language(x)"},"base::xtfrm.numeric_version":{"description":"A simple S3 class for representing numeric versions\nincluding package versions, and associated methods.","example_call":"xtfrm.numeric_version(x)"},"base::get0":{"description":"Look for an R object of the given name and possibly return it\n","example_call":"get0(x, envir = pos.to.env(-1L), mode = \"any\", inherits = TRUE,"},"base::as.vector":{"description":"A vector in R is either an atomic vector i.e., one of the atomic\ntypes, see <U+2018>Details<U+2019>, or of type (typeof) or mode\nlist or expression.\n","example_call":"as.vector(x, mode = \"any\")"},"base::strftime":{"description":"Functions to convert between character representations and objects of\nclasses \"POSIXlt\" and \"POSIXct\" representing calendar\ndates and times.\n","example_call":"strftime(x, format = \"\", tz = \"\", usetz = FALSE, ...)"},"base::readRDS":{"description":"Functions to write a single R object to a file, and to restore it.\n","example_call":"readRDS(file, refhook = NULL)"},"base::split<-.default":{"description":"split divides the data in the vector x into the groups\ndefined by f.  The replacement forms replace values\ncorresponding to such a division.  unsplit reverses the effect of\nsplit.\n","example_call":"split<-.default(x, f, drop = FALSE, ..., value)"},"base::is.pairlist":{"description":"Functions to construct, coerce and check for both kinds of R lists.\n","example_call":"is.pairlist(x)"},"base::chartr":{"description":"Translate characters in character vectors, in particular from upper to\nlower case or vice versa.\n","example_call":"chartr(old, new, x)"},"base::rep.Date":{"description":"rep replicates the values in x.  It is a generic\nfunction, and the (internal) default method is described here.\n","example_call":"rep.Date(x, ...)"},"base::isFALSE":{"description":"These operators act on raw, logical and number-like vectors.\n","example_call":"isFALSE(x)"},"base::as.pairlist":{"description":"Functions to construct, coerce and check for both kinds of R lists.\n","example_call":"as.pairlist(x)"},"base::as.octmode":{"description":"Integers which are displayed in octal (base-8 number system) format, with as\nmany digits as are needed to display the largest, using leading zeroes as\nnecessary.\n","example_call":"as.octmode(x)"},"base::is.na.numeric_version":{"description":"A simple S3 class for representing numeric versions\nincluding package versions, and associated methods.","example_call":"is.na.numeric_version(x)"},"base::length":{"description":"Get or set the length of vectors (including lists) and factors, and of\nany other R object for which a method has been defined.\n","example_call":"length(x)"},"base::formals":{"description":"Get or set the formal arguments of a function.\n","example_call":"formals(fun = sys.function(sys.parent()), envir = parent.frame())"},"base::rawConnectionValue":{"description":"Input and output raw connections.\n","example_call":"rawConnectionValue(con)"},"base::Math.POSIXt":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"Math.POSIXt(x, ...)"},"base::Sys.chmod":{"description":"These functions provide a low-level interface to the computer's\nfile system.\n","example_call":"Sys.chmod(paths, mode = \"0777\", use_umask = TRUE)"},"base::formatC":{"description":"formatC() formats numbers individually and flexibly using\nC style format specifications.\n","example_call":"formatC(x, digits = NULL, width = NULL, format = NULL, flag = \"\","},"base::sign":{"description":"sign returns a vector with the signs of the corresponding\nelements of x (the sign of a real number is 1, 0, or -1\nif the number is positive, zero, or negative, respectively).\n","example_call":"sign(x)"},"base::sinh":{"description":"These functions give the obvious hyperbolic functions.  They\nrespectively compute the hyperbolic cosine, sine, tangent, and their\ninverses, arc-cosine, arc-sine, arc-tangent (or <U+2018>area cosine<U+2019>,\netc).\n","example_call":"sinh(x)"},"base::sink":{"description":"sink diverts R output to a connection (and stops such diversions).\n","example_call":"sink(file = NULL, append = FALSE, type = c(\"output\", \"message\"),"},"base::solve":{"description":"This generic function solves the equation a %*% x = b for x,\nwhere b can be either a vector or a matrix.\n","example_call":"solve(a, b, ...)"},"base::.External.graphics":{"description":"Internal versions of .Call and .External.\n","example_call":".External.graphics(.NAME, ..., PACKAGE)"},"base::as.data.frame.default":{"description":"Functions to check if an object is a data frame, or coerce it if possible.\n","example_call":"as.data.frame.default(x, ...)"},"base::is.numeric.Date":{"description":"Creates or coerces objects of type \"numeric\".\nis.numeric is a more general test of an object being\ninterpretable as numbers.\n","example_call":"is.numeric.Date(x)"},"base::all.equal.character":{"description":"all.equal(x, y) is a utility to compare R objects x\nand y testing <U+2018>near equality<U+2019>.  If they are different,\ncomparison is still made to some extent, and a report of the\ndifferences is returned.    Do not use all.equal directly in\nif expressions<U+2014>either use isTRUE(all.equal(....)) or\nidentical if appropriate.\n","example_call":"all.equal.character(target, current, ..., check.attributes = TRUE)"},"base::unsplit":{"description":"split divides the data in the vector x into the groups\ndefined by f.  The replacement forms replace values\ncorresponding to such a division.  unsplit reverses the effect of\nsplit.\n","example_call":"unsplit(value, f, drop = FALSE)"},"base::as.hexmode":{"description":"Integers which are displayed in hexadecimal (short <U+2018>hex<U+2019>) format,\nwith as many digits as are needed to display the largest, using leading\nzeroes as necessary.\n","example_call":"as.hexmode(x)"},"base::declare":{"description":"A framework for specifying information about R code for use by the\ninterpreter, compiler, and code analysis tools.\n","example_call":"declare(...)"},"base::globalenv":{"description":"Get, set, test for and create environments.\n","example_call":"globalenv()"},"base::list.files":{"description":"These functions produce a character vector of the names of files or\ndirectories in the named directory.\n","example_call":"list.files(path = \".\", pattern = NULL, all.files = FALSE, full.names = FALSE,"},"base::loadingNamespaceInfo":{"description":"Internal namespace support functions.  Not intended to be called\ndirectly, and only visible because of the special nature of the\nbase namespace.\n","example_call":"loadingNamespaceInfo()"},"base::packageEvent":{"description":"These functions allow users to set actions to be taken before packages\nare attached/detached and namespaces are (un)loaded.\n","example_call":"packageEvent(pkgname, event = c(\"onLoad\", \"attach\", \"detach\", \"onUnload\"))"},"base::make.unique":{"description":"Makes the elements of a character vector unique by\nappending sequence numbers to duplicates.\n","example_call":"make.unique(names, sep = \".\")"},"base::.decode_numeric_version":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":".decode_numeric_version(x)"},"base::logical":{"description":"Create or test for objects of type \"logical\", and the basic\nlogical constants.\n","example_call":"logical(length = 0L)"},"base::as.vector.factor":{"description":"A vector in R is either an atomic vector i.e., one of the atomic\ntypes, see <U+2018>Details<U+2019>, or of type (typeof) or mode\nlist or expression.\n","example_call":"as.vector.factor(x, mode = \"any\")"},"base::noquote":{"description":"Print character strings without quotes.\n","example_call":"noquote(obj, right = FALSE)"},"base::as.qr":{"description":"qr computes the QR decomposition of a matrix.\n","example_call":"as.qr(x)"},"base::class<-":{"description":"R possesses a simple generic function mechanism which can be used for\nan object-oriented style of programming.  Method dispatch takes place\nbased on the class of the first argument to the generic function.\n","example_call":"class<-(x, value)"},"base::[[.Date":{"description":"Description of the class \"Date\" representing calendar dates.\n","example_call":"[[.Date(x, ..., drop = TRUE)"},"base::suppressPackageStartupMessages":{"description":"Generate a diagnostic message from its arguments.\n","example_call":"suppressPackageStartupMessages(expr)"},"base::as.null.default":{"description":"NULL represents the null object in R: it is a reserved\nword.  NULL is often returned by expressions and functions\nwhose value is undefined.\n","example_call":"as.null.default(x, ...)"},"base::c.difftime":{"description":"Time intervals creation, printing, and some arithmetic.  The\nprint() method calls these <U+201C>time differences<U+201D>.\n","example_call":"c.difftime(..., recursive = FALSE)"},"base::as.data.frame.data.frame":{"description":"Functions to check if an object is a data frame, or coerce it if possible.\n","example_call":"as.data.frame.data.frame(x, row.names = NULL, ...)"},"base::summary.warnings":{"description":"warnings and its print method print the\nvariable last.warning in a pleasing form.\n","example_call":"summary.warnings(object, ...)"},"base::file.show":{"description":"Display one or more (plain) text files, in a platform\nspecific way, typically via a <U+2018>pager<U+2019>.\n","example_call":"file.show(..., header = rep(\"\", nfiles), title = \"R Information\","},"base::.rowNamesDF<-":{"description":"All data frames have row names, a character vector of\nlength the number of rows with no duplicates nor missing values.\n","example_call":".rowNamesDF<-(x, make.names = FALSE, value)"},"base::bindingIsLocked":{"description":"These functions represent an interface for adjustments\nto environments and bindings within environments.  They allow for\nlocking environments as well as individual bindings, and for linking\na variable to a function.\n","example_call":"bindingIsLocked(sym, env)"},"base::.maskedMsg":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":".maskedMsg(same, pkg, by)"},"base::.colSums":{"description":"Form row and column sums and means for numeric arrays (or data frames).\n","example_call":".colSums(x, m, n, na.rm = FALSE)"},"base::acosh":{"description":"These functions give the obvious hyperbolic functions.  They\nrespectively compute the hyperbolic cosine, sine, tangent, and their\ninverses, arc-cosine, arc-sine, arc-tangent (or <U+2018>area cosine<U+2019>,\netc).\n","example_call":"acosh(x)"},"base::bzfile":{"description":"Functions to create, open and close connections, i.e.,\n<U+201C>generalized files<U+201D>, such as possibly compressed files, URLs,\npipes, etc.\n","example_call":"bzfile(description, open = \"\", encoding = getOption(\"encoding\"),"},"base::intersect":{"description":"Performs set union, intersection, (asymmetric!) difference,\nequality and membership on two vectors.\n","example_call":"intersect(x, y)"},"base::by.data.frame":{"description":"Function by is an object-oriented wrapper for\ntapply applied to data frames.\n","example_call":"by.data.frame(data, INDICES, FUN, ..., simplify = TRUE)"},"base::summary.srcref":{"description":"These functions are for working with source files and more generally\nwith <U+201C>source references<U+201D> (\"srcref\"), i.e., references to\nsource code.  The resulting data is used for printing and source level\ndebugging, and is typically available in interactive R sessions,\nnamely when options(keep.source = TRUE).\n","example_call":"summary.srcref(object, useSource = FALSE, ...)"},"base::units<-":{"description":"Get or set units.","example_call":"units<-(x, value)"},"base::withAutoprint":{"description":"source causes R to accept its input from the named file or URL\nor connection or expressions directly.  Input is read and\nparsed from that file\nuntil the end of the file is reached, then the parsed expressions are\nevaluated sequentially in the chosen environment.\n","example_call":"withAutoprint(exprs, evaluated = FALSE, local = parent.frame(), print. = TRUE,"},"base::as.table.default":{"description":"table uses cross-classifying factors to build a contingency\ntable of the counts at each combination of factor levels.\n","example_call":"as.table.default(x, ...)"},"base::kappa.default":{"description":"The condition number of a regular (square) matrix is the product of\nthe norm of the matrix and the norm of its inverse (or\npseudo-inverse), and hence depends on the kind of matrix-norm.\n","example_call":"kappa.default(z, exact = FALSE, norm = NULL, method = c(\"qr\", \"direct\"),"},"base::as.list.Date":{"description":"Description of the class \"Date\" representing calendar dates.\n","example_call":"as.list.Date(x, ...)"},"base::.Primitive":{"description":".Primitive looks up by name a <U+2018>primitive<U+2019>\n(internally implemented) function.\n","example_call":".Primitive(name)"},"base::getDLLRegisteredRoutines.character":{"description":"This function allows us to query the set of routines\nin a DLL that are registered with R to enhance\ndynamic lookup, error handling when calling native routines,\nand potentially security in the future.\nThis function provides a description of each of the\nregistered routines in the DLL for the different interfaces,\ni.e. .C, .Call, .Fortran\nand .External.\n","example_call":"getDLLRegisteredRoutines.character(dll, addNames = TRUE)"},"base::gctorture2":{"description":"Provokes garbage collection on (nearly) every memory allocation.\nIntended to ferret out memory protection bugs.  Also makes R run\nvery slowly, unfortunately.\n","example_call":"gctorture2(step, wait = step, inhibit_release = FALSE)"},"base::Conj":{"description":"Basic functions which support complex arithmetic in R, in addition to\nthe arithmetic operators +, -, *, /, and ^.\n","example_call":"Conj(z)"},"base::normalizePath":{"description":"Convert file paths to canonical form for the platform, to display them\nin a user-understandable form and so that relative and absolute paths can\nbe compared.\n","example_call":"normalizePath(path, winslash = \"\\\\\", mustWork = NA)"},"base::sort":{"description":"Sort (or order) a vector or factor (partially) into\nascending or descending order.  For ordering along more than one\nvariable, e.g., for sorting data frames, see order.\n","example_call":"sort(x, decreasing = FALSE, ...)"},"base::addNA":{"description":"The function factor is used to encode a vector as a factor (the\nterms <U+2018>category<U+2019> and <U+2018>enumerated type<U+2019> are also used for\nfactors).  If argument ordered is TRUE, the factor\nlevels are assumed to be ordered.  For compatibility with S there is\nalso a function ordered.\n","example_call":"addNA(x, ifany = FALSE)"},"base::is.matrix":{"description":"matrix creates a matrix from the given set of values.\n","example_call":"is.matrix(x)"},"base::[<-.factor":{"description":"Extract or replace subsets of factors.\n","example_call":"[<-.factor(x, ..., value)"},"base::writeLines":{"description":"Write text lines to a connection.\n","example_call":"writeLines(text, con = stdout(), sep = \"\\n\", useBytes = FALSE)"},"base::colSums":{"description":"Form row and column sums and means for numeric arrays (or data frames).\n","example_call":"colSums(x, na.rm = FALSE, dims = 1L)"},"base::saveRDS":{"description":"Functions to write a single R object to a file, and to restore it.\n","example_call":"saveRDS(object, file = \"\", ascii = FALSE, version = NULL, compress = TRUE,"},"base::suppressMessages":{"description":"Generate a diagnostic message from its arguments.\n","example_call":"suppressMessages(expr, classes = \"message\")"},"base::print.data.frame":{"description":"Print a data frame.\n","example_call":"print.data.frame(x, ..., digits = NULL, quote = FALSE, right = TRUE,"},"base::[[<-.factor":{"description":"Extract or replace subsets of factors.\n","example_call":"[[<-.factor(x, ..., value)"},"base::$.DLLInfo":{"description":"This function provides a way to get a list of all the DLLs (see\ndyn.load) that are currently loaded in the R session.\n","example_call":"$.DLLInfo(x, name)"},"base::%*%":{"description":"Multiplies two matrices, if they are conformable.  If one argument is\na vector, it will be promoted to either a row or column matrix to make\nthe two arguments conformable.  If both are vectors of the same\nlength, it will return the inner product (as a matrix).\n","example_call":"%*%(x, y)"},"base::undebug":{"description":"Set, unset or query the debugging flag on a function.\nThe text and condition arguments are the same as those\nthat can be supplied via a call to browser.  They can be retrieved\nby the user once the browser has been entered, and provide a mechanism to\nallow users to identify which breakpoint has been activated.\n","example_call":"undebug(fun, signature = NULL)"},"base::$<-":{"description":"Operators acting on vectors, matrices, arrays and lists to extract or\nreplace parts.\n","example_call":"NULL"},"base::%/%":{"description":"These unary and binary operators perform arithmetic on numeric or\ncomplex vectors (or objects which can be coerced to them).\n","example_call":"%/%(e1, e2)"},"base::tanh":{"description":"These functions give the obvious hyperbolic functions.  They\nrespectively compute the hyperbolic cosine, sine, tangent, and their\ninverses, arc-cosine, arc-sine, arc-tangent (or <U+2018>area cosine<U+2019>,\netc).\n","example_call":"tanh(x)"},"base::is.loaded":{"description":"Load or unload DLLs (also known as shared objects), and test whether a\nC function or Fortran subroutine is available.\n","example_call":"is.loaded(symbol, PACKAGE = \"\", type = \"\")"},"base::curlGetHeaders":{"description":"Retrieve the headers for a URL for a supported protocol such as\n<U+2018><U+2060>http://<U+2060><U+2019>, <U+2018><U+2060>ftp://<U+2060><U+2019>, <U+2018><U+2060>https://<U+2060><U+2019> and <U+2018><U+2060>ftps://<U+2060><U+2019>.\n","example_call":"curlGetHeaders(url, redirect = TRUE, verify = TRUE, timeout = 0L,"},"base::sqrt":{"description":"abs(x) computes the absolute value of x, sqrt(x) computes the\n(principal) square root of x, \\sqrt{x}.\n","example_call":"sqrt(x)"},"base::sample.int":{"description":"sample takes a sample of the specified size from the elements\nof x using either with or without replacement.\n","example_call":"sample.int(n, size = n, replace = FALSE, prob = NULL, useHash = (n >"},"base::grep":{"description":"grep, grepl, regexpr, gregexpr, \nregexec and gregexec search for matches to argument\npattern within each element of a character vector: they differ in\nthe format of and amount of detail in the results.\n","example_call":"grep(pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE,"},"base::xtfrm.POSIXct":{"description":"A generic auxiliary function that produces a numeric vector which\nwill sort in the same order as x.\n","example_call":"xtfrm.POSIXct(x)"},"base::is.logical":{"description":"Create or test for objects of type \"logical\", and the basic\nlogical constants.\n","example_call":"is.logical(x)"},"base::print.proc_time":{"description":"proc.time determines how much real and CPU time (in seconds)\nthe currently running R process has already taken.\n","example_call":"print.proc_time(x, ...)"},"base::[<-.difftime":{"description":"Time intervals creation, printing, and some arithmetic.  The\nprint() method calls these <U+201C>time differences<U+201D>.\n","example_call":"[<-.difftime(x, i, value)"},"base::Sys.readlink":{"description":"Find out if a file path is a symbolic link, and if so what it is\nlinked to, via the system call readlink.\n","example_call":"Sys.readlink(paths)"},"base::strsplit":{"description":"Split the elements of a character vector x into substrings\naccording to the matches to substring split within them.\n","example_call":"strsplit(x, split, fixed = FALSE, perl = FALSE, useBytes = FALSE)"},"base::xtfrm.POSIXlt":{"description":"A generic auxiliary function that produces a numeric vector which\nwill sort in the same order as x.\n","example_call":"xtfrm.POSIXlt(x)"},"base::Cstack_info":{"description":"Report information on the C stack size and usage (if available).\n","example_call":"Cstack_info()"},"base::dir.create":{"description":"These functions provide a low-level interface to the computer's\nfile system.\n","example_call":"dir.create(path, showWarnings = TRUE, recursive = FALSE, mode = \"0777\")"},"base::nlevels":{"description":"Return the number of levels which its argument has.\n","example_call":"nlevels(x)"},"base::aperm":{"description":"Transpose an array by permuting its dimensions and optionally resizing\nit.\n","example_call":"aperm(a, perm, ...)"},"base::xtfrm":{"description":"A generic auxiliary function that produces a numeric vector which\nwill sort in the same order as x.\n","example_call":"xtfrm(x)"},"base::Summary.data.frame":{"description":"Group generic methods can be defined for the following pre-specified groups of\nfunctions, Math, Ops, matrixOps, Summary and Complex.\n(There are no objects of these names in base R, but there are in the\nmethods package, not yet for matrixOps.)\n","example_call":"Summary.data.frame(..., na.rm)"},"base::gsub":{"description":"grep, grepl, regexpr, gregexpr, \nregexec and gregexec search for matches to argument\npattern within each element of a character vector: they differ in\nthe format of and amount of detail in the results.\n","example_call":"gsub(pattern, replacement, x, ignore.case = FALSE, perl = FALSE,"},"base::merge.data.frame":{"description":"Merge two data frames by common columns or row names, or do other\nversions of database join operations.\n","example_call":"merge.data.frame(x, y, by = intersect(names(x), names(y)), by.x = by,"},"base::as.vector.POSIXlt":{"description":"A vector in R is either an atomic vector i.e., one of the atomic\ntypes, see <U+2018>Details<U+2019>, or of type (typeof) or mode\nlist or expression.\n","example_call":"as.vector.POSIXlt(x, mode = \"any\")"},"base::.S3PrimitiveGenerics":{"description":"Many R-internal functions are generic and allow\nmethods to be written for.\n","example_call":"NULL"},"base::stop":{"description":"stop stops execution of the current expression and executes\nan error action.\n","example_call":"stop(..., call. = TRUE, domain = NULL)"},"base::sort.list":{"description":"order returns a permutation which rearranges its first\nargument into ascending or descending order, breaking ties by further\narguments.  sort.list does the same, using only one argument.\nSee the examples for how to use these functions to sort data frames,\netc.\n","example_call":"sort.list(x, partial = NULL, na.last = TRUE, decreasing = FALSE,"},"base::unloadNamespace":{"description":"Functions to load and unload name spaces.\n","example_call":"unloadNamespace(ns)"},"base::grouping":{"description":"grouping returns a permutation which rearranges its first\nargument such that identical values are adjacent to each other.  Also\nreturned as attributes are the group-wise partitioning and the maximum\ngroup size.\n","example_call":"grouping(...)"},"base::seek.connection":{"description":"Functions to re-position connections.\n","example_call":"seek.connection(con, where = NA, origin = \"start\", rw = \"\", ...)"},"base::as.matrix.default":{"description":"matrix creates a matrix from the given set of values.\n","example_call":"as.matrix.default(x, ...)"},"base::%o%":{"description":"The outer product of the arrays X and Y is the array\nA with dimension c(dim(X), dim(Y)) where element\nA[c(arrayindex.x, arrayindex.y)]\n    = FUN(X[arrayindex.x], Y[arrayindex.y], ...).\n","example_call":"%o%(X, Y)"},"base::as.POSIXlt.numeric":{"description":"Functions to manipulate objects of classes \"POSIXlt\" and\n\"POSIXct\" representing calendar dates and times.\n","example_call":"as.POSIXlt.numeric(x, tz = \"\", origin, ...)"},"base::eval.parent":{"description":"Evaluate an R expression in a specified environment.\n","example_call":"eval.parent(expr, n = 1)"},"base::%x%":{"description":"Computes the generalised Kronecker product of two arrays,\nX and Y.\n","example_call":"%x%(X, Y)"},"base::diff.POSIXt":{"description":"Returns suitably lagged and iterated differences.\n","example_call":"diff.POSIXt(x, lag = 1L, differences = 1L, ...)"},"base::pushBack":{"description":"Functions to push back text lines onto a connection, and to enquire\nhow many lines are currently pushed back.\n","example_call":"pushBack(data, connection, newLine = TRUE, encoding = c(\"\","},"base::transform.default":{"description":"transform is a generic function, which<U+2014>at least\ncurrently<U+2014>only does anything useful with\ndata frames.  transform.default converts its first argument to\na data frame if possible and calls transform.data.frame.\n","example_call":"transform.default(`_data`, ...)"},"base::srcfilecopy":{"description":"These functions are for working with source files and more generally\nwith <U+201C>source references<U+201D> (\"srcref\"), i.e., references to\nsource code.  The resulting data is used for printing and source level\ndebugging, and is typically available in interactive R sessions,\nnamely when options(keep.source = TRUE).\n","example_call":"srcfilecopy(filename, lines, timestamp = Sys.time(), isFile = FALSE)"},"base::qr.coef":{"description":"qr computes the QR decomposition of a matrix.\n","example_call":"qr.coef(qr, y)"},"base::restartFormals":{"description":"These functions provide a mechanism for handling unusual conditions,\nincluding errors and warnings.\n","example_call":"restartFormals(r)"},"base::print.rle":{"description":"Compute the lengths and values of runs of equal values in a vector\n<U+2013> or the reverse operation.\n","example_call":"print.rle(x, digits = getOption(\"digits\"), prefix = \"\", ...)"},"base::format.octmode":{"description":"Integers which are displayed in octal (base-8 number system) format, with as\nmany digits as are needed to display the largest, using leading zeroes as\nnecessary.\n","example_call":"format.octmode(x, width = NULL, ...)"},"base::diff.Date":{"description":"Returns suitably lagged and iterated differences.\n","example_call":"diff.Date(x, lag = 1L, differences = 1L, ...)"},"base::conditionCall.condition":{"description":"These functions provide a mechanism for handling unusual conditions,\nincluding errors and warnings.\n","example_call":"conditionCall.condition(c)"},"base::as.matrix":{"description":"matrix creates a matrix from the given set of values.\n","example_call":"as.matrix(x, ...)"},"base::enc2utf8":{"description":"Read or set the declared encodings for a character vector.\n","example_call":"enc2utf8(x)"},"base::sys.function":{"description":"These functions provide access to environments\n(<U+2018>frames<U+2019> in S terminology) associated with functions further\nup the calling stack.\n","example_call":"sys.function(which = 0L)"},"base::print.DLLInfo":{"description":"This function provides a way to get a list of all the DLLs (see\ndyn.load) that are currently loaded in the R session.\n","example_call":"print.DLLInfo(x, ...)"},"base::UseMethod":{"description":"R possesses a simple generic function mechanism which can be used for\nan object-oriented style of programming.  Method dispatch takes place\nbased on the class(es) of the first argument to the generic function or of\nthe object supplied as an argument to UseMethod or NextMethod.\n","example_call":"UseMethod(generic, object)"},"base::write.dcf":{"description":"Reads or writes an R object from/to a file in Debian Control File\nformat.\n","example_call":"write.dcf(x, file = \"\", append = FALSE, useBytes = FALSE, indent = 0.1 *"},"base::split":{"description":"split divides the data in the vector x into the groups\ndefined by f.  The replacement forms replace values\ncorresponding to such a division.  unsplit reverses the effect of\nsplit.\n","example_call":"split(x, f, drop = FALSE, ...)"},"base::match.call":{"description":"match.call returns a call in which all of the specified arguments are\nspecified by their full names.\n","example_call":"match.call(definition = sys.function(sys.parent()), call = sys.call(sys.parent()),"},"base::is.numeric.POSIXt":{"description":"Creates or coerces objects of type \"numeric\".\nis.numeric is a more general test of an object being\ninterpretable as numbers.\n","example_call":"is.numeric.POSIXt(x)"},"base::sys.calls":{"description":"These functions provide access to environments\n(<U+2018>frames<U+2019> in S terminology) associated with functions further\nup the calling stack.\n","example_call":"sys.calls()"},"base::.AutoloadEnv":{"description":"autoload creates a promise-to-evaluate autoloader and\nstores it with name name in .AutoloadEnv environment.\nWhen R attempts to evaluate name, autoloader is run,\nthe package is loaded and name is re-evaluated in the new\npackage's environment.  The result is that R behaves as if\npackage was loaded but it does not occupy memory.\n","example_call":"NULL"},"base::length<-.Date":{"description":"Description of the class \"Date\" representing calendar dates.\n","example_call":"length<-.Date(x, value)"},"base::format.numeric_version":{"description":"A simple S3 class for representing numeric versions\nincluding package versions, and associated methods.","example_call":"format.numeric_version(x, ...)"},"base::char.expand":{"description":"Seeks a unique match of its first argument among the\nelements of its second.  If successful, it returns this element;\notherwise, it performs an action specified by the third argument.\n","example_call":"char.expand(input, target, nomatch = stop(\"no match\"))"},"base::signif":{"description":"ceiling takes a single numeric argument x and returns a\nnumeric vector containing the smallest integers not less than the\ncorresponding elements of x.\n","example_call":"signif(x, digits = 6)"},"base::file.link":{"description":"These functions provide a low-level interface to the computer's\nfile system.\n","example_call":"file.link(from, to)"},"base::.Devices":{"description":"A pairlist of the names of open graphics devices is stored in\n.Devices. The name of the active device (see\ndev.cur) is stored in .Device.  Both are symbols\nand so appear in the base namespace.\n","example_call":"NULL"},"base::diff.default":{"description":"Returns suitably lagged and iterated differences.\n","example_call":"diff.default(x, lag = 1L, differences = 1L, ...)"},"base::dyn.load":{"description":"Load or unload DLLs (also known as shared objects), and test whether a\nC function or Fortran subroutine is available.\n","example_call":"dyn.load(x, local = TRUE, now = TRUE, ...)"},"base::.userHooksEnv":{"description":"These functions allow users to set actions to be taken before packages\nare attached/detached and namespaces are (un)loaded.\n","example_call":"NULL"},"base::anyNA.POSIXlt":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"anyNA.POSIXlt(x, recursive = FALSE)"},"base::.subset":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":".subset(x, ...)"},"base::expm1":{"description":"log computes logarithms, by default natural logarithms,\nlog10 computes common (i.e., base 10) logarithms, and\nlog2 computes binary (i.e., base 2) logarithms.\nThe general form log(x, base) computes logarithms with base\nbase.\n","example_call":"expm1(x)"},"base::is.vector":{"description":"A vector in R is either an atomic vector i.e., one of the atomic\ntypes, see <U+2018>Details<U+2019>, or of type (typeof) or mode\nlist or expression.\n","example_call":"is.vector(x, mode = \"any\")"},"base::apply":{"description":"Returns a vector or array or list of values obtained by applying a\nfunction to margins of an array or matrix.\n","example_call":"apply(X, MARGIN, FUN, ..., simplify = TRUE)"},"base::iconvlist":{"description":"This uses system facilities to convert a character vector between\nencodings: the <U+2018>i<U+2019> stands for <U+2018>internationalization<U+2019>.\n","example_call":"iconvlist()"},"base::chkDots":{"description":"Warn about extraneous arguments in the ... of its caller.  A\nutility to be used e.g., in S3 methods which need a formal ...\nargument but do not make any use of it.  This helps catching user\nerrors in calling the function in question (which is the caller of\nchkDots()).\n","example_call":"chkDots(..., which.call = -1, allowed = character(0))"},"base::.gt":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":".gt(x, i, j)"},"base::is.na.data.frame":{"description":"NA is a logical constant of length 1 which contains a missing\nvalue indicator.  NA can be coerced to any other vector\ntype except raw.  There are also constants NA_integer_,\nNA_real_, NA_complex_ and NA_character_ of the\nother atomic vector types which support missing values: all of these\nare reserved words in the R language.\n","example_call":"is.na.data.frame(x)"},"base::library":{"description":"library and require load and attach add-on packages.\n","example_call":"library(package, help, pos = 2, lib.loc = NULL, character.only = FALSE,"},"base::julian.POSIXt":{"description":"Extract the weekday, month or quarter, or the Julian time\n(days since some origin).  These are generic functions: the methods\nfor the internal date-time classes are documented here.\n","example_call":"julian.POSIXt(x, origin = as.POSIXct(\"1970-01-01\", tz = \"GMT\"), ...)"},"base::path.package":{"description":"Find the paths to one or more packages.\n","example_call":"path.package(package = NULL, quiet = FALSE)"},"base::as.data.frame.vector":{"description":"Functions to check if an object is a data frame, or coerce it if possible.\n","example_call":"as.data.frame.vector(x, row.names = NULL, optional = FALSE, ..., nm = deparse1(substitute(x)))"},"base::proc.time":{"description":"proc.time determines how much real and CPU time (in seconds)\nthe currently running R process has already taken.\n","example_call":"proc.time()"},"base::table":{"description":"table uses cross-classifying factors to build a contingency\ntable of the counts at each combination of factor levels.\n","example_call":"table(..., exclude = if (useNA == \"no\") c(NA, NaN), useNA = c(\"no\","},"base::enc2native":{"description":"Read or set the declared encodings for a character vector.\n","example_call":"enc2native(x)"},"base::as.data.frame.table":{"description":"table uses cross-classifying factors to build a contingency\ntable of the counts at each combination of factor levels.\n","example_call":"as.data.frame.table(x, row.names = NULL, ..., responseName = \"Freq\", stringsAsFactors = TRUE,"},"base::debug":{"description":"Set, unset or query the debugging flag on a function.\nThe text and condition arguments are the same as those\nthat can be supplied via a call to browser.  They can be retrieved\nby the user once the browser has been entered, and provide a mechanism to\nallow users to identify which breakpoint has been activated.\n","example_call":"debug(fun, text = \"\", condition = NULL, signature = NULL)"},"base::OlsonNames":{"description":"Information about time zones in R.  Sys.timezone returns\nthe name of the current time zone.\n","example_call":"OlsonNames(tzdir = NULL)"},"base::marginSums":{"description":"For a contingency table in array form, compute the sum of table\nentries for a given margin or set of margins.\n","example_call":"marginSums(x, margin = NULL)"},"base::isOpen":{"description":"Functions to create, open and close connections, i.e.,\n<U+201C>generalized files<U+201D>, such as possibly compressed files, URLs,\npipes, etc.\n","example_call":"isOpen(con, rw = \"\")"},"base::grepRaw":{"description":"grepRaw searches for substring pattern matches within a\nraw vector x.\n","example_call":"grepRaw(pattern, x, offset = 1L, ignore.case = FALSE, value = FALSE,"},"base::nullfile":{"description":"Display aspects of connections.\n","example_call":"nullfile()"},"base::rowsum":{"description":"Compute column sums across rows of a numeric matrix-like object for\neach level of a grouping variable.  rowsum is generic, with a\nmethod for data frames and a default method for vectors and matrices.\n","example_call":"rowsum(x, group, reorder = TRUE, ...)"},"base::as.list.data.frame":{"description":"Functions to construct, coerce and check for both kinds of R lists.\n","example_call":"as.list.data.frame(x, ...)"},"base::as.list":{"description":"Functions to construct, coerce and check for both kinds of R lists.\n","example_call":"as.list(x, ...)"},"base::topenv":{"description":"Finding the top level environment from an environment\nenvir and its enclosing environments.\n","example_call":"topenv(envir = parent.frame(), matchThisEnv = getOption(\"topLevelEnvironment\"))"},"base::system.file":{"description":"Finds the full file names of files in packages etc.\n","example_call":"system.file(..., package = \"base\", lib.loc = NULL, mustWork = FALSE)"},"base::repeat":{"description":"These are the basic control-flow constructs of the R language.  They\nfunction in much the same way as control statements in any Algol-like\nlanguage.  They are all reserved words.\n","example_call":"NULL"},"base::as.character.factor":{"description":"Create or test for objects of type \"character\".\n","example_call":"as.character.factor(x, ...)"},"base::print.table":{"description":"print prints its argument and returns it invisibly (via\ninvisible(x)).  It is a generic function which means that\nnew printing methods can be easily added for new classes.\n","example_call":"print.table(x, digits = getOption(\"digits\"), quote = FALSE, na.print = \"\","},"base::lockEnvironment":{"description":"These functions represent an interface for adjustments\nto environments and bindings within environments.  They allow for\nlocking environments as well as individual bindings, and for linking\na variable to a function.\n","example_call":"lockEnvironment(env, bindings = FALSE)"},"base::xtfrm.default":{"description":"A generic auxiliary function that produces a numeric vector which\nwill sort in the same order as x.\n","example_call":"xtfrm.default(x)"},"base::all.vars":{"description":"Return a character vector containing all the names which occur in an\nexpression or call.\n","example_call":"all.vars(expr, functions = FALSE, max.names = -1L, unique = TRUE)"},"base::format.default":{"description":"Format an R object for pretty printing.\n","example_call":"format.default(x, trim = FALSE, digits = NULL, nsmall = 0L, justify = c(\"left\","},"base::choose":{"description":"Special mathematical functions related to the beta and gamma\nfunctions.\n","example_call":"choose(n, k)"},"base::as.expression.default":{"description":"Creates or tests for objects of mode and class \"expression\".\n","example_call":"as.expression.default(x, ...)"},"base::bitwAnd":{"description":"Logical operations on integer vectors with elements viewed as sets of bits.\n","example_call":"bitwAnd(a, b)"},"base::mem.maxVSize":{"description":"Query and set the maximal size of the vector heap and the maximal\nnumber of heap nodes for the current R process.\n","example_call":"mem.maxVSize(vsize = 0)"},"base::tabulate":{"description":"tabulate takes the integer-valued vector bin and counts\nthe number of times each integer occurs in it.\n","example_call":"tabulate(bin, nbins = max(1L, bin, na.rm = TRUE))"},"base::cut.POSIXt":{"description":"Method for cut applied to date-time objects.\n","example_call":"cut.POSIXt(x, breaks, labels = NULL, start.on.monday = TRUE, right = FALSE,"},"base::as.POSIXlt.Date":{"description":"Functions to manipulate objects of classes \"POSIXlt\" and\n\"POSIXct\" representing calendar dates and times.\n","example_call":"as.POSIXlt.Date(x, tz = \"UTC\", ...)"},"base::c.noquote":{"description":"Print character strings without quotes.\n","example_call":"c.noquote(..., recursive = FALSE)"},"base::file.size":{"description":"Utility function to extract information about files on the user's\nfile systems.\n","example_call":"file.size(...)"},"base::[[.POSIXct":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"[[.POSIXct(x, ..., drop = TRUE)"},"base::makeActiveBinding":{"description":"These functions represent an interface for adjustments\nto environments and bindings within environments.  They allow for\nlocking environments as well as individual bindings, and for linking\na variable to a function.\n","example_call":"makeActiveBinding(sym, fun, env)"},"base:::::":{"description":"Accessing exported and internal variables, i.e. R objects\n(including lazy loaded data sets) in a namespace.\n","example_call":":::(pkg, name)"},"base::[[.POSIXlt":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"[[.POSIXlt(x, i, drop = TRUE)"},"base::c.Date":{"description":"Description of the class \"Date\" representing calendar dates.\n","example_call":"c.Date(..., recursive = FALSE)"},"base::findInterval":{"description":"Given a vector of non-decreasing breakpoints in vec, find the\ninterval containing each element of x; i.e., if\ni <- findInterval(x,v), for each index j in x\nv_{i_j} \\le x_j < v_{i_j + 1}\nwhere v_0 := -\\infty,\nv_{N+1} := +\\infty, and N <- length(v).\nAt the two boundaries, the returned index may differ by 1, depending\non the optional arguments rightmost.closed and all.inside.\n","example_call":"findInterval(x, vec, rightmost.closed = FALSE, all.inside = FALSE,"},"base::all.equal.raw":{"description":"all.equal(x, y) is a utility to compare R objects x\nand y testing <U+2018>near equality<U+2019>.  If they are different,\ncomparison is still made to some extent, and a report of the\ndifferences is returned.    Do not use all.equal directly in\nif expressions<U+2014>either use isTRUE(all.equal(....)) or\nidentical if appropriate.\n","example_call":"all.equal.raw(target, current, ..., check.attributes = TRUE)"},"base::parseNamespaceFile":{"description":"Internal namespace support functions.  Not intended to be called\ndirectly, and only visible because of the special nature of the\nbase namespace.\n","example_call":"parseNamespaceFile(package, package.lib, mustExist = TRUE)"},"base::icuSetCollate":{"description":"Controls the way collation is done by ICU (an optional part of the R\nbuild).\n","example_call":"icuSetCollate(...)"},"base::print.numeric_version":{"description":"A simple S3 class for representing numeric versions\nincluding package versions, and associated methods.","example_call":"print.numeric_version(x, quote = FALSE, ...)"},"base::sequence.default":{"description":"The default method for sequence generates the sequence\nseq(from[i], by = by[i], length.out = nvec[i]) for each\nelement i in the parallel (and recycled) vectors from,\nby and nvec. It then returns the result of concatenating\nthose sequences.\n","example_call":"sequence.default(nvec, from = 1L, by = 1L, ...)"},"base::Sys.localeconv":{"description":"Get details of the numerical and monetary representations in the\ncurrent locale.\n","example_call":"Sys.localeconv()"},"base::conditionCall":{"description":"These functions provide a mechanism for handling unusual conditions,\nincluding errors and warnings.\n","example_call":"conditionCall(c)"},"base::!.hexmode":{"description":"Integers which are displayed in hexadecimal (short <U+2018>hex<U+2019>) format,\nwith as many digits as are needed to display the largest, using leading\nzeroes as necessary.\n","example_call":"!.hexmode(a)"},"base::margin.table":{"description":"For a contingency table in array form, compute the sum of table\nentries for a given margin or set of margins.\n","example_call":"margin.table(x, margin = NULL)"},"base::<<-":{"description":"Assign a value to a name.\n","example_call":"NULL"},"base::sprintf":{"description":"A wrapper for the C function sprintf, that returns a character\nvector containing a formatted combination of text and variable values.\n","example_call":"sprintf(fmt, ...)"},"base::duplicated.matrix":{"description":"duplicated() determines which elements of a vector or data\nframe are duplicates\nof elements with smaller subscripts, and returns a logical vector\nindicating which elements (rows) are duplicates.\n","example_call":"duplicated.matrix(x, incomparables = FALSE, MARGIN = 1L, fromLast = FALSE,"},"base::.ArgsEnv":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":"NULL"},"base::cbind.data.frame":{"description":"Take a sequence of vector, matrix or data-frame arguments and combine\nby columns or rows, respectively.  These are generic\nfunctions with methods for other R classes.\n","example_call":"cbind.data.frame(..., deparse.level = 1)"},"base::read.dcf":{"description":"Reads or writes an R object from/to a file in Debian Control File\nformat.\n","example_call":"read.dcf(file, fields = NULL, all = FALSE, keep.white = NULL)"},"base::names":{"description":"Functions to get or set the names of an object.\n","example_call":"names(x)"},"base::append":{"description":"Add elements to a vector.\n","example_call":"append(x, values, after = length(x))"},"base::rowsum.data.frame":{"description":"Compute column sums across rows of a numeric matrix-like object for\neach level of a grouping variable.  rowsum is generic, with a\nmethod for data frames and a default method for vectors and matrices.\n","example_call":"rowsum.data.frame(x, group, reorder = TRUE, na.rm = FALSE, ...)"},"base::mat.or.vec":{"description":"mat.or.vec creates an nr by nc zero matrix if\nnc is greater than 1, and a zero vector of length nr if\nnc equals 1.\n","example_call":"mat.or.vec(nr, nc)"},"base::as.POSIXlt.POSIXct":{"description":"Functions to manipulate objects of classes \"POSIXlt\" and\n\"POSIXct\" representing calendar dates and times.\n","example_call":"as.POSIXlt.POSIXct(x, tz = \"\", ...)"},"base::is.na<-.default":{"description":"NA is a logical constant of length 1 which contains a missing\nvalue indicator.  NA can be coerced to any other vector\ntype except raw.  There are also constants NA_integer_,\nNA_real_, NA_complex_ and NA_character_ of the\nother atomic vector types which support missing values: all of these\nare reserved words in the R language.\n","example_call":"is.na<-.default(x, value)"},"base::split<-":{"description":"split divides the data in the vector x into the groups\ndefined by f.  The replacement forms replace values\ncorresponding to such a division.  unsplit reverses the effect of\nsplit.\n","example_call":"split<-(x, f, drop = FALSE, ..., value)"},"base::tanpi":{"description":"These functions give the obvious trigonometric functions.  They\nrespectively compute the cosine, sine, tangent, arc-cosine, arc-sine,\narc-tangent, and the two-argument arc-tangent.\n","example_call":"tanpi(x)"},"base::namespaceExport":{"description":"Internal namespace support functions.  Not intended to be called\ndirectly, and only visible because of the special nature of the\nbase namespace.\n","example_call":"namespaceExport(ns, vars)"},"base::Summary.numeric_version":{"description":"A simple S3 class for representing numeric versions\nincluding package versions, and associated methods.","example_call":"Summary.numeric_version(..., na.rm)"},"base::prmatrix":{"description":"An earlier method for printing matrices, provided for S compatibility.\n","example_call":"prmatrix(x, rowlab = dn[[1]], collab = dn[[2]], quote = TRUE,"},"base::as.single.default":{"description":"Create, coerce to or test for a double-precision vector.\n","example_call":"as.single.default(x, ...)"},"base::expand.grid":{"description":"Create a data frame from all combinations of the supplied vectors or\nfactors.  See the description of the return value for precise details of\nthe way this is done.\n","example_call":"expand.grid(..., KEEP.OUT.ATTRS = TRUE, stringsAsFactors = TRUE)"},"base::vapply":{"description":"lapply returns a list of the same length as X, each\nelement of which is the result of applying FUN to the\ncorresponding element of X.\n","example_call":"vapply(X, FUN, FUN.VALUE, ..., USE.NAMES = TRUE)"},"base::dimnames":{"description":"Retrieve or set the dimnames of an object.\n","example_call":"dimnames(x)"},"base::nameOfClass":{"description":"R possesses a simple generic function mechanism which can be used for\nan object-oriented style of programming.  Method dispatch takes place\nbased on the class of the first argument to the generic function.\n","example_call":"nameOfClass(x)"},"base::@<-":{"description":"Extract or replace the contents of a slot or property of an object.\n","example_call":"NULL"},"base::kappa":{"description":"The condition number of a regular (square) matrix is the product of\nthe norm of the matrix and the norm of its inverse (or\npseudo-inverse), and hence depends on the kind of matrix-norm.\n","example_call":"kappa(z, ...)"},"base::identical":{"description":"The safe and reliable way to test two objects for being\nexactly equal.  It returns TRUE in this case,\nFALSE in every other case.\n","example_call":"identical(x, y, num.eq = TRUE, single.NA = TRUE, attrib.as.set = TRUE,"},"base::chol.default":{"description":"Compute the Cholesky factorization of a real symmetric\npositive-definite square matrix.\n","example_call":"chol.default(x, pivot = FALSE, LINPACK = FALSE, tol = -1, ...)"},"base::sapply":{"description":"lapply returns a list of the same length as X, each\nelement of which is the result of applying FUN to the\ncorresponding element of X.\n","example_call":"sapply(X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE)"},"base::.format.zeros":{"description":"formatC() formats numbers individually and flexibly using\nC style format specifications.\n","example_call":".format.zeros(x, zero.print, nx = suppressWarnings(as.numeric(x)),"},"base::gctorture":{"description":"Provokes garbage collection on (nearly) every memory allocation.\nIntended to ferret out memory protection bugs.  Also makes R run\nvery slowly, unfortunately.\n","example_call":"gctorture(on = TRUE)"},"base::missing":{"description":"missing can be used to test whether a value was specified\nas an argument to a function.\n","example_call":"missing(x)"},"base::abbreviate":{"description":"Abbreviate strings to at least minlength characters,\nsuch that they remain unique (if they were),\nunless strict = TRUE.\n","example_call":"abbreviate(names.arg, minlength = 4L, use.classes = TRUE, dot = FALSE,"},"base::showConnections":{"description":"Display aspects of connections.\n","example_call":"showConnections(all = FALSE)"},"base::merge":{"description":"Merge two data frames by common columns or row names, or do other\nversions of database join operations.\n","example_call":"merge(x, y, ...)"},"base::nargs":{"description":"When used inside a function body, nargs returns the number of\narguments supplied to that function, including positional\narguments left blank.\n","example_call":"nargs()"},"base::proportions":{"description":"Returns conditional proportions given margins, i.e.,\nentries of x, divided by the appropriate marginal sums.\n","example_call":"proportions(x, margin = NULL)"},"base::is.R":{"description":"These functions are provided for compatibility with older versions of\nR only, and may be defunct as soon as the next release.\n","example_call":"is.R()"},"base::Sys.sleep":{"description":"Suspend execution of R expressions for a specified time interval.\n","example_call":"Sys.sleep(time)"},"base::reg.finalizer":{"description":"Registers an R function to be called upon garbage collection of\nobject or (optionally) at the end of an R session.\n","example_call":"reg.finalizer(e, f, onexit = FALSE)"},"base::isdebugged":{"description":"Set, unset or query the debugging flag on a function.\nThe text and condition arguments are the same as those\nthat can be supplied via a call to browser.  They can be retrieved\nby the user once the browser has been entered, and provide a mechanism to\nallow users to identify which breakpoint has been activated.\n","example_call":"isdebugged(fun, signature = NULL)"},"base::.C_R_getTaskCallbackNames":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":"NULL"},"base::range.Date":{"description":"range returns a vector containing the minimum and maximum of\nall the given arguments.\n","example_call":"range.Date(..., na.rm = FALSE, finite = FALSE)"},"base::anyDuplicated.default":{"description":"duplicated() determines which elements of a vector or data\nframe are duplicates\nof elements with smaller subscripts, and returns a logical vector\nindicating which elements (rows) are duplicates.\n","example_call":"anyDuplicated.default(x, incomparables = FALSE, fromLast = FALSE, ...)"},"base::mapply":{"description":"mapply is a multivariate version of sapply.\nmapply applies FUN to the first elements of each ...\nargument, the second elements, the third elements, and so on.\nArguments are recycled if necessary.\n","example_call":"mapply(FUN, ..., MoreArgs = NULL, SIMPLIFY = TRUE, USE.NAMES = TRUE)"},"base::asplit":{"description":"Split an array or matrix by its margins.","example_call":"asplit(x, MARGIN)"},"base::rep.factor":{"description":"rep replicates the values in x.  It is a generic\nfunction, and the (internal) default method is described here.\n","example_call":"rep.factor(x, ...)"},"base::zapsmall":{"description":"zapsmall determines a digits argument dr for\ncalling round(x, digits = dr) such that values close to\nzero (compared with the maximal absolute value in the vector) are\n<U+2018>zapped<U+2019>, i.e., replaced by 0.\n","example_call":"zapsmall(x, digits = getOption(\"digits\"), mFUN = function(x,"},"base::outer":{"description":"The outer product of the arrays X and Y is the array\nA with dimension c(dim(X), dim(Y)) where element\nA[c(arrayindex.x, arrayindex.y)]\n    = FUN(X[arrayindex.x], Y[arrayindex.y], ...).\n","example_call":"outer(X, Y, FUN = \"*\", ...)"},"base::print.function":{"description":"print prints its argument and returns it invisibly (via\ninvisible(x)).  It is a generic function which means that\nnew printing methods can be easily added for new classes.\n","example_call":"print.function(x, useSource = TRUE, ...)"},"base::qr.default":{"description":"qr computes the QR decomposition of a matrix.\n","example_call":"qr.default(x, tol = 1e-07, LAPACK = FALSE, ...)"},"base::backsolve":{"description":"Solves a triangular system of linear equations.\n","example_call":"backsolve(r, x, k = ncol(r), upper.tri = TRUE, transpose = FALSE)"},"base::ISOdate":{"description":"Convenience wrappers to create date-times from numeric representations.\n","example_call":"ISOdate(year, month, day, hour = 12, min = 0, sec = 0, tz = \"GMT\")"},"base::duplicated.array":{"description":"duplicated() determines which elements of a vector or data\nframe are duplicates\nof elements with smaller subscripts, and returns a logical vector\nindicating which elements (rows) are duplicates.\n","example_call":"duplicated.array(x, incomparables = FALSE, MARGIN = 1L, fromLast = FALSE,"},"base::isS4":{"description":"Tests whether the object is an instance of an S4 class.\n","example_call":"isS4(object)"},"base::isBaseNamespace":{"description":"Internal namespace support functions.  Not intended to be called\ndirectly, and only visible because of the special nature of the\nbase namespace.\n","example_call":"isBaseNamespace(ns)"},"base::errorCondition":{"description":"These functions provide a mechanism for handling unusual conditions,\nincluding errors and warnings.\n","example_call":"errorCondition(message, ..., class = NULL, call = NULL)"},"base::.detach":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":".detach(pos)"},"base::Arg":{"description":"Basic functions which support complex arithmetic in R, in addition to\nthe arithmetic operators +, -, *, /, and ^.\n","example_call":"Arg(z)"},"base::file.mtime":{"description":"Utility function to extract information about files on the user's\nfile systems.\n","example_call":"file.mtime(...)"},"base::setwd":{"description":"getwd returns an absolute filepath representing the current\nworking directory of the R process; setwd(dir) is used to set\nthe working directory to dir.\n","example_call":"setwd(dir)"},"base::.kappa_tri":{"description":"The condition number of a regular (square) matrix is the product of\nthe norm of the matrix and the norm of its inverse (or\npseudo-inverse), and hence depends on the kind of matrix-norm.\n","example_call":".kappa_tri(z, exact = FALSE, LINPACK = TRUE, norm = NULL, uplo = \"U\","},"base::is.na<-.numeric_version":{"description":"A simple S3 class for representing numeric versions\nincluding package versions, and associated methods.","example_call":"is.na<-.numeric_version(x, value)"},"base::bitwNot":{"description":"Logical operations on integer vectors with elements viewed as sets of bits.\n","example_call":"bitwNot(a)"},"base::.getRequiredPackages":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":".getRequiredPackages(file = \"DESCRIPTION\", lib.loc = NULL, quietly = FALSE,"},"base::getwd":{"description":"getwd returns an absolute filepath representing the current\nworking directory of the R process; setwd(dir) is used to set\nthe working directory to dir.\n","example_call":"getwd()"},"base::list2env":{"description":"From a named list x, create an\nenvironment containing all list components as objects, or\n<U+201C>multi-assign<U+201D> from x into a pre-existing environment.\n","example_call":"list2env(x, envir = NULL, parent = parent.frame(), hash = (length(x) >"},"base::set.seed":{"description":".Random.seed is an integer vector, containing the random number\ngenerator (RNG) state for random number generation in R.  It\ncan be saved and restored, but should not be altered by the user.\n","example_call":"set.seed(seed, kind = NULL, normal.kind = NULL, sample.kind = NULL)"},"base::[[<-.POSIXlt":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"[[<-.POSIXlt(x, i, value)"},"base::.doWrap":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":".doWrap(vec, decr, nalast, noNA = NA)"},"base::R_compiled_by":{"description":"R.Version() provides detailed information about the version of\nR running.\n","example_call":"R_compiled_by()"},"base::is.primitive":{"description":"Checks whether its argument is a (primitive) function.","example_call":"is.primitive(x)"},"base::grepl":{"description":"grep, grepl, regexpr, gregexpr, \nregexec and gregexec search for matches to argument\npattern within each element of a character vector: they differ in\nthe format of and amount of detail in the results.\n","example_call":"grepl(pattern, x, ignore.case = FALSE, perl = FALSE, fixed = FALSE,"},"base::Ops.data.frame":{"description":"Group generic methods can be defined for the following pre-specified groups of\nfunctions, Math, Ops, matrixOps, Summary and Complex.\n(There are no objects of these names in base R, but there are in the\nmethods package, not yet for matrixOps.)\n","example_call":"Ops.data.frame(e1, e2 = NULL)"},"base::format.difftime":{"description":"Time intervals creation, printing, and some arithmetic.  The\nprint() method calls these <U+201C>time differences<U+201D>.\n","example_call":"format.difftime(x, ...)"},"base::trigamma":{"description":"Special mathematical functions related to the beta and gamma\nfunctions.\n","example_call":"trigamma(x)"},"base::as.list.difftime":{"description":"Time intervals creation, printing, and some arithmetic.  The\nprint() method calls these <U+201C>time differences<U+201D>.\n","example_call":"as.list.difftime(x, ...)"},"base::&.hexmode":{"description":"Integers which are displayed in hexadecimal (short <U+2018>hex<U+2019>) format,\nwith as many digits as are needed to display the largest, using leading\nzeroes as necessary.\n","example_call":"&.hexmode(a, b)"},"base::character":{"description":"Create or test for objects of type \"character\".\n","example_call":"character(length = 0L)"},"base::.col":{"description":"Returns a matrix of integers indicating their column number in a\nmatrix-like object, or a factor of column labels.\n","example_call":".col(dim)"},"base::.POSIXct":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":".POSIXct(xx, tz = NULL, cl = c(\"POSIXct\", \"POSIXt\"))"},"base::returnValue":{"description":"A call to trace allows you to insert debugging code (e.g., a\ncall to browser or recover) at chosen\nplaces in any function.  A call to untrace cancels the tracing.\nSpecified methods can be traced the same way, without tracing all\ncalls to the generic function.  Trace code (tracer) can be any\nR expression.  Tracing can be temporarily turned on or off globally\nby calling tracingState.\n","example_call":"returnValue(default = NULL)"},"base::.POSIXlt":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":".POSIXlt(xx, tz = NULL, cl = c(\"POSIXlt\", \"POSIXt\"))"},"base::xtfrm.data.frame":{"description":"A generic auxiliary function that produces a numeric vector which\nwill sort in the same order as x.\n","example_call":"xtfrm.data.frame(x)"},"base::Math.difftime":{"description":"Time intervals creation, printing, and some arithmetic.  The\nprint() method calls these <U+201C>time differences<U+201D>.\n","example_call":"Math.difftime(x, ...)"},"base::version":{"description":"R.Version() provides detailed information about the version of\nR running.\n","example_call":"NULL"},"base::jitter":{"description":"Add a small amount of noise to a numeric vector.\n","example_call":"jitter(x, factor = 1, amount = NULL)"},"base::isNamespaceLoaded":{"description":"Functions to load and unload name spaces.\n","example_call":"isNamespaceLoaded(name)"},"base::print.warnings":{"description":"warnings and its print method print the\nvariable last.warning in a pleasing form.\n","example_call":"print.warnings(x, tags, header = ngettext(n, \"Warning message:\\n\","},"base::simpleWarning":{"description":"These functions provide a mechanism for handling unusual conditions,\nincluding errors and warnings.\n","example_call":"simpleWarning(message, call = NULL)"},"base::double":{"description":"Create, coerce to or test for a double-precision vector.\n","example_call":"double(length = 0L)"},"base::[.numeric_version":{"description":"A simple S3 class for representing numeric versions\nincluding package versions, and associated methods.","example_call":"[.numeric_version(x, i, j)"},"base::as.expression":{"description":"Creates or tests for objects of mode and class \"expression\".\n","example_call":"as.expression(x, ...)"},"base::summary.srcfile":{"description":"These functions are for working with source files and more generally\nwith <U+201C>source references<U+201D> (\"srcref\"), i.e., references to\nsource code.  The resulting data is used for printing and source level\ndebugging, and is typically available in interactive R sessions,\nnamely when options(keep.source = TRUE).\n","example_call":"summary.srcfile(object, ...)"},"base::summary.data.frame":{"description":"summary is a generic function used to produce result summaries\nof the results of various model fitting functions.  The function\ninvokes particular methods which depend on the\nclass of the first argument.\n","example_call":"summary.data.frame(object, maxsum = 7L, digits = max(3L, getOption(\"digits\") -"},"base::c.factor":{"description":"The function factor is used to encode a vector as a factor (the\nterms <U+2018>category<U+2019> and <U+2018>enumerated type<U+2019> are also used for\nfactors).  If argument ordered is TRUE, the factor\nlevels are assumed to be ordered.  For compatibility with S there is\nalso a function ordered.\n","example_call":"c.factor(..., recursive = TRUE)"},"base::debugonce":{"description":"Set, unset or query the debugging flag on a function.\nThe text and condition arguments are the same as those\nthat can be supplied via a call to browser.  They can be retrieved\nby the user once the browser has been entered, and provide a mechanism to\nallow users to identify which breakpoint has been activated.\n","example_call":"debugonce(fun, text = \"\", condition = NULL, signature = NULL)"},"base::print":{"description":"print prints its argument and returns it invisibly (via\ninvisible(x)).  It is a generic function which means that\nnew printing methods can be easily added for new classes.\n","example_call":"print(x, ...)"},"base::.isMethodsDispatchOn":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":".isMethodsDispatchOn(onOff = NULL)"},"base::gregexec":{"description":"grep, grepl, regexpr, gregexpr, \nregexec and gregexec search for matches to argument\npattern within each element of a character vector: they differ in\nthe format of and amount of detail in the results.\n","example_call":"gregexec(pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE,"},"base::[.listof":{"description":"Operators acting on vectors, matrices, arrays and lists to extract or\nreplace parts.\n","example_call":"[.listof(x, i, ...)"},"base::forceAndCall":{"description":"Call a function with a specified number of leading arguments forced\nbefore the call if the function is a closure.\n","example_call":"forceAndCall(n, FUN, ...)"},"base::close.srcfilealias":{"description":"These functions are for working with source files and more generally\nwith <U+201C>source references<U+201D> (\"srcref\"), i.e., references to\nsource code.  The resulting data is used for printing and source level\ndebugging, and is typically available in interactive R sessions,\nnamely when options(keep.source = TRUE).\n","example_call":"close.srcfilealias(con, ...)"},"base::Exec":{"description":"Tailcall and Exec allow writing more\nstack-space-efficient recursive functions in R.\n","example_call":"Exec(expr, envir)"},"base::.gtn":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":".gtn(x, strictly)"},"base::.mergeExportMethods":{"description":"Internal namespace support functions.  Not intended to be called\ndirectly, and only visible because of the special nature of the\nbase namespace.\n","example_call":".mergeExportMethods(new, ns)"},"base::.primTrace":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":".primTrace(obj)"},"base::seq.int":{"description":"Generate regular sequences.  seq is a standard generic with a\ndefault method.  seq.int is a primitive which can be\nmuch faster but has a few restrictions.  seq_along and\nseq_len are very fast primitives for two common cases.\n","example_call":"seq.int(from, to, by, length.out, along.with, ...)"},"base::storage.mode<-":{"description":"Get or set the <U+2018>mode<U+2019> (a kind of <U+2018>type<U+2019>), or the storage\nmode of an R object.\n","example_call":"storage.mode<-(x, value)"},"base::gregexpr":{"description":"grep, grepl, regexpr, gregexpr, \nregexec and gregexec search for matches to argument\npattern within each element of a character vector: they differ in\nthe format of and amount of detail in the results.\n","example_call":"gregexpr(pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE,"},"base::namespaceImportClasses":{"description":"Internal namespace support functions.  Not intended to be called\ndirectly, and only visible because of the special nature of the\nbase namespace.\n","example_call":"namespaceImportClasses(self, ns, vars, from = NULL)"},"base::contributors":{"description":"The R Who-is-who, describing who made significant contributions to\nthe development of R.\n","example_call":"contributors()"},"base::unix.time":{"description":"The functions or variables listed here are no longer part of R as\nthey are no longer needed.\n","example_call":"unix.time(...)"},"base::ngettext":{"description":"Translation of text messages typically from calls to\nstop(), warning(), or message()\nhappens when Native Language Support (NLS) was enabled in this build of\nR as it is almost always, see also the bindtextdomain() example.\n","example_call":"ngettext(n, msg1, msg2, domain = NULL)"},"base::print.Dlist":{"description":"print prints its argument and returns it invisibly (via\ninvisible(x)).  It is a generic function which means that\nnew printing methods can be easily added for new classes.\n","example_call":"print.Dlist(x, ...)"},"base::Find":{"description":"If init is given, Reduce logically adds it to the start\n(when proceeding left to right) or the end of x, respectively.\nIf this possibly augmented vector v has n > 1 elements,\nReduce successively applies f to the elements of v\nfrom left to right or right to left, respectively.  I.e., a left\nreduce computes l_1 = f(v_1, v_2), l_2 = f(l_1, v_3), etc.,\nand returns l_{n-1} = f(l_{n-2}, v_n), and a right reduce does\nr_{n-1} = f(v_{n-1}, v_n), r_{n-2} = f(v_{n-2}, r_{n-1})\nand returns r_1 = f(v_1, r_2).  (E.g., if v is the\nsequence (2, 3, 4) and f is division, left and right reduce give\n(2 / 3) / 4 = 1/6 and 2 / (3 / 4) = 8/3, respectively.)\nIf v has only a single element, this is returned; if there are\nno elements, NULL is returned.  Thus, it is ensured that\nf is always called with 2 arguments.\n","example_call":"Find(f, x, right = FALSE, nomatch = NULL)"},"base::all.equal.envRefClass":{"description":"all.equal(x, y) is a utility to compare R objects x\nand y testing <U+2018>near equality<U+2019>.  If they are different,\ncomparison is still made to some extent, and a report of the\ndifferences is returned.    Do not use all.equal directly in\nif expressions<U+2014>either use isTRUE(all.equal(....)) or\nidentical if appropriate.\n","example_call":"all.equal.envRefClass(target, current, ...)"},"base::as.name":{"description":"A <U+2018>name<U+2019> (also known as a <U+2018>symbol<U+2019>) is a way to refer to\nR objects by name (rather than the value of the object, if any, bound\nto that name).\n","example_call":"as.name(x)"},"base::gettext":{"description":"Translation of text messages typically from calls to\nstop(), warning(), or message()\nhappens when Native Language Support (NLS) was enabled in this build of\nR as it is almost always, see also the bindtextdomain() example.\n","example_call":"gettext(..., domain = NULL, trim = TRUE)"},"base::[.factor":{"description":"Extract or replace subsets of factors.\n","example_call":"[.factor(x, ..., drop = FALSE)"},"base::body<-":{"description":"Get or set the body of a function which is basically all of\nthe function definition but its formal arguments (formals),\nsee the <U+2018>Details<U+2019>.\n","example_call":"body<-(fun, envir = environment(fun), value)"},"base::rawToChar":{"description":"Conversion to and from and manipulation of objects of type \"raw\",\nboth used as bits or <U+201C>packed<U+201D> 8 bits.\n","example_call":"rawToChar(x, multiple = FALSE)"},"base::anyDuplicated.array":{"description":"duplicated() determines which elements of a vector or data\nframe are duplicates\nof elements with smaller subscripts, and returns a logical vector\nindicating which elements (rows) are duplicates.\n","example_call":"anyDuplicated.array(x, incomparables = FALSE, MARGIN = 1L, fromLast = FALSE,"},"base::unique.POSIXlt":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"unique.POSIXlt(x, incomparables = FALSE, ...)"},"base::as.list.POSIXct":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"as.list.POSIXct(x, ...)"},"base::as.data.frame.character":{"description":"Functions to check if an object is a data frame, or coerce it if possible.\n","example_call":"as.data.frame.character(x, ..., stringsAsFactors = FALSE)"},"base::importIntoEnv":{"description":"Internal namespace support functions.  Not intended to be called\ndirectly, and only visible because of the special nature of the\nbase namespace.\n","example_call":"importIntoEnv(impenv, impnames, expenv, expnames)"},"base::.internalGenerics":{"description":"Many R-internal functions are generic and allow\nmethods to be written for.\n","example_call":"NULL"},"base::as.list.POSIXlt":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"as.list.POSIXlt(x, ...)"},"base::isIncomplete":{"description":"Functions to create, open and close connections, i.e.,\n<U+201C>generalized files<U+201D>, such as possibly compressed files, URLs,\npipes, etc.\n","example_call":"isIncomplete(con)"},"base::qr.qy":{"description":"qr computes the QR decomposition of a matrix.\n","example_call":"qr.qy(qr, y)"},"base::bitwXor":{"description":"Logical operations on integer vectors with elements viewed as sets of bits.\n","example_call":"bitwXor(a, b)"},"base::[<-.data.frame":{"description":"Extract or replace subsets of data frames.\n","example_call":"[<-.data.frame(x, i, j, value)"},"base::format.factor":{"description":"Format an R object for pretty printing.\n","example_call":"format.factor(x, ...)"},"base::Map":{"description":"If init is given, Reduce logically adds it to the start\n(when proceeding left to right) or the end of x, respectively.\nIf this possibly augmented vector v has n > 1 elements,\nReduce successively applies f to the elements of v\nfrom left to right or right to left, respectively.  I.e., a left\nreduce computes l_1 = f(v_1, v_2), l_2 = f(l_1, v_3), etc.,\nand returns l_{n-1} = f(l_{n-2}, v_n), and a right reduce does\nr_{n-1} = f(v_{n-1}, v_n), r_{n-2} = f(v_{n-2}, r_{n-1})\nand returns r_1 = f(v_1, r_2).  (E.g., if v is the\nsequence (2, 3, 4) and f is division, left and right reduce give\n(2 / 3) / 4 = 1/6 and 2 / (3 / 4) = 8/3, respectively.)\nIf v has only a single element, this is returned; if there are\nno elements, NULL is returned.  Thus, it is ensured that\nf is always called with 2 arguments.\n","example_call":"Map(f, ...)"},"base::getTaskCallbackNames":{"description":"This provides a way to get the names (or identifiers)\nfor the currently registered task callbacks\nthat are invoked at the conclusion of each top-level task.\nThese identifiers can be used to remove a callback.\n","example_call":"getTaskCallbackNames()"},"base::data.frame":{"description":"The function data.frame() creates data frames, tightly coupled\ncollections of variables which share many of the properties of\nmatrices and of lists, used as the fundamental data structure by most\nof R's modeling software.\n","example_call":"data.frame(..., row.names = NULL, check.rows = FALSE, check.names = TRUE,"},"base::Mod":{"description":"Basic functions which support complex arithmetic in R, in addition to\nthe arithmetic operators +, -, *, /, and ^.\n","example_call":"Mod(z)"},"base::sQuote":{"description":"Single or double quote text by combining with appropriate single or\ndouble left and right quotation marks.\n","example_call":"sQuote(x, q = getOption(\"useFancyQuotes\"))"},"base::regexec":{"description":"grep, grepl, regexpr, gregexpr, \nregexec and gregexec search for matches to argument\npattern within each element of a character vector: they differ in\nthe format of and amount of detail in the results.\n","example_call":"regexec(pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE,"},"base::-.Date":{"description":"Operators for the \"Date\" class.\n","example_call":"-.Date(e1, e2)"},"base::regexpr":{"description":"grep, grepl, regexpr, gregexpr, \nregexec and gregexec search for matches to argument\npattern within each element of a character vector: they differ in\nthe format of and amount of detail in the results.\n","example_call":"regexpr(pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE,"},"base::packageNotFoundError":{"description":"Find the paths to one or more packages.\n","example_call":"packageNotFoundError(package, lib.loc, call = NULL)"},"base::[.noquote":{"description":"Print character strings without quotes.\n","example_call":"[.noquote(x, ...)"},"base::sys.nframe":{"description":"These functions provide access to environments\n(<U+2018>frames<U+2019> in S terminology) associated with functions further\nup the calling stack.\n","example_call":"sys.nframe()"},"base::as.table":{"description":"table uses cross-classifying factors to build a contingency\ntable of the counts at each combination of factor levels.\n","example_call":"as.table(x, ...)"},"base::sys.load.image":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":"sys.load.image(name, quiet)"},"base::source":{"description":"source causes R to accept its input from the named file or URL\nor connection or expressions directly.  Input is read and\nparsed from that file\nuntil the end of the file is reached, then the parsed expressions are\nevaluated sequentially in the chosen environment.\n","example_call":"source(file, local = FALSE, echo = verbose, print.eval = echo,"},"base::objects":{"description":"ls and objects return a vector of character strings\ngiving the names of the objects in the specified environment.  When\ninvoked with no argument at the top level prompt, ls shows what\ndata sets and functions a user has defined.  When invoked with no\nargument inside a function, ls returns the names of the\nfunction's local variables: this is useful in conjunction with\nbrowser.\n","example_call":"objects(name, pos = -1L, envir = as.environment(pos), all.names = FALSE,"},"base::is.table":{"description":"table uses cross-classifying factors to build a contingency\ntable of the counts at each combination of factor levels.\n","example_call":"is.table(x)"},"base::sys.status":{"description":"These functions provide access to environments\n(<U+2018>frames<U+2019> in S terminology) associated with functions further\nup the calling stack.\n","example_call":"sys.status()"},"base::array":{"description":"Creates or tests for arrays.\n","example_call":"array(data = NA, dim = length(data), dimnames = NULL)"},"base::search":{"description":"Gives a list of attached packages\n(see library), and R objects, usually\ndata.frames.\n","example_call":"search()"},"base::is.infinite":{"description":"is.finite and is.infinite return a vector of the same\nlength as x, indicating which elements are finite (not infinite\nand not missing) or infinite.\n","example_call":"is.infinite(x)"},"base::Sys.setLanguage":{"description":"Translation of text messages typically from calls to\nstop(), warning(), or message()\nhappens when Native Language Support (NLS) was enabled in this build of\nR as it is almost always, see also the bindtextdomain() example.\n","example_call":"Sys.setLanguage(lang, unset = \"en\")"},"base::.Machine":{"description":".Machine is a variable holding information on the numerical\ncharacteristics of the machine R is running on, such as the largest\ndouble or integer and the machine's precision.\n","example_call":"NULL"},"base::$<-.data.frame":{"description":"Extract or replace subsets of data frames.\n","example_call":"$<-.data.frame(x, name, value)"},"base::weekdays.Date":{"description":"Extract the weekday, month or quarter, or the Julian time\n(days since some origin).  These are generic functions: the methods\nfor the internal date-time classes are documented here.\n","example_call":"weekdays.Date(x, abbreviate = FALSE)"},"base::rownames":{"description":"Retrieve or set the row or column names of a matrix-like object.\n","example_call":"rownames(x, do.NULL = TRUE, prefix = \"row\")"},"base::readRenviron":{"description":"Read as file such as <U+2018>.Renviron<U+2019> or <U+2018>Renviron.site<U+2019> in the\nformat described in the help for Startup, and set environment\nvariables as defined in the file.\n","example_call":"readRenviron(path)"},"base::textConnection":{"description":"Input and output text connections.\n","example_call":"textConnection(object, open = \"r\", local = FALSE, name = deparse1(substitute(object)),"},"base::.rowMeans":{"description":"Form row and column sums and means for numeric arrays (or data frames).\n","example_call":".rowMeans(x, m, n, na.rm = FALSE)"},"base::getSrcLines":{"description":"These functions are for working with source files and more generally\nwith <U+201C>source references<U+201D> (\"srcref\"), i.e., references to\nsource code.  The resulting data is used for printing and source level\ndebugging, and is typically available in interactive R sessions,\nnamely when options(keep.source = TRUE).\n","example_call":"getSrcLines(srcfile, first, last)"},"base::.Call":{"description":"Functions to pass R objects to compiled C/C++ code that has been\nloaded into R.\n","example_call":".Call(.NAME, ..., PACKAGE)"},"base::unclass":{"description":"R possesses a simple generic function mechanism which can be used for\nan object-oriented style of programming.  Method dispatch takes place\nbased on the class of the first argument to the generic function.\n","example_call":"unclass(x)"},"base::.expand_R_libs_env_var":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":".expand_R_libs_env_var(x)"},"base::gc.time":{"description":"This function reports the time spent in garbage collection so far in\nthe R session while GC timing was enabled.\n","example_call":"gc.time(on = TRUE)"},"base::cummax":{"description":"Returns a vector whose elements are the cumulative sums, products,\nminima or maxima of the elements of the argument.\n","example_call":"cummax(x)"},"base::gcinfo":{"description":"A call of gc causes a garbage collection to take place.\ngcinfo sets a flag so that\nautomatic collection is either silent (verbose = FALSE) or\nprints memory usage statistics (verbose = TRUE).\n","example_call":"gcinfo(verbose)"},"base::cummin":{"description":"Returns a vector whose elements are the cumulative sums, products,\nminima or maxima of the elements of the argument.\n","example_call":"cummin(x)"},"base::.mergeImportMethods":{"description":"Internal namespace support functions.  Not intended to be called\ndirectly, and only visible because of the special nature of the\nbase namespace.\n","example_call":".mergeImportMethods(impenv, expenv, metaname)"},"base::.subset2":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":".subset2(x, ...)"},"base::addTaskCallback":{"description":"addTaskCallback registers an R function\nthat is to be called each time a top-level task\nis completed.\n","example_call":"addTaskCallback(f, data = NULL, name = character())"},"base::file.mode":{"description":"Utility function to extract information about files on the user's\nfile systems.\n","example_call":"file.mode(...)"},"base::.knownS3Generics":{"description":"Internal namespace support functions.  Not intended to be called\ndirectly, and only visible because of the special nature of the\nbase namespace.\n","example_call":"NULL"},"base::unlockBinding":{"description":"These functions represent an interface for adjustments\nto environments and bindings within environments.  They allow for\nlocking environments as well as individual bindings, and for linking\na variable to a function.\n","example_call":"unlockBinding(sym, env)"},"base::solve.qr":{"description":"qr computes the QR decomposition of a matrix.\n","example_call":"solve.qr(a, b, ...)"},"base::.deparseOpts":{"description":"Process the deparsing options for deparse, dput and\ndump.\n","example_call":".deparseOpts(control)"},"base::file.info":{"description":"Utility function to extract information about files on the user's\nfile systems.\n","example_call":"file.info(..., extra_cols = TRUE)"},"base::.row":{"description":"Returns a matrix of integers indicating their row number in a\nmatrix-like object, or a factor indicating the row labels.\n","example_call":".row(dim)"},"base::round.POSIXt":{"description":"Round or truncate date-time objects.\n","example_call":"round.POSIXt(x, units = c(\"secs\", \"mins\", \"hours\", \"days\", \"months\","},"base::duplicated.POSIXlt":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"duplicated.POSIXlt(x, incomparables = FALSE, ...)"},"base::attachNamespace":{"description":"Functions to load and unload name spaces.\n","example_call":"attachNamespace(ns, pos = 2L, depends = NULL, exclude, include.only)"},"base::dQuote":{"description":"Single or double quote text by combining with appropriate single or\ndouble left and right quotation marks.\n","example_call":"dQuote(x, q = getOption(\"useFancyQuotes\"))"},"base::bquote":{"description":"An analogue of the LISP backquote macro.  bquote quotes its\nargument except that terms wrapped in .() are evaluated in the\nspecified where environment. If splice = TRUE then\nterms wrapped in ..() are evaluated and spliced into a call.\n","example_call":"bquote(expr, where = parent.frame(), splice = FALSE)"},"base::builtins":{"description":"Return the names of all the built-in objects.  These are fetched\ndirectly from the symbol table of the R interpreter.\n","example_call":"builtins(internal = FALSE)"},"base::.standard_regexps":{"description":"Miscellaneous internal/programming utilities.","example_call":".standard_regexps()"},"base::length<-":{"description":"Get or set the length of vectors (including lists) and factors, and of\nany other R object for which a method has been defined.\n","example_call":"length<-(x, value)"},"base::format.summaryDefault":{"description":"summary is a generic function used to produce result summaries\nof the results of various model fitting functions.  The function\ninvokes particular methods which depend on the\nclass of the first argument.\n","example_call":"format.summaryDefault(x, digits = max(3L, getOption(\"digits\") - 3L), ...)"},"base::xzfile":{"description":"Functions to create, open and close connections, i.e.,\n<U+201C>generalized files<U+201D>, such as possibly compressed files, URLs,\npipes, etc.\n","example_call":"xzfile(description, open = \"\", encoding = getOption(\"encoding\"),"},"base::cut.Date":{"description":"Method for cut applied to date-time objects.\n","example_call":"cut.Date(x, breaks, labels = NULL, start.on.monday = TRUE, right = FALSE,"},"base::nchar":{"description":"nchar takes a character vector as an argument and\nreturns a vector whose elements contain the sizes of\nthe corresponding elements of x. Internally, it is a generic,\nfor which methods can be defined (see InternalMethods).\n","example_call":"nchar(x, type = \"chars\", allowNA = FALSE, keepNA = NA)"},"base::simplify2array":{"description":"lapply returns a list of the same length as X, each\nelement of which is the result of applying FUN to the\ncorresponding element of X.\n","example_call":"simplify2array(x, higher = TRUE, except = c(0L, 1L))"},"base::writeChar":{"description":"Transfer character strings to and from connections, without assuming\nthey are null-terminated on the connection.\n","example_call":"writeChar(object, con, nchars = nchar(object, type = \"chars\"),"},"base::La_library":{"description":"Report the name of the shared object file with LAPACK implementation\nin use.\n","example_call":"La_library()"},"base::strptime":{"description":"Functions to convert between character representations and objects of\nclasses \"POSIXlt\" and \"POSIXct\" representing calendar\ndates and times.\n","example_call":"strptime(x, format, tz = \"\")"},"base::serverSocket":{"description":"Functions to create, open and close connections, i.e.,\n<U+201C>generalized files<U+201D>, such as possibly compressed files, URLs,\npipes, etc.\n","example_call":"serverSocket(port)"},"base::all.equal.numeric":{"description":"all.equal(x, y) is a utility to compare R objects x\nand y testing <U+2018>near equality<U+2019>.  If they are different,\ncomparison is still made to some extent, and a report of the\ndifferences is returned.    Do not use all.equal directly in\nif expressions<U+2014>either use isTRUE(all.equal(....)) or\nidentical if appropriate.\n","example_call":"all.equal.numeric(target, current, tolerance = sqrt(.Machine$double.eps),"},"base::readline":{"description":"readline reads a line from the terminal (in interactive use).\n","example_call":"readline(prompt = \"\")"},"base::duplicated.data.frame":{"description":"duplicated() determines which elements of a vector or data\nframe are duplicates\nof elements with smaller subscripts, and returns a logical vector\nindicating which elements (rows) are duplicates.\n","example_call":"duplicated.data.frame(x, incomparables = FALSE, fromLast = FALSE, ...)"},"base::.__H__.rbind":{"description":"The functions or variables listed here are no longer part of R as\nthey are no longer needed.\n","example_call":".__H__.rbind(..., deparse.level = 1)"},"base::registerS3method":{"description":"Internal namespace support functions.  Not intended to be called\ndirectly, and only visible because of the special nature of the\nbase namespace.\n","example_call":"registerS3method(genname, class, method, envir = parent.frame())"},"base::as.list.default":{"description":"Functions to construct, coerce and check for both kinds of R lists.\n","example_call":"as.list.default(x, ...)"},"base::setNamespaceInfo":{"description":"Internal namespace support functions.  Not intended to be called\ndirectly, and only visible because of the special nature of the\nbase namespace.\n","example_call":"setNamespaceInfo(ns, which, val)"},"base::seq.Date":{"description":"The method for seq for objects of class\n\"Date\" representing calendar dates.\n","example_call":"seq.Date(from, to, by, length.out = NULL, along.with = NULL,"},"base::getNamespaceInfo":{"description":"Internal namespace support functions.  Not intended to be called\ndirectly, and only visible because of the special nature of the\nbase namespace.\n","example_call":"getNamespaceInfo(ns, which)"},"base::asinh":{"description":"These functions give the obvious hyperbolic functions.  They\nrespectively compute the hyperbolic cosine, sine, tangent, and their\ninverses, arc-cosine, arc-sine, arc-tangent (or <U+2018>area cosine<U+2019>,\netc).\n","example_call":"asinh(x)"},"base::sys.on.exit":{"description":"These functions provide access to environments\n(<U+2018>frames<U+2019> in S terminology) associated with functions further\nup the calling stack.\n","example_call":"sys.on.exit()"},"base::anyNA.data.frame":{"description":"NA is a logical constant of length 1 which contains a missing\nvalue indicator.  NA can be coerced to any other vector\ntype except raw.  There are also constants NA_integer_,\nNA_real_, NA_complex_ and NA_character_ of the\nother atomic vector types which support missing values: all of these\nare reserved words in the R language.\n","example_call":"anyNA.data.frame(x, recursive = FALSE)"},"base::namespaceImportMethods":{"description":"Internal namespace support functions.  Not intended to be called\ndirectly, and only visible because of the special nature of the\nbase namespace.\n","example_call":"namespaceImportMethods(self, ns, vars, from = NULL)"},"base::sort.int":{"description":"Sort (or order) a vector or factor (partially) into\nascending or descending order.  For ordering along more than one\nvariable, e.g., for sorting data frames, see order.\n","example_call":"sort.int(x, partial = NULL, na.last = NA, decreasing = FALSE,"},"base::cumsum":{"description":"Returns a vector whose elements are the cumulative sums, products,\nminima or maxima of the elements of the argument.\n","example_call":"cumsum(x)"},"base::environmentName":{"description":"Get, set, test for and create environments.\n","example_call":"environmentName(env)"},"base::as.list.environment":{"description":"Functions to construct, coerce and check for both kinds of R lists.\n","example_call":"as.list.environment(x, all.names = FALSE, sorted = FALSE, ...)"},"base::restartDescription":{"description":"These functions provide a mechanism for handling unusual conditions,\nincluding errors and warnings.\n","example_call":"restartDescription(r)"},"base::[<-":{"description":"Operators acting on vectors, matrices, arrays and lists to extract or\nreplace parts.\n","example_call":"NULL"},"base::.signalSimpleWarning":{"description":"These functions provide a mechanism for handling unusual conditions,\nincluding errors and warnings.\n","example_call":".signalSimpleWarning(msg, call)"},"base::autoload":{"description":"autoload creates a promise-to-evaluate autoloader and\nstores it with name name in .AutoloadEnv environment.\nWhen R attempts to evaluate name, autoloader is run,\nthe package is loaded and name is re-evaluated in the new\npackage's environment.  The result is that R behaves as if\npackage was loaded but it does not occupy memory.\n","example_call":"autoload(name, package, reset = FALSE, ...)"},"base::format.pval":{"description":"format.pval is intended for formatting p-values.\n","example_call":"format.pval(pv, digits = max(1L, getOption(\"digits\") - 2L), eps = .Machine$double.eps,"},"base::as.data.frame":{"description":"Functions to check if an object is a data frame, or coerce it if possible.\n","example_call":"as.data.frame(x, row.names = NULL, optional = FALSE, ...)"},"base::environment<-":{"description":"Get, set, test for and create environments.\n","example_call":"environment<-(fun, value)"},"base::as.call":{"description":"Create or test for objects of mode \"call\" (or\n\"(\", see Details).\n","example_call":"as.call(x)"},"base::with":{"description":"Evaluate an R expression in an environment constructed from data,\npossibly modifying (a copy of) the original data.\n","example_call":"with(data, expr, ...)"},"base::round.Date":{"description":"Round or truncate date-time objects.\n","example_call":"round.Date(x, ...)"},"base::emptyenv":{"description":"Get, set, test for and create environments.\n","example_call":"emptyenv()"},"base::[.AsIs":{"description":"Change the class of an object to indicate that it should be treated\n<U+2018>as is<U+2019>.\n","example_call":"[.AsIs(x, i, ...)"},"base::as.list.function":{"description":"Functions to construct, coerce and check for both kinds of R lists.\n","example_call":"as.list.function(x, ...)"},"base::agrepl":{"description":"Searches for approximate matches to pattern (the first argument)\nwithin each element of the string x (the second argument) using\nthe generalized Levenshtein edit distance (the minimal possibly\nweighted number of insertions, deletions and substitutions needed to\ntransform one string into another).\n","example_call":"agrepl(pattern, x, max.distance = 0.1, costs = NULL, ignore.case = FALSE,"},"base::comment<-":{"description":"These functions set and query a comment\nattribute for any R objects.  This is typically useful for\ndata.frames or model fits.\n","example_call":"comment<-(x, value)"},"base::seq_len":{"description":"Generate regular sequences.  seq is a standard generic with a\ndefault method.  seq.int is a primitive which can be\nmuch faster but has a few restrictions.  seq_along and\nseq_len are very fast primitives for two common cases.\n","example_call":"seq_len(length.out)"},"base::rowsum.default":{"description":"Compute column sums across rows of a numeric matrix-like object for\neach level of a grouping variable.  rowsum is generic, with a\nmethod for data frames and a default method for vectors and matrices.\n","example_call":"rowsum.default(x, group, reorder = TRUE, na.rm = FALSE, ...)"},"base::months.POSIXt":{"description":"Extract the weekday, month or quarter, or the Julian time\n(days since some origin).  These are generic functions: the methods\nfor the internal date-time classes are documented here.\n","example_call":"months.POSIXt(x, abbreviate = FALSE)"},"base::besselI":{"description":"Bessel Functions of integer and fractional order, of first\nand second kind, J_{\\nu} and Y_{\\nu}, and\nModified Bessel functions (of first and third kind),\nI_{\\nu} and K_{\\nu}.\n","example_call":"besselI(x, nu, expon.scaled = FALSE)"},"base::besselJ":{"description":"Bessel Functions of integer and fractional order, of first\nand second kind, J_{\\nu} and Y_{\\nu}, and\nModified Bessel functions (of first and third kind),\nI_{\\nu} and K_{\\nu}.\n","example_call":"besselJ(x, nu)"},"base::besselK":{"description":"Bessel Functions of integer and fractional order, of first\nand second kind, J_{\\nu} and Y_{\\nu}, and\nModified Bessel functions (of first and third kind),\nI_{\\nu} and K_{\\nu}.\n","example_call":"besselK(x, nu, expon.scaled = FALSE)"},"base::besselY":{"description":"Bessel Functions of integer and fractional order, of first\nand second kind, J_{\\nu} and Y_{\\nu}, and\nModified Bessel functions (of first and third kind),\nI_{\\nu} and K_{\\nu}.\n","example_call":"besselY(x, nu)"},"base::numeric":{"description":"Creates or coerces objects of type \"numeric\".\nis.numeric is a more general test of an object being\ninterpretable as numbers.\n","example_call":"numeric(length = 0L)"},"base::withCallingHandlers":{"description":"These functions provide a mechanism for handling unusual conditions,\nincluding errors and warnings.\n","example_call":"withCallingHandlers(expr, ...)"},"base::open.srcfilecopy":{"description":"These functions are for working with source files and more generally\nwith <U+201C>source references<U+201D> (\"srcref\"), i.e., references to\nsource code.  The resulting data is used for printing and source level\ndebugging, and is typically available in interactive R sessions,\nnamely when options(keep.source = TRUE).\n","example_call":"open.srcfilecopy(con, line, ...)"},"base::weekdays":{"description":"Extract the weekday, month or quarter, or the Julian time\n(days since some origin).  These are generic functions: the methods\nfor the internal date-time classes are documented here.\n","example_call":"weekdays(x, abbreviate)"},"base::formatDL":{"description":"Format vectors of items and their descriptions as 2-column\ntables or LaTeX-style description lists.\n","example_call":"formatDL(x, y, style = c(\"table\", \"list\"), width = 0.9 * getOption(\"width\"),"},"base::qr.fitted":{"description":"qr computes the QR decomposition of a matrix.\n","example_call":"qr.fitted(qr, y, k = qr$rank)"},"base::system2":{"description":"system2 invokes the OS command specified by command.\n","example_call":"system2(command, args = character(), stdout = \"\", stderr = \"\","},"base::mostattributes<-":{"description":"These functions access an object's attributes.\nThe first form below returns the object's attribute list.\nThe replacement forms uses the list on the right-hand\nside of the assignment as the object's attributes (if appropriate).\n","example_call":"mostattributes<-(x, value)"},"base::.External2":{"description":"Internal versions of .Call and .External.\n","example_call":".External2(.NAME, ..., PACKAGE)"},"base::as.factor":{"description":"The function factor is used to encode a vector as a factor (the\nterms <U+2018>category<U+2019> and <U+2018>enumerated type<U+2019> are also used for\nfactors).  If argument ordered is TRUE, the factor\nlevels are assumed to be ordered.  For compatibility with S there is\nalso a function ordered.\n","example_call":"as.factor(x)"},"base::data.class":{"description":"Determine the class of an arbitrary R object.\n","example_call":"data.class(x)"},"base::is.symbol":{"description":"A <U+2018>name<U+2019> (also known as a <U+2018>symbol<U+2019>) is a way to refer to\nR objects by name (rather than the value of the object, if any, bound\nto that name).\n","example_call":"is.symbol(x)"},"base::[.difftime":{"description":"Time intervals creation, printing, and some arithmetic.  The\nprint() method calls these <U+201C>time differences<U+201D>.\n","example_call":"[.difftime(x, ..., drop = TRUE)"},"base::substring<-":{"description":"Extract or replace substrings in a character vector.\n","example_call":"substring<-(text, first, last = 1000000L, value)"},"base::memCompress":{"description":"In-memory compression or decompression for raw vectors.\n","example_call":"memCompress(from, type = c(\"gzip\", \"bzip2\", \"xz\", \"none\"))"},"base::simpleMessage":{"description":"These functions provide a mechanism for handling unusual conditions,\nincluding errors and warnings.\n","example_call":"simpleMessage(message, call = NULL)"},"base::La_version":{"description":"Report the version of LAPACK in use.\n","example_call":"La_version()"},"base::as.difftime":{"description":"Time intervals creation, printing, and some arithmetic.  The\nprint() method calls these <U+201C>time differences<U+201D>.\n","example_call":"as.difftime(tim, format = \"%X\", units = \"auto\", tz = \"UTC\")"},"base::make.names":{"description":"Make syntactically valid names out of character vectors.\n","example_call":"make.names(names, unique = FALSE, allow_ = TRUE)"},"base::as.null":{"description":"NULL represents the null object in R: it is a reserved\nword.  NULL is often returned by expressions and functions\nwhose value is undefined.\n","example_call":"as.null(x, ...)"},"base::storage.mode":{"description":"Get or set the <U+2018>mode<U+2019> (a kind of <U+2018>type<U+2019>), or the storage\nmode of an R object.\n","example_call":"storage.mode(x)"},"base::substr<-":{"description":"Extract or replace substrings in a character vector.\n","example_call":"substr<-(x, start, stop, value)"},"base::getExportedValue":{"description":"Internal functions to support reflection on namespace objects.\n","example_call":"getExportedValue(ns, name)"},"base::mean.Date":{"description":"Description of the class \"Date\" representing calendar dates.\n","example_call":"mean.Date(x, ...)"},"base::atan2":{"description":"These functions give the obvious trigonometric functions.  They\nrespectively compute the cosine, sine, tangent, arc-cosine, arc-sine,\narc-tangent, and the two-argument arc-tangent.\n","example_call":"atan2(y, x)"},"base::requireNamespace":{"description":"Functions to load and unload name spaces.\n","example_call":"requireNamespace(package, ..., quietly = FALSE)"},"base::atanh":{"description":"These functions give the obvious hyperbolic functions.  They\nrespectively compute the hyperbolic cosine, sine, tangent, and their\ninverses, arc-cosine, arc-sine, arc-tangent (or <U+2018>area cosine<U+2019>,\netc).\n","example_call":"atanh(x)"},"base::is.nan":{"description":"is.finite and is.infinite return a vector of the same\nlength as x, indicating which elements are finite (not infinite\nand not missing) or infinite.\n","example_call":"is.nan(x)"},"base::class":{"description":"R possesses a simple generic function mechanism which can be used for\nan object-oriented style of programming.  Method dispatch takes place\nbased on the class of the first argument to the generic function.\n","example_call":"class(x)"},"base::+.POSIXt":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"+.POSIXt(e1, e2)"},"base::length<-.factor":{"description":"Get or set the length of vectors (including lists) and factors, and of\nany other R object for which a method has been defined.\n","example_call":"length<-.factor(x, value)"},"base::agrep":{"description":"Searches for approximate matches to pattern (the first argument)\nwithin each element of the string x (the second argument) using\nthe generalized Levenshtein edit distance (the minimal possibly\nweighted number of insertions, deletions and substitutions needed to\ntransform one string into another).\n","example_call":"agrep(pattern, x, max.distance = 0.1, costs = NULL, ignore.case = FALSE,"},"base::which.min":{"description":"Determines the location, i.e., index of the (first) minimum or maximum\nof a numeric (or logical) vector.\n","example_call":"which.min(x)"},"base::as.Date.default":{"description":"Functions to convert between character representations and objects of\nclass \"Date\" representing calendar dates.\n","example_call":"as.Date.default(x, ...)"},"base::Sys.glob":{"description":"Function to do wildcard expansion (also known as <U+2018>globbing<U+2019>) on\nfile paths.\n","example_call":"Sys.glob(paths, dirmark = FALSE)"},"base::Sys.getpid":{"description":"Get the process ID of the R Session.  It is guaranteed by the\noperating system that two R sessions running simultaneously will\nhave different IDs, but it is possible that R sessions running at\ndifferent times will have the same ID.\n","example_call":"Sys.getpid()"},"base::which.max":{"description":"Determines the location, i.e., index of the (first) minimum or maximum\nof a numeric (or logical) vector.\n","example_call":"which.max(x)"},"base::pretty.default":{"description":"Compute a  sequence of about n+1 equally spaced <U+2018>round<U+2019>\nvalues which cover the range of the values in x.\nThe values are chosen so that they are 1, 2 or 5 times a power of 10.\n","example_call":"pretty.default(x, n = 5L, min.n = n%/%3L, shrink.sml = 0.75, high.u.bias = 1.5,"},"base::on.exit":{"description":"on.exit records the expression given as its argument as needing\nto be executed when the current function exits (either naturally or as\nthe result of an error).  This is useful for resetting graphical\nparameters or performing other cleanup actions.\n","example_call":"on.exit(expr = NULL, add = FALSE, after = TRUE)"},"base::.pretty":{"description":"Compute a  sequence of about n+1 equally spaced <U+2018>round<U+2019>\nvalues which cover the range of the values in x.\nThe values are chosen so that they are 1, 2 or 5 times a power of 10.\n","example_call":".pretty(x, n = 5L, min.n = n%/%3L, shrink.sml = 0.75, high.u.bias = 1.5,"},"base::tcrossprod":{"description":"Given matrices x and y as arguments, return a matrix\ncross-product.  This is formally equivalent to (but faster than) the call\nt(x) %*% y (crossprod) or\nx %*% t(y) (tcrossprod).\n","example_call":"tcrossprod(x, y = NULL, ...)"},"base::.Date":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":".Date(xx, cl = \"Date\")"},"base::crossprod":{"description":"Given matrices x and y as arguments, return a matrix\ncross-product.  This is formally equivalent to (but faster than) the call\nt(x) %*% y (crossprod) or\nx %*% t(y) (tcrossprod).\n","example_call":"crossprod(x, y = NULL, ...)"},"base::anyDuplicated.data.frame":{"description":"duplicated() determines which elements of a vector or data\nframe are duplicates\nof elements with smaller subscripts, and returns a logical vector\nindicating which elements (rows) are duplicates.\n","example_call":"anyDuplicated.data.frame(x, incomparables = FALSE, fromLast = FALSE, ...)"},"base::abs":{"description":"abs(x) computes the absolute value of x, sqrt(x) computes the\n(principal) square root of x, \\sqrt{x}.\n","example_call":"abs(x)"},"base::months.Date":{"description":"Extract the weekday, month or quarter, or the Julian time\n(days since some origin).  These are generic functions: the methods\nfor the internal date-time classes are documented here.\n","example_call":"months.Date(x, abbreviate = FALSE)"},"base::-.POSIXt":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"-.POSIXt(e1, e2)"},"base::stdin":{"description":"Display aspects of connections.\n","example_call":"stdin()"},"base::all":{"description":"Given a set of logical vectors, are all of the values true?\n","example_call":"all(..., na.rm = FALSE)"},"base::as.numeric":{"description":"Creates or coerces objects of type \"numeric\".\nis.numeric is a more general test of an object being\ninterpretable as numbers.\n","example_call":"as.numeric(x, ...)"},"base::any":{"description":"Given a set of logical vectors, is at least one of the values true?\n","example_call":"any(..., na.rm = FALSE)"},"base::Encoding<-":{"description":"Read or set the declared encodings for a character vector.\n","example_call":"Encoding<-(x, value)"},"base::isTRUE":{"description":"These operators act on raw, logical and number-like vectors.\n","example_call":"isTRUE(x)"},"base::charToRaw":{"description":"Conversion to and from and manipulation of objects of type \"raw\",\nboth used as bits or <U+201C>packed<U+201D> 8 bits.\n","example_call":"charToRaw(x)"},"base::Sys.time":{"description":"Sys.time and Sys.Date returns the system's idea of the\ncurrent date with and without time.\n","example_call":"Sys.time()"},"base::as.Date.numeric":{"description":"Functions to convert between character representations and objects of\nclass \"Date\" representing calendar dates.\n","example_call":"as.Date.numeric(x, origin, ...)"},"base::environment":{"description":"Get, set, test for and create environments.\n","example_call":"environment(fun = NULL)"},"base::cat":{"description":"Outputs the objects, concatenating the representations.  cat\nperforms much less conversion than print.\n","example_call":"cat(..., file = \"\", sep = \" \", fill = FALSE, labels = NULL,"},"base::is.raw":{"description":"Creates or tests for objects of type \"raw\".\n","example_call":"is.raw(x)"},"base::mean.difftime":{"description":"Time intervals creation, printing, and some arithmetic.  The\nprint() method calls these <U+201C>time differences<U+201D>.\n","example_call":"mean.difftime(x, ...)"},"base::readLines":{"description":"Read some or all text lines from a connection.\n","example_call":"readLines(con = stdin(), n = -1L, ok = TRUE, warn = TRUE, encoding = \"unknown\","},"base::.rowSums":{"description":"Form row and column sums and means for numeric arrays (or data frames).\n","example_call":".rowSums(x, m, n, na.rm = FALSE)"},"base::charmatch":{"description":"charmatch seeks matches for the elements of its first argument\namong those of its second.\n","example_call":"charmatch(x, table, nomatch = NA_integer_)"},"base::col":{"description":"Returns a matrix of integers indicating their column number in a\nmatrix-like object, or a factor of column labels.\n","example_call":"col(x, as.factor = FALSE)"},"base::cos":{"description":"These functions give the obvious trigonometric functions.  They\nrespectively compute the cosine, sine, tangent, arc-cosine, arc-sine,\narc-tangent, and the two-argument arc-tangent.\n","example_call":"cos(x)"},"base::mtfrm":{"description":"Transform objects for matching via match(), think\n<U+201C>match form<U+201D> -> \"mtfrm\".\nbase provides the S3 generic and a default plus\n\"POSIXct\" and \"POSIXlt\" methods.\n","example_call":"mtfrm(x)"},"base::Sys.Date":{"description":"Sys.time and Sys.Date returns the system's idea of the\ncurrent date with and without time.\n","example_call":"Sys.Date()"},"base::det":{"description":"det calculates the determinant of a matrix.  determinant\nis a generic function that returns separately the modulus of the determinant,\noptionally on the logarithm scale, and the sign of the determinant.\n","example_call":"det(x, ...)"},"base::cut":{"description":"cut divides the range of x into intervals\nand codes the values in x according to which\ninterval they fall.  The leftmost interval corresponds to level one,\nthe next leftmost to level two and so on.\n","example_call":"cut(x, ...)"},"base::dim":{"description":"Retrieve or set the dimension of an object.\n","example_call":"dim(x)"},"base::dir":{"description":"These functions produce a character vector of the names of files or\ndirectories in the named directory.\n","example_call":"dir(path = \".\", pattern = NULL, all.files = FALSE, full.names = FALSE,"},"base::as.data.frame.raw":{"description":"These functions are provided for compatibility with older versions of\nR only, and may be defunct as soon as the next release.\n","example_call":"as.data.frame.raw(x, row.names = NULL, optional = FALSE, ..., nm = deparse1(substitute(x)))"},"base::as.symbol":{"description":"A <U+2018>name<U+2019> (also known as a <U+2018>symbol<U+2019>) is a way to refer to\nR objects by name (rather than the value of the object, if any, bound\nto that name).\n","example_call":"as.symbol(x)"},"base::[[.factor":{"description":"Extract or replace subsets of factors.\n","example_call":"[[.factor(x, ...)"},"base::as.data.frame.AsIs":{"description":"Functions to check if an object is a data frame, or coerce it if possible.\n","example_call":"as.data.frame.AsIs(x, row.names = NULL, optional = FALSE, ...)"},"base::summary.factor":{"description":"summary is a generic function used to produce result summaries\nof the results of various model fitting functions.  The function\ninvokes particular methods which depend on the\nclass of the first argument.\n","example_call":"summary.factor(object, maxsum = 100L, ...)"},"base::anyDuplicated.matrix":{"description":"duplicated() determines which elements of a vector or data\nframe are duplicates\nof elements with smaller subscripts, and returns a logical vector\nindicating which elements (rows) are duplicates.\n","example_call":"anyDuplicated.matrix(x, incomparables = FALSE, MARGIN = 1L, fromLast = FALSE,"},"base::getDLLRegisteredRoutines.DLLInfo":{"description":"This function allows us to query the set of routines\nin a DLL that are registered with R to enhance\ndynamic lookup, error handling when calling native routines,\nand potentially security in the future.\nThis function provides a description of each of the\nregistered routines in the DLL for the different interfaces,\ni.e. .C, .Call, .Fortran\nand .External.\n","example_call":"getDLLRegisteredRoutines.DLLInfo(dll, addNames = TRUE)"},"base::exp":{"description":"log computes logarithms, by default natural logarithms,\nlog10 computes common (i.e., base 10) logarithms, and\nlog2 computes binary (i.e., base 2) logarithms.\nThe general form log(x, base) computes logarithms with base\nbase.\n","example_call":"exp(x)"},"base::print.Date":{"description":"Description of the class \"Date\" representing calendar dates.\n","example_call":"print.Date(x, max = NULL, ...)"},"base::split.data.frame":{"description":"split divides the data in the vector x into the groups\ndefined by f.  The replacement forms replace values\ncorresponding to such a division.  unsplit reverses the effect of\nsplit.\n","example_call":"split.data.frame(x, f, drop = FALSE, ...)"},"base::for":{"description":"These are the basic control-flow constructs of the R language.  They\nfunction in much the same way as control statements in any Algol-like\nlanguage.  They are all reserved words.\n","example_call":"NULL"},"base::rowSums":{"description":"Form row and column sums and means for numeric arrays (or data frames).\n","example_call":"rowSums(x, na.rm = FALSE, dims = 1L)"},"base::rawShift":{"description":"Conversion to and from and manipulation of objects of type \"raw\",\nboth used as bits or <U+201C>packed<U+201D> 8 bits.\n","example_call":"rawShift(x, n)"},"base::get":{"description":"Search by name for an object (get) or zero or more objects\n(mget).\n","example_call":"get(x, pos = -1L, envir = as.environment(pos), mode = \"any\","},"base::open.srcfilealias":{"description":"These functions are for working with source files and more generally\nwith <U+201C>source references<U+201D> (\"srcref\"), i.e., references to\nsource code.  The resulting data is used for printing and source level\ndebugging, and is typically available in interactive R sessions,\nnamely when options(keep.source = TRUE).\n","example_call":"open.srcfilealias(con, line, ...)"},"base::as.list.numeric_version":{"description":"A simple S3 class for representing numeric versions\nincluding package versions, and associated methods.","example_call":"as.list.numeric_version(x, ...)"},"base::identity":{"description":"A trivial identity function returning its argument.\n","example_call":"identity(x)"},"base::Summary.factor":{"description":"The function factor is used to encode a vector as a factor (the\nterms <U+2018>category<U+2019> and <U+2018>enumerated type<U+2019> are also used for\nfactors).  If argument ordered is TRUE, the factor\nlevels are assumed to be ordered.  For compatibility with S there is\nalso a function ordered.\n","example_call":"Summary.factor(..., na.rm)"},"base::print.summaryDefault":{"description":"summary is a generic function used to produce result summaries\nof the results of various model fitting functions.  The function\ninvokes particular methods which depend on the\nclass of the first argument.\n","example_call":"print.summaryDefault(x, digits = max(3L, getOption(\"digits\") - 3L), ...)"},"base::toString.default":{"description":"This is a helper function for format to produce a single\ncharacter string describing an R object.\n","example_call":"toString.default(x, width = NULL, ...)"},"base::pushBackLength":{"description":"Functions to push back text lines onto a connection, and to enquire\nhow many lines are currently pushed back.\n","example_call":"pushBackLength(connection)"},"base::extSoftVersion":{"description":"Report versions of (external) third-party software used.\n","example_call":"extSoftVersion()"},"base::serialize":{"description":"A simple low-level interface for serializing to connections.\n","example_call":"serialize(object, connection, ascii = FALSE, xdr = TRUE, version = NULL,"},"base::is.complex":{"description":"Basic functions which support complex arithmetic in R, in addition to\nthe arithmetic operators +, -, *, /, and ^.\n","example_call":"is.complex(x)"},"base::loadNamespace":{"description":"Functions to load and unload name spaces.\n","example_call":"loadNamespace(package, lib.loc = NULL, keep.source = getOption(\"keep.source.pkgs\"),"},"base::all.equal.default":{"description":"all.equal(x, y) is a utility to compare R objects x\nand y testing <U+2018>near equality<U+2019>.  If they are different,\ncomparison is still made to some extent, and a report of the\ndifferences is returned.    Do not use all.equal directly in\nif expressions<U+2014>either use isTRUE(all.equal(....)) or\nidentical if appropriate.\n","example_call":"all.equal.default(target, current, ..., check.class = TRUE)"},"base::print.condition":{"description":"These functions provide a mechanism for handling unusual conditions,\nincluding errors and warnings.\n","example_call":"print.condition(x, ...)"},"base::RNGkind":{"description":".Random.seed is an integer vector, containing the random number\ngenerator (RNG) state for random number generation in R.  It\ncan be saved and restored, but should not be altered by the user.\n","example_call":"RNGkind(kind = NULL, normal.kind = NULL, sample.kind = NULL)"},"base::summary.table":{"description":"table uses cross-classifying factors to build a contingency\ntable of the counts at each combination of factor levels.\n","example_call":"summary.table(object, ...)"},"base::nameOfClass.default":{"description":"R possesses a simple generic function mechanism which can be used for\nan object-oriented style of programming.  Method dispatch takes place\nbased on the class of the first argument to the generic function.\n","example_call":"nameOfClass.default(x)"},"base::list":{"description":"Functions to construct, coerce and check for both kinds of R lists.\n","example_call":"list(...)"},"base::isa":{"description":"R possesses a simple generic function mechanism which can be used for\nan object-oriented style of programming.  Method dispatch takes place\nbased on the class of the first argument to the generic function.\n","example_call":"isa(x, what)"},"base::print.difftime":{"description":"Time intervals creation, printing, and some arithmetic.  The\nprint() method calls these <U+201C>time differences<U+201D>.\n","example_call":"print.difftime(x, digits = getOption(\"digits\"), ...)"},"base::as.character.error":{"description":"These functions provide a mechanism for handling unusual conditions,\nincluding errors and warnings.\n","example_call":"as.character.error(x, ...)"},"base::strtrim":{"description":"Trim character strings to specified display widths.\n","example_call":"strtrim(x, width)"},"base::licence":{"description":"The license terms under which R is distributed.\n","example_call":"licence()"},"base::summary":{"description":"summary is a generic function used to produce result summaries\nof the results of various model fitting functions.  The function\ninvokes particular methods which depend on the\nclass of the first argument.\n","example_call":"summary(object, ...)"},"base::row.names.data.frame":{"description":"All data frames have row names, a character vector of\nlength the number of rows with no duplicates nor missing values.\n","example_call":"row.names.data.frame(x)"},"base::packageStartupMessage":{"description":"Generate a diagnostic message from its arguments.\n","example_call":"packageStartupMessage(..., domain = NULL, appendLF = TRUE)"},"base::print.summary.warnings":{"description":"warnings and its print method print the\nvariable last.warning in a pleasing form.\n","example_call":"print.summary.warnings(x, ...)"},"base::pmax.int":{"description":"Returns the (regular or parallel) maxima and minima of the\ninput values.\n","example_call":"pmax.int(..., na.rm = FALSE)"},"base::julian.Date":{"description":"Extract the weekday, month or quarter, or the Julian time\n(days since some origin).  These are generic functions: the methods\nfor the internal date-time classes are documented here.\n","example_call":"julian.Date(x, origin = as.Date(\"1970-01-01\"), ...)"},"base::rownames<-":{"description":"Retrieve or set the row or column names of a matrix-like object.\n","example_call":"rownames<-(x, value)"},"base::license":{"description":"The license terms under which R is distributed.\n","example_call":"license()"},"base::sys.save.image":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":"sys.save.image(name)"},"base::lazyLoadDBexec":{"description":"Internal functions to lazy load a database of R objects.\n","example_call":"lazyLoadDBexec(filebase, fun, filter)"},"base::max.col":{"description":"Find the maximum position for each row of a matrix, breaking ties at random.\n","example_call":"max.col(m, ties.method = c(\"random\", \"first\", \"last\"))"},"base::invisible":{"description":"Return a (temporarily) invisible copy of an object.\n","example_call":"invisible(x = NULL)"},"base::open.srcfile":{"description":"These functions are for working with source files and more generally\nwith <U+201C>source references<U+201D> (\"srcref\"), i.e., references to\nsource code.  The resulting data is used for printing and source level\ndebugging, and is typically available in interactive R sessions,\nnamely when options(keep.source = TRUE).\n","example_call":"open.srcfile(con, line, ...)"},"base::searchpaths":{"description":"Gives a list of attached packages\n(see library), and R objects, usually\ndata.frames.\n","example_call":"searchpaths()"},"base::.formula2varlist":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":".formula2varlist(formula, data, warnLHS = TRUE, ignoreLHS = warnLHS)"},"base::namespaceImportFrom":{"description":"Internal namespace support functions.  Not intended to be called\ndirectly, and only visible because of the special nature of the\nbase namespace.\n","example_call":"namespaceImportFrom(self, ns, vars, generics, packages, from = \"non-package environment\","},"base::sys.frames":{"description":"These functions provide access to environments\n(<U+2018>frames<U+2019> in S terminology) associated with functions further\nup the calling stack.\n","example_call":"sys.frames()"},"base::Recall":{"description":"Recall is used as a placeholder for the name of the function\nin which it is called.  It allows the definition of recursive\nfunctions which still work after being renamed, see example below.\n","example_call":"Recall(...)"},"base::.difftime":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":".difftime(xx, units, cl = \"difftime\")"},"base::log":{"description":"log computes logarithms, by default natural logarithms,\nlog10 computes common (i.e., base 10) logarithms, and\nlog2 computes binary (i.e., base 2) logarithms.\nThe general form log(x, base) computes logarithms with base\nbase.\n","example_call":"log(x, base = exp(1))"},"base::numToBits":{"description":"Conversion to and from and manipulation of objects of type \"raw\",\nboth used as bits or <U+201C>packed<U+201D> 8 bits.\n","example_call":"numToBits(x)"},"base::rawToBits":{"description":"Conversion to and from and manipulation of objects of type \"raw\",\nboth used as bits or <U+201C>packed<U+201D> 8 bits.\n","example_call":"rawToBits(x)"},"base::max":{"description":"Returns the (regular or parallel) maxima and minima of the\ninput values.\n","example_call":"max(..., na.rm = FALSE)"},"base::floor":{"description":"ceiling takes a single numeric argument x and returns a\nnumeric vector containing the smallest integers not less than the\ncorresponding elements of x.\n","example_call":"floor(x)"},"base::Ops.numeric_version":{"description":"A simple S3 class for representing numeric versions\nincluding package versions, and associated methods.","example_call":"Ops.numeric_version(e1, e2)"},"base::close":{"description":"Functions to create, open and close connections, i.e.,\n<U+201C>generalized files<U+201D>, such as possibly compressed files, URLs,\npipes, etc.\n","example_call":"close(con, ...)"},"base::Math.Date":{"description":"Description of the class \"Date\" representing calendar dates.\n","example_call":"Math.Date(x, ...)"},"base::dimnames<-.data.frame":{"description":"Retrieve or set the dimnames of an object.\n","example_call":"dimnames<-.data.frame(x, value)"},"base::Math.data.frame":{"description":"Group generic methods can be defined for the following pre-specified groups of\nfunctions, Math, Ops, matrixOps, Summary and Complex.\n(There are no objects of these names in base R, but there are in the\nmethods package, not yet for matrixOps.)\n","example_call":"Math.data.frame(x, ...)"},"base::min":{"description":"Returns the (regular or parallel) maxima and minima of the\ninput values.\n","example_call":"min(..., na.rm = FALSE)"},"base::as.array":{"description":"Creates or tests for arrays.\n","example_call":"as.array(x, ...)"},"base::assign":{"description":"Assign a value to a name in an environment.\n","example_call":"assign(x, value, pos = -1, envir = as.environment(pos), inherits = FALSE,"},"base::taskCallbackManager":{"description":"This provides an entirely R-language mechanism\nfor managing callbacks or actions  that are invoked at\nthe conclusion of each top-level task.  Essentially,\nwe register a single R function from this manager\nwith the underlying, native\ntask-callback mechanism and this function handles invoking the other\nR callbacks under the control of the manager.\nThe manager consists of a collection of functions that access shared\nvariables to manage the list of user-level callbacks.\n","example_call":"taskCallbackManager(handlers = list(), registered = FALSE, verbose = FALSE)"},"base::gettextf":{"description":"A wrapper for the C function sprintf, that returns a character\nvector containing a formatted combination of text and variable values.\n","example_call":"gettextf(fmt, ..., domain = NULL, trim = TRUE)"},"base::.NotYetUsed":{"description":"In order to pinpoint missing functionality, the R core team uses\nthese functions for missing R functions and not yet used arguments of\nexisting R functions (which are typically there for compatibility\npurposes).\n","example_call":".NotYetUsed(arg, error = TRUE)"},"base::setHook":{"description":"These functions allow users to set actions to be taken before packages\nare attached/detached and namespaces are (un)loaded.\n","example_call":"setHook(hookName, value, action = c(\"append\", \"prepend\", \"replace\"))"},"base::load":{"description":"Reload datasets written with the function save.\n","example_call":"load(file, envir = parent.frame(), verbose = FALSE)"},"base::socketTimeout":{"description":"Functions to create, open and close connections, i.e.,\n<U+201C>generalized files<U+201D>, such as possibly compressed files, URLs,\npipes, etc.\n","example_call":"socketTimeout(socket, timeout = -1)"},"base::Negate":{"description":"If init is given, Reduce logically adds it to the start\n(when proceeding left to right) or the end of x, respectively.\nIf this possibly augmented vector v has n > 1 elements,\nReduce successively applies f to the elements of v\nfrom left to right or right to left, respectively.  I.e., a left\nreduce computes l_1 = f(v_1, v_2), l_2 = f(l_1, v_3), etc.,\nand returns l_{n-1} = f(l_{n-2}, v_n), and a right reduce does\nr_{n-1} = f(v_{n-1}, v_n), r_{n-2} = f(v_{n-2}, r_{n-1})\nand returns r_1 = f(v_1, r_2).  (E.g., if v is the\nsequence (2, 3, 4) and f is division, left and right reduce give\n(2 / 3) / 4 = 1/6 and 2 / (3 / 4) = 8/3, respectively.)\nIf v has only a single element, this is returned; if there are\nno elements, NULL is returned.  Thus, it is ensured that\nf is always called with 2 arguments.\n","example_call":"Negate(f)"},"base::unique.matrix":{"description":"unique returns a vector, data frame or array like x\nbut with duplicate elements/rows removed.\n","example_call":"unique.matrix(x, incomparables = FALSE, MARGIN = 1, fromLast = FALSE,"},"base::log2":{"description":"log computes logarithms, by default natural logarithms,\nlog10 computes common (i.e., base 10) logarithms, and\nlog2 computes binary (i.e., base 2) logarithms.\nThe general form log(x, base) computes logarithms with base\nbase.\n","example_call":"log2(x)"},"base::as.character.POSIXt":{"description":"Functions to convert between character representations and objects of\nclasses \"POSIXlt\" and \"POSIXct\" representing calendar\ndates and times.\n","example_call":"as.character.POSIXt(x, digits = if (inherits(x, \"POSIXlt\")) 14L else 6L,"},"base::untrace":{"description":"A call to trace allows you to insert debugging code (e.g., a\ncall to browser or recover) at chosen\nplaces in any function.  A call to untrace cancels the tracing.\nSpecified methods can be traced the same way, without tracing all\ncalls to the generic function.  Trace code (tracer) can be any\nR expression.  Tracing can be temporarily turned on or off globally\nby calling tracingState.\n","example_call":"untrace(what, signature = NULL, where = topenv(parent.frame()))"},"base::logb":{"description":"log computes logarithms, by default natural logarithms,\nlog10 computes common (i.e., base 10) logarithms, and\nlog2 computes binary (i.e., base 2) logarithms.\nThe general form log(x, base) computes logarithms with base\nbase.\n","example_call":"logb(x, base = exp(1))"},"base::is.array":{"description":"Creates or tests for arrays.\n","example_call":"is.array(x)"},"base::droplevels.factor":{"description":"The function droplevels is used to drop unused levels from a\nfactor or, more commonly, from factors in a data frame.\n","example_call":"droplevels.factor(x, exclude = if (anyNA(levels(x))) NULL else NA, ...)"},"base::R.version":{"description":"R.Version() provides detailed information about the version of\nR running.\n","example_call":"NULL"},"base::R.Version":{"description":"R.Version() provides detailed information about the version of\nR running.\n","example_call":"R.Version()"},"base::within.list":{"description":"Evaluate an R expression in an environment constructed from data,\npossibly modifying (a copy of) the original data.\n","example_call":"within.list(data, expr, keepAttrs = TRUE, ...)"},"base::inherits":{"description":"R possesses a simple generic function mechanism which can be used for\nan object-oriented style of programming.  Method dispatch takes place\nbased on the class of the first argument to the generic function.\n","example_call":"inherits(x, what, which = FALSE)"},"base::Sys.setenv":{"description":"Sys.setenv sets environment variables (for other processes\ncalled from within R or future calls to Sys.getenv from\nthis R process).\n","example_call":"Sys.setenv(...)"},"base::comment":{"description":"These functions set and query a comment\nattribute for any R objects.  This is typically useful for\ndata.frames or model fits.\n","example_call":"comment(x)"},"base::as.vector.data.frame":{"description":"A vector in R is either an atomic vector i.e., one of the atomic\ntypes, see <U+2018>Details<U+2019>, or of type (typeof) or mode\nlist or expression.\n","example_call":"as.vector.data.frame(x, mode = \"any\")"},"base::print.DLLInfoList":{"description":"This function provides a way to get a list of all the DLLs (see\ndyn.load) that are currently loaded in the R session.\n","example_call":"print.DLLInfoList(x, ...)"},"base::vector":{"description":"A vector in R is either an atomic vector i.e., one of the atomic\ntypes, see <U+2018>Details<U+2019>, or of type (typeof) or mode\nlist or expression.\n","example_call":"vector(mode = \"logical\", length = 0L)"},"base::system":{"description":"system invokes the OS command specified by command.\n","example_call":"system(command, intern = FALSE, ignore.stdout = FALSE, ignore.stderr = FALSE,"},"base::.First.sys":{"description":"In R, the startup mechanism is as follows.\n","example_call":".First.sys()"},"base::save.image":{"description":"save writes an external representation of R objects to the\nspecified file.  The objects can be read back from the file at a later\ndate by using the function load or attach\n(or data in some cases).\n","example_call":"save.image(file = \".RData\", version = NULL, ascii = FALSE, compress = !ascii,"},"base::[[<-.data.frame":{"description":"Extract or replace subsets of data frames.\n","example_call":"[[<-.data.frame(x, i, j, value)"},"base::row.names<-.default":{"description":"All data frames have row names, a character vector of\nlength the number of rows with no duplicates nor missing values.\n","example_call":"row.names<-.default(x, value)"},"base::as.array.default":{"description":"Creates or tests for arrays.\n","example_call":"as.array.default(x, ...)"},"base::format.info":{"description":"Information is returned on how format(x, digits, nsmall)\nwould be formatted.\n","example_call":"format.info(x, digits = NULL, nsmall = 0L)"},"base::|.hexmode":{"description":"Integers which are displayed in hexadecimal (short <U+2018>hex<U+2019>) format,\nwith as many digits as are needed to display the largest, using leading\nzeroes as necessary.\n","example_call":"|.hexmode(a, b)"},"base::.F_dqrqy":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":"NULL"},"base::Sys.setFileTime":{"description":"Uses system calls to set the times on a file or directory.\n","example_call":"Sys.setFileTime(path, time)"},"base::.F_dqrxb":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":"NULL"},"base::setequal":{"description":"Performs set union, intersection, (asymmetric!) difference,\nequality and membership on two vectors.\n","example_call":"setequal(x, y)"},"base::raw":{"description":"Creates or tests for objects of type \"raw\".\n","example_call":"raw(length = 0L)"},"base::typeof":{"description":"typeof determines the (R internal)\ntype or storage mode of any object\n","example_call":"typeof(x)"},"base::rep":{"description":"rep replicates the values in x.  It is a generic\nfunction, and the (internal) default method is described here.\n","example_call":"rep(x, ...)"},"base::rev":{"description":"rev provides a reversed version of its argument.  It is generic\nfunction with a default method for vectors and one for\ndendrograms.\n","example_call":"rev(x)"},"base::paste0":{"description":"Concatenate vectors after converting to character.\nConcatenation happens in two basically different ways, determined by\ncollapse being a string or not.\n","example_call":"paste0(..., collapse = NULL, recycle0 = FALSE)"},"base::rle":{"description":"Compute the lengths and values of runs of equal values in a vector\n<U+2013> or the reverse operation.\n","example_call":"rle(x)"},"base::conditionMessage":{"description":"These functions provide a mechanism for handling unusual conditions,\nincluding errors and warnings.\n","example_call":"conditionMessage(c)"},"base::.F_dqrcf":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":"NULL"},"base::row":{"description":"Returns a matrix of integers indicating their row number in a\nmatrix-like object, or a factor indicating the row labels.\n","example_call":"row(x, as.factor = FALSE)"},"base::stderr":{"description":"Display aspects of connections.\n","example_call":"stderr()"},"base::.Last.value":{"description":"The value of the internal evaluation of a top-level R expression\nis always assigned to .Last.value (in package:base)\nbefore further processing (e.g., printing).\n","example_call":"NULL"},"base::seq":{"description":"Generate regular sequences.  seq is a standard generic with a\ndefault method.  seq.int is a primitive which can be\nmuch faster but has a few restrictions.  seq_along and\nseq_len are very fast primitives for two common cases.\n","example_call":"seq(...)"},"base::flush":{"description":"Functions to create, open and close connections, i.e.,\n<U+201C>generalized files<U+201D>, such as possibly compressed files, URLs,\npipes, etc.\n","example_call":"flush(con)"},"base::sin":{"description":"These functions give the obvious trigonometric functions.  They\nrespectively compute the cosine, sine, tangent, arc-cosine, arc-sine,\narc-tangent, and the two-argument arc-tangent.\n","example_call":"sin(x)"},"base::intToUtf8":{"description":"Conversion of UTF-8 encoded character vectors to and from integer\nvectors representing a UTF-32 encoding.\n","example_call":"intToUtf8(x, multiple = FALSE, allow_surrogate_pairs = FALSE)"},"base::acos":{"description":"These functions give the obvious trigonometric functions.  They\nrespectively compute the cosine, sine, tangent, arc-cosine, arc-sine,\narc-tangent, and the two-argument arc-tangent.\n","example_call":"acos(x)"},"base::globalCallingHandlers":{"description":"These functions provide a mechanism for handling unusual conditions,\nincluding errors and warnings.\n","example_call":"globalCallingHandlers(...)"},"base::within":{"description":"Evaluate an R expression in an environment constructed from data,\npossibly modifying (a copy of) the original data.\n","example_call":"within(data, expr, ...)"},"base::tan":{"description":"These functions give the obvious trigonometric functions.  They\nrespectively compute the cosine, sine, tangent, arc-cosine, arc-sine,\narc-tangent, and the two-argument arc-tangent.\n","example_call":"tan(x)"},"base::as.matrix.noquote":{"description":"Print character strings without quotes.\n","example_call":"as.matrix.noquote(x, ...)"},"base::libcurlVersion":{"description":"Report version of libcurl in use.\n","example_call":"libcurlVersion()"},"base::sub":{"description":"grep, grepl, regexpr, gregexpr, \nregexec and gregexec search for matches to argument\npattern within each element of a character vector: they differ in\nthe format of and amount of detail in the results.\n","example_call":"sub(pattern, replacement, x, ignore.case = FALSE, perl = FALSE,"},"base::sum":{"description":"sum returns the sum of all the values\npresent in its arguments.\n","example_call":"sum(..., na.rm = FALSE)"},"base::svd":{"description":"Compute the singular-value decomposition of a rectangular matrix.\n","example_call":"svd(x, nu = min(n, p), nv = min(n, p), LINPACK = FALSE)"},"base::upper.tri":{"description":"Returns a matrix of logicals the same size of a given matrix with\nentries TRUE in the lower or upper triangle.\n","example_call":"upper.tri(x, diag = FALSE)"},"base::isSymmetric.matrix":{"description":"Generic function to test if object is symmetric or not.\nCurrently only a matrix method is implemented, where a\ncomplex matrix Z must be <U+201C>Hermitian<U+201D> for\nisSymmetric(Z) to be true.\n","example_call":"isSymmetric.matrix(object, tol = 100 * .Machine$double.eps, tol1 = 8 *"},"base::is.factor":{"description":"The function factor is used to encode a vector as a factor (the\nterms <U+2018>category<U+2019> and <U+2018>enumerated type<U+2019> are also used for\nfactors).  If argument ordered is TRUE, the factor\nlevels are assumed to be ordered.  For compatibility with S there is\nalso a function ordered.\n","example_call":"is.factor(x)"},"base::$<-.POSIXlt":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"$<-.POSIXlt(x, name, value)"},"base::mean":{"description":"Generic function for the (trimmed) arithmetic mean.\n","example_call":"mean(x, ...)"},"base::try":{"description":"try is a wrapper to run an expression that might fail and allow\nthe user's code to handle error-recovery.\n","example_call":"try(expr, silent = FALSE, outFile = getOption(\"try.outFile\","},"base::rev.default":{"description":"rev provides a reversed version of its argument.  It is generic\nfunction with a default method for vectors and one for\ndendrograms.\n","example_call":"rev.default(x)"},"base::is.character":{"description":"Create or test for objects of type \"character\".\n","example_call":"is.character(x)"},"base::Sys.getenv":{"description":"Sys.getenv obtains the values of the environment variables.\n","example_call":"Sys.getenv(x = NULL, unset = \"\", names = NA)"},"base::!.octmode":{"description":"Integers which are displayed in octal (base-8 number system) format, with as\nmany digits as are needed to display the largest, using leading zeroes as\nnecessary.\n","example_call":"!.octmode(a)"},"base::unz":{"description":"Functions to create, open and close connections, i.e.,\n<U+201C>generalized files<U+201D>, such as possibly compressed files, URLs,\npipes, etc.\n","example_call":"unz(description, filename, open = \"\", encoding = getOption(\"encoding\"))"},"base::as.data.frame.factor":{"description":"These functions are provided for compatibility with older versions of\nR only, and may be defunct as soon as the next release.\n","example_call":"as.data.frame.factor(x, row.names = NULL, optional = FALSE, ..., nm = deparse1(substitute(x)))"},"base::url":{"description":"Functions to create, open and close connections, i.e.,\n<U+201C>generalized files<U+201D>, such as possibly compressed files, URLs,\npipes, etc.\n","example_call":"url(description, open = \"\", blocking = TRUE, encoding = getOption(\"encoding\"),"},"base::Ops.Date":{"description":"Operators for the \"Date\" class.\n","example_call":"Ops.Date(e1, e2)"},"base::use":{"description":"Use packages in R scripts by loading their namespace and attaching a\npackage environment including (a subset of) their exports to the\nsearch path.\n","example_call":"use(package, include.only)"},"base::as.environment":{"description":"A generic function coercing an R object to an\nenvironment.  A number or a character string is\nconverted to the corresponding environment on the search path.\n","example_call":"as.environment(x)"},"base::[.data.frame":{"description":"Extract or replace subsets of data frames.\n","example_call":"[.data.frame(x, i, j, drop = if (missing(i)) TRUE else length(cols) =="},"base::mget":{"description":"Search by name for an object (get) or zero or more objects\n(mget).\n","example_call":"mget(x, envir = as.environment(-1L), mode = \"any\", ifnotfound,"},"base::print.eigen":{"description":"Computes eigenvalues and eigenvectors of numeric (double, integer,\nlogical) or complex matrices.\n","example_call":"print.eigen(x, ...)"},"base::invokeRestartInteractively":{"description":"These functions provide a mechanism for handling unusual conditions,\nincluding errors and warnings.\n","example_call":"invokeRestartInteractively(r)"},"base::getNamespaceExports":{"description":"Internal functions to support reflection on namespace objects.\n","example_call":"getNamespaceExports(ns)"},"base::subset.matrix":{"description":"Return subsets of vectors, matrices or data frames which meet conditions.\n","example_call":"subset.matrix(x, subset, select, drop = FALSE, ...)"},"base::forwardsolve":{"description":"Solves a triangular system of linear equations.\n","example_call":"forwardsolve(l, x, k = ncol(l), upper.tri = FALSE, transpose = FALSE)"},"base::dim<-":{"description":"Retrieve or set the dimension of an object.\n","example_call":"dim<-(x, value)"},"base::solve.default":{"description":"This generic function solves the equation a %*% x = b for x,\nwhere b can be either a vector or a matrix.\n","example_call":"solve.default(a, b, tol = .Machine$double.eps, LINPACK = FALSE, ...)"},"base::icuGetCollate":{"description":"Controls the way collation is done by ICU (an optional part of the R\nbuild).\n","example_call":"icuGetCollate(type = c(\"actual\", \"valid\"))"},"base::dirname":{"description":"basename removes all of the path up to and including the last\npath separator (if any).\n","example_call":"dirname(path)"},"base::as.data.frame.model.matrix":{"description":"Functions to check if an object is a data frame, or coerce it if possible.\n","example_call":"as.data.frame.model.matrix(x, row.names = NULL, optional = FALSE, make.names = TRUE,"},"base::Sys.info":{"description":"Reports system and user information.\n","example_call":"Sys.info()"},"base::as.Date.character":{"description":"Functions to convert between character representations and objects of\nclass \"Date\" representing calendar dates.\n","example_call":"as.Date.character(x, format, tryFormats = c(\"%Y-%m-%d\", \"%Y/%m/%d\"),"},"base::.encode_numeric_version":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":".encode_numeric_version(x)"},"base::xor":{"description":"These operators act on raw, logical and number-like vectors.\n","example_call":"xor(x, y)"},"base::quarters.POSIXt":{"description":"Extract the weekday, month or quarter, or the Julian time\n(days since some origin).  These are generic functions: the methods\nfor the internal date-time classes are documented here.\n","example_call":"quarters.POSIXt(x, ...)"},"base::allowInterrupts":{"description":"These functions provide a mechanism for handling unusual conditions,\nincluding errors and warnings.\n","example_call":"allowInterrupts(expr)"},"base::%in%":{"description":"match returns a vector of the positions of (first) matches of\nits first argument in its second.\n","example_call":"%in%(x, table)"},"base::julian":{"description":"Extract the weekday, month or quarter, or the Julian time\n(days since some origin).  These are generic functions: the methods\nfor the internal date-time classes are documented here.\n","example_call":"julian(x, ...)"},"base::intToBits":{"description":"Conversion to and from and manipulation of objects of type \"raw\",\nboth used as bits or <U+201C>packed<U+201D> 8 bits.\n","example_call":"intToBits(x)"},"base::validUTF8":{"description":"Check if each element of a character vector is valid in its implied\nencoding.\n","example_call":"validUTF8(x)"},"base::capabilities":{"description":"Report on the optional features which have been compiled into this\nbuild of R.\n","example_call":"capabilities(what = NULL, Xchk = any(nas %in% c(\"X11\", \"jpeg\", \"png\","},"base::oldClass<-":{"description":"R possesses a simple generic function mechanism which can be used for\nan object-oriented style of programming.  Method dispatch takes place\nbased on the class of the first argument to the generic function.\n","example_call":"oldClass<-(x, value)"},"base::print.simple.list":{"description":"print prints its argument and returns it invisibly (via\ninvisible(x)).  It is a generic function which means that\nnew printing methods can be easily added for new classes.\n","example_call":"print.simple.list(x, ...)"},"base::namespaceImport":{"description":"Internal namespace support functions.  Not intended to be called\ndirectly, and only visible because of the special nature of the\nbase namespace.\n","example_call":"namespaceImport(self, ..., from = NULL, except = character(0L))"},"base::geterrmessage":{"description":"stop stops execution of the current expression and executes\nan error action.\n","example_call":"geterrmessage()"},"base::delayedAssign":{"description":"delayedAssign creates a promise to evaluate the given\nexpression if its value is requested.  This provides direct access\nto the lazy evaluation mechanism used by R for the evaluation\nof (interpreted) functions.\n","example_call":"delayedAssign(x, value, eval.env = parent.frame(1), assign.env = parent.frame(1))"},"base::print.DLLRegisteredRoutines":{"description":"This function allows us to query the set of routines\nin a DLL that are registered with R to enhance\ndynamic lookup, error handling when calling native routines,\nand potentially security in the future.\nThis function provides a description of each of the\nregistered routines in the DLL for the different interfaces,\ni.e. .C, .Call, .Fortran\nand .External.\n","example_call":"print.DLLRegisteredRoutines(x, ...)"},"base::Sys.setlocale":{"description":"Get details of or set aspects of the locale for the R process.\n","example_call":"Sys.setlocale(category = \"LC_ALL\", locale = \"\")"},"base::difftime":{"description":"Time intervals creation, printing, and some arithmetic.  The\nprint() method calls these <U+201C>time differences<U+201D>.\n","example_call":"difftime(time1, time2, tz, units = c(\"auto\", \"secs\", \"mins\","},"base::[.Date":{"description":"Description of the class \"Date\" representing calendar dates.\n","example_call":"[.Date(x, ..., drop = TRUE)"},"base::..getNamespace":{"description":"Internal namespace support functions.  Not intended to be called\ndirectly, and only visible because of the special nature of the\nbase namespace.\n","example_call":"..getNamespace(name, where)"},"base::levels<-.factor":{"description":"levels provides access to the levels attribute of a variable.\nThe first form returns the value of the levels of its argument\nand the second sets the attribute.\n","example_call":"levels<-.factor(x, value)"},"base::range":{"description":"range returns a vector containing the minimum and maximum of\nall the given arguments.\n","example_call":"range(..., na.rm = FALSE)"},"base::unique.data.frame":{"description":"unique returns a vector, data frame or array like x\nbut with duplicate elements/rows removed.\n","example_call":"unique.data.frame(x, incomparables = FALSE, fromLast = FALSE, ...)"},"base::deparse":{"description":"Turn unevaluated expressions into character strings.\n","example_call":"deparse(expr, width.cutoff = 60L, backtick = mode(expr) %in%"},"base::pairlist":{"description":"Functions to construct, coerce and check for both kinds of R lists.\n","example_call":"pairlist(...)"},"base::sinpi":{"description":"These functions give the obvious trigonometric functions.  They\nrespectively compute the cosine, sine, tangent, arc-cosine, arc-sine,\narc-tangent, and the two-argument arc-tangent.\n","example_call":"sinpi(x)"},"base::summary.POSIXct":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"summary.POSIXct(object, digits = 15L, ...)"},"base::print.NativeRoutineList":{"description":"This function allows us to query the set of routines\nin a DLL that are registered with R to enhance\ndynamic lookup, error handling when calling native routines,\nand potentially security in the future.\nThis function provides a description of each of the\nregistered routines in the DLL for the different interfaces,\ni.e. .C, .Call, .Fortran\nand .External.\n","example_call":"print.NativeRoutineList(x, ...)"},"base::psigamma":{"description":"Special mathematical functions related to the beta and gamma\nfunctions.\n","example_call":"psigamma(x, deriv = 0L)"},"base::file.access":{"description":"Utility function to access information about files on the user's\nfile systems.\n","example_call":"file.access(names, mode = 0)"},"base::is.environment":{"description":"Get, set, test for and create environments.\n","example_call":"is.environment(x)"},"base::Math.factor":{"description":"The function factor is used to encode a vector as a factor (the\nterms <U+2018>category<U+2019> and <U+2018>enumerated type<U+2019> are also used for\nfactors).  If argument ordered is TRUE, the factor\nlevels are assumed to be ordered.  For compatibility with S there is\nalso a function ordered.\n","example_call":"Math.factor(x, ...)"},"base::getRversion":{"description":"A simple S3 class for representing numeric versions\nincluding package versions, and associated methods.","example_call":"getRversion()"},"base::droplevels":{"description":"The function droplevels is used to drop unused levels from a\nfactor or, more commonly, from factors in a data frame.\n","example_call":"droplevels(x, ...)"},"base::determinant.matrix":{"description":"det calculates the determinant of a matrix.  determinant\nis a generic function that returns separately the modulus of the determinant,\noptionally on the logarithm scale, and the sign of the determinant.\n","example_call":"determinant.matrix(x, logarithm = TRUE, ...)"},"base::stdout":{"description":"Display aspects of connections.\n","example_call":"stdout()"},"base::summary.POSIXlt":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"summary.POSIXlt(object, digits = 15, ...)"},"base::suspendInterrupts":{"description":"These functions provide a mechanism for handling unusual conditions,\nincluding errors and warnings.\n","example_call":"suspendInterrupts(expr)"},"base::tapply":{"description":"Apply a function to each cell of a ragged array, that is to each\n(non-empty) group of values or data rows given by a unique\ncombination of the levels of certain factors.\n","example_call":"tapply(X, INDEX, FUN = NULL, ..., default = NA, simplify = TRUE)"},"base::.F_dqrqty":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":"NULL"},"base::trace":{"description":"A call to trace allows you to insert debugging code (e.g., a\ncall to browser or recover) at chosen\nplaces in any function.  A call to untrace cancels the tracing.\nSpecified methods can be traced the same way, without tracing all\ncalls to the generic function.  Trace code (tracer) can be any\nR expression.  Tracing can be temporarily turned on or off globally\nby calling tracingState.\n","example_call":"trace(what, tracer, exit, at, print, signature, where = topenv(parent.frame()),"},"base::callCC":{"description":"A downward-only version of Scheme's call with current continuation.\n","example_call":"callCC(fun)"},"base::.getNamespace":{"description":"Internal namespace support functions.  Not intended to be called\ndirectly, and only visible because of the special nature of the\nbase namespace.\n","example_call":".getNamespace(name)"},"base::as.matrix.POSIXlt":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"as.matrix.POSIXlt(x, ...)"},"base::rowMeans":{"description":"Form row and column sums and means for numeric arrays (or data frames).\n","example_call":"rowMeans(x, na.rm = FALSE, dims = 1L)"},"base::.isOpen":{"description":"These functions are for working with source files and more generally\nwith <U+201C>source references<U+201D> (\"srcref\"), i.e., references to\nsource code.  The resulting data is used for printing and source level\ndebugging, and is typically available in interactive R sessions,\nnamely when options(keep.source = TRUE).\n","example_call":".isOpen(srcfile)"},"base::format.packageInfo":{"description":"library and require load and attach add-on packages.\n","example_call":"format.packageInfo(x, ...)"},"base::.F_dqrrsd":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":"NULL"},"base::print.default":{"description":"print.default is the default method of the generic\nprint function which prints its argument.\n","example_call":"print.default(x, digits = NULL, quote = TRUE, na.print = NULL, print.gap = NULL,"},"base::shQuote":{"description":"Quote a string to be passed to an operating system shell.\n","example_call":"shQuote(string, type = c(\"sh\", \"csh\", \"cmd\", \"cmd2\"))"},"base::cut.default":{"description":"cut divides the range of x into intervals\nand codes the values in x according to which\ninterval they fall.  The leftmost interval corresponds to level one,\nthe next leftmost to level two and so on.\n","example_call":"cut.default(x, breaks, labels = NULL, include.lowest = FALSE, right = TRUE,"},"base::range.default":{"description":"range returns a vector containing the minimum and maximum of\nall the given arguments.\n","example_call":"range.default(..., na.rm = FALSE, finite = FALSE)"},"base::structure":{"description":"structure returns the given object with further\nattributes set.\n","example_call":"structure(.Data, ...)"},"base::mode":{"description":"Get or set the <U+2018>mode<U+2019> (a kind of <U+2018>type<U+2019>), or the storage\nmode of an R object.\n","example_call":"mode(x)"},"base::Ops.difftime":{"description":"Time intervals creation, printing, and some arithmetic.  The\nprint() method calls these <U+201C>time differences<U+201D>.\n","example_call":"Ops.difftime(e1, e2)"},"base::attributes":{"description":"These functions access an object's attributes.\nThe first form below returns the object's attribute list.\nThe replacement forms uses the list on the right-hand\nside of the assignment as the object's attributes (if appropriate).\n","example_call":"attributes(x)"},"base::as.POSIXct":{"description":"Functions to manipulate objects of classes \"POSIXlt\" and\n\"POSIXct\" representing calendar dates and times.\n","example_call":"as.POSIXct(x, tz = \"\", ...)"},"base::all.names":{"description":"Return a character vector containing all the names which occur in an\nexpression or call.\n","example_call":"all.names(expr, functions = TRUE, max.names = -1L, unique = FALSE)"},"base::as.character":{"description":"Create or test for objects of type \"character\".\n","example_call":"as.character(x, ...)"},"base::as.POSIXlt":{"description":"Functions to manipulate objects of classes \"POSIXlt\" and\n\"POSIXct\" representing calendar dates and times.\n","example_call":"as.POSIXlt(x, tz = \"\", ...)"},"base::sort.default":{"description":"Sort (or order) a vector or factor (partially) into\nascending or descending order.  For ordering along more than one\nvariable, e.g., for sorting data frames, see order.\n","example_call":"sort.default(x, decreasing = FALSE, na.last = NA, ...)"},"base::simpleCondition":{"description":"These functions provide a mechanism for handling unusual conditions,\nincluding errors and warnings.\n","example_call":"simpleCondition(message, call = NULL)"},"base::within.data.frame":{"description":"Evaluate an R expression in an environment constructed from data,\npossibly modifying (a copy of) the original data.\n","example_call":"within.data.frame(data, expr, ...)"},"base::row.names<-.data.frame":{"description":"All data frames have row names, a character vector of\nlength the number of rows with no duplicates nor missing values.\n","example_call":"row.names<-.data.frame(x, value)"},"base::endsWith":{"description":"Determines if entries of x start or end with string (entries of)\nprefix or suffix respectively, where strings are\nrecycled to common lengths.\n","example_call":"endsWith(x, suffix)"},"base::print.connection":{"description":"Functions to create, open and close connections, i.e.,\n<U+201C>generalized files<U+201D>, such as possibly compressed files, URLs,\npipes, etc.\n","example_call":"print.connection(x, ...)"},"base::&.octmode":{"description":"Integers which are displayed in octal (base-8 number system) format, with as\nmany digits as are needed to display the largest, using leading zeroes as\nnecessary.\n","example_call":"&.octmode(a, b)"},"base::parent.env<-":{"description":"Get, set, test for and create environments.\n","example_call":"parent.env<-(env, value)"},"base::split.default":{"description":"split divides the data in the vector x into the groups\ndefined by f.  The replacement forms replace values\ncorresponding to such a division.  unsplit reverses the effect of\nsplit.\n","example_call":"split.default(x, f, drop = FALSE, sep = \".\", lex.order = FALSE, ...)"},"base::asS3":{"description":"Tests whether the object is an instance of an S4 class.\n","example_call":"asS3(object, flag = TRUE, complete = TRUE)"},"base::asS4":{"description":"Tests whether the object is an instance of an S4 class.\n","example_call":"asS4(object, flag = TRUE, complete = TRUE)"},"base::with.default":{"description":"Evaluate an R expression in an environment constructed from data,\npossibly modifying (a copy of) the original data.\n","example_call":"with.default(data, expr, ...)"},"base::balancePOSIXlt":{"description":"Utilities to <U+2018>balance<U+2019> objects of class \"POSIXlt\".\n","example_call":"balancePOSIXlt(x, fill.only = FALSE, classed = TRUE)"},"base::args":{"description":"Displays the argument names and corresponding default values of a\n(non-primitive or primitive) function.\n","example_call":"args(name)"},"base::break":{"description":"These are the basic control-flow constructs of the R language.  They\nfunction in much the same way as control statements in any Algol-like\nlanguage.  They are all reserved words.\n","example_call":"NULL"},"base::R_system_version":{"description":"A simple S3 class for representing numeric versions\nincluding package versions, and associated methods.","example_call":"R_system_version(x, strict = TRUE)"},"base::matrix":{"description":"matrix creates a matrix from the given set of values.\n","example_call":"matrix(data = NA, nrow = 1, ncol = 1, byrow = FALSE, dimnames = NULL)"},"base::is.na.POSIXlt":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"is.na.POSIXlt(x)"},"base::basename":{"description":"basename removes all of the path up to and including the last\npath separator (if any).\n","example_call":"basename(path)"},"base::lbeta":{"description":"Special mathematical functions related to the beta and gamma\nfunctions.\n","example_call":"lbeta(a, b)"},"base::asin":{"description":"These functions give the obvious trigonometric functions.  They\nrespectively compute the cosine, sine, tangent, arc-cosine, arc-sine,\narc-tangent, and the two-argument arc-tangent.\n","example_call":"asin(x)"},"base::summary.default":{"description":"summary is a generic function used to produce result summaries\nof the results of various model fitting functions.  The function\ninvokes particular methods which depend on the\nclass of the first argument.\n","example_call":"summary.default(object, ..., digits, quantile.type = 7)"},"base::file.append":{"description":"These functions provide a low-level interface to the computer's\nfile system.\n","example_call":"file.append(file1, file2)"},"base::srcfile":{"description":"These functions are for working with source files and more generally\nwith <U+201C>source references<U+201D> (\"srcref\"), i.e., references to\nsource code.  The resulting data is used for printing and source level\ndebugging, and is typically available in interactive R sessions,\nnamely when options(keep.source = TRUE).\n","example_call":"srcfile(filename, encoding = getOption(\"encoding\"), Enc = \"unknown\")"},"base::Sys.which":{"description":"This is an interface to the system command which, or to an\nemulation on Windows.\n","example_call":"Sys.which(names)"},"base::ncol":{"description":"nrow and ncol return the number of rows or columns\npresent in x.\nNCOL and NROW do the same treating a vector as\n1-column matrix, even a 0-length vector, compatibly with\nas.matrix() or cbind(), see the example.\n","example_call":"ncol(x)"},"base::return":{"description":"These functions provide the base mechanisms for defining\nnew functions in the R language.\n","example_call":"NULL"},"base::atan":{"description":"These functions give the obvious trigonometric functions.  They\nrespectively compute the cosine, sine, tangent, arc-cosine, arc-sine,\narc-tangent, and the two-argument arc-tangent.\n","example_call":"atan(x)"},"base::eapply":{"description":"eapply applies FUN to the named values from an\nenvironment and returns the results as a list.  The user\ncan request that all named objects are used (normally names that begin\nwith a dot are not).  The output is not sorted and no enclosing\nenvironments are searched.\n","example_call":"eapply(env, FUN, ..., all.names = FALSE, USE.NAMES = TRUE)"},"base::rep.POSIXct":{"description":"rep replicates the values in x.  It is a generic\nfunction, and the (internal) default method is described here.\n","example_call":"rep.POSIXct(x, ...)"},"base::rep.POSIXlt":{"description":"rep replicates the values in x.  It is a generic\nfunction, and the (internal) default method is described here.\n","example_call":"rep.POSIXlt(x, ...)"},"base::socketConnection":{"description":"Functions to create, open and close connections, i.e.,\n<U+201C>generalized files<U+201D>, such as possibly compressed files, URLs,\npipes, etc.\n","example_call":"socketConnection(host = \"localhost\", port, server = FALSE, blocking = FALSE,"},"base::format.Date":{"description":"Functions to convert between character representations and objects of\nclass \"Date\" representing calendar dates.\n","example_call":"format.Date(x, format = \"%Y-%m-%d\", ...)"},"base::getConnection":{"description":"Display aspects of connections.\n","example_call":"getConnection(what)"},"base::tryCatch":{"description":"These functions provide a mechanism for handling unusual conditions,\nincluding errors and warnings.\n","example_call":"tryCatch(expr, ..., finally)"},"base::attr":{"description":"Get or set specific attributes of an object.\n","example_call":"attr(x, which, exact = FALSE)"},"base::tracemem":{"description":"This function marks an object so that a message is printed whenever the\ninternal code copies the object.  It is a\nmajor cause of hard-to-predict memory use in R.\n","example_call":"tracemem(x)"},"base::as.data.frame.ordered":{"description":"These functions are provided for compatibility with older versions of\nR only, and may be defunct as soon as the next release.\n","example_call":"as.data.frame.ordered(x, row.names = NULL, optional = FALSE, ..., nm = deparse1(substitute(x)))"},"base::format.hexmode":{"description":"Integers which are displayed in hexadecimal (short <U+2018>hex<U+2019>) format,\nwith as many digits as are needed to display the largest, using leading\nzeroes as necessary.\n","example_call":"format.hexmode(x, width = NULL, upper.case = FALSE, ...)"},"base::beta":{"description":"Special mathematical functions related to the beta and gamma\nfunctions.\n","example_call":"beta(a, b)"},"base::seq.POSIXt":{"description":"The method for seq for date-time classes.\n","example_call":"seq.POSIXt(from, to, by, length.out = NULL, along.with = NULL,"},"base::summary.Date":{"description":"Description of the class \"Date\" representing calendar dates.\n","example_call":"summary.Date(object, digits = 12L, ...)"},"base::next":{"description":"These are the basic control-flow constructs of the R language.  They\nfunction in much the same way as control statements in any Algol-like\nlanguage.  They are all reserved words.\n","example_call":"NULL"},"base::Sys.getlocale":{"description":"Get details of or set aspects of the locale for the R process.\n","example_call":"Sys.getlocale(category = \"LC_ALL\")"},"base::lower.tri":{"description":"Returns a matrix of logicals the same size of a given matrix with\nentries TRUE in the lower or upper triangle.\n","example_call":"lower.tri(x, diag = FALSE)"},"base::rbind":{"description":"Take a sequence of vector, matrix or data-frame arguments and combine\nby columns or rows, respectively.  These are generic\nfunctions with methods for other R classes.\n","example_call":"rbind(..., deparse.level = 1)"},"base::union":{"description":"Performs set union, intersection, (asymmetric!) difference,\nequality and membership on two vectors.\n","example_call":"union(x, y)"},"base::write":{"description":"Write data x to a file or other connection.\n\nAs it simply calls cat(), less formatting happens than\nwith print()ing.\nIf x is a matrix you need to transpose it (and typically set\nncolumns) to get the columns in file the same as those in\nthe internal representation.\n","example_call":"write(x, file = \"data\", ncolumns = if (is.character(x)) 1 else 5,"},"base::units":{"description":"Get or set units.","example_call":"units(x)"},"base::cbind":{"description":"Take a sequence of vector, matrix or data-frame arguments and combine\nby columns or rows, respectively.  These are generic\nfunctions with methods for other R classes.\n","example_call":"cbind(..., deparse.level = 1)"},"base::dim.data.frame":{"description":"Retrieve or set the dimension of an object.\n","example_call":"dim.data.frame(x)"},"base::t.data.frame":{"description":"Given a matrix or data.frame x,\nt returns the transpose of x.\n","example_call":"t.data.frame(x)"},"base::month.abb":{"description":"Constants built into R.\n","example_call":"NULL"},"base::diag<-":{"description":"Extract or replace the diagonal of a matrix,\nor construct a diagonal matrix.\n","example_call":"diag<-(x, value)"},"base::Sys.unsetenv":{"description":"Sys.setenv sets environment variables (for other processes\ncalled from within R or future calls to Sys.getenv from\nthis R process).\n","example_call":"Sys.unsetenv(x)"},"base::dyn.unload":{"description":"Load or unload DLLs (also known as shared objects), and test whether a\nC function or Fortran subroutine is available.\n","example_call":"dyn.unload(x)"},"base::scale.default":{"description":"scale is generic function whose default method centers and/or\nscales the columns of a numeric matrix.\n","example_call":"scale.default(x, center = TRUE, scale = TRUE)"},"base::invokeRestart":{"description":"These functions provide a mechanism for handling unusual conditions,\nincluding errors and warnings.\n","example_call":"invokeRestart(r, ...)"},"base::is.na<-.factor":{"description":"The function factor is used to encode a vector as a factor (the\nterms <U+2018>category<U+2019> and <U+2018>enumerated type<U+2019> are also used for\nfactors).  If argument ordered is TRUE, the factor\nlevels are assumed to be ordered.  For compatibility with S there is\nalso a function ordered.\n","example_call":"is.na<-.factor(x, value)"},"base::as.data.frame.integer":{"description":"These functions are provided for compatibility with older versions of\nR only, and may be defunct as soon as the next release.\n","example_call":"as.data.frame.integer(x, row.names = NULL, optional = FALSE, ..., nm = deparse1(substitute(x)))"},"base::all.equal.language":{"description":"all.equal(x, y) is a utility to compare R objects x\nand y testing <U+2018>near equality<U+2019>.  If they are different,\ncomparison is still made to some extent, and a report of the\ndifferences is returned.    Do not use all.equal directly in\nif expressions<U+2014>either use isTRUE(all.equal(....)) or\nidentical if appropriate.\n","example_call":"all.equal.language(target, current, ...)"},"base::bitwOr":{"description":"Logical operations on integer vectors with elements viewed as sets of bits.\n","example_call":"bitwOr(a, b)"},"base::.packageStartupMessage":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":".packageStartupMessage(message, call = NULL)"},"base::close.connection":{"description":"Functions to create, open and close connections, i.e.,\n<U+201C>generalized files<U+201D>, such as possibly compressed files, URLs,\npipes, etc.\n","example_call":"close.connection(con, type = \"rw\", ...)"},"base::row.names<-":{"description":"All data frames have row names, a character vector of\nlength the number of rows with no duplicates nor missing values.\n","example_call":"row.names<-(x, value)"},"base::trimws":{"description":"Remove leading and/or trailing whitespace from character strings.\n","example_call":"trimws(x, which = c(\"both\", \"left\", \"right\"), whitespace = \"[ \\t\\r\\n]\")"},"base::.Call.graphics":{"description":"Internal versions of .Call and .External.\n","example_call":".Call.graphics(.NAME, ..., PACKAGE)"},"base::.C_R_addTaskCallback":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":"NULL"},"base::unserialize":{"description":"A simple low-level interface for serializing to connections.\n","example_call":"unserialize(connection, refhook = NULL)"},"base::[[.data.frame":{"description":"Extract or replace subsets of data frames.\n","example_call":"[[.data.frame(x, ..., exact = TRUE)"},"base::.amatch_bounds":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":".amatch_bounds(x = 0.1)"},"base::.S3_methods_table":{"description":"Internal namespace support functions.  Not intended to be called\ndirectly, and only visible because of the special nature of the\nbase namespace.\n","example_call":"NULL"},"base::.row_names_info":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":".row_names_info(x, type = 1L)"},"base::standardGeneric":{"description":"The function standardGeneric initiates dispatch of S4\nmethods: see the references and the documentation of the\nmethods package.  Usually, calls to this function are\ngenerated automatically and not explicitly by the programmer.\n","example_call":"standardGeneric(f, fdef)"},"base::.F_dqrdc2":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":"NULL"},"base::[.Dlist":{"description":"Operators acting on vectors, matrices, arrays and lists to extract or\nreplace parts.\n","example_call":"[.Dlist(x, i, ...)"},"base::is.nan.POSIXlt":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"is.nan.POSIXlt(x)"},"base::as.data.frame.Date":{"description":"These functions are provided for compatibility with older versions of\nR only, and may be defunct as soon as the next release.\n","example_call":"as.data.frame.Date(x, row.names = NULL, optional = FALSE, ..., nm = deparse1(substitute(x)))"},"base::R.home":{"description":"Return the R home directory, or the full path to a component of the\nR installation.\n","example_call":"R.home(component = \"home\")"},"base::unique.default":{"description":"unique returns a vector, data frame or array like x\nbut with duplicate elements/rows removed.\n","example_call":"unique.default(x, incomparables = FALSE, fromLast = FALSE, nmax = NA,"},"base::sys.frame":{"description":"These functions provide access to environments\n(<U+2018>frames<U+2019> in S terminology) associated with functions further\nup the calling stack.\n","example_call":"sys.frame(which = 0L)"},"base::sys.source":{"description":"Parses expressions in the given file, and then successively evaluates\nthem in the specified environment.\n","example_call":"sys.source(file, envir = baseenv(), chdir = FALSE, keep.source = getOption(\"keep.source.pkgs\"),"},"base::as.double.POSIXlt":{"description":"Functions to manipulate objects of classes \"POSIXlt\" and\n\"POSIXct\" representing calendar dates and times.\n","example_call":"as.double.POSIXlt(x, ...)"},"base::clearPushBack":{"description":"Functions to push back text lines onto a connection, and to enquire\nhow many lines are currently pushed back.\n","example_call":"clearPushBack(connection)"},"base::%||%":{"description":"These are the basic control-flow constructs of the R language.  They\nfunction in much the same way as control statements in any Algol-like\nlanguage.  They are all reserved words.\n","example_call":"%||%(x, y)"},"base::.leap.seconds":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"NULL"},"base::.mapply":{"description":"mapply is a multivariate version of sapply.\nmapply applies FUN to the first elements of each ...\nargument, the second elements, the third elements, and so on.\nArguments are recycled if necessary.\n","example_call":".mapply(FUN, dots, MoreArgs)"},"base::bindtextdomain":{"description":"Translation of text messages typically from calls to\nstop(), warning(), or message()\nhappens when Native Language Support (NLS) was enabled in this build of\nR as it is almost always, see also the bindtextdomain() example.\n","example_call":"bindtextdomain(domain, dirname = NULL)"},"base::lgamma":{"description":"Special mathematical functions related to the beta and gamma\nfunctions.\n","example_call":"lgamma(x)"},"base::aperm.table":{"description":"Transpose an array by permuting its dimensions and optionally resizing\nit.\n","example_call":"aperm.table(a, perm = NULL, resize = TRUE, keep.class = TRUE, ...)"},"base::getLoadedDLLs":{"description":"This function provides a way to get a list of all the DLLs (see\ndyn.load) that are currently loaded in the R session.\n","example_call":"getLoadedDLLs()"},"base::subset.data.frame":{"description":"Return subsets of vectors, matrices or data frames which meet conditions.\n","example_call":"subset.data.frame(x, subset, select, drop = FALSE, ...)"},"base::as.Date.factor":{"description":"Functions to convert between character representations and objects of\nclass \"Date\" representing calendar dates.\n","example_call":"as.Date.factor(x, ...)"},"base::format.libraryIQR":{"description":"library and require load and attach add-on packages.\n","example_call":"format.libraryIQR(x, ...)"},"base::unique":{"description":"unique returns a vector, data frame or array like x\nbut with duplicate elements/rows removed.\n","example_call":"unique(x, incomparables = FALSE, ...)"},"base::as.data.frame.difftime":{"description":"These functions are provided for compatibility with older versions of\nR only, and may be defunct as soon as the next release.\n","example_call":"as.data.frame.difftime(x, row.names = NULL, optional = FALSE, ..., nm = deparse1(substitute(x)))"},"base::merge.default":{"description":"Merge two data frames by common columns or row names, or do other\nversions of database join operations.\n","example_call":"merge.default(x, y, ...)"},"base::ifelse":{"description":"ifelse returns a value with the same shape as\ntest which is filled with elements selected\nfrom either yes or no\ndepending on whether the element of test\nis TRUE or FALSE.\n","example_call":"ifelse(test, yes, no)"},"base::is.atomic":{"description":"is.atomic returns TRUE if x is of an atomic type\nand FALSE otherwise.\n","example_call":"is.atomic(x)"},"base::+.Date":{"description":"Operators for the \"Date\" class.\n","example_call":"+.Date(e1, e2)"},"base::sort_by.default":{"description":"Generic function to sort an object in the order determined by one or\nmore other objects, typically vectors. A method is defined for data\nframes to sort its rows (typically by one or more columns), and the\ndefault method handles vector-like objects.\n","example_call":"sort_by.default(x, y, ...)"},"base::sys.parents":{"description":"These functions provide access to environments\n(<U+2018>frames<U+2019> in S terminology) associated with functions further\nup the calling stack.\n","example_call":"sys.parents()"},"base::body":{"description":"Get or set the body of a function which is basically all of\nthe function definition but its formal arguments (formals),\nsee the <U+2018>Details<U+2019>.\n","example_call":"body(fun = sys.function(sys.parent()))"},"base::as.character.default":{"description":"Create or test for objects of type \"character\".\n","example_call":"as.character.default(x, ...)"},"base::rep.int":{"description":"rep replicates the values in x.  It is a generic\nfunction, and the (internal) default method is described here.\n","example_call":"rep.int(x, times)"},"base::as.data.frame.array":{"description":"Functions to check if an object is a data frame, or coerce it if possible.\n","example_call":"as.data.frame.array(x, row.names = NULL, optional = FALSE, ...)"},"base::xtfrm.Date":{"description":"A generic auxiliary function that produces a numeric vector which\nwill sort in the same order as x.\n","example_call":"xtfrm.Date(x)"},"base::norm":{"description":"Computes a matrix norm of x using LAPACK.  The norm can be\nthe one (\"O\") norm, the infinity (\"I\") norm, the\nFrobenius (\"F\") norm, the maximum modulus (\"M\") among\nelements of a matrix, or the <U+201C>spectral<U+201D> or \"2\"-norm, as\ndetermined by the value of type.\n","example_call":"norm(x, type = c(\"O\", \"I\", \"F\", \"M\", \"2\"))"},"base::split<-.data.frame":{"description":"split divides the data in the vector x into the groups\ndefined by f.  The replacement forms replace values\ncorresponding to such a division.  unsplit reverses the effect of\nsplit.\n","example_call":"split<-.data.frame(x, f, drop = FALSE, ..., value)"},"base::as.list.factor":{"description":"Functions to construct, coerce and check for both kinds of R lists.\n","example_call":"as.list.factor(x, ...)"},"base::retracemem":{"description":"This function marks an object so that a message is printed whenever the\ninternal code copies the object.  It is a\nmajor cause of hard-to-predict memory use in R.\n","example_call":"retracemem(x, previous = NULL)"},"base::local":{"description":"Evaluate an R expression in a specified environment.\n","example_call":"local(expr, envir = new.env())"},"base::expression":{"description":"Creates or tests for objects of mode and class \"expression\".\n","example_call":"expression(...)"},"base::Reduce":{"description":"If init is given, Reduce logically adds it to the start\n(when proceeding left to right) or the end of x, respectively.\nIf this possibly augmented vector v has n > 1 elements,\nReduce successively applies f to the elements of v\nfrom left to right or right to left, respectively.  I.e., a left\nreduce computes l_1 = f(v_1, v_2), l_2 = f(l_1, v_3), etc.,\nand returns l_{n-1} = f(l_{n-2}, v_n), and a right reduce does\nr_{n-1} = f(v_{n-1}, v_n), r_{n-2} = f(v_{n-2}, r_{n-1})\nand returns r_1 = f(v_1, r_2).  (E.g., if v is the\nsequence (2, 3, 4) and f is division, left and right reduce give\n(2 / 3) / 4 = 1/6 and 2 / (3 / 4) = 8/3, respectively.)\nIf v has only a single element, this is returned; if there are\nno elements, NULL is returned.  Thus, it is ensured that\nf is always called with 2 arguments.\n","example_call":"Reduce(f, x, init, right = FALSE, accumulate = FALSE, simplify = TRUE)"},"base::signalCondition":{"description":"These functions provide a mechanism for handling unusual conditions,\nincluding errors and warnings.\n","example_call":"signalCondition(cond)"},"base::validEnc":{"description":"Check if each element of a character vector is valid in its implied\nencoding.\n","example_call":"validEnc(x)"},"base::log10":{"description":"log computes logarithms, by default natural logarithms,\nlog10 computes common (i.e., base 10) logarithms, and\nlog2 computes binary (i.e., base 2) logarithms.\nThe general form log(x, base) computes logarithms with base\nbase.\n","example_call":"log10(x)"},"base::isSymmetric":{"description":"Generic function to test if object is symmetric or not.\nCurrently only a matrix method is implemented, where a\ncomplex matrix Z must be <U+201C>Hermitian<U+201D> for\nisSymmetric(Z) to be true.\n","example_call":"isSymmetric(object, ...)"},"base::log1p":{"description":"log computes logarithms, by default natural logarithms,\nlog10 computes common (i.e., base 10) logarithms, and\nlog2 computes binary (i.e., base 2) logarithms.\nThe general form log(x, base) computes logarithms with base\nbase.\n","example_call":"log1p(x)"},"base::is.expression":{"description":"Creates or tests for objects of mode and class \"expression\".\n","example_call":"is.expression(x)"},"base::tryInvokeRestart":{"description":"These functions provide a mechanism for handling unusual conditions,\nincluding errors and warnings.\n","example_call":"tryInvokeRestart(r, ...)"},"base::is.unsorted":{"description":"Test if an object is not sorted (in increasing order), without the\ncost of sorting it.\n","example_call":"is.unsorted(x, na.rm = FALSE, strictly = FALSE)"},"base::droplevels.data.frame":{"description":"The function droplevels is used to drop unused levels from a\nfactor or, more commonly, from factors in a data frame.\n","example_call":"droplevels.data.frame(x, except = NULL, exclude, ...)"},"base::sys.parent":{"description":"These functions provide access to environments\n(<U+2018>frames<U+2019> in S terminology) associated with functions further\nup the calling stack.\n","example_call":"sys.parent(n = 1L)"},"base::call":{"description":"Create or test for objects of mode \"call\" (or\n\"(\", see Details).\n","example_call":"call(name, ...)"},"base::is.object":{"description":"A function mostly for internal use.  It returns TRUE if the\nobject x has the R internal OBJECT bit set, and\nFALSE otherwise.  The OBJECT bit is set when a\n\"class\" attribute is added and removed when that attribute is\nremoved, so this is a very efficient way to check if an object has a\nclass attribute.  (S4 objects always should.)\n","example_call":"is.object(x)"},"base::pos.to.env":{"description":"Returns the environment at a specified position in the search path.\n","example_call":"pos.to.env(x)"},"base::as.POSIXlt.character":{"description":"Functions to manipulate objects of classes \"POSIXlt\" and\n\"POSIXct\" representing calendar dates and times.\n","example_call":"as.POSIXlt.character(x, tz = \"\", format, tryFormats = c(\"%Y-%m-%d %H:%M:%OS\","},"base::attributes<-":{"description":"These functions access an object's attributes.\nThe first form below returns the object's attribute list.\nThe replacement forms uses the list on the right-hand\nside of the assignment as the object's attributes (if appropriate).\n","example_call":"attributes<-(x, value)"},"base::sweep":{"description":"Return an array obtained from an input array by sweeping out a summary\nstatistic.\n","example_call":"sweep(x, MARGIN, STATS, FUN = \"-\", check.margin = TRUE, ...)"},"base::.C_R_removeTaskCallback":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":"NULL"},"base::.libPaths":{"description":".libPaths gets/sets the library trees within which packages are\nlooked for.\n","example_call":".libPaths(new, include.site = TRUE)"},"base::.getNamespaceInfo":{"description":"Internal namespace support functions.  Not intended to be called\ndirectly, and only visible because of the special nature of the\nbase namespace.\n","example_call":".getNamespaceInfo(ns, which)"},"base::trunc.POSIXt":{"description":"Round or truncate date-time objects.\n","example_call":"trunc.POSIXt(x, units = c(\"secs\", \"mins\", \"hours\", \"days\", \"months\","},"base::encodeString":{"description":"encodeString escapes the strings in a character vector in the\nsame way print.default does, and optionally fits the encoded\nstrings within a field width.\n","example_call":"encodeString(x, width = 0L, quote = \"\", na.encode = TRUE, justify = c(\"left\","},"base::trunc":{"description":"ceiling takes a single numeric argument x and returns a\nnumeric vector containing the smallest integers not less than the\ncorresponding elements of x.\n","example_call":"trunc(x, ...)"},"base::system.time":{"description":"Return CPU (and other) times that expr used.\n","example_call":"system.time(expr, gcFirst = TRUE)"},"base::all.equal.POSIXt":{"description":"all.equal(x, y) is a utility to compare R objects x\nand y testing <U+2018>near equality<U+2019>.  If they are different,\ncomparison is still made to some extent, and a report of the\ndifferences is returned.    Do not use all.equal directly in\nif expressions<U+2014>either use isTRUE(all.equal(....)) or\nidentical if appropriate.\n","example_call":"all.equal.POSIXt(target, current, ..., tolerance = 0.001, scale, check.tzone = TRUE)"},"base::[.hexmode":{"description":"Integers which are displayed in hexadecimal (short <U+2018>hex<U+2019>) format,\nwith as many digits as are needed to display the largest, using leading\nzeroes as necessary.\n","example_call":"[.hexmode(x, i)"},"base::bitwShiftR":{"description":"Logical operations on integer vectors with elements viewed as sets of bits.\n","example_call":"bitwShiftR(a, n)"},"base::nrow":{"description":"nrow and ncol return the number of rows or columns\npresent in x.\nNCOL and NROW do the same treating a vector as\n1-column matrix, even a 0-length vector, compatibly with\nas.matrix() or cbind(), see the example.\n","example_call":"nrow(x)"},"base::bitwShiftL":{"description":"Logical operations on integer vectors with elements viewed as sets of bits.\n","example_call":"bitwShiftL(a, n)"},"base::print.restart":{"description":"These functions provide a mechanism for handling unusual conditions,\nincluding errors and warnings.\n","example_call":"print.restart(x, ...)"},"base::RNGversion":{"description":".Random.seed is an integer vector, containing the random number\ngenerator (RNG) state for random number generation in R.  It\ncan be saved and restored, but should not be altered by the user.\n","example_call":"RNGversion(vstr)"},"base::sort.POSIXlt":{"description":"Sort (or order) a vector or factor (partially) into\nascending or descending order.  For ordering along more than one\nvariable, e.g., for sorting data frames, see order.\n","example_call":"sort.POSIXlt(x, decreasing = FALSE, na.last = NA, ...)"},"base::print.POSIXct":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"print.POSIXct(x, tz = \"\", usetz = TRUE, max = NULL, ...)"},"base::[.table":{"description":"table uses cross-classifying factors to build a contingency\ntable of the counts at each combination of factor levels.\n","example_call":"[.table(x, i, j, ..., drop = TRUE)"},"base::.S3method":{"description":"Register S3 methods in R scripts.\n","example_call":".S3method(generic, class, method)"},"base::print.POSIXlt":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"print.POSIXlt(x, tz = \"\", usetz = TRUE, max = NULL, ...)"},"base::withVisible":{"description":"This function evaluates an expression, returning it in a two element list\ncontaining its value and a flag showing whether it would automatically print.\n","example_call":"withVisible(x)"},"base::file.create":{"description":"These functions provide a low-level interface to the computer's\nfile system.\n","example_call":"file.create(..., showWarnings = TRUE)"},"base::getHook":{"description":"These functions allow users to set actions to be taken before packages\nare attached/detached and namespaces are (un)loaded.\n","example_call":"getHook(hookName)"},"base::as.data.frame.list":{"description":"Functions to check if an object is a data frame, or coerce it if possible.\n","example_call":"as.data.frame.list(x, row.names = NULL, optional = FALSE, ..., cut.names = FALSE,"},"base::row.names.default":{"description":"All data frames have row names, a character vector of\nlength the number of rows with no duplicates nor missing values.\n","example_call":"row.names.default(x)"},"base::print.AsIs":{"description":"Change the class of an object to indicate that it should be treated\n<U+2018>as is<U+2019>.\n","example_call":"print.AsIs(x, ...)"},"base::Filter":{"description":"If init is given, Reduce logically adds it to the start\n(when proceeding left to right) or the end of x, respectively.\nIf this possibly augmented vector v has n > 1 elements,\nReduce successively applies f to the elements of v\nfrom left to right or right to left, respectively.  I.e., a left\nreduce computes l_1 = f(v_1, v_2), l_2 = f(l_1, v_3), etc.,\nand returns l_{n-1} = f(l_{n-2}, v_n), and a right reduce does\nr_{n-1} = f(v_{n-1}, v_n), r_{n-2} = f(v_{n-2}, r_{n-1})\nand returns r_1 = f(v_1, r_2).  (E.g., if v is the\nsequence (2, 3, 4) and f is division, left and right reduce give\n(2 / 3) / 4 = 1/6 and 2 / (3 / 4) = 8/3, respectively.)\nIf v has only a single element, this is returned; if there are\nno elements, NULL is returned.  Thus, it is ensured that\nf is always called with 2 arguments.\n","example_call":"Filter(f, x)"},"base::options":{"description":"Allow the user to set and examine a variety of global options\nwhich affect the way in which R computes and displays its results.\n","example_call":"options(...)"},"base::single":{"description":"Create, coerce to or test for a double-precision vector.\n","example_call":"single(length = 0L)"},"base::attr.all.equal":{"description":"all.equal(x, y) is a utility to compare R objects x\nand y testing <U+2018>near equality<U+2019>.  If they are different,\ncomparison is still made to some extent, and a report of the\ndifferences is returned.    Do not use all.equal directly in\nif expressions<U+2014>either use isTRUE(all.equal(....)) or\nidentical if appropriate.\n","example_call":"attr.all.equal(target, current, ..., check.attributes = TRUE, check.names = TRUE)"},"base::length<-.POSIXct":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"length<-.POSIXct(x, value)"},"base::.primUntrace":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":".primUntrace(obj)"},"base::factorial":{"description":"Special mathematical functions related to the beta and gamma\nfunctions.\n","example_call":"factorial(x)"},"base::lfactorial":{"description":"Special mathematical functions related to the beta and gamma\nfunctions.\n","example_call":"lfactorial(x)"},"base::length<-.POSIXlt":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"length<-.POSIXlt(x, value)"},"base::colnames":{"description":"Retrieve or set the row or column names of a matrix-like object.\n","example_call":"colnames(x, do.NULL = TRUE, prefix = \"col\")"},"base::dontCheck":{"description":"The dontCheck function is the same as identity, but \nis interpreted by R CMD check code analysis as a directive\nto suppress checking of x.  Currently this is only used by\ncheckFF(registration = TRUE)\nwhen checking the .NAME argument of foreign function calls.\n","example_call":"dontCheck(x)"},"base::.Options":{"description":"Allow the user to set and examine a variety of global options\nwhich affect the way in which R computes and displays its results.\n","example_call":"NULL"},"base::all.equal.list":{"description":"all.equal(x, y) is a utility to compare R objects x\nand y testing <U+2018>near equality<U+2019>.  If they are different,\ncomparison is still made to some extent, and a report of the\ndifferences is returned.    Do not use all.equal directly in\nif expressions<U+2014>either use isTRUE(all.equal(....)) or\nidentical if appropriate.\n","example_call":"all.equal.list(target, current, ..., check.attributes = TRUE, use.names = TRUE)"},"base::levels":{"description":"levels provides access to the levels attribute of a variable.\nThe first form returns the value of the levels of its argument\nand the second sets the attribute.\n","example_call":"levels(x)"},"base::.colMeans":{"description":"Form row and column sums and means for numeric arrays (or data frames).\n","example_call":".colMeans(x, m, n, na.rm = FALSE)"},"base::levels<-":{"description":"levels provides access to the levels attribute of a variable.\nThe first form returns the value of the levels of its argument\nand the second sets the attribute.\n","example_call":"levels<-(x, value)"},"base::labels":{"description":"Find a suitable set of labels from an object for use in printing or\nplotting, for example.  A generic function.\n","example_call":"labels(object, ...)"},"base::.dynLibs":{"description":"Load the specified file of compiled code if it has not been loaded\nalready, or unloads it.\n","example_call":".dynLibs(new)"},"base::isatty":{"description":"Display aspects of connections.\n","example_call":"isatty(con)"},"base::file.remove":{"description":"These functions provide a low-level interface to the computer's\nfile system.\n","example_call":"file.remove(...)"},"base::ordered":{"description":"The function factor is used to encode a vector as a factor (the\nterms <U+2018>category<U+2019> and <U+2018>enumerated type<U+2019> are also used for\nfactors).  If argument ordered is TRUE, the factor\nlevels are assumed to be ordered.  For compatibility with S there is\nalso a function ordered.\n","example_call":"ordered(x = character(), ...)"},"base::...length":{"description":"... and ..1, ..2 etc are used to refer to\narguments passed down from a calling function.  These (and the\nfollowing) can only be used inside a function which has\n... among its formal arguments.\n","example_call":"...length()"},"base::exists":{"description":"Look for an R object of the given name and possibly return it\n","example_call":"exists(x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame),"},"base::prettyNum":{"description":"formatC() formats numbers individually and flexibly using\nC style format specifications.\n","example_call":"prettyNum(x, big.mark = \"\", big.interval = 3L, small.mark = \"\","},"base::isRestart":{"description":"These functions provide a mechanism for handling unusual conditions,\nincluding errors and warnings.\n","example_call":"isRestart(x)"},"base::setTimeLimit":{"description":"Functions to set CPU and/or elapsed time limits for top-level\ncomputations or the current session.\n","example_call":"setTimeLimit(cpu = Inf, elapsed = Inf, transient = FALSE)"},"base::names.POSIXlt":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"names.POSIXlt(x)"},"base::.__H__.cbind":{"description":"The functions or variables listed here are no longer part of R as\nthey are no longer needed.\n","example_call":".__H__.cbind(..., deparse.level = 1)"},"base::list.dirs":{"description":"These functions produce a character vector of the names of files or\ndirectories in the named directory.\n","example_call":"list.dirs(path = \".\", full.names = TRUE, recursive = TRUE)"},"base::truncate":{"description":"Functions to re-position connections.\n","example_call":"truncate(con, ...)"},"base::formals<-":{"description":"Get or set the formal arguments of a function.\n","example_call":"formals<-(fun, envir = environment(fun), value)"},"base::Tailcall":{"description":"Tailcall and Exec allow writing more\nstack-space-efficient recursive functions in R.\n","example_call":"Tailcall(FUN, ...)"},"base::quarters":{"description":"Extract the weekday, month or quarter, or the Julian time\n(days since some origin).  These are generic functions: the methods\nfor the internal date-time classes are documented here.\n","example_call":"quarters(x, abbreviate)"},"base::.External":{"description":"Functions to pass R objects to compiled C/C++ code that has been\nloaded into R.\n","example_call":".External(.NAME, ..., PACKAGE)"},"base::xtfrm.factor":{"description":"A generic auxiliary function that produces a numeric vector which\nwill sort in the same order as x.\n","example_call":"xtfrm.factor(x)"},"base::oldClass":{"description":"R possesses a simple generic function mechanism which can be used for\nan object-oriented style of programming.  Method dispatch takes place\nbased on the class of the first argument to the generic function.\n","example_call":"oldClass(x)"},"base::as.function.default":{"description":"as.function is a generic function which is used to convert\nobjects to functions.\n","example_call":"as.function.default(x, envir = parent.frame(), ...)"},"base::chol":{"description":"Compute the Cholesky factorization of a real symmetric\npositive-definite square matrix.\n","example_call":"chol(x, ...)"},"base::file.rename":{"description":"These functions provide a low-level interface to the computer's\nfile system.\n","example_call":"file.rename(from, to)"},"base::loadedNamespaces":{"description":"Functions to load and unload name spaces.\n","example_call":"loadedNamespaces()"},"base::all.equal.factor":{"description":"all.equal(x, y) is a utility to compare R objects x\nand y testing <U+2018>near equality<U+2019>.  If they are different,\ncomparison is still made to some extent, and a report of the\ndifferences is returned.    Do not use all.equal directly in\nif expressions<U+2014>either use isTRUE(all.equal(....)) or\nidentical if appropriate.\n","example_call":"all.equal.factor(target, current, ..., check.attributes = TRUE)"},"base::.BaseNamespaceEnv":{"description":"Get, set, test for and create environments.\n","example_call":"NULL"},"base::sort_by":{"description":"Generic function to sort an object in the order determined by one or\nmore other objects, typically vectors. A method is defined for data\nframes to sort its rows (typically by one or more columns), and the\ndefault method handles vector-like objects.\n","example_call":"sort_by(x, y, ...)"},"base::truncate.connection":{"description":"Functions to re-position connections.\n","example_call":"truncate.connection(con, ...)"},"base::is.finite":{"description":"is.finite and is.infinite return a vector of the same\nlength as x, indicating which elements are finite (not infinite\nand not missing) or infinite.\n","example_call":"is.finite(x)"},"base::as.data.frame.numeric":{"description":"These functions are provided for compatibility with older versions of\nR only, and may be defunct as soon as the next release.\n","example_call":"as.data.frame.numeric(x, row.names = NULL, optional = FALSE, ..., nm = deparse1(substitute(x)))"},"base::labels.default":{"description":"Find a suitable set of labels from an object for use in printing or\nplotting, for example.  A generic function.\n","example_call":"labels.default(object, ...)"},"base::strwrap":{"description":"Each character string in the input is first split into paragraphs (or\nlines containing whitespace only).  The paragraphs are then formatted\nby breaking lines at word boundaries.  The target columns for wrapping\nlines and the indentation of the first and all subsequent lines of a\nparagraph can be controlled independently.\n","example_call":"strwrap(x, width = 0.9 * getOption(\"width\"), indent = 0, exdent = 0,"},"base::.Internal":{"description":".Internal performs a call to an internal code\nwhich is built in to the R interpreter.\n","example_call":".Internal(call)"},"base::tolower":{"description":"Translate characters in character vectors, in particular from upper to\nlower case or vice versa.\n","example_call":"tolower(x)"},"base::gzfile":{"description":"Functions to create, open and close connections, i.e.,\n<U+201C>generalized files<U+201D>, such as possibly compressed files, URLs,\npipes, etc.\n","example_call":"gzfile(description, open = \"\", encoding = getOption(\"encoding\"),"},"base::.Fortran":{"description":"Functions to make calls to compiled code that has been loaded into R.\n","example_call":".Fortran(.NAME, ..., NAOK = FALSE, DUP = TRUE, PACKAGE, ENCODING)"},"base::last.warning":{"description":"warnings and its print method print the\nvariable last.warning in a pleasing form.\n","example_call":"NULL"},"base::as.character.numeric_version":{"description":"A simple S3 class for representing numeric versions\nincluding package versions, and associated methods.","example_call":"as.character.numeric_version(x, ...)"},"base::env.profile":{"description":"Get, set, test for and create environments.\n","example_call":"env.profile(env)"},"base::is.na":{"description":"NA is a logical constant of length 1 which contains a missing\nvalue indicator.  NA can be coerced to any other vector\ntype except raw.  There are also constants NA_integer_,\nNA_real_, NA_complex_ and NA_character_ of the\nother atomic vector types which support missing values: all of these\nare reserved words in the R language.\n","example_call":"is.na(x)"},"base::Summary.POSIXct":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"Summary.POSIXct(..., na.rm, finite = FALSE)"},"base::open.connection":{"description":"Functions to create, open and close connections, i.e.,\n<U+201C>generalized files<U+201D>, such as possibly compressed files, URLs,\npipes, etc.\n","example_call":"open.connection(con, open = \"r\", blocking = TRUE, ...)"},"base::is.qr":{"description":"qr computes the QR decomposition of a matrix.\n","example_call":"is.qr(x)"},"base::list2DF":{"description":"Create a data frame from a list of variables.\n","example_call":"list2DF(x = list(), nrow = 0L)"},"base::duplicated":{"description":"duplicated() determines which elements of a vector or data\nframe are duplicates\nof elements with smaller subscripts, and returns a logical vector\nindicating which elements (rows) are duplicates.\n","example_call":"duplicated(x, incomparables = FALSE, ...)"},"base::writeBin":{"description":"Read binary data from or write binary data to a connection or raw vector.\n","example_call":"writeBin(object, con, size = NA_integer_, endian = .Platform$endian,"},"base::flush.connection":{"description":"Functions to create, open and close connections, i.e.,\n<U+201C>generalized files<U+201D>, such as possibly compressed files, URLs,\npipes, etc.\n","example_call":"flush.connection(con)"},"base::rcond":{"description":"The condition number of a regular (square) matrix is the product of\nthe norm of the matrix and the norm of its inverse (or\npseudo-inverse), and hence depends on the kind of matrix-norm.\n","example_call":"rcond(x, norm = c(\"O\", \"I\", \"1\"), triangular = FALSE, uplo = \"U\","},"base::is.ordered":{"description":"The function factor is used to encode a vector as a factor (the\nterms <U+2018>category<U+2019> and <U+2018>enumerated type<U+2019> are also used for\nfactors).  If argument ordered is TRUE, the factor\nlevels are assumed to be ordered.  For compatibility with S there is\nalso a function ordered.\n","example_call":"is.ordered(x)"},"base::/.difftime":{"description":"Time intervals creation, printing, and some arithmetic.  The\nprint() method calls these <U+201C>time differences<U+201D>.\n","example_call":"/.difftime(e1, e2)"},"base::isSeekable":{"description":"Functions to re-position connections.\n","example_call":"isSeekable(con)"},"base::as.ordered":{"description":"The function factor is used to encode a vector as a factor (the\nterms <U+2018>category<U+2019> and <U+2018>enumerated type<U+2019> are also used for\nfactors).  If argument ordered is TRUE, the factor\nlevels are assumed to be ordered.  For compatibility with S there is\nalso a function ordered.\n","example_call":"as.ordered(x)"},"base::[.simple.list":{"description":"Operators acting on vectors, matrices, arrays and lists to extract or\nreplace parts.\n","example_call":"[.simple.list(x, i, ...)"},"base::iconv":{"description":"This uses system facilities to convert a character vector between\nencodings: the <U+2018>i<U+2019> stands for <U+2018>internationalization<U+2019>.\n","example_call":"iconv(x, from = \"\", to = \"\", sub = NA, mark = TRUE, toRaw = FALSE)"},"base::tempdir":{"description":"tempfile returns a vector of character strings which can be used as\nnames for temporary files.\n","example_call":"tempdir(check = FALSE)"},"base::Summary.POSIXlt":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"Summary.POSIXlt(..., na.rm, finite = FALSE)"},"base::is.numeric.difftime":{"description":"Time intervals creation, printing, and some arithmetic.  The\nprint() method calls these <U+201C>time differences<U+201D>.\n","example_call":"is.numeric.difftime(x)"},"base::print.octmode":{"description":"Integers which are displayed in octal (base-8 number system) format, with as\nmany digits as are needed to display the largest, using leading zeroes as\nnecessary.\n","example_call":"print.octmode(x, ...)"},"base::summary.proc_time":{"description":"proc.time determines how much real and CPU time (in seconds)\nthe currently running R process has already taken.\n","example_call":"summary.proc_time(object, ...)"},"base::chol2inv":{"description":"Invert a symmetric, positive definite square matrix from its Cholesky\ndecomposition.  Equivalently, compute (X'X)^{-1}\nfrom the (R part) of the QR decomposition of X.\n","example_call":"chol2inv(x, size = NCOL(x), LINPACK = FALSE)"},"base::as.character.Date":{"description":"Functions to convert between character representations and objects of\nclass \"Date\" representing calendar dates.\n","example_call":"as.character.Date(x, ...)"},"base::$.package_version":{"description":"A simple S3 class for representing numeric versions\nincluding package versions, and associated methods.","example_call":"$.package_version(x, name)"},"base::Sys.timezone":{"description":"Information about time zones in R.  Sys.timezone returns\nthe name of the current time zone.\n","example_call":"Sys.timezone(location = TRUE)"},"base::quarters.Date":{"description":"Extract the weekday, month or quarter, or the Julian time\n(days since some origin).  These are generic functions: the methods\nfor the internal date-time classes are documented here.\n","example_call":"quarters.Date(x, ...)"},"base::stopifnot":{"description":"If any of the expressions (in ... or exprs) are not\nall TRUE, stop is called, producing\nan error message indicating the first expression which was not\n(all) true.\n","example_call":"stopifnot(..., exprs, exprObject, local = TRUE)"},"base::as.data.frame.complex":{"description":"These functions are provided for compatibility with older versions of\nR only, and may be defunct as soon as the next release.\n","example_call":"as.data.frame.complex(x, row.names = NULL, optional = FALSE, ..., nm = deparse1(substitute(x)))"},"base::all.equal.function":{"description":"all.equal(x, y) is a utility to compare R objects x\nand y testing <U+2018>near equality<U+2019>.  If they are different,\ncomparison is still made to some extent, and a report of the\ndifferences is returned.    Do not use all.equal directly in\nif expressions<U+2014>either use isTRUE(all.equal(....)) or\nidentical if appropriate.\n","example_call":"all.equal.function(target, current, check.environment = TRUE, ...)"},"base::packBits":{"description":"Conversion to and from and manipulation of objects of type \"raw\",\nboth used as bits or <U+201C>packed<U+201D> 8 bits.\n","example_call":"packBits(x, type = c(\"raw\", \"integer\", \"double\"))"},"base::c.POSIXct":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"c.POSIXct(..., recursive = FALSE)"},"base::rep.difftime":{"description":"Time intervals creation, printing, and some arithmetic.  The\nprint() method calls these <U+201C>time differences<U+201D>.\n","example_call":"rep.difftime(x, ...)"},"base::strrep":{"description":"Repeat the character strings in a character vector a given number of\ntimes (i.e., concatenate the respective numbers of copies of the\nstrings).\n","example_call":"strrep(x, times)"},"base::force":{"description":"Forces the evaluation of a function argument.\n","example_call":"force(x)"},"base::c.POSIXlt":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"c.POSIXlt(..., recursive = FALSE)"},"base::[<-.numeric_version":{"description":"A simple S3 class for representing numeric versions\nincluding package versions, and associated methods.","example_call":"[<-.numeric_version(x, i, j, value)"},"base::mem.maxNSize":{"description":"Query and set the maximal size of the vector heap and the maximal\nnumber of heap nodes for the current R process.\n","example_call":"mem.maxNSize(nsize = 0)"},"base::format":{"description":"Format an R object for pretty printing.\n","example_call":"format(x, ...)"},"base::NextMethod":{"description":"R possesses a simple generic function mechanism which can be used for\nan object-oriented style of programming.  Method dispatch takes place\nbased on the class(es) of the first argument to the generic function or of\nthe object supplied as an argument to UseMethod or NextMethod.\n","example_call":"NextMethod(generic = NULL, object = NULL, ...)"},"base::..deparseOpts":{"description":"Process the deparsing options for deparse, dput and\ndump.\n","example_call":"NULL"},"base::.TAOCP1997init":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":".TAOCP1997init(seed)"},"base::Vectorize":{"description":"Vectorize creates a function wrapper that vectorizes the\naction of its argument FUN.\n","example_call":"Vectorize(FUN, vectorize.args = arg.names, SIMPLIFY = TRUE, USE.NAMES = TRUE)"},"base::getNamespaceUsers":{"description":"Internal functions to support reflection on namespace objects.\n","example_call":"getNamespaceUsers(ns)"},"base::cosh":{"description":"These functions give the obvious hyperbolic functions.  They\nrespectively compute the hyperbolic cosine, sine, tangent, and their\ninverses, arc-cosine, arc-sine, arc-tangent (or <U+2018>area cosine<U+2019>,\netc).\n","example_call":"cosh(x)"},"base::open":{"description":"Functions to create, open and close connections, i.e.,\n<U+201C>generalized files<U+201D>, such as possibly compressed files, URLs,\npipes, etc.\n","example_call":"open(con, ...)"},"base::qr.qty":{"description":"qr computes the QR decomposition of a matrix.\n","example_call":"qr.qty(qr, y)"},"base::subset":{"description":"Return subsets of vectors, matrices or data frames which meet conditions.\n","example_call":"subset(x, ...)"},"base::print.summary.table":{"description":"table uses cross-classifying factors to build a contingency\ntable of the counts at each combination of factor levels.\n","example_call":"print.summary.table(x, digits = max(1L, getOption(\"digits\") - 3L), ...)"},"base::is.infinite.POSIXlt":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"is.infinite.POSIXlt(x)"},"base::substr":{"description":"Extract or replace substrings in a character vector.\n","example_call":"substr(x, start, stop)"},"base::cospi":{"description":"These functions give the obvious trigonometric functions.  They\nrespectively compute the cosine, sine, tangent, arc-cosine, arc-sine,\narc-tangent, and the two-argument arc-tangent.\n","example_call":"cospi(x)"},"base::[[<-.numeric_version":{"description":"A simple S3 class for representing numeric versions\nincluding package versions, and associated methods.","example_call":"[[<-.numeric_version(x, ..., value)"},"base::c.warnings":{"description":"warnings and its print method print the\nvariable last.warning in a pleasing form.\n","example_call":"c.warnings(..., recursive = FALSE)"},"base::[.warnings":{"description":"warnings and its print method print the\nvariable last.warning in a pleasing form.\n","example_call":"[.warnings(x, ...)"},"base::print.packageInfo":{"description":"library and require load and attach add-on packages.\n","example_call":"print.packageInfo(x, ...)"},"base::NCOL":{"description":"nrow and ncol return the number of rows or columns\npresent in x.\nNCOL and NROW do the same treating a vector as\n1-column matrix, even a 0-length vector, compatibly with\nas.matrix() or cbind(), see the example.\n","example_call":"NCOL(x)"},"base::is.numeric":{"description":"Creates or coerces objects of type \"numeric\".\nis.numeric is a more general test of an object being\ninterpretable as numbers.\n","example_call":"is.numeric(x)"},"base::strtoi":{"description":"Convert strings to integers according to the given base using the C\nfunction strtol, or choose a suitable base following the C rules.\n","example_call":"strtoi(x, base = 0L)"},"base::.GenericArgsEnv":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":"NULL"},"base::rep_len":{"description":"rep replicates the values in x.  It is a generic\nfunction, and the (internal) default method is described here.\n","example_call":"rep_len(x, length.out)"},"base::.make_numeric_version":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":".make_numeric_version(x, strict = TRUE, regexp, classes = NULL)"},"base::date":{"description":"Returns a character string of the current system date and time.\n","example_call":"date()"},"base::names<-":{"description":"Functions to get or set the names of an object.\n","example_call":"names<-(x, value)"},"base::closeAllConnections":{"description":"Display aspects of connections.\n","example_call":"closeAllConnections()"},"base::as.logical":{"description":"Create or test for objects of type \"logical\", and the basic\nlogical constants.\n","example_call":"as.logical(x, ...)"},"base::getDLLRegisteredRoutines":{"description":"This function allows us to query the set of routines\nin a DLL that are registered with R to enhance\ndynamic lookup, error handling when calling native routines,\nand potentially security in the future.\nThis function provides a description of each of the\nregistered routines in the DLL for the different interfaces,\ni.e. .C, .Call, .Fortran\nand .External.\n","example_call":"getDLLRegisteredRoutines(dll, addNames = TRUE)"},"base::round":{"description":"ceiling takes a single numeric argument x and returns a\nnumeric vector containing the smallest integers not less than the\ncorresponding elements of x.\n","example_call":"round(x, digits = 0, ...)"},"base::file.exists":{"description":"These functions provide a low-level interface to the computer's\nfile system.\n","example_call":"file.exists(...)"},"base::.F_dtrco":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":"NULL"},"base::polyroot":{"description":"Find zeros of a real or complex polynomial.\n","example_call":"polyroot(z)"},"base::.kronecker":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":".kronecker(X, Y, FUN = \"*\", make.dimnames = FALSE, ...)"},"base::.traceback":{"description":"By default traceback() prints the call stack of the last\nuncaught error, i.e., the sequence of calls that lead to the error.\nThis is useful when an error occurs with an unidentifiable error\nmessage.  It can also be used to print the current stack or\narbitrary lists of calls.\n","example_call":".traceback(x = NULL, max.lines = getOption(\"traceback.max.lines\","},"base::browser":{"description":"Interrupt the execution of an expression and allow the inspection of\nthe environment where browser was called from.\n","example_call":"browser(text = \"\", condition = NULL, expr = TRUE, skipCalls = 0L)"},"base::conflictRules":{"description":"library and require load and attach add-on packages.\n","example_call":"conflictRules(pkg, mask.ok = NULL, exclude = NULL)"},"base::is.double":{"description":"Create, coerce to or test for a double-precision vector.\n","example_call":"is.double(x)"},"base::months":{"description":"Extract the weekday, month or quarter, or the Julian time\n(days since some origin).  These are generic functions: the methods\nfor the internal date-time classes are documented here.\n","example_call":"months(x, abbreviate)"},"base::toupper":{"description":"Translate characters in character vectors, in particular from upper to\nlower case or vice versa.\n","example_call":"toupper(x)"},"base::duplicated.default":{"description":"duplicated() determines which elements of a vector or data\nframe are duplicates\nof elements with smaller subscripts, and returns a logical vector\nindicating which elements (rows) are duplicates.\n","example_call":"duplicated.default(x, incomparables = FALSE, fromLast = FALSE, nmax = NA,"},"base::.bincode":{"description":"Bin a numeric vector and return integer codes for the binning.\n","example_call":".bincode(x, breaks, right = TRUE, include.lowest = FALSE)"},"base::qr.resid":{"description":"qr computes the QR decomposition of a matrix.\n","example_call":"qr.resid(qr, y)"},"base::toString":{"description":"This is a helper function for format to produce a single\ncharacter string describing an R object.\n","example_call":"toString(x, ...)"},"base::socketSelect":{"description":"Waits for the first of several socket connections and server sockets\nto become available.\n","example_call":"socketSelect(socklist, write = FALSE, timeout = NULL)"},"base::.class2":{"description":"R possesses a simple generic function mechanism which can be used for\nan object-oriented style of programming.  Method dispatch takes place\nbased on the class of the first argument to the generic function.\n","example_call":".class2(x)"},"base::print.libraryIQR":{"description":"library and require load and attach add-on packages.\n","example_call":"print.libraryIQR(x, ...)"},"base::prop.table":{"description":"Returns conditional proportions given margins, i.e.,\nentries of x, divided by the appropriate marginal sums.\n","example_call":"prop.table(x, margin = NULL)"},"base::new.env":{"description":"Get, set, test for and create environments.\n","example_call":"new.env(hash = TRUE, parent = parent.frame(), size = 29L)"},"base::which":{"description":"Give the TRUE indices of a logical object, allowing for array\nindices.\n","example_call":"which(x, arr.ind = FALSE, useNames = TRUE)"},"base::duplicated.numeric_version":{"description":"A simple S3 class for representing numeric versions\nincluding package versions, and associated methods.","example_call":"duplicated.numeric_version(x, incomparables = FALSE, ...)"},"base::while":{"description":"These are the basic control-flow constructs of the R language.  They\nfunction in much the same way as control statements in any Algol-like\nlanguage.  They are all reserved words.\n","example_call":"NULL"},"base::is.element":{"description":"Performs set union, intersection, (asymmetric!) difference,\nequality and membership on two vectors.\n","example_call":"is.element(el, set)"},"base::as.raw":{"description":"Creates or tests for objects of type \"raw\".\n","example_call":"as.raw(x)"},"base::nzchar":{"description":"nchar takes a character vector as an argument and\nreturns a vector whose elements contain the sizes of\nthe corresponding elements of x. Internally, it is a generic,\nfor which methods can be defined (see InternalMethods).\n","example_call":"nzchar(x, keepNA = FALSE)"},"base::replace":{"description":"replace replaces the values in x\nwith indices given in list by those given in values.\nIf necessary, the values in values are recycled.\n","example_call":"replace(x, list, values)"},"base::complex":{"description":"Basic functions which support complex arithmetic in R, in addition to\nthe arithmetic operators +, -, *, /, and ^.\n","example_call":"complex(length.out = 0L, real = numeric(), imaginary = numeric(),"},"base::dget":{"description":"Writes an ASCII text representation of an R object to a file, the R\nconsole, or a connection, or uses one to recreate the object.\n","example_call":"dget(file, keep.source = FALSE)"},"base::environmentIsLocked":{"description":"These functions represent an interface for adjustments\nto environments and bindings within environments.  They allow for\nlocking environments as well as individual bindings, and for linking\na variable to a function.\n","example_call":"environmentIsLocked(env)"},"base::.Deprecated":{"description":"When an object is about to be removed from R it is first deprecated and\nshould include a call to .Deprecated.\n","example_call":".Deprecated(new, package = NULL, msg, old = as.character(sys.call(sys.parent()))[1L])"},"base::alist":{"description":"Functions to construct, coerce and check for both kinds of R lists.\n","example_call":"alist(...)"},"base::is.list":{"description":"Functions to construct, coerce and check for both kinds of R lists.\n","example_call":"is.list(x)"},"base::Ops.factor":{"description":"The function factor is used to encode a vector as a factor (the\nterms <U+2018>category<U+2019> and <U+2018>enumerated type<U+2019> are also used for\nfactors).  If argument ordered is TRUE, the factor\nlevels are assumed to be ordered.  For compatibility with S there is\nalso a function ordered.\n","example_call":"Ops.factor(e1, e2)"},"base::setdiff":{"description":"Performs set union, intersection, (asymmetric!) difference,\nequality and membership on two vectors.\n","example_call":"setdiff(x, y)"},"base::pmin.int":{"description":"Returns the (regular or parallel) maxima and minima of the\ninput values.\n","example_call":"pmin.int(..., na.rm = FALSE)"},"base::slice.index":{"description":"Returns a matrix of integers indicating the number of their slice in a\ngiven array.\n","example_call":"slice.index(x, MARGIN)"},"base::getAllConnections":{"description":"Display aspects of connections.\n","example_call":"getAllConnections()"},"base::duplicated.warnings":{"description":"warnings and its print method print the\nvariable last.warning in a pleasing form.\n","example_call":"duplicated.warnings(x, incomparables = FALSE, ...)"},"base::numeric_version":{"description":"A simple S3 class for representing numeric versions\nincluding package versions, and associated methods.","example_call":"numeric_version(x, strict = TRUE)"},"base::ceiling":{"description":"ceiling takes a single numeric argument x and returns a\nnumeric vector containing the smallest integers not less than the\ncorresponding elements of x.\n","example_call":"ceiling(x)"},"base::diag":{"description":"Extract or replace the diagonal of a matrix,\nor construct a diagonal matrix.\n","example_call":"diag(x = 1, nrow, ncol, names = TRUE)"},"base::as.complex":{"description":"Basic functions which support complex arithmetic in R, in addition to\nthe arithmetic operators +, -, *, /, and ^.\n","example_call":"as.complex(x, ...)"},"base::sequence":{"description":"The default method for sequence generates the sequence\nseq(from[i], by = by[i], length.out = nvec[i]) for each\nelement i in the parallel (and recycled) vectors from,\nby and nvec. It then returns the result of concatenating\nthose sequences.\n","example_call":"sequence(nvec, ...)"},"base::.check_tzones":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":".check_tzones(...)"},"base::diff":{"description":"Returns suitably lagged and iterated differences.\n","example_call":"diff(x, ...)"},"base::.doSortWrap":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":".doSortWrap(vec, decr, nalast, noNA = NA)"},"base::anyDuplicated":{"description":"duplicated() determines which elements of a vector or data\nframe are duplicates\nof elements with smaller subscripts, and returns a logical vector\nindicating which elements (rows) are duplicates.\n","example_call":"anyDuplicated(x, incomparables = FALSE, ...)"},"base::all.equal.environment":{"description":"all.equal(x, y) is a utility to compare R objects x\nand y testing <U+2018>near equality<U+2019>.  If they are different,\ncomparison is still made to some extent, and a report of the\ndifferences is returned.    Do not use all.equal directly in\nif expressions<U+2014>either use isTRUE(all.equal(....)) or\nidentical if appropriate.\n","example_call":"all.equal.environment(target, current, all.names = TRUE, evaluate = TRUE,"},"base::pipe":{"description":"Functions to create, open and close connections, i.e.,\n<U+201C>generalized files<U+201D>, such as possibly compressed files, URLs,\npipes, etc.\n","example_call":"pipe(description, open = \"\", encoding = getOption(\"encoding\"))"},"base::ISOdatetime":{"description":"Convenience wrappers to create date-times from numeric representations.\n","example_call":"ISOdatetime(year, month, day, hour, min, sec, tz = \"\")"},"base::replicate":{"description":"lapply returns a list of the same length as X, each\nelement of which is the result of applying FUN to the\ncorresponding element of X.\n","example_call":"replicate(n, expr, simplify = \"array\")"},"base::rbind.data.frame":{"description":"Take a sequence of vector, matrix or data-frame arguments and combine\nby columns or rows, respectively.  These are generic\nfunctions with methods for other R classes.\n","example_call":"rbind.data.frame(..., deparse.level = 1, make.row.names = TRUE, stringsAsFactors = FALSE,"},"base::lazyLoadDBfetch":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":"lazyLoadDBfetch(key, file, compressed, hook)"},"base::conflicts":{"description":"conflicts reports on objects that exist with the same name in\ntwo or more places on the search path, usually because\nan object in the user's workspace or a package is masking a system\nobject of the same name.  This helps discover unintentional masking.\n","example_call":"conflicts(where = search(), detail = FALSE)"},"base::.rmpkg":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":".rmpkg(pkg)"},"base::as.Date":{"description":"Functions to convert between character representations and objects of\nclass \"Date\" representing calendar dates.\n","example_call":"as.Date(x, ...)"},"base::as.data.frame.numeric_version":{"description":"These functions are provided for compatibility with older versions of\nR only, and may be defunct as soon as the next release.\n","example_call":"as.data.frame.numeric_version(x, row.names = NULL, optional = FALSE, ..., nm = deparse1(substitute(x)))"},"base::mean.default":{"description":"Generic function for the (trimmed) arithmetic mean.\n","example_call":"mean.default(x, trim = 0, na.rm = FALSE, ...)"},"base::cumprod":{"description":"Returns a vector whose elements are the cumulative sums, products,\nminima or maxima of the elements of the argument.\n","example_call":"cumprod(x)"},"base::as.double":{"description":"Create, coerce to or test for a double-precision vector.\n","example_call":"as.double(x, ...)"},"base::mtfrm.POSIXct":{"description":"Transform objects for matching via match(), think\n<U+201C>match form<U+201D> -> \"mtfrm\".\nbase provides the S3 generic and a default plus\n\"POSIXct\" and \"POSIXlt\" methods.\n","example_call":"mtfrm.POSIXct(x)"},"base::as.data.frame.logical":{"description":"These functions are provided for compatibility with older versions of\nR only, and may be defunct as soon as the next release.\n","example_call":"as.data.frame.logical(x, row.names = NULL, optional = FALSE, ..., nm = deparse1(substitute(x)))"},"base::as.data.frame.POSIXct":{"description":"These functions are provided for compatibility with older versions of\nR only, and may be defunct as soon as the next release.\n","example_call":"as.data.frame.POSIXct(x, row.names = NULL, optional = FALSE, ..., nm = deparse1(substitute(x)))"},"base::findRestart":{"description":"These functions provide a mechanism for handling unusual conditions,\nincluding errors and warnings.\n","example_call":"findRestart(name, cond = NULL)"},"base::mtfrm.POSIXlt":{"description":"Transform objects for matching via match(), think\n<U+201C>match form<U+201D> -> \"mtfrm\".\nbase provides the S3 generic and a default plus\n\"POSIXct\" and \"POSIXlt\" methods.\n","example_call":"mtfrm.POSIXlt(x)"},"base::as.data.frame.POSIXlt":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"as.data.frame.POSIXlt(x, row.names = NULL, optional = FALSE, ...)"},"base::as.data.frame.ts":{"description":"Functions to check if an object is a data frame, or coerce it if possible.\n","example_call":"as.data.frame.ts(x, ...)"},"base::findPackageEnv":{"description":"Internal objects in the base package most of which are only user-visible\nbecause of the special nature of the base namespace.\n","example_call":"findPackageEnv(info)"},"base::plot":{"description":"Generic function for plotting of R objects.\n","example_call":"plot(x, y, ...)"},"base::pmax":{"description":"Returns the (regular or parallel) maxima and minima of the\ninput values.\n","example_call":"pmax(..., na.rm = FALSE)"},"base::getNamespaceImports":{"description":"Internal functions to support reflection on namespace objects.\n","example_call":"getNamespaceImports(ns)"},"base::as.numeric_version":{"description":"A simple S3 class for representing numeric versions\nincluding package versions, and associated methods.","example_call":"as.numeric_version(x)"},"base::pmin":{"description":"Returns the (regular or parallel) maxima and minima of the\ninput values.\n","example_call":"pmin(..., na.rm = FALSE)"},"base::as.character.srcref":{"description":"These functions are for working with source files and more generally\nwith <U+201C>source references<U+201D> (\"srcref\"), i.e., references to\nsource code.  The resulting data is used for printing and source level\ndebugging, and is typically available in interactive R sessions,\nnamely when options(keep.source = TRUE).\n","example_call":"as.character.srcref(x, useSource = TRUE, to = x, ...)"},"base::trunc.Date":{"description":"Round or truncate date-time objects.\n","example_call":"trunc.Date(x, units = c(\"secs\", \"mins\", \"hours\", \"days\", \"months\","},"base::print.hexmode":{"description":"Integers which are displayed in hexadecimal (short <U+2018>hex<U+2019>) format,\nwith as many digits as are needed to display the largest, using leading\nzeroes as necessary.\n","example_call":"print.hexmode(x, ...)"},"base::provideDimnames":{"description":"Retrieve or set the dimnames of an object.\n","example_call":"provideDimnames(x, sep = \"\", base = list(LETTERS), unique = TRUE)"},"base::match.arg":{"description":"match.arg matches a character arg against a table of\ncandidate values as specified by choices.\n","example_call":"match.arg(arg, choices, several.ok = FALSE)"},"base::enquote":{"description":"substitute returns the parse tree for the (unevaluated)\nexpression expr, substituting any variables bound in\nenv.\n","example_call":"enquote(cl)"},"base::file.path":{"description":"Construct the path to a file from components in a platform-independent\nway.\n","example_call":"file.path(..., fsep = .Platform$file.sep)"},"base::as.character.condition":{"description":"These functions provide a mechanism for handling unusual conditions,\nincluding errors and warnings.\n","example_call":"as.character.condition(x, ...)"},"base::.Platform":{"description":".Platform is a list with some details of the platform under\nwhich R was built.  This provides means to write OS-portable R\ncode.\n","example_call":"NULL"},"base::|.octmode":{"description":"Integers which are displayed in octal (base-8 number system) format, with as\nmany digits as are needed to display the largest, using leading zeroes as\nnecessary.\n","example_call":"|.octmode(a, b)"},"base::memDecompress":{"description":"In-memory compression or decompression for raw vectors.\n","example_call":"memDecompress(from, type = c(\"unknown\", \"gzip\", \"bzip2\", \"xz\", \"none\"),"},"base::activeBindingFunction":{"description":"These functions represent an interface for adjustments\nto environments and bindings within environments.  They allow for\nlocking environments as well as individual bindings, and for linking\na variable to a function.\n","example_call":"activeBindingFunction(sym, env)"},"base::format.data.frame":{"description":"Format an R object for pretty printing.\n","example_call":"format.data.frame(x, ..., justify = \"none\")"},"base::unCfillPOSIXlt":{"description":"Utilities to <U+2018>balance<U+2019> objects of class \"POSIXlt\".\n","example_call":"unCfillPOSIXlt(x)"},"base::lazyLoad":{"description":"Internal functions to lazy load a database of R objects.\n","example_call":"lazyLoad(filebase, envir = parent.frame(), filter)"},"base::srcref":{"description":"These functions are for working with source files and more generally\nwith <U+201C>source references<U+201D> (\"srcref\"), i.e., references to\nsource code.  The resulting data is used for printing and source level\ndebugging, and is typically available in interactive R sessions,\nnamely when options(keep.source = TRUE).\n","example_call":"srcref(srcfile, lloc)"},"base::as.POSIXlt.factor":{"description":"Functions to manipulate objects of classes \"POSIXlt\" and\n\"POSIXct\" representing calendar dates and times.\n","example_call":"as.POSIXlt.factor(x, ...)"},"base::t.default":{"description":"Given a matrix or data.frame x,\nt returns the transpose of x.\n","example_call":"t.default(x)"},"base::warning":{"description":"Generates a warning message that corresponds to its argument(s) and\n(optionally) the expression or function from which it was called.\n","example_call":"warning(..., call. = TRUE, immediate. = FALSE, noBreaks. = FALSE,"},"base::.__S3MethodsTable__.":{"description":"Internal namespace support functions.  Not intended to be called\ndirectly, and only visible because of the special nature of the\nbase namespace.\n","example_call":"NULL"},"base::substring":{"description":"Extract or replace substrings in a character vector.\n","example_call":"substring(text, first, last = 1000000L)"},"base::commandArgs":{"description":"Provides access to a copy of the command line arguments supplied when\nthis R session was invoked.\n","example_call":"commandArgs(trailingOnly = FALSE)"},"base::[[.numeric_version":{"description":"A simple S3 class for representing numeric versions\nincluding package versions, and associated methods.","example_call":"[[.numeric_version(x, ..., exact = NA)"},"base::file.symlink":{"description":"These functions provide a low-level interface to the computer's\nfile system.\n","example_call":"file.symlink(from, to)"},"base::[.DLLInfoList":{"description":"This function provides a way to get a list of all the DLLs (see\ndyn.load) that are currently loaded in the R session.\n","example_call":"[.DLLInfoList(x, ...)"},"base::getCallingDLLe":{"description":"This is an internal function that is called from R's C code to\ndetermine the enclosing namespace of a\n.C/.Call/.Fortran/.External call which has\nno PACKAGE argument. If the call has been made from a function\nwithin a namespace, then we can find the DLL associated with that\nnamespace.  The purpose of this is to avoid having to use the\nPACKAGE argument in these native calls and so better support\nversions of packages.\n","example_call":"getCallingDLLe(e)"},"base::Summary.difftime":{"description":"Time intervals creation, printing, and some arithmetic.  The\nprint() method calls these <U+201C>time differences<U+201D>.\n","example_call":"Summary.difftime(..., na.rm)"},"base::NROW":{"description":"nrow and ncol return the number of rows or columns\npresent in x.\nNCOL and NROW do the same treating a vector as\n1-column matrix, even a 0-length vector, compatibly with\nas.matrix() or cbind(), see the example.\n","example_call":"NROW(x)"},"base::match.fun":{"description":"When called inside functions that take a function as argument, extract\nthe desired function object while avoiding undesired matching to\nobjects of other types.\n","example_call":"match.fun(FUN, descend = TRUE)"},"base::dput":{"description":"Writes an ASCII text representation of an R object to a file, the R\nconsole, or a connection, or uses one to recreate the object.\n","example_call":"dput(x, file = \"\", control = c(\"keepNA\", \"keepInteger\","},"base::tempfile":{"description":"tempfile returns a vector of character strings which can be used as\nnames for temporary files.\n","example_call":"tempfile(pattern = \"file\", tmpdir = tempdir(), fileext = \"\")"},"base::...elt":{"description":"... and ..1, ..2 etc are used to refer to\narguments passed down from a calling function.  These (and the\nfollowing) can only be used inside a function which has\n... among its formal arguments.\n","example_call":"...elt(n)"},"base::print.by":{"description":"Function by is an object-oriented wrapper for\ntapply applied to data frames.\n","example_call":"print.by(x, ..., vsep)"},"base::summary.matrix":{"description":"summary is a generic function used to produce result summaries\nof the results of various model fitting functions.  The function\ninvokes particular methods which depend on the\nclass of the first argument.\n","example_call":"summary.matrix(object, ...)"},"base::...names":{"description":"... and ..1, ..2 etc are used to refer to\narguments passed down from a calling function.  These (and the\nfollowing) can only be used inside a function which has\n... among its formal arguments.\n","example_call":"...names()"},"base::Summary.ordered":{"description":"The function factor is used to encode a vector as a factor (the\nterms <U+2018>category<U+2019> and <U+2018>enumerated type<U+2019> are also used for\nfactors).  If argument ordered is TRUE, the factor\nlevels are assumed to be ordered.  For compatibility with S there is\nalso a function ordered.\n","example_call":"Summary.ordered(..., na.rm)"},"base::.Script":{"description":"Internal interface to run a script through its interpreter.\n","example_call":".Script(interpreter, script, args, ...)"},"base::mode<-":{"description":"Get or set the <U+2018>mode<U+2019> (a kind of <U+2018>type<U+2019>), or the storage\nmode of an R object.\n","example_call":"mode<-(x, value)"},"base::La.svd":{"description":"Compute the singular-value decomposition of a rectangular matrix.\n","example_call":"La.svd(x, nu = min(n, p), nv = min(n, p))"},"base::rawConnection":{"description":"Input and output raw connections.\n","example_call":"rawConnection(object, open = \"r\")"},"base::.rangeNum":{"description":"range returns a vector containing the minimum and maximum of\nall the given arguments.\n","example_call":".rangeNum(..., na.rm, finite, isNumeric)"},"base::format.AsIs":{"description":"Format an R object for pretty printing.\n","example_call":"format.AsIs(x, width = 12, ...)"},"base::is.integer":{"description":"Creates or tests for objects of type \"integer\".\n","example_call":"is.integer(x)"},"base::prod":{"description":"prod returns the product of all the values\npresent in its arguments.\n","example_call":"prod(..., na.rm = FALSE)"},"base::as.integer":{"description":"Creates or tests for objects of type \"integer\".\n","example_call":"as.integer(x, ...)"},"base::drop":{"description":"Delete the dimensions of an array which have only one level.\n","example_call":"drop(x)"},"base::Sys.umask":{"description":"These functions provide a low-level interface to the computer's\nfile system.\n","example_call":"Sys.umask(mode = NA)"},"base::.doTrace":{"description":"A call to trace allows you to insert debugging code (e.g., a\ncall to browser or recover) at chosen\nplaces in any function.  A call to untrace cancels the tracing.\nSpecified methods can be traced the same way, without tracing all\ncalls to the generic function.  Trace code (tracer) can be any\nR expression.  Tracing can be temporarily turned on or off globally\nby calling tracingState.\n","example_call":".doTrace(expr, msg)"},"base::browserText":{"description":"A call to browser can provide context by supplying either a text\nargument or a condition argument.  These functions can be used to\nretrieve either of these arguments.\n","example_call":"browserText(n = 1L)"},"base::is.package_version":{"description":"A simple S3 class for representing numeric versions\nincluding package versions, and associated methods.","example_call":"is.package_version(x)"},"base::bindingIsActive":{"description":"These functions represent an interface for adjustments\nto environments and bindings within environments.  They allow for\nlocking environments as well as individual bindings, and for linking\na variable to a function.\n","example_call":"bindingIsActive(sym, env)"},"base::file.copy":{"description":"These functions provide a low-level interface to the computer's\nfile system.\n","example_call":"file.copy(from, to, overwrite = recursive, recursive = FALSE,"},"base::names<-.POSIXlt":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"names<-.POSIXlt(x, value)"},"base::eigen":{"description":"Computes eigenvalues and eigenvectors of numeric (double, integer,\nlogical) or complex matrices.\n","example_call":"eigen(x, symmetric, only.values = FALSE, EISPACK = FALSE)"},"base::is.function":{"description":"Checks whether its argument is a (primitive) function.","example_call":"is.function(x)"},"base::month.name":{"description":"Constants built into R.\n","example_call":"NULL"},"base::digamma":{"description":"Special mathematical functions related to the beta and gamma\nfunctions.\n","example_call":"digamma(x)"},"base::l10n_info":{"description":"Report on localization information.\n","example_call":"l10n_info()"},"base::detach":{"description":"Detach a database, i.e., remove it from the search()\npath of available R objects.  Usually this is either a\ndata.frame which has been attached or a\npackage which was attached by library.\n","example_call":"detach(name, pos = 2L, unload = FALSE, character.only = FALSE,"},"base::as.data.frame.noquote":{"description":"These functions are provided for compatibility with older versions of\nR only, and may be defunct as soon as the next release.\n","example_call":"as.data.frame.noquote(x, row.names = NULL, optional = FALSE, ..., nm = deparse1(substitute(x)))"},"base::integer":{"description":"Creates or tests for objects of type \"integer\".\n","example_call":"integer(length = 0L)"},"base::getCallingDLL":{"description":"This is an internal function that is called from R's C code to\ndetermine the enclosing namespace of a\n.C/.Call/.Fortran/.External call which has\nno PACKAGE argument. If the call has been made from a function\nwithin a namespace, then we can find the DLL associated with that\nnamespace.  The purpose of this is to avoid having to use the\nPACKAGE argument in these native calls and so better support\nversions of packages.\n","example_call":"getCallingDLL(f = sys.function(-1), doStop = FALSE)"},"base::tracingState":{"description":"A call to trace allows you to insert debugging code (e.g., a\ncall to browser or recover) at chosen\nplaces in any function.  A call to untrace cancels the tracing.\nSpecified methods can be traced the same way, without tracing all\ncalls to the generic function.  Trace code (tracer) can be any\nR expression.  Tracing can be temporarily turned on or off globally\nby calling tracingState.\n","example_call":"tracingState(on = NULL)"},"base::as.function":{"description":"as.function is a generic function which is used to convert\nobjects to functions.\n","example_call":"as.function(x, ...)"},"base::attach":{"description":"The database is attached to the R search path.  This means that the\ndatabase is searched by R when evaluating a variable, so objects in\nthe database can be accessed by simply giving their names.\n","example_call":"attach(what, pos = 2L, name = deparse1(substitute(what), backtick = FALSE),"},"base::dump":{"description":"This function takes a vector of names of R objects and produces\ntext representations of the objects on a file or connection.\nA dump file can usually be sourced into another\nR session.\n","example_call":"dump(list, file = \"dumpdata.R\", append = FALSE, control = \"all\","},"base::as.POSIXct.numeric":{"description":"Functions to manipulate objects of classes \"POSIXlt\" and\n\"POSIXct\" representing calendar dates and times.\n","example_call":"as.POSIXct.numeric(x, tz = \"\", origin, ...)"},"base::is.recursive":{"description":"is.atomic returns TRUE if x is of an atomic type\nand FALSE otherwise.\n","example_call":"is.recursive(x)"},"base::unlink":{"description":"unlink deletes the file(s) or directories specified by x.\n","example_call":"unlink(x, recursive = FALSE, force = FALSE, expand = TRUE)"},"base::seq_along":{"description":"Generate regular sequences.  seq is a standard generic with a\ndefault method.  seq.int is a primitive which can be\nmuch faster but has a few restrictions.  seq_along and\nseq_len are very fast primitives for two common cases.\n","example_call":"seq_along(along.with)"},"base::pcre_config":{"description":"Report some of the configuration options of the version of PCRE in use\nin this R session.\n","example_call":"pcre_config()"},"base::[<-.POSIXct":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"[<-.POSIXct(x, ..., value)"},"base::unlist":{"description":"Given a list structure x, unlist simplifies it to\nproduce a vector which contains all the atomic components\nwhich occur in x.\n","example_call":"unlist(x, recursive = TRUE, use.names = TRUE)"},"base::[<-.POSIXlt":{"description":"Description of the classes \"POSIXlt\" and \"POSIXct\"\nrepresenting calendar dates and times.\n","example_call":"[<-.POSIXlt(x, i, j, value)"},"base::all.equal":{"description":"all.equal(x, y) is a utility to compare R objects x\nand y testing <U+2018>near equality<U+2019>.  If they are different,\ncomparison is still made to some extent, and a report of the\ndifferences is returned.    Do not use all.equal directly in\nif expressions<U+2014>either use isTRUE(all.equal(....)) or\nidentical if appropriate.\n","example_call":"all.equal(target, current, ...)"},"base::regmatches":{"description":"Extract or replace matched substrings from match data obtained by\nregexpr, gregexpr,\nregexec or gregexec.\n","example_call":"regmatches(x, m, invert = FALSE)"},"base::is.numeric_version":{"description":"A simple S3 class for representing numeric versions\nincluding package versions, and associated methods.","example_call":"is.numeric_version(x)"},"base::.tryResumeInterrupt":{"description":"These functions provide a mechanism for handling unusual conditions,\nincluding errors and warnings.\n","example_call":".tryResumeInterrupt()"},"base::getNamespaceName":{"description":"Internal functions to support reflection on namespace objects.\n","example_call":"getNamespaceName(ns)"},"base::parent.frame":{"description":"These functions provide access to environments\n(<U+2018>frames<U+2019> in S terminology) associated with functions further\nup the calling stack.\n","example_call":"parent.frame(n = 1)"},"base::factor":{"description":"The function factor is used to encode a vector as a factor (the\nterms <U+2018>category<U+2019> and <U+2018>enumerated type<U+2019> are also used for\nfactors).  If argument ordered is TRUE, the factor\nlevels are assumed to be ordered.  For compatibility with S there is\nalso a function ordered.\n","example_call":"factor(x = character(), levels, labels = levels, exclude = NA,"},"base::mtfrm.default":{"description":"Transform objects for matching via match(), think\n<U+201C>match form<U+201D> -> \"mtfrm\".\nbase provides the S3 generic and a default plus\n\"POSIXct\" and \"POSIXlt\" methods.\n","example_call":"mtfrm.default(x)"},"base::message":{"description":"Generate a diagnostic message from its arguments.\n","example_call":"message(..., domain = NULL, appendLF = TRUE)"},"base::lockBinding":{"description":"These functions represent an interface for adjustments\nto environments and bindings within environments.  They allow for\nlocking environments as well as individual bindings, and for linking\na variable to a function.\n","example_call":"lockBinding(sym, env)"},"base::numToInts":{"description":"Conversion to and from and manipulation of objects of type \"raw\",\nboth used as bits or <U+201C>packed<U+201D> 8 bits.\n","example_call":"numToInts(x)"},"base::.valid.factor":{"description":"The function factor is used to encode a vector as a factor (the\nterms <U+2018>category<U+2019> and <U+2018>enumerated type<U+2019> are also used for\nfactors).  If argument ordered is TRUE, the factor\nlevels are assumed to be ordered.  For compatibility with S there is\nalso a function ordered.\n","example_call":".valid.factor(object)"},"base::Position":{"description":"If init is given, Reduce logically adds it to the start\n(when proceeding left to right) or the end of x, respectively.\nIf this possibly augmented vector v has n > 1 elements,\nReduce successively applies f to the elements of v\nfrom left to right or right to left, respectively.  I.e., a left\nreduce computes l_1 = f(v_1, v_2), l_2 = f(l_1, v_3), etc.,\nand returns l_{n-1} = f(l_{n-2}, v_n), and a right reduce does\nr_{n-1} = f(v_{n-1}, v_n), r_{n-2} = f(v_{n-2}, r_{n-1})\nand returns r_1 = f(v_1, r_2).  (E.g., if v is the\nsequence (2, 3, 4) and f is division, left and right reduce give\n(2 / 3) / 4 = 1/6 and 2 / (3 / 4) = 8/3, respectively.)\nIf v has only a single element, this is returned; if there are\nno elements, NULL is returned.  Thus, it is ensured that\nf is always called with 2 arguments.\n","example_call":"Position(f, x, right = FALSE, nomatch = NA_integer_)"},"base::rep.numeric_version":{"description":"A simple S3 class for representing numeric versions\nincluding package versions, and associated methods.","example_call":"rep.numeric_version(x, ...)"},"base::.Defunct":{"description":"When a function is removed from R it should be replaced by a function\nwhich calls .Defunct.\n","example_call":".Defunct(new, package = NULL, msg)"},"colorspace::extract_transparency":{"description":"Adjust (i.e., add, remove, or modify) or extract alpha transparency of a vector of colors.\n","example_call":"extract_transparency(col, mode = \"numeric\", default = 1)"},"colorspace::scale_color_discrete_diverging":{"description":"Discrete ggplot2 color scales using the color palettes generated by diverging_hcl.\n","example_call":"scale_color_discrete_diverging(palette = NULL, c1 = NULL, cmax = NULL, l1 = NULL,"},"colorspace::scale_colour_binned_diverging":{"description":"Binned ggplot2 color scales using the color palettes generated by diverging_hcl.\n","example_call":"scale_colour_binned_diverging(palette = NULL, c1 = NULL, cmax = NULL, l1 = NULL,"},"colorspace::swatchplot":{"description":"Visualization of color palettes in columns of color swatches.\n","example_call":"swatchplot(x, ..., nrow = 20, border = NULL, sborder = NULL, off = NULL,"},"colorspace::scale_color_discrete_divergingx":{"description":"Discrete ggplot2 color scales using the color palettes generated by divergingx_hcl.\n","example_call":"scale_color_discrete_divergingx(palette = \"Geyser\", c1 = NULL, c2 = NULL, c3 = NULL,"},"colorspace::writehex":{"description":"Given a color object, this function writes a file containing the hexadecimal\nrepresentation of the colors in the object.\n","example_call":"writehex(x, file = \"\")"},"colorspace::scale_fill_discrete_sequential":{"description":"Discrete ggplot2 color scales using the color palettes generated by sequential_hcl.\n","example_call":"scale_fill_discrete_sequential(..., aesthetics = \"fill\")"},"colorspace::scale_colour_binned_divergingx":{"description":"Binned ggplot2 color scales using the color palettes generated by divergingx_hcl.\n","example_call":"scale_colour_binned_divergingx(palette = \"Geyser\", c1 = NULL, c2 = NULL, c3 = NULL,"},"colorspace::choose_palette":{"description":"A graphical user interface (GUI) for viewing, manipulating, and choosing HCL\ncolor palettes.\n","example_call":"choose_palette(pal = diverging_hcl, n = 7L, parent = NULL, gui = \"tcltk\","},"colorspace::scale_fill_binned_qualitative":{"description":"Binned ggplot2 color scales using the color palettes generated by qualitative_hcl. These scales are provided\nfor completeness. It is not normally a good idea to color a continuous, binned variable using a qualitative scale.\n","example_call":"scale_fill_binned_qualitative(..., aesthetics = \"fill\")"},"colorspace::simulate_cvd":{"description":"Transformation of R colors by simulating color vision deficiencies,\nbased on a CVD transform matrix.\n","example_call":"simulate_cvd(col, cvd_transform, linear = TRUE)"},"colorspace::readhex":{"description":"This function reads a set of hexadecimal color descriptions from a file and\ncreates a color object containing the corresponding colors.\n","example_call":"readhex(file = \"\", class = \"RGB\")"},"colorspace::LUV":{"description":"This function creates colors of class <U+201C>LUV<U+201D>; a subclass of the virtual\ncolor-class class.\n","example_call":"LUV(L, U, V, names)"},"colorspace::sRGB":{"description":"This function creates colors of class sRGB; a subclass of the virtual\ncolor-class class.\n","example_call":"sRGB(R, G, B, names)"},"colorspace::diverging_hsv":{"description":"Color palettes based on the HCL (and HSV) color space to replace\nbase R palettes.\n","example_call":"diverging_hsv(n, h = c(240, 0), s = 1, v = 1, power = 1, gamma = NULL,"},"colorspace::RGB":{"description":"This function creates colors of class RGB; a subclass of the virtual\ncolor-class class.\n","example_call":"RGB(R, G, B, names)"},"colorspace::darken":{"description":"The functions lighten and darken take a vector of R colors and adjust the colors such that\nthey appear lightened or darkened, respectively.\n","example_call":"darken(col, amount = 0.1, space = \"combined\", ...)"},"colorspace::scale_colour_discrete_diverging":{"description":"Discrete ggplot2 color scales using the color palettes generated by diverging_hcl.\n","example_call":"scale_colour_discrete_diverging(palette = NULL, c1 = NULL, cmax = NULL, l1 = NULL,"},"colorspace::protanomaly_cvd":{"description":"Conversion tables for simulating different types of color vision deficiency (CVD):\nProtanomaly, deutanomaly, tritanomaly.\n","example_call":"NULL"},"colorspace::hcl_wizard":{"description":"A graphical user interface (GUI) for viewing, manipulating, and choosing HCL\ncolor palettes.\n","example_call":"hcl_wizard(n = 7L, gui = \"shiny\", ...)"},"colorspace::hex":{"description":"This functions converts color-class objects into hexadecimal strings.\n","example_call":"hex(from, gamma = NULL, fixup = FALSE)"},"colorspace::scale_fill_continuous_divergingx":{"description":"Continuous ggplot2 color scales using the color palettes generated by divergingx_hcl.\n","example_call":"scale_fill_continuous_divergingx(..., aesthetics = \"fill\")"},"colorspace::adjust_transparency":{"description":"Adjust (i.e., add, remove, or modify) or extract alpha transparency of a vector of colors.\n","example_call":"adjust_transparency(col, alpha = TRUE)"},"colorspace::scale_colour_discrete_qualitative":{"description":"Discrete ggplot2 color scales using the color palettes generated by qualitative_hcl.\n","example_call":"scale_colour_discrete_qualitative(palette = NULL, c1 = NULL, l1 = NULL, h1 = NULL, h2 = NULL,"},"colorspace::hcl_color_picker":{"description":"The app visualizes colors either along the hue-chroma plane for a given luminance value or along the\nluminance-chroma plane for a given hue. Colors can be entered by specifying the hue (H), chroma (C),\nand luminance (L) values via sliders, by entering an RGB hex code, or by clicking on a color in the\nhue-chroma or luminance-chroma plane. It is also possible to select individual colors and add them\nto a palette for comparison and future reference.\n","example_call":"hcl_color_picker(shiny.trace = FALSE)"},"colorspace::hclcolorpicker":{"description":"The app visualizes colors either along the hue-chroma plane for a given luminance value or along the\nluminance-chroma plane for a given hue. Colors can be entered by specifying the hue (H), chroma (C),\nand luminance (L) values via sliders, by entering an RGB hex code, or by clicking on a color in the\nhue-chroma or luminance-chroma plane. It is also possible to select individual colors and add them\nto a palette for comparison and future reference.\n","example_call":"hclcolorpicker(shiny.trace = FALSE)"},"colorspace::diverge_hsv":{"description":"Color palettes based on the HCL (and HSV) color space to replace\nbase R palettes.\n","example_call":"diverge_hsv(n, h = c(240, 0), s = 1, v = 1, power = 1, gamma = NULL,"},"colorspace::XYZ":{"description":"This function creates colors of class XYZ; a subclass of the virtual\ncolor-class class.\n","example_call":"XYZ(X, Y, Z, names)"},"colorspace::coords":{"description":"This function returns a matrix with three columns which give the coordinates\nof a color in its natural color space.\n","example_call":"coords(color)"},"colorspace::hclplot":{"description":"Visualization of color palettes in HCL space projections.\n","example_call":"hclplot(x, type = NULL, h = NULL, c = NULL, l = NULL, xlab = NULL,"},"colorspace::terrain_hcl":{"description":"Color palettes based on the HCL (and HSV) color space to replace\nbase R palettes.\n","example_call":"terrain_hcl(n, h = c(130, 0), c. = c(80, 0), l = c(60, 95), power = c(1/10,"},"colorspace::scale_fill_binned_sequential":{"description":"Binned ggplot2 color scales using the color palettes generated by sequential_hcl.\n","example_call":"scale_fill_binned_sequential(..., aesthetics = \"fill\")"},"colorspace::scale_colour_continuous_divergingx":{"description":"Continuous ggplot2 color scales using the color palettes generated by divergingx_hcl.\n","example_call":"scale_colour_continuous_divergingx(palette = \"Geyser\", c1 = NULL, c2 = NULL, c3 = NULL,"},"colorspace::interpolate_cvd_transform":{"description":"Transformation of R colors by simulating color vision deficiencies,\nbased on a CVD transform matrix.\n","example_call":"interpolate_cvd_transform(cvd, severity = 1)"},"colorspace::scale_color_continuous_divergingx":{"description":"Continuous ggplot2 color scales using the color palettes generated by divergingx_hcl.\n","example_call":"scale_color_continuous_divergingx(palette = \"Geyser\", c1 = NULL, c2 = NULL, c3 = NULL,"},"colorspace::scale_fill_discrete_divergingx":{"description":"Discrete ggplot2 color scales using the color palettes generated by divergingx_hcl.\n","example_call":"scale_fill_discrete_divergingx(..., aesthetics = \"fill\")"},"colorspace::tritanomaly_cvd":{"description":"Conversion tables for simulating different types of color vision deficiency (CVD):\nProtanomaly, deutanomaly, tritanomaly.\n","example_call":"NULL"},"colorspace::scale_color_continuous_sequential":{"description":"Continuous ggplot2 color scales using the color palettes generated by sequential_hcl.\n","example_call":"scale_color_continuous_sequential(palette = NULL, c1 = NULL, c2 = NULL, cmax = NULL,"},"colorspace::scale_color_continuous_qualitative":{"description":"Continuous ggplot2 color scales using the color palettes generated by qualitative_hcl. These scales are provided\nfor completeness. It is not normally a good idea to color a continuous variable using a qualitative scale.\n","example_call":"scale_color_continuous_qualitative(palette = NULL, c1 = NULL, l1 = NULL, h1 = NULL, h2 = NULL,"},"colorspace::choose_color":{"description":"The app visualizes colors either along the hue-chroma plane for a given luminance value or along the\nluminance-chroma plane for a given hue. Colors can be entered by specifying the hue (H), chroma (C),\nand luminance (L) values via sliders, by entering an RGB hex code, or by clicking on a color in the\nhue-chroma or luminance-chroma plane. It is also possible to select individual colors and add them\nto a palette for comparison and future reference.\n","example_call":"choose_color(shiny.trace = FALSE)"},"colorspace::cvd_emulator":{"description":"A graphical user interface (GUI) to check an existing jpg/png image for (possible)\ncolor constraints. The image will be converted to protanope vision, deuteranope vision,\nand a desaturated version (monochromatic vision).\nAllows a rapid check whether the colors used in the image show some\nconstraints with respect to color deficiency or color blindness.\n","example_call":"cvd_emulator(file, overwrite = FALSE, shiny.trace = FALSE)"},"colorspace::divergingx_palettes":{"description":"Diverging HCL color palettes generated through combination of two fully\nflexible (and possibly unbalanced) multi-hue sequential palettes.\n","example_call":"divergingx_palettes(palette = NULL, plot = FALSE, n = 7L, ...)"},"colorspace::specplot":{"description":"Visualization of color palettes (given as hex codes) in HCL and/or RGB\ncoordinates.\n","example_call":"specplot(x, y = NULL, rgb = FALSE, hcl = TRUE, fix = TRUE, cex = 1,"},"colorspace::diverge_hcl":{"description":"Qualitative, sequential (single-hue and multi-hue), and diverging\ncolor palettes based on the HCL (hue-chroma-luminance) color model.\n","example_call":"diverge_hcl(n, h = c(260, 0), c = 80, l = c(30, 90), power = 1.5,"},"colorspace::scale_fill_discrete_qualitative":{"description":"Discrete ggplot2 color scales using the color palettes generated by qualitative_hcl.\n","example_call":"scale_fill_discrete_qualitative(..., aesthetics = \"fill\")"},"colorspace::contrast_ratio":{"description":"Compute (and visualize) the contrast ratio of pairs of colors, as defined by the World Wide\nWeb Consortium (W3C).\n","example_call":"contrast_ratio(col, col2 = \"white\", algorithm = c(\"WCAG\", \"APCA\"),"},"colorspace::HLS":{"description":"This function creates colors of class HLS; a subclass of the virtual\ncolor-class class.\n","example_call":"HLS(H, L, S, names)"},"colorspace::scale_fill_binned_divergingx":{"description":"Binned ggplot2 color scales using the color palettes generated by divergingx_hcl.\n","example_call":"scale_fill_binned_divergingx(..., aesthetics = \"fill\")"},"colorspace::scale_color_discrete_sequential":{"description":"Discrete ggplot2 color scales using the color palettes generated by sequential_hcl.\n","example_call":"scale_color_discrete_sequential(palette = NULL, c1 = NULL, c2 = NULL, cmax = NULL,"},"colorspace::scale_colour_continuous_qualitative":{"description":"Continuous ggplot2 color scales using the color palettes generated by qualitative_hcl. These scales are provided\nfor completeness. It is not normally a good idea to color a continuous variable using a qualitative scale.\n","example_call":"scale_colour_continuous_qualitative(palette = NULL, c1 = NULL, l1 = NULL, h1 = NULL, h2 = NULL,"},"colorspace::scale_fill_continuous_qualitative":{"description":"Continuous ggplot2 color scales using the color palettes generated by qualitative_hcl. These scales are provided\nfor completeness. It is not normally a good idea to color a continuous variable using a qualitative scale.\n","example_call":"scale_fill_continuous_qualitative(..., aesthetics = \"fill\")"},"colorspace::LAB":{"description":"This function creates colors of class <U+201C>LAB<U+201D>; a subclass of the virtual\ncolor-class class.\n","example_call":"LAB(L, A, B, names)"},"colorspace::readRGB":{"description":"This function reads a set of RGB color descriptions (of the form written by\ngcolorsel) from a file and creates a color object containing the\ncorresponding colors.\n","example_call":"readRGB(file, class = \"RGB\")"},"colorspace::scale_fill_continuous_diverging":{"description":"Continuous ggplot2 color scales using the color palettes generated by diverging_hcl.\n","example_call":"scale_fill_continuous_diverging(..., aesthetics = \"fill\")"},"colorspace::scale_color_discrete_qualitative":{"description":"Discrete ggplot2 color scales using the color palettes generated by qualitative_hcl.\n","example_call":"scale_color_discrete_qualitative(palette = NULL, c1 = NULL, l1 = NULL, h1 = NULL, h2 = NULL,"},"colorspace::deutan":{"description":"Transformation of R colors by simulating color vision deficiencies,\nbased on a CVD transform matrix.\n","example_call":"deutan(col, severity = 1, linear = TRUE)"},"colorspace::demoplot":{"description":"Demonstration of color palettes in various kinds of statistical graphics.\n","example_call":"demoplot(x, type = c(\"map\", \"heatmap\", \"scatter\", \"spine\", \"bar\","},"colorspace::max_chroma":{"description":"Compute approximately the maximum chroma possible for a given hue and\nluminance combination in the HCL color space.\n","example_call":"max_chroma(h, l, floor = FALSE)"},"colorspace::mixcolor":{"description":"This function can be used to compute the result of color mixing, assuming\nadditive mixing (e.g., as appropriate for RGB or XYZ).\n","example_call":"mixcolor(alpha, color1, color2, where = class(color1))"},"colorspace::hclwizard":{"description":"A graphical user interface (GUI) for viewing, manipulating, and choosing HCL\ncolor palettes.\n","example_call":"hclwizard(n = 7L, gui = \"shiny\", ...)"},"colorspace::scale_color_binned_sequential":{"description":"Binned ggplot2 color scales using the color palettes generated by sequential_hcl.\n","example_call":"scale_color_binned_sequential(palette = NULL, c1 = NULL, c2 = NULL, cmax = NULL,"},"colorspace::scale_fill_discrete_diverging":{"description":"Discrete ggplot2 color scales using the color palettes generated by diverging_hcl.\n","example_call":"scale_fill_discrete_diverging(..., aesthetics = \"fill\")"},"colorspace::scale_colour_binned_sequential":{"description":"Binned ggplot2 color scales using the color palettes generated by sequential_hcl.\n","example_call":"scale_colour_binned_sequential(palette = NULL, c1 = NULL, c2 = NULL, cmax = NULL,"},"colorspace::polarLAB":{"description":"This function creates colors of class <U+201C>polarLAB<U+201D>; a subclass of the\nvirtual color-class class.\n","example_call":"polarLAB(L, C, H, names)"},"colorspace::scale_color_binned_diverging":{"description":"Binned ggplot2 color scales using the color palettes generated by diverging_hcl.\n","example_call":"scale_color_binned_diverging(palette = NULL, c1 = NULL, cmax = NULL, l1 = NULL,"},"colorspace::heat_hcl":{"description":"Color palettes based on the HCL (and HSV) color space to replace\nbase R palettes.\n","example_call":"heat_hcl(n, h = c(0, 90), c. = c(100, 30), l = c(50, 90), power = c(1/5,"},"colorspace::diverging_hcl":{"description":"Qualitative, sequential (single-hue and multi-hue), and diverging\ncolor palettes based on the HCL (hue-chroma-luminance) color model.\n","example_call":"diverging_hcl(n, h = c(260, 0), c = 80, l = c(30, 90), power = 1.5,"},"colorspace::protan":{"description":"Transformation of R colors by simulating color vision deficiencies,\nbased on a CVD transform matrix.\n","example_call":"protan(col, severity = 1, linear = TRUE)"},"colorspace::HSV":{"description":"This function creates colors of class HSV; a subclass of the virtual\ncolor-class class.\n","example_call":"HSV(H, S, V, names)"},"colorspace::scale_colour_discrete_sequential":{"description":"Discrete ggplot2 color scales using the color palettes generated by sequential_hcl.\n","example_call":"scale_colour_discrete_sequential(palette = NULL, c1 = NULL, c2 = NULL, cmax = NULL,"},"colorspace::scale_color_continuous_diverging":{"description":"Continuous ggplot2 color scales using the color palettes generated by diverging_hcl.\n","example_call":"scale_color_continuous_diverging(palette = NULL, c1 = NULL, cmax = NULL, l1 = NULL,"},"colorspace::whitepoint":{"description":"This function can be used to control the single global whitepoint\nthat affects all color conversions within the package (that require\na whitepoint, i.e., go through XYZ).\n","example_call":"whitepoint(white, ...)"},"colorspace::scale_color_binned_qualitative":{"description":"Binned ggplot2 color scales using the color palettes generated by qualitative_hcl. These scales are provided\nfor completeness. It is not normally a good idea to color a continuous, binned variable using a qualitative scale.\n","example_call":"scale_color_binned_qualitative(palette = NULL, c1 = NULL, l1 = NULL, h1 = NULL, h2 = NULL,"},"colorspace::scale_colour_binned_qualitative":{"description":"Binned ggplot2 color scales using the color palettes generated by qualitative_hcl. These scales are provided\nfor completeness. It is not normally a good idea to color a continuous, binned variable using a qualitative scale.\n","example_call":"scale_colour_binned_qualitative(palette = NULL, c1 = NULL, l1 = NULL, h1 = NULL, h2 = NULL,"},"colorspace::desaturate":{"description":"Transform a vector of given colors to the corresponding colors with chroma\nreduced (by a tunable amount) in HCL space.\n","example_call":"desaturate(col, amount = 1, ...)"},"colorspace::hcl_palettes":{"description":"Qualitative, sequential (single-hue and multi-hue), and diverging\ncolor palettes based on the HCL (hue-chroma-luminance) color model.\n","example_call":"hcl_palettes(type = NULL, palette = NULL, plot = FALSE, n = 5L,"},"colorspace::scale_colour_continuous_diverging":{"description":"Continuous ggplot2 color scales using the color palettes generated by diverging_hcl.\n","example_call":"scale_colour_continuous_diverging(palette = NULL, c1 = NULL, cmax = NULL, l1 = NULL,"},"colorspace::scale_colour_discrete_divergingx":{"description":"Discrete ggplot2 color scales using the color palettes generated by divergingx_hcl.\n","example_call":"scale_colour_discrete_divergingx(palette = \"Geyser\", c1 = NULL, c2 = NULL, c3 = NULL,"},"colorspace::rainbow_hcl":{"description":"Color palettes based on the HCL (and HSV) color space to replace\nbase R palettes.\n","example_call":"rainbow_hcl(n, c = 50, l = 70, start = 0, end = 360 * (n - 1)/n,"},"colorspace::qualitative_hcl":{"description":"Qualitative, sequential (single-hue and multi-hue), and diverging\ncolor palettes based on the HCL (hue-chroma-luminance) color model.\n","example_call":"qualitative_hcl(n, h = c(0, 360 * (n - 1)/n), c = 80, l = 60, fixup = TRUE,"},"colorspace::scale_color_binned_divergingx":{"description":"Binned ggplot2 color scales using the color palettes generated by divergingx_hcl.\n","example_call":"scale_color_binned_divergingx(palette = \"Geyser\", c1 = NULL, c2 = NULL, c3 = NULL,"},"colorspace::polarLUV":{"description":"This function creates colors of class <U+201C>polarLUV<U+201D>; a subclass of the\nvirtual color-class class.\n","example_call":"polarLUV(L, C, H, names)"},"colorspace::tritan":{"description":"Transformation of R colors by simulating color vision deficiencies,\nbased on a CVD transform matrix.\n","example_call":"tritan(col, severity = 1, linear = TRUE)"},"colorspace::hex2RGB":{"description":"This function takes a vector of strings of the form \"#RRGGBB\"\n(hexadecimal color descriptions) into sRGB objects.\n","example_call":"hex2RGB(x, gamma = FALSE)"},"colorspace::divergex_hcl":{"description":"Diverging HCL color palettes generated through combination of two fully\nflexible (and possibly unbalanced) multi-hue sequential palettes.\n","example_call":"divergex_hcl(n, palette = \"Geyser\", ..., fixup = TRUE, alpha = 1,"},"colorspace::scale_fill_continuous_sequential":{"description":"Continuous ggplot2 color scales using the color palettes generated by sequential_hcl.\n","example_call":"scale_fill_continuous_sequential(..., aesthetics = \"fill\")"},"colorspace::scale_fill_binned_diverging":{"description":"Binned ggplot2 color scales using the color palettes generated by diverging_hcl.\n","example_call":"scale_fill_binned_diverging(..., aesthetics = \"fill\")"},"colorspace::divergingx_hcl":{"description":"Diverging HCL color palettes generated through combination of two fully\nflexible (and possibly unbalanced) multi-hue sequential palettes.\n","example_call":"divergingx_hcl(n, palette = \"Geyser\", ..., fixup = TRUE, alpha = 1,"},"colorspace::scale_colour_continuous_sequential":{"description":"Continuous ggplot2 color scales using the color palettes generated by sequential_hcl.\n","example_call":"scale_colour_continuous_sequential(palette = NULL, c1 = NULL, c2 = NULL, cmax = NULL,"},"colorspace::sequential_hcl":{"description":"Qualitative, sequential (single-hue and multi-hue), and diverging\ncolor palettes based on the HCL (hue-chroma-luminance) color model.\n","example_call":"sequential_hcl(n, h = 260, c = 80, l = c(30, 90), power = 1.5, gamma = NULL,"},"colorspace::deutanomaly_cvd":{"description":"Conversion tables for simulating different types of color vision deficiency (CVD):\nProtanomaly, deutanomaly, tritanomaly.\n","example_call":"NULL"},"colorspace::lighten":{"description":"The functions lighten and darken take a vector of R colors and adjust the colors such that\nthey appear lightened or darkened, respectively.\n","example_call":"lighten(col, amount = 0.1, method = c(\"relative\", \"absolute\"),"},"crayon::make_style":{"description":"Create a style, or a style function, or both. This function\nis intended for those who wish to use 256 ANSI colors,\ninstead of the more widely supported eight colors.\n","example_call":"make_style(..., bg = FALSE, grey = FALSE, colors = num_colors())"},"crayon::bgWhite":{"description":"With crayon it is easy to add color to terminal output, create styles\nfor notes, warnings, errors; and combine styles.\n","example_call":"bgWhite(...)"},"crayon::col_align":{"description":"Align an ANSI colored string\n","example_call":"col_align(text, width = getOption(\"width\"), align = c(\"left\","},"crayon::col_strsplit":{"description":"This is the color-aware counterpart of base::strsplit().\nIt works almost exactly like the original, but keeps the colors in the\nsubstrings.\n","example_call":"col_strsplit(x, split, ...)"},"crayon::underline":{"description":"With crayon it is easy to add color to terminal output, create styles\nfor notes, warnings, errors; and combine styles.\n","example_call":"underline(...)"},"crayon::finish":{"description":"Make a style active. The text printed to the screen from now\non will use this style.\n","example_call":"finish(x, ...)"},"crayon::bgYellow":{"description":"With crayon it is easy to add color to terminal output, create styles\nfor notes, warnings, errors; and combine styles.\n","example_call":"bgYellow(...)"},"crayon::num_ansi_colors":{"description":"Certain Unix and Windows terminals, and also certain R GUIs, e.g.\nRStudio, support styling terminal output using special control\nsequences (ANSI sequences).\n","example_call":"num_ansi_colors(stream = \"auto\")"},"crayon::styles":{"description":"You can use this function to list all availables crayon styles,\nvia names(styles()), or to explicitly apply an ANSI\nescape seauence to a string.\n","example_call":"styles()"},"crayon::%+%":{"description":"The length of the two arguments must match, or\none of them must be of length one. If the length of\none argument is one, then the output's length will\nmatch the length of the other argument. See examples\nbelow.\n","example_call":"%+%(lhs, rhs)"},"crayon::yellow":{"description":"With crayon it is easy to add color to terminal output, create styles\nfor notes, warnings, errors; and combine styles.\n","example_call":"yellow(...)"},"crayon::green":{"description":"With crayon it is easy to add color to terminal output, create styles\nfor notes, warnings, errors; and combine styles.\n","example_call":"green(...)"},"crayon::bgBlue":{"description":"With crayon it is easy to add color to terminal output, create styles\nfor notes, warnings, errors; and combine styles.\n","example_call":"bgBlue(...)"},"crayon::drop_style":{"description":"Remove a style\n","example_call":"drop_style(style)"},"crayon::show_ansi_colors":{"description":"Show the ANSI color table on the screen\n","example_call":"show_ansi_colors(colors = num_colors())"},"crayon::italic":{"description":"With crayon it is easy to add color to terminal output, create styles\nfor notes, warnings, errors; and combine styles.\n","example_call":"italic(...)"},"crayon::has_style":{"description":"Check if a string has some ANSI styling\n","example_call":"has_style(string)"},"crayon::style":{"description":"See names(styles), or the crayon manual for available styles.\n","example_call":"style(string, as = NULL, bg = NULL)"},"crayon::white":{"description":"With crayon it is easy to add color to terminal output, create styles\nfor notes, warnings, errors; and combine styles.\n","example_call":"white(...)"},"crayon::silver":{"description":"With crayon it is easy to add color to terminal output, create styles\nfor notes, warnings, errors; and combine styles.\n","example_call":"silver(...)"},"crayon::bgMagenta":{"description":"With crayon it is easy to add color to terminal output, create styles\nfor notes, warnings, errors; and combine styles.\n","example_call":"bgMagenta(...)"},"crayon::cyan":{"description":"With crayon it is easy to add color to terminal output, create styles\nfor notes, warnings, errors; and combine styles.\n","example_call":"cyan(...)"},"crayon::reset":{"description":"With crayon it is easy to add color to terminal output, create styles\nfor notes, warnings, errors; and combine styles.\n","example_call":"reset(...)"},"crayon::has_color":{"description":"From crayon 2.0.0, this function is simply a wrapper on\nnum_ansi_colors().\n","example_call":"has_color()"},"crayon::bold":{"description":"With crayon it is easy to add color to terminal output, create styles\nfor notes, warnings, errors; and combine styles.\n","example_call":"bold(...)"},"crayon::inverse":{"description":"With crayon it is easy to add color to terminal output, create styles\nfor notes, warnings, errors; and combine styles.\n","example_call":"inverse(...)"},"crayon::black":{"description":"With crayon it is easy to add color to terminal output, create styles\nfor notes, warnings, errors; and combine styles.\n","example_call":"black(...)"},"crayon::bgRed":{"description":"With crayon it is easy to add color to terminal output, create styles\nfor notes, warnings, errors; and combine styles.\n","example_call":"bgRed(...)"},"crayon::col_substr":{"description":"This is a color-aware counterpart of base::substr().\nIt works exactly like the original, but keeps the colors\nin the substrings. The ANSI escape sequences are ignored when\ncalculating the positions within the string.\n","example_call":"col_substr(x, start, stop)"},"crayon::combine_styles":{"description":"Combine two or more styles or style functions into a new style function\nthat can be called on strings to style them.\n","example_call":"combine_styles(...)"},"crayon::red":{"description":"With crayon it is easy to add color to terminal output, create styles\nfor notes, warnings, errors; and combine styles.\n","example_call":"red(...)"},"crayon::num_colors":{"description":"From crayon version 2.0.0, this function is a simple wrapper on\nnum_ansi_colors(), with the additional twist that the crayon.colors\noption is still obseved, and takes precedence, for compatibility.\n","example_call":"num_colors(forget = FALSE)"},"crayon::bgCyan":{"description":"With crayon it is easy to add color to terminal output, create styles\nfor notes, warnings, errors; and combine styles.\n","example_call":"bgCyan(...)"},"crayon::strikethrough":{"description":"With crayon it is easy to add color to terminal output, create styles\nfor notes, warnings, errors; and combine styles.\n","example_call":"strikethrough(...)"},"crayon::hidden":{"description":"With crayon it is easy to add color to terminal output, create styles\nfor notes, warnings, errors; and combine styles.\n","example_call":"hidden(...)"},"crayon::chr":{"description":"This function just calls as.character(), but it is\neasier to type and read.\n","example_call":"chr(x, ...)"},"crayon::bgBlack":{"description":"With crayon it is easy to add color to terminal output, create styles\nfor notes, warnings, errors; and combine styles.\n","example_call":"bgBlack(...)"},"crayon::blurred":{"description":"With crayon it is easy to add color to terminal output, create styles\nfor notes, warnings, errors; and combine styles.\n","example_call":"blurred(...)"},"crayon::magenta":{"description":"With crayon it is easy to add color to terminal output, create styles\nfor notes, warnings, errors; and combine styles.\n","example_call":"magenta(...)"},"crayon::col_nchar":{"description":"This is a color-aware counterpart of base::nchar(),\nwhich does not do well, since it also counts the ANSI control\ncharacters.\n","example_call":"col_nchar(x, ...)"},"crayon::hyperlink":{"description":"Terminal Hyperlinks\n","example_call":"hyperlink(text, url)"},"crayon::bgGreen":{"description":"With crayon it is easy to add color to terminal output, create styles\nfor notes, warnings, errors; and combine styles.\n","example_call":"bgGreen(...)"},"crayon::strip_style":{"description":"Remove ANSI escape sequences from a string\n","example_call":"strip_style(string)"},"crayon::has_hyperlink":{"description":"Terminal Hyperlinks\n","example_call":"has_hyperlink()"},"crayon::blue":{"description":"With crayon it is easy to add color to terminal output, create styles\nfor notes, warnings, errors; and combine styles.\n","example_call":"blue(...)"},"crayon::col_substring":{"description":"This is the color-aware counterpart of base::substring().\nIt works exactly like the original, but keeps the colors in the\nsubstrings. The ANSI escape sequences are ignored when\ncalculating the positions within the string.\n","example_call":"col_substring(text, first, last = 1000000L)"},"datawizard::data_extract":{"description":"data_extract() (or its alias extract()) is similar to $. It extracts\neither a single column or element from an object (e.g., a data frame, list),\nor multiple columns resp. elements.\n","example_call":"data_extract(data, select, ...)"},"datawizard::detrend":{"description":"demean() computes group- and de-meaned versions of a variable that can be\nused in regression analysis to model the between- and within-subject effect.\ndegroup() is more generic in terms of the centering-operation. While\ndemean() always uses mean-centering, degroup() can also use the mode or\nmedian for centering.\n","example_call":"detrend(x, select, by, nested = FALSE, center = \"mean\", suffix_demean = \"_within\","},"datawizard::reverse_scale":{"description":"Reverse-score variables (change the keying/scoring direction).\n","example_call":"reverse_scale(x, ...)"},"datawizard::slide":{"description":"This functions shifts the value range of a numeric variable, so that the\nnew range starts at a given value.\n","example_call":"slide(x, ...)"},"datawizard::data_addprefix":{"description":"Safe and intuitive functions to rename variables or rows in\ndata frames. data_rename() will rename column names, i.e. it facilitates\nrenaming variables data_addprefix() or data_addsuffix() add prefixes\nor suffixes to column names. data_rename_rows() is a convenient shortcut\nto add or rename row names of a data frame, but unlike row.names(), its\ninput and output is a data frame, thus, integrating smoothly into a possible\npipe-workflow.\n","example_call":"data_addprefix(data, pattern, select = NULL, exclude = NULL, ignore_case = FALSE,"},"datawizard::data_addsuffix":{"description":"Safe and intuitive functions to rename variables or rows in\ndata frames. data_rename() will rename column names, i.e. it facilitates\nrenaming variables data_addprefix() or data_addsuffix() add prefixes\nor suffixes to column names. data_rename_rows() is a convenient shortcut\nto add or rename row names of a data frame, but unlike row.names(), its\ninput and output is a data frame, thus, integrating smoothly into a possible\npipe-workflow.\n","example_call":"data_addsuffix(data, pattern, select = NULL, exclude = NULL, ignore_case = FALSE,"},"datawizard::distribution_coef_var":{"description":"Compute the coefficient of variation (CV, ratio of the standard deviation to\nthe mean, \\sigma/\\mu) for a set of numeric values.\n","example_call":"distribution_coef_var(x, ...)"},"datawizard::center":{"description":"Performs a grand-mean centering of data.\n","example_call":"center(x, ...)"},"datawizard::smoothness":{"description":"Quantify the smoothness of a vector\n","example_call":"smoothness(x, method = \"cor\", lag = 1, iterations = NULL, ...)"},"datawizard::winsorize":{"description":"Winsorize data\n","example_call":"winsorize(data, ...)"},"datawizard::reverse":{"description":"Reverse-score variables (change the keying/scoring direction).\n","example_call":"reverse(x, ...)"},"datawizard::weighted_mean":{"description":"Weighted Mean, Median, SD, and MAD\n","example_call":"weighted_mean(x, weights = NULL, remove_na = TRUE, verbose = TRUE,"},"datawizard::describe_distribution":{"description":"This function describes a distribution by a set of indices (e.g., measures of\ncentrality, dispersion, range, skewness, kurtosis).\n","example_call":"describe_distribution(x, ...)"},"datawizard::weighted_mad":{"description":"Weighted Mean, Median, SD, and MAD\n","example_call":"weighted_mad(x, weights = NULL, constant = 1.4826, remove_na = TRUE,"},"datawizard::median_mad":{"description":"Summary Helpers\n","example_call":"median_mad(x, times = 1L, remove_na = TRUE, constant = 1.4826,"},"datawizard::rescale":{"description":"Rescale variables to a new range. Can also be used to reverse-score variables\n(change the keying/scoring direction), or to expand a range.\n","example_call":"rescale(x, ...)"},"datawizard::rownames_as_column":{"description":"Tools for working with row names or row ids\n","example_call":"rownames_as_column(x, var = \"rowname\")"},"datawizard::colnames_to_row":{"description":"Tools for working with column names\n","example_call":"colnames_to_row(x, prefix = \"x\")"},"datawizard::data_find":{"description":"extract_column_names() returns column names from a data set that\nmatch a certain search pattern, while data_select() returns the found data.\n","example_call":"data_find(data, select = NULL, exclude = NULL, ignore_case = FALSE,"},"datawizard::reshape_ci":{"description":"Reshape CI between wide/long formats.\n","example_call":"reshape_ci(x, ci_type = \"CI\")"},"datawizard::centre":{"description":"Performs a grand-mean centering of data.\n","example_call":"centre(x, ...)"},"datawizard::convert_to_na":{"description":"Convert non-missing values in a variable into missing values.\n","example_call":"convert_to_na(x, ...)"},"datawizard::data_partition":{"description":"Creates data partitions (for instance, a training and a test set) based on a\ndata frame that can also be stratified (i.e., evenly spread a given factor)\nusing the by argument.\n","example_call":"data_partition(data, proportion = 0.7, by = NULL, seed = NULL, row_id = \".row_id\","},"datawizard::data_read":{"description":"This functions imports data from various file types. It is a small wrapper\naround haven::read_spss(), haven::read_stata(), haven::read_sas(),\nreadxl::read_excel() and data.table::fread() resp. readr::read_delim()\n(the latter if package data.table is not installed). Thus, supported file\ntypes for importing data are data files from SPSS, SAS or Stata, Excel files\nor text files (like '.csv' files). All other file types are passed to\nrio::import(). data_write() works in a similar way.\n","example_call":"data_read(path, path_catalog = NULL, encoding = NULL, convert_factors = TRUE,"},"datawizard::rowid_as_column":{"description":"Tools for working with row names or row ids\n","example_call":"rowid_as_column(x, var = \"rowid\")"},"datawizard::data_join":{"description":"Merge (join) two data frames, or a list of data frames. However, unlike\nbase R's merge(), data_merge() offers a few more methods to join data\nframes, and it does not drop data frame nor column attributes.\n","example_call":"data_join(x, ...)"},"datawizard::assign_labels":{"description":"Assign variable and values labels to a variable or variables in a data frame.\nLabels are stored as attributes (\"label\" for variable labels and \"labels\")\nfor value labels.\n","example_call":"assign_labels(x, ...)"},"datawizard::text_concatenate":{"description":"Convenience functions to manipulate and format text.\n","example_call":"text_concatenate(text, sep = \", \", last = \" and \", enclose = NULL)"},"datawizard::categorize":{"description":"This functions divides the range of variables into intervals and recodes\nthe values inside these intervals according to their related interval.\nIt is basically a wrapper around base R's cut(), providing a simplified\nand more accessible way to define the interval breaks (cut-off values).\n","example_call":"categorize(x, ...)"},"datawizard::data_unique":{"description":"From all rows with at least one duplicated ID,\nkeep only one. Methods for selecting the duplicated row are\neither the first duplicate, the last duplicate, or the \"best\"\nduplicate (default), based on the duplicate with the smallest\nnumber of NA. In case of ties, it picks the first\nduplicate, as it is the one most likely to be valid and\nauthentic, given practice effects.\n","example_call":"data_unique(data, select = NULL, keep = \"best\", exclude = NULL,"},"datawizard::weighted_median":{"description":"Weighted Mean, Median, SD, and MAD\n","example_call":"weighted_median(x, weights = NULL, remove_na = TRUE, verbose = TRUE,"},"datawizard::to_factor":{"description":"Convert data to factors\n","example_call":"to_factor(x, ...)"},"datawizard::text_lastchar":{"description":"Convenience functions to manipulate and format text.\n","example_call":"text_lastchar(text, n = 1)"},"datawizard::labels_to_levels":{"description":"Convert value labels into factor levels\n","example_call":"labels_to_levels(x, ...)"},"datawizard::extract_column_names":{"description":"extract_column_names() returns column names from a data set that\nmatch a certain search pattern, while data_select() returns the found data.\n","example_call":"extract_column_names(data, select = NULL, exclude = NULL, ignore_case = FALSE,"},"datawizard::text_wrap":{"description":"Convenience functions to manipulate and format text.\n","example_call":"text_wrap(text, width = NULL, ...)"},"datawizard::text_fullstop":{"description":"Convenience functions to manipulate and format text.\n","example_call":"text_fullstop(text)"},"datawizard::data_write":{"description":"This functions imports data from various file types. It is a small wrapper\naround haven::read_spss(), haven::read_stata(), haven::read_sas(),\nreadxl::read_excel() and data.table::fread() resp. readr::read_delim()\n(the latter if package data.table is not installed). Thus, supported file\ntypes for importing data are data files from SPSS, SAS or Stata, Excel files\nor text files (like '.csv' files). All other file types are passed to\nrio::import(). data_write() works in a similar way.\n","example_call":"data_write(data, path, delimiter = \",\", convert_factors = FALSE,"},"datawizard::data_to_long":{"description":"This function \"lengthens\" data, increasing the number of rows and decreasing\nthe number of columns. This is a dependency-free base-R equivalent of\ntidyr::pivot_longer().\n","example_call":"data_to_long(data, select = \"all\", names_to = \"name\", names_prefix = NULL,"},"datawizard::convert_na_to":{"description":"Replace missing values in a variable or a data frame.\n","example_call":"convert_na_to(x, ...)"},"datawizard::mean_sd":{"description":"Summary Helpers\n","example_call":"mean_sd(x, times = 1L, remove_na = TRUE, named = TRUE, na.rm = TRUE,"},"datawizard::data_arrange":{"description":"data_arrange() orders the rows of a data frame by the values of selected\ncolumns.\n","example_call":"data_arrange(data, select = NULL, safe = TRUE)"},"datawizard::skewness":{"description":"Compute Skewness and (Excess) Kurtosis\n","example_call":"skewness(x, ...)"},"datawizard::weighted_sd":{"description":"Weighted Mean, Median, SD, and MAD\n","example_call":"weighted_sd(x, weights = NULL, remove_na = TRUE, verbose = TRUE,"},"datawizard::unstandardize":{"description":"Performs a standardization of data (z-scoring), i.e., centering and scaling,\nso that the data is expressed in terms of standard deviation (i.e., mean = 0,\nSD = 1) or Median Absolute Deviance (median = 0, MAD = 1). When applied to a\nstatistical model, this function extracts the dataset, standardizes it, and\nrefits the model with this standardized version of the dataset. The\nnormalize() function can also be used to scale all numeric variables within\nthe 0 - 1 range.\n\nFor model standardization, see standardize.default().\n","example_call":"unstandardize(x, ...)"},"datawizard::data_group":{"description":"This function is comparable to dplyr::group_by(), but just\nfollowing the datawizard function design. data_ungroup() removes the\ngrouping information from a grouped data frame.\n","example_call":"data_group(data, select = NULL, exclude = NULL, ignore_case = FALSE,"},"datawizard::data_remove":{"description":"data_relocate() will reorder columns to specific positions, indicated by\nbefore or after. data_reorder() will instead move selected columns to\nthe beginning of a data frame. Finally, data_remove() removes columns\nfrom a data frame. All functions support select-helpers that allow flexible\nspecification of a search pattern to find matching columns, which should\nbe reordered or removed.\n","example_call":"data_remove(data, select = NULL, exclude = NULL, ignore_case = FALSE,"},"datawizard::data_tabulate":{"description":"This function creates frequency or crosstables of variables,\nincluding the number of levels/values as well as the distribution of raw,\nvalid and cumulative percentages. For crosstables, row, column  and cell\npercentages can be calculated.\n","example_call":"data_tabulate(x, ...)"},"datawizard::rescale_weights":{"description":"Most functions to fit multilevel and mixed effects models only\nallow to specify frequency weights, but not design (i.e. sampling or\nprobability) weights, which should be used when analyzing complex samples\nand survey data. rescale_weights() implements an algorithm proposed\nby Asparouhov (2006) and Carle (2009) to rescale design\nweights in survey data to account for the grouping structure of multilevel\nmodels, which then can be used for multilevel modelling.\n","example_call":"rescale_weights(data, by, probability_weights, nest = FALSE, group = NULL)"},"datawizard::format_text":{"description":"Convenience functions to manipulate and format text.\n","example_call":"format_text(text, sep = \", \", last = \" and \", width = NULL, enclose = NULL,"},"datawizard::data_relocate":{"description":"data_relocate() will reorder columns to specific positions, indicated by\nbefore or after. data_reorder() will instead move selected columns to\nthe beginning of a data frame. Finally, data_remove() removes columns\nfrom a data frame. All functions support select-helpers that allow flexible\nspecification of a search pattern to find matching columns, which should\nbe reordered or removed.\n","example_call":"data_relocate(data, select, before = NULL, after = NULL, ignore_case = FALSE,"},"datawizard::distribution_mode":{"description":"Compute mode for a statistical distribution\n","example_call":"distribution_mode(x)"},"datawizard::reshape_wider":{"description":"This function \"widens\" data, increasing the number of columns and decreasing\nthe number of rows. This is a dependency-free base-R equivalent of\ntidyr::pivot_wider().\n","example_call":"reshape_wider(data, id_cols = NULL, values_from = \"Value\", names_from = \"Name\","},"datawizard::remove_empty_rows":{"description":"These functions check which rows or columns of a data frame completely\ncontain missing values, i.e. which observations or variables completely have\nmissing values, and either (1) returns their indices; or (2) removes them\nfrom the data frame.\n","example_call":"remove_empty_rows(x)"},"datawizard::empty_columns":{"description":"These functions check which rows or columns of a data frame completely\ncontain missing values, i.e. which observations or variables completely have\nmissing values, and either (1) returns their indices; or (2) removes them\nfrom the data frame.\n","example_call":"empty_columns(x)"},"datawizard::row_means":{"description":"This function is similar to the SPSS MEAN.n function and computes\nrow means from a data frame or matrix if at least min_valid values of a row are\nvalid (and not NA).\n","example_call":"row_means(data, select = NULL, exclude = NULL, min_valid = NULL,"},"datawizard::text_format":{"description":"Convenience functions to manipulate and format text.\n","example_call":"text_format(text, sep = \", \", last = \" and \", width = NULL, enclose = NULL,"},"datawizard::visualisation_recipe":{"description":"This function prepares objects for visualisation by returning a list of\nlayers with data and geoms that can be easily plotted using for instance\nggplot2.\n","example_call":"visualisation_recipe(x, ...)"},"datawizard::data_separate":{"description":"Separates a single variable into multiple new variables.\n","example_call":"data_separate(data, select = NULL, new_columns = NULL, separator = \"[^[:alnum:]]+\","},"datawizard::data_reorder":{"description":"data_relocate() will reorder columns to specific positions, indicated by\nbefore or after. data_reorder() will instead move selected columns to\nthe beginning of a data frame. Finally, data_remove() removes columns\nfrom a data frame. All functions support select-helpers that allow flexible\nspecification of a search pattern to find matching columns, which should\nbe reordered or removed.\n","example_call":"data_reorder(data, select, exclude = NULL, ignore_case = FALSE,"},"datawizard::get_columns":{"description":"extract_column_names() returns column names from a data set that\nmatch a certain search pattern, while data_select() returns the found data.\n","example_call":"get_columns(data, select = NULL, exclude = NULL, ignore_case = FALSE,"},"datawizard::row_to_colnames":{"description":"Tools for working with column names\n","example_call":"row_to_colnames(x, row = 1, na_prefix = \"x\", verbose = TRUE)"},"datawizard::coerce_to_numeric":{"description":"Tries to convert vector to numeric if possible (if no warnings or errors).\nOtherwise, leaves it as is.\n","example_call":"coerce_to_numeric(x)"},"datawizard::remove_empty_columns":{"description":"These functions check which rows or columns of a data frame completely\ncontain missing values, i.e. which observations or variables completely have\nmissing values, and either (1) returns their indices; or (2) removes them\nfrom the data frame.\n","example_call":"remove_empty_columns(x)"},"datawizard::data_codebook":{"description":"data_codebook() generates codebooks from data frames, i.e. overviews\nof all variables and some more information about each variable (like\nlabels, values or value range, frequencies, amount of missing values).\n","example_call":"data_codebook(data, select = NULL, exclude = NULL, variable_label_width = NULL,"},"datawizard::data_replicate":{"description":"Expand a data frame by replicating rows based on another variable that\ncontains the counts of replications per row.\n","example_call":"data_replicate(data, expand = NULL, select = NULL, exclude = NULL,"},"datawizard::data_filter":{"description":"Return a filtered (or sliced) data frame or row indices of a data frame that\nmatch a specific condition. data_filter() works like data_match(), but works\nwith logical expressions or row indices of a data frame to specify matching\nconditions.\n","example_call":"data_filter(x, ...)"},"datawizard::demean":{"description":"demean() computes group- and de-meaned versions of a variable that can be\nused in regression analysis to model the between- and within-subject effect.\ndegroup() is more generic in terms of the centering-operation. While\ndemean() always uses mean-centering, degroup() can also use the mode or\nmedian for centering.\n","example_call":"demean(x, select, by, nested = FALSE, suffix_demean = \"_within\","},"datawizard::contr.deviation":{"description":"Build a deviation contrast matrix, a type of effects contrast matrix.\n","example_call":"contr.deviation(n, base = 1, contrasts = TRUE, sparse = FALSE)"},"datawizard::degroup":{"description":"demean() computes group- and de-meaned versions of a variable that can be\nused in regression analysis to model the between- and within-subject effect.\ndegroup() is more generic in terms of the centering-operation. While\ndemean() always uses mean-centering, degroup() can also use the mode or\nmedian for centering.\n","example_call":"degroup(x, select, by, nested = FALSE, center = \"mean\", suffix_demean = \"_within\","},"datawizard::means_by_group":{"description":"Computes summary table of means by groups.\n","example_call":"means_by_group(x, ...)"},"datawizard::data_match":{"description":"Return a filtered (or sliced) data frame or row indices of a data frame that\nmatch a specific condition. data_filter() works like data_match(), but works\nwith logical expressions or row indices of a data frame to specify matching\nconditions.\n","example_call":"data_match(x, to, match = \"and\", return_indices = FALSE, drop_na = TRUE,"},"datawizard::data_modify":{"description":"Create new variables or modify existing variables in a data frame. Unlike base::transform(), data_modify()\ncan be used on grouped data frames, and newly created variables can be directly\nused.\n","example_call":"data_modify(data, ...)"},"datawizard::reshape_longer":{"description":"This function \"lengthens\" data, increasing the number of rows and decreasing\nthe number of columns. This is a dependency-free base-R equivalent of\ntidyr::pivot_longer().\n","example_call":"reshape_longer(data, select = \"all\", names_to = \"name\", names_prefix = NULL,"},"datawizard::replace_nan_inf":{"description":"Replaces all infinite (Inf and -Inf) or NaN values with NA.\n","example_call":"replace_nan_inf(x, ...)"},"datawizard::column_as_rownames":{"description":"Tools for working with row names or row ids\n","example_call":"column_as_rownames(x, var = \"rowname\")"},"datawizard::kurtosis":{"description":"Compute Skewness and (Excess) Kurtosis\n","example_call":"kurtosis(x, ...)"},"datawizard::data_ungroup":{"description":"This function is comparable to dplyr::group_by(), but just\nfollowing the datawizard function design. data_ungroup() removes the\ngrouping information from a grouped data frame.\n","example_call":"data_ungroup(data, verbose = TRUE, ...)"},"datawizard::standardise":{"description":"Performs a standardization of data (z-scoring), i.e., centering and scaling,\nso that the data is expressed in terms of standard deviation (i.e., mean = 0,\nSD = 1) or Median Absolute Deviance (median = 0, MAD = 1). When applied to a\nstatistical model, this function extracts the dataset, standardizes it, and\nrefits the model with this standardized version of the dataset. The\nnormalize() function can also be used to scale all numeric variables within\nthe 0 - 1 range.\n\nFor model standardization, see standardize.default().\n","example_call":"standardise(x, ...)"},"datawizard::ranktransform":{"description":"Transform numeric values with the integers of their rank (i.e., 1st smallest,\n2nd smallest, 3rd smallest, etc.). Setting the sign argument to TRUE will\ngive you signed ranks, where the ranking is done according to absolute size\nbut where the sign is preserved (i.e., 2, 1, -3, 4).\n","example_call":"ranktransform(x, ...)"},"datawizard::data_unite":{"description":"Merge values of multiple variables per observation into one new variable.\n","example_call":"data_unite(data, new_column = NULL, select = NULL, exclude = NULL,"},"datawizard::recode_values":{"description":"This functions recodes old values into new values and can be used to to\nrecode numeric or character vectors, or factors.\n","example_call":"recode_values(x, ...)"},"datawizard::data_seek":{"description":"This functions seeks variables in a data frame, based on patterns\nthat either match the variable name (column name), variable labels, value labels\nor factor levels. Matching variable and value labels only works for \"labelled\"\ndata, i.e. when the variables either have a label attribute or labels\nattribute.\n","example_call":"data_seek(data, pattern, seek = c(\"names\", \"labels\"), fuzzy = FALSE)"},"datawizard::empty_rows":{"description":"These functions check which rows or columns of a data frame completely\ncontain missing values, i.e. which observations or variables completely have\nmissing values, and either (1) returns their indices; or (2) removes them\nfrom the data frame.\n","example_call":"empty_rows(x)"},"datawizard::data_select":{"description":"extract_column_names() returns column names from a data set that\nmatch a certain search pattern, while data_select() returns the found data.\n","example_call":"data_select(data, select = NULL, exclude = NULL, ignore_case = FALSE,"},"datawizard::adjust":{"description":"This function can be used to adjust the data for the effect of other\nvariables present in the dataset. It is based on an underlying fitting of\nregressions models, allowing for quite some flexibility, such as including\nfactors as random effects in mixed models (multilevel partialization),\ncontinuous variables as smooth terms in general additive models (non-linear\npartialization) and/or fitting these models under a Bayesian framework. The\nvalues returned by this function are the residuals of the regression models.\nNote that a regular correlation between two \"adjusted\" variables is\nequivalent to the partial correlation between them.\n","example_call":"adjust(data, effect = NULL, select = is.numeric, exclude = NULL,"},"datawizard::data_duplicated":{"description":"Extract all duplicates, for visual inspection.\nNote that it also contains the first occurrence of future\nduplicates, unlike duplicated() or dplyr::distinct()). Also\ncontains an additional column reporting the number of missing\nvalues for that row, to help in the decision-making when\nselecting which duplicates to keep.\n","example_call":"data_duplicated(data, select = NULL, exclude = NULL, ignore_case = FALSE,"},"datawizard::unnormalize":{"description":"Performs a normalization of data, i.e., it scales variables in the range\n0 - 1. This is a special case of rescale(). unnormalize() is the\ncounterpart, but only works for variables that have been normalized with\nnormalize().\n","example_call":"unnormalize(x, ...)"},"datawizard::change_scale":{"description":"Rescale variables to a new range. Can also be used to reverse-score variables\n(change the keying/scoring direction), or to expand a range.\n","example_call":"change_scale(x, ...)"},"datawizard::normalize":{"description":"Performs a normalization of data, i.e., it scales variables in the range\n0 - 1. This is a special case of rescale(). unnormalize() is the\ncounterpart, but only works for variables that have been normalized with\nnormalize().\n","example_call":"normalize(x, ...)"},"datawizard::data_restoretype":{"description":"Restore the type of columns according to a reference data frame\n","example_call":"data_restoretype(data, reference = NULL, ...)"},"datawizard::to_numeric":{"description":"Convert data to numeric by converting characters to factors and factors to\neither numeric levels or dummy variables. The \"counterpart\" to convert\nvariables into factors is to_factor().\n","example_call":"to_numeric(x, ...)"},"datawizard::data_adjust":{"description":"This function can be used to adjust the data for the effect of other\nvariables present in the dataset. It is based on an underlying fitting of\nregressions models, allowing for quite some flexibility, such as including\nfactors as random effects in mixed models (multilevel partialization),\ncontinuous variables as smooth terms in general additive models (non-linear\npartialization) and/or fitting these models under a Bayesian framework. The\nvalues returned by this function are the residuals of the regression models.\nNote that a regular correlation between two \"adjusted\" variables is\nequivalent to the partial correlation between them.\n","example_call":"data_adjust(data, effect = NULL, select = is.numeric, exclude = NULL,"},"datawizard::text_paste":{"description":"Convenience functions to manipulate and format text.\n","example_call":"text_paste(text, text2 = NULL, sep = \", \", enclose = NULL, ...)"},"datawizard::remove_empty":{"description":"These functions check which rows or columns of a data frame completely\ncontain missing values, i.e. which observations or variables completely have\nmissing values, and either (1) returns their indices; or (2) removes them\nfrom the data frame.\n","example_call":"remove_empty(x)"},"datawizard::data_rotate":{"description":"This function rotates a data frame, i.e. columns become rows and vice versa.\nIt's the equivalent of using t() but restores the data.frame class,\npreserves attributes and prints a warning if the data type is\nmodified (see example).\n","example_call":"data_rotate(data, rownames = NULL, colnames = FALSE, verbose = TRUE)"},"datawizard::data_merge":{"description":"Merge (join) two data frames, or a list of data frames. However, unlike\nbase R's merge(), data_merge() offers a few more methods to join data\nframes, and it does not drop data frame nor column attributes.\n","example_call":"data_merge(x, ...)"},"datawizard::data_rename":{"description":"Safe and intuitive functions to rename variables or rows in\ndata frames. data_rename() will rename column names, i.e. it facilitates\nrenaming variables data_addprefix() or data_addsuffix() add prefixes\nor suffixes to column names. data_rename_rows() is a convenient shortcut\nto add or rename row names of a data frame, but unlike row.names(), its\ninput and output is a data frame, thus, integrating smoothly into a possible\npipe-workflow.\n","example_call":"data_rename(data, pattern = NULL, replacement = NULL, safe = TRUE,"},"datawizard::find_columns":{"description":"extract_column_names() returns column names from a data set that\nmatch a certain search pattern, while data_select() returns the found data.\n","example_call":"find_columns(data, select = NULL, exclude = NULL, ignore_case = FALSE,"},"datawizard::unstandardise":{"description":"Performs a standardization of data (z-scoring), i.e., centering and scaling,\nso that the data is expressed in terms of standard deviation (i.e., mean = 0,\nSD = 1) or Median Absolute Deviance (median = 0, MAD = 1). When applied to a\nstatistical model, this function extracts the dataset, standardizes it, and\nrefits the model with this standardized version of the dataset. The\nnormalize() function can also be used to scale all numeric variables within\nthe 0 - 1 range.\n\nFor model standardization, see standardize.default().\n","example_call":"unstandardise(x, ...)"},"datawizard::data_peek":{"description":"This function creates a table a data frame, showing all\ncolumn names, variable types and the first values (as many as fit into\nthe screen).\n","example_call":"data_peek(x, ...)"},"datawizard::data_rename_rows":{"description":"Safe and intuitive functions to rename variables or rows in\ndata frames. data_rename() will rename column names, i.e. it facilitates\nrenaming variables data_addprefix() or data_addsuffix() add prefixes\nor suffixes to column names. data_rename_rows() is a convenient shortcut\nto add or rename row names of a data frame, but unlike row.names(), its\ninput and output is a data frame, thus, integrating smoothly into a possible\npipe-workflow.\n","example_call":"data_rename_rows(data, rows = NULL)"},"datawizard::text_remove":{"description":"Convenience functions to manipulate and format text.\n","example_call":"text_remove(text, pattern = \"\", ...)"},"datawizard::standardize":{"description":"Performs a standardization of data (z-scoring), i.e., centering and scaling,\nso that the data is expressed in terms of standard deviation (i.e., mean = 0,\nSD = 1) or Median Absolute Deviance (median = 0, MAD = 1). When applied to a\nstatistical model, this function extracts the dataset, standardizes it, and\nrefits the model with this standardized version of the dataset. The\nnormalize() function can also be used to scale all numeric variables within\nthe 0 - 1 range.\n\nFor model standardization, see standardize.default().\n","example_call":"standardize(x, ...)"},"datawizard::change_code":{"description":"This functions recodes old values into new values and can be used to to\nrecode numeric or character vectors, or factors.\n","example_call":"change_code(x, select = NULL, exclude = NULL, recode = NULL, default = NULL,"},"datawizard::data_transpose":{"description":"This function rotates a data frame, i.e. columns become rows and vice versa.\nIt's the equivalent of using t() but restores the data.frame class,\npreserves attributes and prints a warning if the data type is\nmodified (see example).\n","example_call":"data_transpose(data, rownames = NULL, colnames = FALSE, verbose = TRUE)"},"datawizard::coef_var":{"description":"Compute the coefficient of variation (CV, ratio of the standard deviation to\nthe mean, \\sigma/\\mu) for a set of numeric values.\n","example_call":"coef_var(x, ...)"},"datawizard::data_to_wide":{"description":"This function \"widens\" data, increasing the number of columns and decreasing\nthe number of rows. This is a dependency-free base-R equivalent of\ntidyr::pivot_wider().\n","example_call":"data_to_wide(data, id_cols = NULL, values_from = \"Value\", names_from = \"Name\","},"datawizard::data_summary":{"description":"This function can be used to compute summary statistics for a\ndata frame or a matrix.\n","example_call":"data_summary(x, ...)"},"datawizard::recode_into":{"description":"This functions recodes values from one or more variables into a new variable.\nIt is a convenient function to avoid nested ifelse() statements, which\nis similar to dplyr::case_when().\n","example_call":"recode_into(..., data = NULL, default = NA, overwrite = TRUE, preserve_na = FALSE,"},"dplyr::slice_max":{"description":"slice() lets you index rows by their (integer) locations. It allows you\nto select, remove, and duplicate rows. It is accompanied by a number of\nhelpers for common use cases:\n","example_call":"slice_max(.data, order_by, ..., n, prop, by = NULL, with_ties = TRUE,"},"dplyr::src":{"description":"src() is the standard constructor for srcs and is.src() tests.\n","example_call":"src(subclass, ...)"},"dplyr::db_desc":{"description":"The sql_ generics are used to build the different types of SQL queries.\nThe default implementations in dbplyr generates ANSI 92 compliant SQL.\nThe db_ generics execute actions on the database. The default\nimplementations in dbplyr typically just call the standard DBI S4\nmethod.\n","example_call":"db_desc(x)"},"dplyr::group_by_drop_default":{"description":"Default value for .drop argument of group_by\n","example_call":"group_by_drop_default(.tbl)"},"dplyr::db_commit":{"description":"The sql_ generics are used to build the different types of SQL queries.\nThe default implementations in dbplyr generates ANSI 92 compliant SQL.\nThe db_ generics execute actions on the database. The default\nimplementations in dbplyr typically just call the standard DBI S4\nmethod.\n","example_call":"db_commit(con, ...)"},"dplyr::coalesce":{"description":"Given a set of vectors, coalesce() finds the first non-missing value at\neach position. It's inspired by the SQL COALESCE function which does the\nsame thing for SQL NULLs.\n","example_call":"coalesce(..., .ptype = NULL, .size = NULL)"},"dplyr::summarize_if":{"description":"\n","example_call":"summarize_if(.tbl, .predicate, .funs, ...)"},"dplyr::mutate_":{"description":"\n","example_call":"mutate_(.data, ..., .dots = list())"},"dplyr::db_create_index":{"description":"The sql_ generics are used to build the different types of SQL queries.\nThe default implementations in dbplyr generates ANSI 92 compliant SQL.\nThe db_ generics execute actions on the database. The default\nimplementations in dbplyr typically just call the standard DBI S4\nmethod.\n","example_call":"db_create_index(con, table, columns, name = NULL, unique = FALSE, ...)"},"dplyr::join_by":{"description":"join_by() constructs a specification that describes how to join two tables\nusing a small domain specific language. The result can be supplied as the\nby argument to any of the join functions (such as left_join()).\n","example_call":"join_by(...)"},"dplyr::check_dbplyr":{"description":"In dplyr 0.7.0, a number of database and SQL functions moved from dplyr to\ndbplyr. The generic functions stayed in dplyr (since there is no easy way\nto conditionally import a generic from different packages), but many other\nSQL and database helper functions moved. If you have written a backend,\nthese functions generate the code you need to work with both dplyr 0.5.0\ndplyr 0.7.0.\n","example_call":"check_dbplyr()"},"dplyr::src_tbls":{"description":"This is a generic method which individual src's will provide methods for.\nMost methods will not be documented because it's usually pretty obvious what\npossible results will be.\n","example_call":"src_tbls(x, ...)"},"dplyr::db_query_rows":{"description":"The sql_ generics are used to build the different types of SQL queries.\nThe default implementations in dbplyr generates ANSI 92 compliant SQL.\nThe db_ generics execute actions on the database. The default\nimplementations in dbplyr typically just call the standard DBI S4\nmethod.\n","example_call":"db_query_rows(con, sql, ...)"},"dplyr::dense_rank":{"description":"Three ranking functions inspired by SQL2003. They differ primarily in how\nthey handle ties:\n","example_call":"dense_rank(x)"},"dplyr::slice_head":{"description":"slice() lets you index rows by their (integer) locations. It allows you\nto select, remove, and duplicate rows. It is accompanied by a number of\nhelpers for common use cases:\n","example_call":"slice_head(.data, ..., n, prop, by = NULL)"},"dplyr::tbl":{"description":"This is a generic method that dispatches based on the first argument.\n","example_call":"tbl(src, ...)"},"dplyr::consecutive_id":{"description":"consecutive_id() generates a unique identifier that increments every time\na variable (or combination of variables) changes. Inspired by\ndata.table::rleid().\n","example_call":"consecutive_id(...)"},"dplyr::first":{"description":"These are useful helpers for extracting a single value from a vector. They\nare guaranteed to return a meaningful value, even when the input is shorter\nthan expected. You can also provide an optional secondary vector that defines\nthe ordering.\n","example_call":"first(x, order_by = NULL, default = NULL, na_rm = FALSE)"},"dplyr::arrange":{"description":"arrange() orders the rows of a data frame by the values of selected\ncolumns.\n","example_call":"arrange(.data, ..., .by_group = FALSE)"},"dplyr::dplyr_row_slice":{"description":"\n","example_call":"dplyr_row_slice(data, i, ...)"},"dplyr::sql_semi_join":{"description":"The sql_ generics are used to build the different types of SQL queries.\nThe default implementations in dbplyr generates ANSI 92 compliant SQL.\nThe db_ generics execute actions on the database. The default\nimplementations in dbplyr typically just call the standard DBI S4\nmethod.\n","example_call":"sql_semi_join(con, x, y, anti = FALSE, by = NULL, ...)"},"dplyr::is.grouped_df":{"description":"The easiest way to create a grouped data frame is to call the group_by()\nmethod on a data frame or tbl: this will take care of capturing\nthe unevaluated expressions for you.\n","example_call":"is.grouped_df(x)"},"dplyr::summarise_each":{"description":"\n","example_call":"summarise_each(tbl, funs, ...)"},"dplyr::group_vars":{"description":"This collection of functions accesses data about grouped data frames in\nvarious ways:\n","example_call":"group_vars(x)"},"dplyr::bind_cols":{"description":"Bind any number of data frames by column, making a wider result.\nThis is similar to do.call(cbind, dfs).\n","example_call":"bind_cols(..., .name_repair = c(\"unique\", \"universal\", \"check_unique\","},"dplyr::last_dplyr_warnings":{"description":"Warnings that occur inside a dplyr verb like mutate() are caught\nand stashed away instead of being emitted to the console. This\nprevents rowwise and grouped data frames from flooding the console\nwith warnings. To see the original warnings, use\nlast_dplyr_warnings().\n","example_call":"last_dplyr_warnings(n = 5)"},"dplyr::distinct_at":{"description":"\n","example_call":"distinct_at(.tbl, .vars, .funs = list(), ..., .keep_all = FALSE)"},"dplyr::mutate_all":{"description":"\n","example_call":"mutate_all(.tbl, .funs, ...)"},"dplyr::relocate":{"description":"Use relocate() to change column positions, using the same syntax as\nselect() to make it easy to move blocks of columns at once.\n","example_call":"relocate(.data, ..., .before = NULL, .after = NULL)"},"dplyr::compute":{"description":"compute() stores results in a remote temporary table.\ncollect() retrieves data into a local tibble.\ncollapse() is slightly different: it doesn't force computation, but\ninstead forces generation of the SQL query. This is sometimes needed to work\naround bugs in dplyr's SQL generation.\n","example_call":"compute(x, ...)"},"dplyr::mutate_if":{"description":"\n","example_call":"mutate_if(.tbl, .predicate, .funs, ...)"},"dplyr::distinct_":{"description":"\n","example_call":"distinct_(.data, ..., .dots, .keep_all = FALSE)"},"dplyr::group_indices_":{"description":"\n","example_call":"group_indices_(.data, ..., .dots = list())"},"dplyr::eval_tbls2":{"description":"\n","example_call":"eval_tbls2(tbls_x, tbls_y, op)"},"dplyr::rename_all":{"description":"\n","example_call":"rename_all(.tbl, .funs = list(), ...)"},"dplyr::count":{"description":"count() lets you quickly count the unique values of one or more variables:\ndf %>% count(a, b) is roughly equivalent to\ndf %>% group_by(a, b) %>% summarise(n = n()).\ncount() is paired with tally(), a lower-level helper that is equivalent\nto df %>% summarise(n = n()). Supply wt to perform weighted counts,\nswitching the summary from n = n() to n = sum(wt).\n","example_call":"count(x, ..., wt = NULL, sort = FALSE, name = NULL)"},"dplyr::do_":{"description":"\n","example_call":"do_(.data, ..., .dots = list())"},"dplyr::do":{"description":"\n","example_call":"do(.data, ...)"},"dplyr::cumany":{"description":"dplyr provides cumall(), cumany(), and cummean() to complete R's set\nof cumulative functions.\n","example_call":"cumany(x)"},"dplyr::wrap_dbplyr_obj":{"description":"In dplyr 0.7.0, a number of database and SQL functions moved from dplyr to\ndbplyr. The generic functions stayed in dplyr (since there is no easy way\nto conditionally import a generic from different packages), but many other\nSQL and database helper functions moved. If you have written a backend,\nthese functions generate the code you need to work with both dplyr 0.5.0\ndplyr 0.7.0.\n","example_call":"wrap_dbplyr_obj(obj_name)"},"dplyr::recode_factor":{"description":"\n","example_call":"recode_factor(.x, ..., .default = NULL, .missing = NULL, .ordered = FALSE)"},"dplyr::same_src":{"description":"Figure out if two sources are the same (or two tbl have the same source)\n","example_call":"same_src(x, y)"},"dplyr::top_frac":{"description":"\ntop_n() has been superseded in favour of slice_min()/slice_max().\nWhile it will not be deprecated in the near future, retirement means\nthat we will only perform critical bug fixes, so we recommend moving to the\nnewer alternatives.\n","example_call":"top_frac(x, n, wt)"},"dplyr::select_vars":{"description":"\n","example_call":"select_vars(vars = chr(), ..., include = chr(), exclude = chr())"},"dplyr::desc":{"description":"Transform a vector into a format that will be sorted in descending order.\nThis is useful within arrange().\n","example_call":"desc(x)"},"dplyr::db_create_indexes":{"description":"The sql_ generics are used to build the different types of SQL queries.\nThe default implementations in dbplyr generates ANSI 92 compliant SQL.\nThe db_ generics execute actions on the database. The default\nimplementations in dbplyr typically just call the standard DBI S4\nmethod.\n","example_call":"db_create_indexes(con, table, indexes = NULL, unique = FALSE, ...)"},"dplyr::lead":{"description":"Find the \"previous\" (lag()) or \"next\" (lead()) values in a vector. Useful\nfor comparing values behind of or ahead of the current values.\n","example_call":"lead(x, n = 1L, default = NULL, order_by = NULL, ...)"},"dplyr::mutate_at":{"description":"\n","example_call":"mutate_at(.tbl, .vars, .funs, ..., .cols = NULL)"},"dplyr::distinct_prepare":{"description":"<U+2060>*_prepare()<U+2060> performs standard manipulation that is needed prior\nto actual data processing. They are only be needed by packages\nthat implement dplyr backends.\n","example_call":"distinct_prepare(.data, vars, group_vars = character(), .keep_all = FALSE,"},"dplyr::src_sqlite":{"description":"\n","example_call":"src_sqlite(path, create = FALSE)"},"dplyr::distinct_if":{"description":"\n","example_call":"distinct_if(.tbl, .predicate, .funs = list(), ..., .keep_all = FALSE)"},"dplyr::cur_column":{"description":"These functions return information about the \"current\" group or \"current\"\nvariable, so only work inside specific contexts like summarise() and\nmutate().\n","example_call":"cur_column()"},"dplyr::semi_join":{"description":"Filtering joins filter rows from x based on the presence or absence\nof matches in y:\n","example_call":"semi_join(x, y, by = NULL, copy = FALSE, ...)"},"dplyr::filter_if":{"description":"\n","example_call":"filter_if(.tbl, .predicate, .vars_predicate, .preserve = FALSE)"},"dplyr::sql_translate_env":{"description":"The sql_ generics are used to build the different types of SQL queries.\nThe default implementations in dbplyr generates ANSI 92 compliant SQL.\nThe db_ generics execute actions on the database. The default\nimplementations in dbplyr typically just call the standard DBI S4\nmethod.\n","example_call":"sql_translate_env(con)"},"dplyr::arrange_":{"description":"\n","example_call":"arrange_(.data, ..., .dots = list())"},"dplyr::case_match":{"description":"This function allows you to vectorise multiple switch() statements. Each\ncase is evaluated sequentially and the first match for each element\ndetermines the corresponding value in the output vector. If no cases match,\nthe .default is used.\n","example_call":"case_match(.x, ..., .default = NULL, .ptype = NULL)"},"dplyr::sql_set_op":{"description":"The sql_ generics are used to build the different types of SQL queries.\nThe default implementations in dbplyr generates ANSI 92 compliant SQL.\nThe db_ generics execute actions on the database. The default\nimplementations in dbplyr typically just call the standard DBI S4\nmethod.\n","example_call":"sql_set_op(con, x, y, method)"},"dplyr::eval_tbls":{"description":"\n","example_call":"eval_tbls(tbls, op)"},"dplyr::arrange_at":{"description":"\n","example_call":"arrange_at(.tbl, .vars, .funs = list(), ..., .by_group = FALSE,"},"dplyr::add_count":{"description":"count() lets you quickly count the unique values of one or more variables:\ndf %>% count(a, b) is roughly equivalent to\ndf %>% group_by(a, b) %>% summarise(n = n()).\ncount() is paired with tally(), a lower-level helper that is equivalent\nto df %>% summarise(n = n()). Supply wt to perform weighted counts,\nswitching the summary from n = n() to n = sum(wt).\n","example_call":"add_count(x, ..., wt = NULL, sort = FALSE, name = NULL, .drop = deprecated())"},"dplyr::dplyr_reconstruct":{"description":"\n","example_call":"dplyr_reconstruct(data, template)"},"dplyr::slice_min":{"description":"slice() lets you index rows by their (integer) locations. It allows you\nto select, remove, and duplicate rows. It is accompanied by a number of\nhelpers for common use cases:\n","example_call":"slice_min(.data, order_by, ..., n, prop, by = NULL, with_ties = TRUE,"},"dplyr::new_rowwise_df":{"description":"new_grouped_df() and new_rowwise_df() are constructors designed to be high-performance so only\ncheck types, not values. This means it is the caller's responsibility\nto create valid values, and hence this is for expert use only.\n","example_call":"new_rowwise_df(data, group_data = NULL, ..., class = character())"},"dplyr::cross_join":{"description":"Cross joins match each row in x to every row in y, resulting in a data\nframe with nrow(x) * nrow(y) rows.\n","example_call":"cross_join(x, y, ..., copy = FALSE, suffix = c(\".x\", \".y\"))"},"dplyr::select":{"description":"Select (and optionally rename) variables in a data frame, using a concise\nmini-language that makes it easy to refer to variables based on their name\n(e.g. a:f selects all columns from a on the left to f on the\nright) or type (e.g. where(is.numeric) selects all numeric columns).\n","example_call":"select(.data, ...)"},"dplyr::distinct_all":{"description":"\n","example_call":"distinct_all(.tbl, .funs = list(), ..., .keep_all = FALSE)"},"dplyr::src_local":{"description":"\nThis function was deprecated since it existed to support a style of testing\ndplyr backends that turned out not to be useful.\n","example_call":"src_local(tbl, pkg = NULL, env = NULL)"},"dplyr::as.tbl":{"description":"\nPlease use tibble::as_tibble() instead.\n","example_call":"as.tbl(x, ...)"},"dplyr::summarise":{"description":"summarise() creates a new data frame. It returns one row for each\ncombination of grouping variables; if there are no grouping variables, the\noutput will have a single row summarising all observations in the input. It\nwill contain one column for each grouping variable and one column for each of\nthe summary statistics that you have specified.\n","example_call":"summarise(.data, ..., .by = NULL, .groups = NULL)"},"dplyr::db_drop_table":{"description":"The sql_ generics are used to build the different types of SQL queries.\nThe default implementations in dbplyr generates ANSI 92 compliant SQL.\nThe db_ generics execute actions on the database. The default\nimplementations in dbplyr typically just call the standard DBI S4\nmethod.\n","example_call":"db_drop_table(con, table, force = FALSE, ...)"},"dplyr::rows_patch":{"description":"These functions provide a framework for modifying rows in a table using a\nsecond table of data. The two tables are matched by a set of key variables\nwhose values typically uniquely identify each row. The functions are inspired\nby SQL's INSERT, UPDATE, and DELETE, and can optionally modify\nin_place for selected backends.\n","example_call":"rows_patch(x, y, by = NULL, ..., unmatched = c(\"error\", \"ignore\"),"},"dplyr::cur_data":{"description":"\n","example_call":"cur_data()"},"dplyr::row_number":{"description":"Three ranking functions inspired by SQL2003. They differ primarily in how\nthey handle ties:\n","example_call":"row_number(x)"},"dplyr::groups":{"description":"This collection of functions accesses data about grouped data frames in\nvarious ways:\n","example_call":"groups(x)"},"dplyr::anti_join":{"description":"Filtering joins filter rows from x based on the presence or absence\nof matches in y:\n","example_call":"anti_join(x, y, by = NULL, copy = FALSE, ...)"},"dplyr::tbl_vars":{"description":"tbl_vars() returns all variables while tbl_nongroup_vars()\nreturns only non-grouping variables. The groups attribute\nof the object returned by tbl_vars() is a character vector of the\ngrouping columns.\n","example_call":"tbl_vars(x)"},"dplyr::cur_group_id":{"description":"These functions return information about the \"current\" group or \"current\"\nvariable, so only work inside specific contexts like summarise() and\nmutate().\n","example_call":"cur_group_id()"},"dplyr::auto_copy":{"description":"Copy tables to same source, if necessary\n","example_call":"auto_copy(x, y, copy = FALSE, ...)"},"dplyr::sql_subquery":{"description":"The sql_ generics are used to build the different types of SQL queries.\nThe default implementations in dbplyr generates ANSI 92 compliant SQL.\nThe db_ generics execute actions on the database. The default\nimplementations in dbplyr typically just call the standard DBI S4\nmethod.\n","example_call":"sql_subquery(con, from, name = random_table_name(), ...)"},"dplyr::group_indices":{"description":"This collection of functions accesses data about grouped data frames in\nvarious ways:\n","example_call":"group_indices(.data, ...)"},"dplyr::progress_estimated":{"description":"\n","example_call":"progress_estimated(n, min_time = 0)"},"dplyr::transmute_all":{"description":"\n","example_call":"transmute_all(.tbl, .funs, ...)"},"dplyr::new_grouped_df":{"description":"new_grouped_df() and new_rowwise_df() are constructors designed to be high-performance so only\ncheck types, not values. This means it is the caller's responsibility\nto create valid values, and hence this is for expert use only.\n","example_call":"new_grouped_df(x, groups, ..., class = character())"},"dplyr::add_tally_":{"description":"\n","example_call":"add_tally_(x, wt, sort = FALSE)"},"dplyr::group_data":{"description":"This collection of functions accesses data about grouped data frames in\nvarious ways:\n","example_call":"group_data(.data)"},"dplyr::rows_insert":{"description":"These functions provide a framework for modifying rows in a table using a\nsecond table of data. The two tables are matched by a set of key variables\nwhose values typically uniquely identify each row. The functions are inspired\nby SQL's INSERT, UPDATE, and DELETE, and can optionally modify\nin_place for selected backends.\n","example_call":"rows_insert(x, y, by = NULL, ..., conflict = c(\"error\", \"ignore\"),"},"dplyr::all_equal":{"description":"\n","example_call":"all_equal(target, current, ignore_col_order = TRUE, ignore_row_order = TRUE,"},"dplyr::group_split":{"description":"\n","example_call":"group_split(.tbl, ..., .keep = TRUE)"},"dplyr::tbl_ptype":{"description":"Used in <U+2060>_if<U+2060> functions to enable type-based selection even when the data\nis lazily generated. Should either return the complete tibble, or if that\ncan not be computed quickly, a 0-row tibble where the columns are of\nthe correct type.\n","example_call":"tbl_ptype(.data)"},"dplyr::inner_join":{"description":"Mutating joins add columns from y to x, matching observations based on\nthe keys. There are four mutating joins: the inner join, and the three outer\njoins.\n","example_call":"inner_join(x, y, by = NULL, copy = FALSE, suffix = c(\".x\", \".y\"),"},"dplyr::db_insert_into":{"description":"The sql_ generics are used to build the different types of SQL queries.\nThe default implementations in dbplyr generates ANSI 92 compliant SQL.\nThe db_ generics execute actions on the database. The default\nimplementations in dbplyr typically just call the standard DBI S4\nmethod.\n","example_call":"db_insert_into(con, table, values, ...)"},"dplyr::db_save_query":{"description":"The sql_ generics are used to build the different types of SQL queries.\nThe default implementations in dbplyr generates ANSI 92 compliant SQL.\nThe db_ generics execute actions on the database. The default\nimplementations in dbplyr typically just call the standard DBI S4\nmethod.\n","example_call":"db_save_query(con, sql, name, temporary = TRUE, ...)"},"dplyr::id":{"description":"\n","example_call":"id(.variables, drop = FALSE)"},"dplyr::summarise_all":{"description":"\n","example_call":"summarise_all(.tbl, .funs, ...)"},"dplyr::db_begin":{"description":"The sql_ generics are used to build the different types of SQL queries.\nThe default implementations in dbplyr generates ANSI 92 compliant SQL.\nThe db_ generics execute actions on the database. The default\nimplementations in dbplyr typically just call the standard DBI S4\nmethod.\n","example_call":"db_begin(con, ...)"},"dplyr::left_join":{"description":"Mutating joins add columns from y to x, matching observations based on\nthe keys. There are four mutating joins: the inner join, and the three outer\njoins.\n","example_call":"left_join(x, y, by = NULL, copy = FALSE, suffix = c(\".x\", \".y\"),"},"dplyr::summarize_each_":{"description":"\n","example_call":"summarize_each_(tbl, funs, vars)"},"dplyr::dplyr_col_modify":{"description":"\n","example_call":"dplyr_col_modify(data, cols)"},"dplyr::compare_tbls2":{"description":"\n","example_call":"compare_tbls2(tbls_x, tbls_y, op, ref = NULL, compare = equal_data_frame,"},"dplyr::filter":{"description":"The filter() function is used to subset a data frame,\nretaining all rows that satisfy your conditions.\nTo be retained, the row must produce a value of TRUE for all conditions.\nNote that when a condition evaluates to NA\nthe row will be dropped, unlike base subsetting with [.\n","example_call":"filter(.data, ..., .by = NULL, .preserve = FALSE)"},"dplyr::union_all":{"description":"Perform set operations using the rows of a data frame.\n","example_call":"union_all(x, y, ...)"},"dplyr::summarize_all":{"description":"\n","example_call":"summarize_all(.tbl, .funs, ...)"},"dplyr::slice_tail":{"description":"slice() lets you index rows by their (integer) locations. It allows you\nto select, remove, and duplicate rows. It is accompanied by a number of\nhelpers for common use cases:\n","example_call":"slice_tail(.data, ..., n, prop, by = NULL)"},"dplyr::n":{"description":"These functions return information about the \"current\" group or \"current\"\nvariable, so only work inside specific contexts like summarise() and\nmutate().\n","example_call":"n()"},"dplyr::add_count_":{"description":"\n","example_call":"add_count_(x, vars, wt = NULL, sort = FALSE)"},"dplyr::summarize_each":{"description":"\n","example_call":"summarize_each(tbl, funs, ...)"},"dplyr::show_query":{"description":"This is a generic function which gives more details about an object than\nprint(), and is more focused on human readable output than\nstr().\n","example_call":"show_query(x, ...)"},"dplyr::group_cols":{"description":"This selection helpers matches grouping variables. It can be used\nin select() or vars() selections.\n","example_call":"group_cols(vars = NULL, data = NULL)"},"dplyr::summarise_at":{"description":"\n","example_call":"summarise_at(.tbl, .vars, .funs, ..., .cols = NULL)"},"dplyr::n_distinct":{"description":"n_distinct() counts the number of unique/distinct combinations in a set\nof one or more vectors. It's a faster and more concise equivalent to\nnrow(unique(data.frame(...))).\n","example_call":"n_distinct(..., na.rm = FALSE)"},"dplyr::transmute_at":{"description":"\n","example_call":"transmute_at(.tbl, .vars, .funs, ..., .cols = NULL)"},"dplyr::rename":{"description":"rename() changes the names of individual variables using\nnew_name = old_name syntax; rename_with() renames columns using a\nfunction.\n","example_call":"rename(.data, ...)"},"dplyr::reframe":{"description":"\n","example_call":"reframe(.data, ..., .by = NULL)"},"dplyr::select_vars_":{"description":"\n","example_call":"select_vars_(vars, args, include = chr(), exclude = chr())"},"dplyr::near":{"description":"This is a safe way of comparing if two vectors of floating point numbers\nare (pairwise) equal.  This is safer than using ==, because it has\na built in tolerance\n","example_call":"near(x, y, tol = .Machine$double.eps^0.5)"},"dplyr::pick":{"description":"pick() provides a way to easily select a subset of columns from your data\nusing select() semantics while inside a\n\"data-masking\" function like mutate() or\nsummarise(). pick() returns a data frame containing the selected columns\nfor the current group.\n","example_call":"pick(...)"},"dplyr::n_groups":{"description":"This collection of functions accesses data about grouped data frames in\nvarious ways:\n","example_call":"n_groups(x)"},"dplyr::across":{"description":"across() makes it easy to apply the same transformation to multiple\ncolumns, allowing you to use select() semantics inside in \"data-masking\"\nfunctions like summarise() and mutate(). See vignette(\"colwise\") for\nmore details.\n","example_call":"across(.cols, .fns, ..., .names = NULL, .unpack = FALSE)"},"dplyr::all_vars":{"description":"\n","example_call":"all_vars(expr)"},"dplyr::select_all":{"description":"\n","example_call":"select_all(.tbl, .funs = list(), ...)"},"dplyr::slice":{"description":"slice() lets you index rows by their (integer) locations. It allows you\nto select, remove, and duplicate rows. It is accompanied by a number of\nhelpers for common use cases:\n","example_call":"slice(.data, ..., .by = NULL, .preserve = FALSE)"},"dplyr::na_if":{"description":"This is a translation of the SQL command NULLIF. It is useful if you want\nto convert an annoying value to NA.\n","example_call":"na_if(x, y)"},"dplyr::select_if":{"description":"\n","example_call":"select_if(.tbl, .predicate, .funs = list(), ...)"},"dplyr::grouped_df":{"description":"The easiest way to create a grouped data frame is to call the group_by()\nmethod on a data frame or tbl: this will take care of capturing\nthe unevaluated expressions for you.\n","example_call":"grouped_df(data, vars, drop = group_by_drop_default(data))"},"dplyr::tbl_df":{"description":"\nPlease use tibble::as_tibble() instead.\n","example_call":"tbl_df(data)"},"dplyr::tally_":{"description":"\n","example_call":"tally_(x, wt, sort = FALSE)"},"dplyr::is.src":{"description":"src() is the standard constructor for srcs and is.src() tests.\n","example_call":"is.src(x)"},"dplyr::db_create_table":{"description":"The sql_ generics are used to build the different types of SQL queries.\nThe default implementations in dbplyr generates ANSI 92 compliant SQL.\nThe db_ generics execute actions on the database. The default\nimplementations in dbplyr typically just call the standard DBI S4\nmethod.\n","example_call":"db_create_table(con, table, types, temporary = FALSE, ...)"},"dplyr::mutate_each":{"description":"\n","example_call":"mutate_each(tbl, funs, ...)"},"dplyr::group_keys":{"description":"This collection of functions accesses data about grouped data frames in\nvarious ways:\n","example_call":"group_keys(.tbl, ...)"},"dplyr::add_rownames":{"description":"\nPlease use tibble::rownames_to_column() instead.\n","example_call":"add_rownames(df, var = \"rowname\")"},"dplyr::rename_vars":{"description":"\n","example_call":"rename_vars(vars = chr(), ..., strict = TRUE)"},"dplyr::select_at":{"description":"\n","example_call":"select_at(.tbl, .vars, .funs = list(), ...)"},"dplyr::is.tbl":{"description":"This is a generic method that dispatches based on the first argument.\n","example_call":"is.tbl(x)"},"dplyr::arrange_all":{"description":"\n","example_call":"arrange_all(.tbl, .funs = list(), ..., .by_group = FALSE, .locale = NULL)"},"dplyr::summarize":{"description":"summarise() creates a new data frame. It returns one row for each\ncombination of grouping variables; if there are no grouping variables, the\noutput will have a single row summarising all observations in the input. It\nwill contain one column for each grouping variable and one column for each of\nthe summary statistics that you have specified.\n","example_call":"summarize(.data, ..., .by = NULL, .groups = NULL)"},"dplyr::cummean":{"description":"dplyr provides cumall(), cumany(), and cummean() to complete R's set\nof cumulative functions.\n","example_call":"cummean(x)"},"dplyr::rename_with":{"description":"rename() changes the names of individual variables using\nnew_name = old_name syntax; rename_with() renames columns using a\nfunction.\n","example_call":"rename_with(.data, .fn, .cols = everything(), ...)"},"dplyr::group_map":{"description":"\n","example_call":"group_map(.data, .f, ..., .keep = FALSE)"},"dplyr::current_vars":{"description":"\n","example_call":"current_vars(...)"},"dplyr::with_groups":{"description":"\n","example_call":"with_groups(.data, .groups, .f, ...)"},"dplyr::last":{"description":"These are useful helpers for extracting a single value from a vector. They\nare guaranteed to return a meaningful value, even when the input is shorter\nthan expected. You can also provide an optional secondary vector that defines\nthe ordering.\n","example_call":"last(x, order_by = NULL, default = NULL, na_rm = FALSE)"},"dplyr::rowwise":{"description":"rowwise() allows you to compute on a data frame a row-at-a-time.\nThis is most useful when a vectorised function doesn't exist.\n","example_call":"rowwise(data, ...)"},"dplyr::group_size":{"description":"This collection of functions accesses data about grouped data frames in\nvarious ways:\n","example_call":"group_size(x)"},"dplyr::nth":{"description":"These are useful helpers for extracting a single value from a vector. They\nare guaranteed to return a meaningful value, even when the input is shorter\nthan expected. You can also provide an optional secondary vector that defines\nthe ordering.\n","example_call":"nth(x, n, order_by = NULL, default = NULL, na_rm = FALSE)"},"dplyr::src_postgres":{"description":"\n","example_call":"src_postgres(dbname = NULL, host = NULL, port = NULL, user = NULL,"},"dplyr::dim_desc":{"description":"Prints the dimensions of an array-like object in a user-friendly manner,\nsubstituting NA with ?? (for SQL queries).\n","example_call":"dim_desc(x)"},"dplyr::transmute":{"description":"\n","example_call":"transmute(.data, ...)"},"dplyr::transmute_if":{"description":"\n","example_call":"transmute_if(.tbl, .predicate, .funs, ...)"},"dplyr::case_when":{"description":"This function allows you to vectorise multiple if_else() statements. Each\ncase is evaluated sequentially and the first match for each element\ndetermines the corresponding value in the output vector. If no cases match,\nthe .default is used as a final \"else\" statment.\n","example_call":"case_when(..., .default = NULL, .ptype = NULL, .size = NULL)"},"dplyr::arrange_if":{"description":"\n","example_call":"arrange_if(.tbl, .predicate, .funs = list(), ..., .by_group = FALSE,"},"dplyr::order_by":{"description":"This function makes it possible to control the ordering of window functions\nin R that don't have a specific ordering parameter. When translated to SQL\nit will modify the order clause of the OVER function.\n","example_call":"order_by(order_by, call)"},"dplyr::with_order":{"description":"This is used to power the ordering parameters of dplyr's window functions\n","example_call":"with_order(order_by, fun, x, ...)"},"dplyr::group_rows":{"description":"This collection of functions accesses data about grouped data frames in\nvarious ways:\n","example_call":"group_rows(.data)"},"dplyr::any_vars":{"description":"\n","example_call":"any_vars(expr)"},"dplyr::db_analyze":{"description":"The sql_ generics are used to build the different types of SQL queries.\nThe default implementations in dbplyr generates ANSI 92 compliant SQL.\nThe db_ generics execute actions on the database. The default\nimplementations in dbplyr typically just call the standard DBI S4\nmethod.\n","example_call":"db_analyze(con, table, ...)"},"dplyr::db_data_type":{"description":"The sql_ generics are used to build the different types of SQL queries.\nThe default implementations in dbplyr generates ANSI 92 compliant SQL.\nThe db_ generics execute actions on the database. The default\nimplementations in dbplyr typically just call the standard DBI S4\nmethod.\n","example_call":"db_data_type(con, fields)"},"dplyr::top_n":{"description":"\ntop_n() has been superseded in favour of slice_min()/slice_max().\nWhile it will not be deprecated in the near future, retirement means\nthat we will only perform critical bug fixes, so we recommend moving to the\nnewer alternatives.\n","example_call":"top_n(x, n, wt)"},"dplyr::add_tally":{"description":"count() lets you quickly count the unique values of one or more variables:\ndf %>% count(a, b) is roughly equivalent to\ndf %>% group_by(a, b) %>% summarise(n = n()).\ncount() is paired with tally(), a lower-level helper that is equivalent\nto df %>% summarise(n = n()). Supply wt to perform weighted counts,\nswitching the summary from n = n() to n = sum(wt).\n","example_call":"add_tally(x, wt = NULL, sort = FALSE, name = NULL)"},"dplyr::db_query_fields":{"description":"The sql_ generics are used to build the different types of SQL queries.\nThe default implementations in dbplyr generates ANSI 92 compliant SQL.\nThe db_ generics execute actions on the database. The default\nimplementations in dbplyr typically just call the standard DBI S4\nmethod.\n","example_call":"db_query_fields(con, sql, ...)"},"dplyr::group_trim":{"description":"\nDrop unused levels of all factors that are used as grouping variables,\nthen recalculates the grouping structure.\n","example_call":"group_trim(.tbl, .drop = group_by_drop_default(.tbl))"},"dplyr::between":{"description":"This is a shortcut for x >= left & x <= right, implemented for local\nvectors and translated to the appropriate SQL for remote tables.\n","example_call":"between(x, left, right)"},"dplyr::select_":{"description":"\n","example_call":"select_(.data, ..., .dots = list())"},"dplyr::lag":{"description":"Find the \"previous\" (lag()) or \"next\" (lead()) values in a vector. Useful\nfor comparing values behind of or ahead of the current values.\n","example_call":"lag(x, n = 1L, default = NULL, order_by = NULL, ...)"},"dplyr::mutate_each_":{"description":"\n","example_call":"mutate_each_(tbl, funs, vars)"},"dplyr::percent_rank":{"description":"These two ranking functions implement two slightly different ways to\ncompute a percentile. For each x_i in x:\n","example_call":"percent_rank(x)"},"dplyr::distinct":{"description":"Keep only unique/distinct rows from a data frame. This is similar\nto unique.data.frame() but considerably faster.\n","example_call":"distinct(.data, ..., .keep_all = FALSE)"},"dplyr::group_by_prepare":{"description":"<U+2060>*_prepare()<U+2060> performs standard manipulation that is needed prior\nto actual data processing. They are only be needed by packages\nthat implement dplyr backends.\n","example_call":"group_by_prepare(.data, ..., .add = FALSE, .dots = deprecated(), add = deprecated(),"},"dplyr::db_explain":{"description":"The sql_ generics are used to build the different types of SQL queries.\nThe default implementations in dbplyr generates ANSI 92 compliant SQL.\nThe db_ generics execute actions on the database. The default\nimplementations in dbplyr typically just call the standard DBI S4\nmethod.\n","example_call":"db_explain(con, sql, ...)"},"dplyr::summarise_each_":{"description":"\n","example_call":"summarise_each_(tbl, funs, vars)"},"dplyr::tbl_nongroup_vars":{"description":"tbl_vars() returns all variables while tbl_nongroup_vars()\nreturns only non-grouping variables. The groups attribute\nof the object returned by tbl_vars() is a character vector of the\ngrouping columns.\n","example_call":"tbl_nongroup_vars(x)"},"dplyr::bench_tbls":{"description":"\n","example_call":"bench_tbls(tbls, op, ..., times = 10)"},"dplyr::is_grouped_df":{"description":"The easiest way to create a grouped data frame is to call the group_by()\nmethod on a data frame or tbl: this will take care of capturing\nthe unevaluated expressions for you.\n","example_call":"is_grouped_df(x)"},"dplyr::right_join":{"description":"Mutating joins add columns from y to x, matching observations based on\nthe keys. There are four mutating joins: the inner join, and the three outer\njoins.\n","example_call":"right_join(x, y, by = NULL, copy = FALSE, suffix = c(\".x\", \".y\"),"},"dplyr::summarise_if":{"description":"\n","example_call":"summarise_if(.tbl, .predicate, .funs, ...)"},"dplyr::filter_":{"description":"\n","example_call":"filter_(.data, ..., .dots = list())"},"dplyr::cur_group_rows":{"description":"These functions return information about the \"current\" group or \"current\"\nvariable, so only work inside specific contexts like summarise() and\nmutate().\n","example_call":"cur_group_rows()"},"dplyr::src_mysql":{"description":"\n","example_call":"src_mysql(dbname, host = NULL, port = 0L, username = \"root\","},"dplyr::summarize_at":{"description":"\n","example_call":"summarize_at(.tbl, .vars, .funs, ..., .cols = NULL)"},"dplyr::rows_delete":{"description":"These functions provide a framework for modifying rows in a table using a\nsecond table of data. The two tables are matched by a set of key variables\nwhose values typically uniquely identify each row. The functions are inspired\nby SQL's INSERT, UPDATE, and DELETE, and can optionally modify\nin_place for selected backends.\n","example_call":"rows_delete(x, y, by = NULL, ..., unmatched = c(\"error\", \"ignore\"),"},"dplyr::combine":{"description":"\n","example_call":"combine(...)"},"dplyr::ntile":{"description":"ntile() is a sort of very rough rank, which breaks the input vector into\nn buckets. If length(x) is not an integer multiple of n, the size of\nthe buckets will differ by up to one, with larger buckets coming first.\n","example_call":"ntile(x = row_number(), n)"},"dplyr::location":{"description":"\n","example_call":"location(df)"},"dplyr::symdiff":{"description":"Perform set operations using the rows of a data frame.\n","example_call":"symdiff(x, y, ...)"},"dplyr::sql_escape_string":{"description":"The sql_ generics are used to build the different types of SQL queries.\nThe default implementations in dbplyr generates ANSI 92 compliant SQL.\nThe db_ generics execute actions on the database. The default\nimplementations in dbplyr typically just call the standard DBI S4\nmethod.\n","example_call":"sql_escape_string(con, x)"},"dplyr::rename_vars_":{"description":"\n","example_call":"rename_vars_(vars, args)"},"dplyr::nest_by":{"description":"\n","example_call":"nest_by(.data, ..., .key = \"data\", .keep = FALSE)"},"dplyr::db_rollback":{"description":"The sql_ generics are used to build the different types of SQL queries.\nThe default implementations in dbplyr generates ANSI 92 compliant SQL.\nThe db_ generics execute actions on the database. The default\nimplementations in dbplyr typically just call the standard DBI S4\nmethod.\n","example_call":"db_rollback(con, ...)"},"dplyr::filter_at":{"description":"\n","example_call":"filter_at(.tbl, .vars, .vars_predicate, .preserve = FALSE)"},"dplyr::collapse":{"description":"compute() stores results in a remote temporary table.\ncollect() retrieves data into a local tibble.\ncollapse() is slightly different: it doesn't force computation, but\ninstead forces generation of the SQL query. This is sometimes needed to work\naround bugs in dplyr's SQL generation.\n","example_call":"collapse(x, ...)"},"dplyr::db_write_table":{"description":"The sql_ generics are used to build the different types of SQL queries.\nThe default implementations in dbplyr generates ANSI 92 compliant SQL.\nThe db_ generics execute actions on the database. The default\nimplementations in dbplyr typically just call the standard DBI S4\nmethod.\n","example_call":"db_write_table(con, table, types, values, temporary = FALSE, ...)"},"dplyr::db_has_table":{"description":"The sql_ generics are used to build the different types of SQL queries.\nThe default implementations in dbplyr generates ANSI 92 compliant SQL.\nThe db_ generics execute actions on the database. The default\nimplementations in dbplyr typically just call the standard DBI S4\nmethod.\n","example_call":"db_has_table(con, table)"},"dplyr::ungroup":{"description":"Most data operations are done on groups defined by variables.\ngroup_by() takes an existing tbl and converts it into a grouped tbl\nwhere operations are performed \"by group\". ungroup() removes grouping.\n","example_call":"ungroup(x, ...)"},"dplyr::group_by":{"description":"Most data operations are done on groups defined by variables.\ngroup_by() takes an existing tbl and converts it into a grouped tbl\nwhere operations are performed \"by group\". ungroup() removes grouping.\n","example_call":"group_by(.data, ..., .add = FALSE, .drop = group_by_drop_default(.data))"},"dplyr::funs":{"description":"\n","example_call":"funs(..., .args = list())"},"dplyr::vars":{"description":"\n","example_call":"vars(...)"},"dplyr::if_all":{"description":"across() makes it easy to apply the same transformation to multiple\ncolumns, allowing you to use select() semantics inside in \"data-masking\"\nfunctions like summarise() and mutate(). See vignette(\"colwise\") for\nmore details.\n","example_call":"if_all(.cols, .fns, ..., .names = NULL)"},"dplyr::slice_sample":{"description":"slice() lets you index rows by their (integer) locations. It allows you\nto select, remove, and duplicate rows. It is accompanied by a number of\nhelpers for common use cases:\n","example_call":"slice_sample(.data, ..., n, prop, by = NULL, weight_by = NULL, replace = FALSE)"},"dplyr::recode":{"description":"\n","example_call":"recode(.x, ..., .default = NULL, .missing = NULL)"},"dplyr::validate_rowwise_df":{"description":"new_grouped_df() and new_rowwise_df() are constructors designed to be high-performance so only\ncheck types, not values. This means it is the caller's responsibility\nto create valid values, and hence this is for expert use only.\n","example_call":"validate_rowwise_df(x)"},"dplyr::rename_":{"description":"\n","example_call":"rename_(.data, ..., .dots = list())"},"dplyr::cur_group":{"description":"These functions return information about the \"current\" group or \"current\"\nvariable, so only work inside specific contexts like summarise() and\nmutate().\n","example_call":"cur_group()"},"dplyr::group_nest":{"description":"\n","example_call":"group_nest(.tbl, ..., .key = \"data\", keep = FALSE)"},"dplyr::filter_all":{"description":"\n","example_call":"filter_all(.tbl, .vars_predicate, .preserve = FALSE)"},"dplyr::src_df":{"description":"\nThis function was deprecated since it existed to support a style of testing\ndplyr backends that turned out not to be useful.\n","example_call":"src_df(pkg = NULL, env = NULL)"},"dplyr::summarise_":{"description":"\n","example_call":"summarise_(.data, ..., .dots = list())"},"dplyr::group_by_":{"description":"\n","example_call":"group_by_(.data, ..., .dots = list(), add = FALSE)"},"dplyr::copy_to":{"description":"This function uploads a local data frame into a remote data source, creating\nthe table definition as needed. Wherever possible, the new object will be\ntemporary, limited to the current connection to the source.\n","example_call":"copy_to(dest, df, name = deparse(substitute(df)), overwrite = FALSE,"},"dplyr::cur_data_all":{"description":"\n","example_call":"cur_data_all()"},"dplyr::if_else":{"description":"if_else() is a vectorized if-else. Compared to the base R equivalent,\nifelse(), this function allows you to handle missing values in the\ncondition with missing and always takes true, false, and missing\ninto account when determining what the output type should be.\n","example_call":"if_else(condition, true, false, missing = NULL, ..., ptype = NULL,"},"dplyr::transmute_":{"description":"\n","example_call":"transmute_(.data, ..., .dots = list())"},"dplyr::funs_":{"description":"\n","example_call":"funs_(dots, args = list(), env = base_env())"},"dplyr::summarize_":{"description":"\n","example_call":"summarize_(.data, ..., .dots = list())"},"dplyr::failwith":{"description":"\n","example_call":"failwith(default = NULL, f, quiet = FALSE)"},"dplyr::compare_tbls":{"description":"\n","example_call":"compare_tbls(tbls, op, ref = NULL, compare = equal_data_frame, ...)"},"dplyr::sample_frac":{"description":"\nsample_n() and sample_frac() have been superseded in favour of\nslice_sample(). While they will not be deprecated in the near future,\nretirement means that we will only perform critical bug fixes, so we recommend\nmoving to the newer alternative.\n","example_call":"sample_frac(tbl, size = 1, replace = FALSE, weight = NULL, .env = NULL,"},"dplyr::group_by_all":{"description":"\n","example_call":"group_by_all(.tbl, .funs = list(), ..., .add = FALSE, .drop = group_by_drop_default(.tbl))"},"dplyr::explain":{"description":"This is a generic function which gives more details about an object than\nprint(), and is more focused on human readable output than\nstr().\n","example_call":"explain(x, ...)"},"dplyr::rename_if":{"description":"\n","example_call":"rename_if(.tbl, .predicate, .funs = list(), ...)"},"dplyr::sample_n":{"description":"\nsample_n() and sample_frac() have been superseded in favour of\nslice_sample(). While they will not be deprecated in the near future,\nretirement means that we will only perform critical bug fixes, so we recommend\nmoving to the newer alternative.\n","example_call":"sample_n(tbl, size, replace = FALSE, weight = NULL, .env = NULL,"},"dplyr::group_by_if":{"description":"\n","example_call":"group_by_if(.tbl, .predicate, .funs = list(), ..., .add = FALSE,"},"dplyr::validate_grouped_df":{"description":"new_grouped_df() and new_rowwise_df() are constructors designed to be high-performance so only\ncheck types, not values. This means it is the caller's responsibility\nto create valid values, and hence this is for expert use only.\n","example_call":"validate_grouped_df(x, check_bounds = FALSE)"},"dplyr::common_by":{"description":"Extract out common by variables\n","example_call":"common_by(by = NULL, x, y)"},"dplyr::group_walk":{"description":"\n","example_call":"group_walk(.data, .f, ..., .keep = FALSE)"},"dplyr::changes":{"description":"\n","example_call":"changes(x, y)"},"dplyr::make_tbl":{"description":"tbl() is the standard constructor for tbls. as.tbl() coerces,\nand is.tbl() tests.\n","example_call":"make_tbl(subclass, ...)"},"dplyr::rows_upsert":{"description":"These functions provide a framework for modifying rows in a table using a\nsecond table of data. The two tables are matched by a set of key variables\nwhose values typically uniquely identify each row. The functions are inspired\nby SQL's INSERT, UPDATE, and DELETE, and can optionally modify\nin_place for selected backends.\n","example_call":"rows_upsert(x, y, by = NULL, ..., copy = FALSE, in_place = FALSE)"},"dplyr::cume_dist":{"description":"These two ranking functions implement two slightly different ways to\ncompute a percentile. For each x_i in x:\n","example_call":"cume_dist(x)"},"dplyr::ident":{"description":"ident() takes unquoted strings and flags them as identifiers.\nident_q() assumes its input has already been quoted, and ensures\nit does not get quoted again. This is currently used only for\nschema.table.\n","example_call":"ident(...)"},"dplyr::rows_append":{"description":"These functions provide a framework for modifying rows in a table using a\nsecond table of data. The two tables are matched by a set of key variables\nwhose values typically uniquely identify each row. The functions are inspired\nby SQL's INSERT, UPDATE, and DELETE, and can optionally modify\nin_place for selected backends.\n","example_call":"rows_append(x, y, ..., copy = FALSE, in_place = FALSE)"},"dplyr::rows_update":{"description":"These functions provide a framework for modifying rows in a table using a\nsecond table of data. The two tables are matched by a set of key variables\nwhose values typically uniquely identify each row. The functions are inspired\nby SQL's INSERT, UPDATE, and DELETE, and can optionally modify\nin_place for selected backends.\n","example_call":"rows_update(x, y, by = NULL, ..., unmatched = c(\"error\", \"ignore\"),"},"dplyr::select_var":{"description":"\n","example_call":"select_var(vars, var = -1)"},"dplyr::db_list_tables":{"description":"The sql_ generics are used to build the different types of SQL queries.\nThe default implementations in dbplyr generates ANSI 92 compliant SQL.\nThe db_ generics execute actions on the database. The default\nimplementations in dbplyr typically just call the standard DBI S4\nmethod.\n","example_call":"db_list_tables(con)"},"dplyr::rename_at":{"description":"\n","example_call":"rename_at(.tbl, .vars, .funs = list(), ...)"},"dplyr::sql_escape_ident":{"description":"The sql_ generics are used to build the different types of SQL queries.\nThe default implementations in dbplyr generates ANSI 92 compliant SQL.\nThe db_ generics execute actions on the database. The default\nimplementations in dbplyr typically just call the standard DBI S4\nmethod.\n","example_call":"sql_escape_ident(con, x)"},"dplyr::group_by_at":{"description":"\n","example_call":"group_by_at(.tbl, .vars, .funs = list(), ..., .add = FALSE, .drop = group_by_drop_default(.tbl))"},"dplyr::pull":{"description":"pull() is similar to $. It's mostly useful because it looks a little\nnicer in pipes, it also works with remote data frames, and it can optionally\nname the output.\n","example_call":"pull(.data, var = -1, name = NULL, ...)"},"dplyr::mutate":{"description":"mutate() creates new columns that are functions of existing variables.\nIt can also modify (if the name is the same as an existing\ncolumn) and delete columns (by setting their value to NULL).\n","example_call":"mutate(.data, ...)"},"dplyr::nest_join":{"description":"A nest join leaves x almost unchanged, except that it adds a new\nlist-column, where each element contains the rows from y that match the\ncorresponding row in x.\n","example_call":"nest_join(x, y, by = NULL, copy = FALSE, keep = NULL, name = NULL,"},"dplyr::slice_":{"description":"\n","example_call":"slice_(.data, ..., .dots = list())"},"dplyr::count_":{"description":"\n","example_call":"count_(x, vars, wt = NULL, sort = FALSE, .drop = group_by_drop_default(x))"},"dplyr::group_modify":{"description":"\n","example_call":"group_modify(.data, .f, ..., .keep = FALSE)"},"dplyr::if_any":{"description":"across() makes it easy to apply the same transformation to multiple\ncolumns, allowing you to use select() semantics inside in \"data-masking\"\nfunctions like summarise() and mutate(). See vignette(\"colwise\") for\nmore details.\n","example_call":"if_any(.cols, .fns, ..., .names = NULL)"},"dplyr::tally":{"description":"count() lets you quickly count the unique values of one or more variables:\ndf %>% count(a, b) is roughly equivalent to\ndf %>% group_by(a, b) %>% summarise(n = n()).\ncount() is paired with tally(), a lower-level helper that is equivalent\nto df %>% summarise(n = n()). Supply wt to perform weighted counts,\nswitching the summary from n = n() to n = sum(wt).\n","example_call":"tally(x, wt = NULL, sort = FALSE, name = NULL)"},"dplyr::bind_rows":{"description":"Bind any number of data frames by row, making a longer result. This is\nsimilar to do.call(rbind, dfs), but the output will contain all columns\nthat appear in any of the inputs.\n","example_call":"bind_rows(..., .id = NULL)"},"dplyr::c_across":{"description":"c_across() is designed to work with rowwise() to make it easy to\nperform row-wise aggregations. It has two differences from c():\n","example_call":"c_across(cols)"},"dplyr::cumall":{"description":"dplyr provides cumall(), cumany(), and cummean() to complete R's set\nof cumulative functions.\n","example_call":"cumall(x)"},"dplyr::collect":{"description":"compute() stores results in a remote temporary table.\ncollect() retrieves data into a local tibble.\ncollapse() is slightly different: it doesn't force computation, but\ninstead forces generation of the SQL query. This is sometimes needed to work\naround bugs in dplyr's SQL generation.\n","example_call":"collect(x, ...)"},"dplyr::min_rank":{"description":"Three ranking functions inspired by SQL2003. They differ primarily in how\nthey handle ties:\n","example_call":"min_rank(x)"},"dplyr::sql":{"description":"These functions are critical when writing functions that translate R\nfunctions to sql functions. Typically a conversion function should escape\nall its inputs and return an sql object.\n","example_call":"sql(...)"},"dplyr::sql_select":{"description":"The sql_ generics are used to build the different types of SQL queries.\nThe default implementations in dbplyr generates ANSI 92 compliant SQL.\nThe db_ generics execute actions on the database. The default\nimplementations in dbplyr typically just call the standard DBI S4\nmethod.\n","example_call":"sql_select(con, select, from, where = NULL, group_by = NULL, having = NULL,"},"dplyr::sql_join":{"description":"The sql_ generics are used to build the different types of SQL queries.\nThe default implementations in dbplyr generates ANSI 92 compliant SQL.\nThe db_ generics execute actions on the database. The default\nimplementations in dbplyr typically just call the standard DBI S4\nmethod.\n","example_call":"sql_join(con, x, y, vars, type = \"inner\", by = NULL, ...)"},"dplyr::full_join":{"description":"Mutating joins add columns from y to x, matching observations based on\nthe keys. There are four mutating joins: the inner join, and the three outer\njoins.\n","example_call":"full_join(x, y, by = NULL, copy = FALSE, suffix = c(\".x\", \".y\"),"},"farver::multiply_channel":{"description":"This set of functions allows you to modify colours as given by strings,\nwhithout first decoding them. For large vectors of colour values this should\nprovide a considerable speedup.\n","example_call":"multiply_channel(colour, channel, value, space = \"rgb\", white = \"D65\","},"farver::decode_colour":{"description":"This is a version of grDevices::col2rgb() that returns the colour values in\nthe standard form expected by farver (matrix with a row per colour). As with\nencode_colour() it can do colour conversion on the fly, meaning that you can\ndecode a hex string directly into any of the supported colour spaces.\n","example_call":"decode_colour(colour, alpha = FALSE, to = \"rgb\", white = \"D65\", na_value = NA)"},"farver::add_to_channel":{"description":"This set of functions allows you to modify colours as given by strings,\nwhithout first decoding them. For large vectors of colour values this should\nprovide a considerable speedup.\n","example_call":"add_to_channel(colour, channel, value, space = \"rgb\", white = \"D65\","},"farver::decode_native":{"description":"Colours in R are internally encoded as integers when they are passed around\nto graphics devices. The encoding splits the 32 bit in the integer between\nred, green, blue, and alpha, so that each get 8 bit, equivalent to 256\nvalues. It is very seldom that an R user is subjected to this representation,\nbut it is present in the nativeRaster format which can be obtained from\ne.g. capturing the content of a graphic device (using dev.capture()) or reading\nin PNG files using png::readPNG(native = TRUE). It is very rare that you\nmight need to convert back and forth between this format, but it is provided\nhere for completeness.\n","example_call":"decode_native(colour)"},"farver::compare_colour":{"description":"There are many ways to measure the distance between colours. farver\nprovides 5 different algorithms, ranging from simple euclidean distance in\nRGB space, to different perceptual measures such as CIE2000.\n","example_call":"compare_colour(from, to = NULL, from_space, to_space = from_space,"},"farver::set_channel":{"description":"This set of functions allows you to modify colours as given by strings,\nwhithout first decoding them. For large vectors of colour values this should\nprovide a considerable speedup.\n","example_call":"set_channel(colour, channel, value, space = \"rgb\", white = \"D65\","},"farver::cap_channel":{"description":"This set of functions allows you to modify colours as given by strings,\nwhithout first decoding them. For large vectors of colour values this should\nprovide a considerable speedup.\n","example_call":"cap_channel(colour, channel, value, space = \"rgb\", white = \"D65\","},"farver::encode_native":{"description":"Colours in R are internally encoded as integers when they are passed around\nto graphics devices. The encoding splits the 32 bit in the integer between\nred, green, blue, and alpha, so that each get 8 bit, equivalent to 256\nvalues. It is very seldom that an R user is subjected to this representation,\nbut it is present in the nativeRaster format which can be obtained from\ne.g. capturing the content of a graphic device (using dev.capture()) or reading\nin PNG files using png::readPNG(native = TRUE). It is very rare that you\nmight need to convert back and forth between this format, but it is provided\nhere for completeness.\n","example_call":"encode_native(colour, ...)"},"farver::raise_channel":{"description":"This set of functions allows you to modify colours as given by strings,\nwhithout first decoding them. For large vectors of colour values this should\nprovide a considerable speedup.\n","example_call":"raise_channel(colour, channel, value, space = \"rgb\", white = \"D65\","},"farver::convert_colour":{"description":"This function lets you convert between different representations of colours.\nThe API is reminiscent of grDevices::convertColor(), but the performance is\nmuch better. It is not assured that grDevices::convertColor() and\nconvert_colour() provide numerically equivalent conversion at 16bit level as\nthe formula used are potentially slightly different. For all intend and\npurpose, the resulting colours will be equivalent though.\n","example_call":"convert_colour(colour, from, to, white_from = \"D65\", white_to = white_from)"},"farver::encode_colour":{"description":"This is a version of grDevices::rgb() that works with the standard colour\nformat used in farver (matrix or data.frame with colours in rows). It further\nsupport taking input from any colour space.\n","example_call":"encode_colour(colour, alpha = NULL, from = \"rgb\", white = \"D65\")"},"farver::as_white_ref":{"description":"This function can take either the name of a standardised illuminants, x\nand y chromaticity coordinates or X, Y, and Z tristimulus values and converts\nit to tristimulus values normalised to Y=100. All Illuminant series A-F are\nsupported and can be queried both on the CIE 1931 2 and CIE 1964 10\nchromaticity coordinates.\n","example_call":"as_white_ref(x, fow = 2)"},"farver::get_channel":{"description":"This set of functions allows you to modify colours as given by strings,\nwhithout first decoding them. For large vectors of colour values this should\nprovide a considerable speedup.\n","example_call":"get_channel(colour, channel, space = \"rgb\", white = \"D65\", na_value = NA)"},"forcats::fct_relabel":{"description":"Relabel factor levels with a function, collapsing as necessary\n","example_call":"fct_relabel(.f, .fun, ...)"},"forcats::fct_relevel":{"description":"This is a generalisation of stats::relevel() that allows you to move any\nnumber of levels to any location.\n","example_call":"fct_relevel(.f, ..., after = 0L)"},"forcats::fct_anon":{"description":"Replaces factor levels with arbitrary numeric identifiers. Neither\nthe values nor the order of the levels are preserved.\n","example_call":"fct_anon(f, prefix = \"\")"},"forcats::fct_c":{"description":"This is a useful way of patching together factors from multiple sources\nthat really should have the same levels but don't.\n","example_call":"fct_c(...)"},"forcats::lvls_reorder":{"description":"lvls_reorder leaves values as they are, but changes the order.\nlvls_revalue changes the values of existing levels; there must\nbe one new level for each old level.\nlvls_expand expands the set of levels; the new levels must\ninclude the old levels.\n","example_call":"lvls_reorder(f, idx, ordered = NA)"},"forcats::lvls_expand":{"description":"lvls_reorder leaves values as they are, but changes the order.\nlvls_revalue changes the values of existing levels; there must\nbe one new level for each old level.\nlvls_expand expands the set of levels; the new levels must\ninclude the old levels.\n","example_call":"lvls_expand(f, new_levels)"},"forcats::fct_na_level_to_value":{"description":"There are two ways to represent missing values in factors: in the values\nand in the levels. NAs in the values are most useful for data analysis\n(since is.na() returns what you expect), but because the NA is not\nexplicitly recorded in the levels, there's no way to control its position\n(it's almost always displayed last or not at all). Putting the NAs in the levels allows\nyou to control its display, at the cost of losing accurate is.na()\nreporting.\n","example_call":"fct_na_level_to_value(f, extra_levels = NULL)"},"forcats::fct_lump_prop":{"description":"A family for lumping together levels that meet some criteria.\n","example_call":"fct_lump_prop(f, prop, w = NULL, other_level = \"Other\")"},"forcats::as_factor":{"description":"Compared to base R, when x is a character, this function creates\nlevels in the order in which they appear, which will be the same on every\nplatform. (Base R sorts in the current locale which can vary from place\nto place.) When x is numeric, the ordering is based on the numeric\nvalue and consistent with base R.\n","example_call":"as_factor(x, ...)"},"forcats::fct_na_value_to_level":{"description":"There are two ways to represent missing values in factors: in the values\nand in the levels. NAs in the values are most useful for data analysis\n(since is.na() returns what you expect), but because the NA is not\nexplicitly recorded in the levels, there's no way to control its position\n(it's almost always displayed last or not at all). Putting the NAs in the levels allows\nyou to control its display, at the cost of losing accurate is.na()\nreporting.\n","example_call":"fct_na_value_to_level(f, level = NA)"},"forcats::fct_shuffle":{"description":"Randomly permute factor levels\n","example_call":"fct_shuffle(f)"},"forcats::fct_drop":{"description":"Compared to base::droplevels(), does not drop NA levels that have values.\n","example_call":"fct_drop(f, only = NULL)"},"forcats::fct_unify":{"description":"Unify the levels in a list of factors\n","example_call":"fct_unify(fs, levels = lvls_union(fs))"},"forcats::lvls_revalue":{"description":"lvls_reorder leaves values as they are, but changes the order.\nlvls_revalue changes the values of existing levels; there must\nbe one new level for each old level.\nlvls_expand expands the set of levels; the new levels must\ninclude the old levels.\n","example_call":"lvls_revalue(f, new_levels)"},"forcats::fct_lump_min":{"description":"A family for lumping together levels that meet some criteria.\n","example_call":"fct_lump_min(f, min, w = NULL, other_level = \"Other\")"},"forcats::fct_unique":{"description":"fct_unique() extracts the complete set of possible values from the\nlevels of the factor, rather than looking at the actual values, like\nunique().\n","example_call":"fct_unique(f)"},"forcats::fct_infreq":{"description":"This family of functions changes only the order of the levels.\n","example_call":"fct_infreq(f, w = NULL, ordered = NA)"},"forcats::fct_shift":{"description":"This is useful when the levels of an ordered factor are actually cyclical,\nwith different conventions on the starting point.\n","example_call":"fct_shift(f, n = 1L)"},"forcats::fct_reorder":{"description":"fct_reorder() is useful for 1d displays where the factor is mapped to\nposition; fct_reorder2() for 2d displays where the factor is mapped to\na non-position aesthetic. last2() and first2() are helpers for fct_reorder2();\nlast2() finds the last value of y when sorted by x; first2() finds the first value.\n","example_call":"fct_reorder(.f, .x, .fun = median, ..., .na_rm = NULL, .default = Inf,"},"forcats::fct_explicit_na":{"description":"\n","example_call":"fct_explicit_na(f, na_level = \"(Missing)\")"},"forcats::fct_rev":{"description":"This is sometimes useful when plotting a factor.\n","example_call":"fct_rev(f)"},"forcats::lvls_union":{"description":"Find all levels in a list of factors\n","example_call":"lvls_union(fs)"},"forcats::fct_lump":{"description":"A family for lumping together levels that meet some criteria.\n","example_call":"fct_lump(f, n, prop, w = NULL, other_level = \"Other\", ties.method = c(\"min\","},"forcats::fct_inorder":{"description":"This family of functions changes only the order of the levels.\n","example_call":"fct_inorder(f, ordered = NA)"},"forcats::first2":{"description":"fct_reorder() is useful for 1d displays where the factor is mapped to\nposition; fct_reorder2() for 2d displays where the factor is mapped to\na non-position aesthetic. last2() and first2() are helpers for fct_reorder2();\nlast2() finds the last value of y when sorted by x; first2() finds the first value.\n","example_call":"first2(.x, .y)"},"forcats::fct":{"description":"fct() is a stricter version of factor() that errors if your\nspecification of levels is inconsistent with the values in x.\n","example_call":"fct(x = character(), levels = NULL, na = character())"},"forcats::fct_count":{"description":"Count entries in a factor\n","example_call":"fct_count(f, sort = FALSE, prop = FALSE)"},"forcats::last2":{"description":"fct_reorder() is useful for 1d displays where the factor is mapped to\nposition; fct_reorder2() for 2d displays where the factor is mapped to\na non-position aesthetic. last2() and first2() are helpers for fct_reorder2();\nlast2() finds the last value of y when sorted by x; first2() finds the first value.\n","example_call":"last2(.x, .y)"},"forcats::fct_inseq":{"description":"This family of functions changes only the order of the levels.\n","example_call":"fct_inseq(f, ordered = NA)"},"forcats::fct_lump_n":{"description":"A family for lumping together levels that meet some criteria.\n","example_call":"fct_lump_n(f, n, w = NULL, other_level = \"Other\", ties.method = c(\"min\","},"forcats::fct_other":{"description":"Manually replace levels with \"other\"\n","example_call":"fct_other(f, keep, drop, other_level = \"Other\")"},"forcats::fct_reorder2":{"description":"fct_reorder() is useful for 1d displays where the factor is mapped to\nposition; fct_reorder2() for 2d displays where the factor is mapped to\na non-position aesthetic. last2() and first2() are helpers for fct_reorder2();\nlast2() finds the last value of y when sorted by x; first2() finds the first value.\n","example_call":"fct_reorder2(.f, .x, .y, .fun = last2, ..., .na_rm = NULL, .default = -Inf,"},"forcats::fct_lump_lowfreq":{"description":"A family for lumping together levels that meet some criteria.\n","example_call":"fct_lump_lowfreq(f, w = NULL, other_level = \"Other\")"},"forcats::fct_recode":{"description":"Change factor levels by hand\n","example_call":"fct_recode(.f, ...)"},"forcats::fct_match":{"description":"Do any of lvls occur in f? Compared to %in%, this function validates\nlvls to ensure that they're actually present in f. In other words,\nx %in% \"not present\" will return FALSE, but fct_match(x, \"not present\")\nwill throw an error.\n","example_call":"fct_match(f, lvls)"},"forcats::fct_cross":{"description":"Computes a factor whose levels are all the combinations of the levels of the input factors.\n","example_call":"fct_cross(..., sep = \":\", keep_empty = FALSE)"},"forcats::fct_collapse":{"description":"Collapse factor levels into manually defined groups\n","example_call":"fct_collapse(.f, ..., other_level = NULL, group_other = \"DEPRECATED\")"},"forcats::fct_expand":{"description":"Add additional levels to a factor\n","example_call":"fct_expand(f, ..., after = Inf)"},"fs::as_fs_perms":{"description":"fs_perms() objects help one create and modify file permissions easily.\nThey support both numeric input, octal and symbolic character\nrepresentations. Compared to octmode they support symbolic representations\nand display the mode the same format as ls on POSIX systems.\n","example_call":"as_fs_perms(x, ...)"},"fs::as_fs_path":{"description":"Tidy file paths, character vectors which are coloured by file type on\ncapable terminals.\n","example_call":"as_fs_path(x)"},"fs::file_info":{"description":"Compared to file.info() the full results of a stat(2) system call are\nreturned and some columns are returned as S3 classes to make manipulation\nmore natural. On systems which do not support all metadata (such as Windows)\ndefault values are used.\n","example_call":"file_info(path, fail = TRUE, follow = FALSE)"},"fs::path_filter":{"description":"Filter paths\n","example_call":"path_filter(path, glob = NULL, regexp = NULL, invert = FALSE, ...)"},"fs::path_home_r":{"description":"path_expand() differs from base::path.expand() in the interpretation of\nthe home directory of Windows. In particular path_expand() uses the path\nset in the USERPROFILE environment variable and, if unset, then uses\nHOMEDRIVE/HOMEPATH.\n","example_call":"path_home_r(...)"},"fs::is_file_empty":{"description":"Functions to test for file types\n","example_call":"is_file_empty(path, follow = TRUE)"},"fs::link_path":{"description":"Read the value of a symbolic link\n","example_call":"link_path(path)"},"fs::dir_map":{"description":"dir_ls() is equivalent to the ls command. It returns filenames as a\nnamed fs_path character vector. The names are equivalent to the values,\nwhich is useful for passing onto functions like purrr::map_dfr().\n","example_call":"dir_map(path = \".\", fun, all = FALSE, recurse = FALSE, type = \"any\","},"fs::group_ids":{"description":"These functions use the GETPWENT(3) and GETGRENT(3) system calls to query\nusers and groups respectively.\n","example_call":"group_ids()"},"fs::path":{"description":"path() constructs a relative path, path_wd() constructs an absolute path\nfrom the current working directory.\n","example_call":"path(..., ext = \"\")"},"fs::fs_bytes":{"description":"Construct, manipulate and display vectors of file sizes. These are numeric\nvectors, so you can compare them numerically, but they can also be compared\nto human readable values such as '10MB'.\n","example_call":"fs_bytes(x)"},"fs::is_link":{"description":"Functions to test for file types\n","example_call":"is_link(path)"},"fs::fs_path":{"description":"Tidy file paths, character vectors which are coloured by file type on\ncapable terminals.\n","example_call":"fs_path(x)"},"fs::path_ext_remove":{"description":"path_file() returns the filename portion of the path, path_dir() returns\nthe directory portion. path_ext() returns the last extension (if any) for a\npath. path_ext_remove() removes the last extension and returns the rest of\nthe path. path_ext_set() replaces the extension with a new extension. If\nthere is no existing extension the new extension is appended.\n","example_call":"path_ext_remove(path)"},"fs::dir_ls":{"description":"dir_ls() is equivalent to the ls command. It returns filenames as a\nnamed fs_path character vector. The names are equivalent to the values,\nwhich is useful for passing onto functions like purrr::map_dfr().\n","example_call":"dir_ls(path = \".\", all = FALSE, recurse = FALSE, type = \"any\","},"fs::dir_copy":{"description":"file_copy() copies files.\n","example_call":"dir_copy(path, new_path, overwrite = FALSE)"},"fs::dir_tree":{"description":"Print contents of directories in a tree-like format\n","example_call":"dir_tree(path = \".\", recurse = TRUE, ...)"},"fs::dir_info":{"description":"dir_ls() is equivalent to the ls command. It returns filenames as a\nnamed fs_path character vector. The names are equivalent to the values,\nwhich is useful for passing onto functions like purrr::map_dfr().\n","example_call":"dir_info(path = \".\", all = FALSE, recurse = FALSE, type = \"any\","},"fs::file_move":{"description":"Compared to file.rename file_move() always fails if it is unable to move\na file, rather than signaling a Warning and returning an error code.\n","example_call":"file_move(path, new_path)"},"fs::path_package":{"description":"path_package differs from system.file() in that it always returns an\nerror if the package does not exist. It also returns a different error if\nthe file within the package does not exist.\n","example_call":"path_package(package, ...)"},"fs::file_temp_pop":{"description":"file_temp() returns the name which can be used as a temporary file.\n","example_call":"file_temp_pop()"},"fs::is_dir":{"description":"Functions to test for file types\n","example_call":"is_dir(path, follow = TRUE)"},"fs::path_split":{"description":"All functions apart from path_real() are purely path computations, so the\nfiles in question do not need to exist on the filesystem.\n","example_call":"path_split(path)"},"fs::path_ext_set":{"description":"path_file() returns the filename portion of the path, path_dir() returns\nthe directory portion. path_ext() returns the last extension (if any) for a\npath. path_ext_remove() removes the last extension and returns the rest of\nthe path. path_ext_set() replaces the extension with a new extension. If\nthere is no existing extension the new extension is appended.\n","example_call":"path_ext_set(path, ext)"},"fs::as_fs_bytes":{"description":"Construct, manipulate and display vectors of file sizes. These are numeric\nvectors, so you can compare them numerically, but they can also be compared\nto human readable values such as '10MB'.\n","example_call":"as_fs_bytes(x)"},"fs::path_tidy":{"description":"untidy paths are all different, tidy paths are all the same.\nTidy paths always use / to delimit directories, never have\nmultiple / or trailing / and have colourised output based on the file\ntype.\n","example_call":"path_tidy(path)"},"fs::file_create":{"description":"The functions file_create() and dir_create() ensure that path exists;\nif it already exists it will be left unchanged. That means that compared to\nfile.create(), file_create() will not truncate an existing file, and\ncompared to dir.create(), dir_create() will silently ignore existing\ndirectories.\n","example_call":"file_create(path, ..., mode = \"u=rw,go=r\")"},"fs::path_abs":{"description":"All functions apart from path_real() are purely path computations, so the\nfiles in question do not need to exist on the filesystem.\n","example_call":"path_abs(path, start = \".\")"},"fs::file_exists":{"description":"file_exists(path) is a shortcut for file_access(x, \"exists\");\ndir_exists(path) and link_exists(path) are similar but also check that\nthe path is a directory or link, respectively. (file_exists(path) returns\nTRUE if path exists and it is a directory.)\n","example_call":"file_exists(path)"},"fs::user_ids":{"description":"These functions use the GETPWENT(3) and GETGRENT(3) system calls to query\nusers and groups respectively.\n","example_call":"user_ids()"},"fs::path_wd":{"description":"path() constructs a relative path, path_wd() constructs an absolute path\nfrom the current working directory.\n","example_call":"path_wd(..., ext = \"\")"},"fs::dir_create":{"description":"The functions file_create() and dir_create() ensure that path exists;\nif it already exists it will be left unchanged. That means that compared to\nfile.create(), file_create() will not truncate an existing file, and\ncompared to dir.create(), dir_create() will silently ignore existing\ndirectories.\n","example_call":"dir_create(path, ..., mode = \"u=rwx,go=rx\", recurse = TRUE, recursive)"},"fs::file_show":{"description":"Open files or directories\n","example_call":"file_show(path = \".\", browser = getOption(\"browser\"))"},"fs::is_file":{"description":"Functions to test for file types\n","example_call":"is_file(path, follow = TRUE)"},"fs::path_ext":{"description":"path_file() returns the filename portion of the path, path_dir() returns\nthe directory portion. path_ext() returns the last extension (if any) for a\npath. path_ext_remove() removes the last extension and returns the rest of\nthe path. path_ext_set() replaces the extension with a new extension. If\nthere is no existing extension the new extension is appended.\n","example_call":"path_ext(path)"},"fs::file_chmod":{"description":"Change file permissions\n","example_call":"file_chmod(path, mode)"},"fs::file_size":{"description":"Compared to file.info() the full results of a stat(2) system call are\nreturned and some columns are returned as S3 classes to make manipulation\nmore natural. On systems which do not support all metadata (such as Windows)\ndefault values are used.\n","example_call":"file_size(path, fail = TRUE)"},"fs::path_has_parent":{"description":"All functions apart from path_real() are purely path computations, so the\nfiles in question do not need to exist on the filesystem.\n","example_call":"path_has_parent(path, parent)"},"fs::file_access":{"description":"file_exists(path) is a shortcut for file_access(x, \"exists\");\ndir_exists(path) and link_exists(path) are similar but also check that\nthe path is a directory or link, respectively. (file_exists(path) returns\nTRUE if path exists and it is a directory.)\n","example_call":"file_access(path, mode = \"exists\")"},"fs::fs_perms":{"description":"fs_perms() objects help one create and modify file permissions easily.\nThey support both numeric input, octal and symbolic character\nrepresentations. Compared to octmode they support symbolic representations\nand display the mode the same format as ls on POSIX systems.\n","example_call":"fs_perms(x, ...)"},"fs::path_sanitize":{"description":"path_sanitize() removes the following:\n","example_call":"path_sanitize(filename, replacement = \"\")"},"fs::file_temp_push":{"description":"file_temp() returns the name which can be used as a temporary file.\n","example_call":"file_temp_push(path)"},"fs::link_create":{"description":"The functions file_create() and dir_create() ensure that path exists;\nif it already exists it will be left unchanged. That means that compared to\nfile.create(), file_create() will not truncate an existing file, and\ncompared to dir.create(), dir_create() will silently ignore existing\ndirectories.\n","example_call":"link_create(path, new_path, symbolic = TRUE)"},"fs::path_home":{"description":"path_expand() differs from base::path.expand() in the interpretation of\nthe home directory of Windows. In particular path_expand() uses the path\nset in the USERPROFILE environment variable and, if unset, then uses\nHOMEDRIVE/HOMEPATH.\n","example_call":"path_home(...)"},"fs::path_real":{"description":"All functions apart from path_real() are purely path computations, so the\nfiles in question do not need to exist on the filesystem.\n","example_call":"path_real(path)"},"fs::file_touch":{"description":"Unlike the touch POSIX utility this does not create the file if it does not\nexist. Use file_create() to do this if needed.\n","example_call":"file_touch(path, access_time = Sys.time(), modification_time = access_time)"},"fs::path_ext<-":{"description":"path_file() returns the filename portion of the path, path_dir() returns\nthe directory portion. path_ext() returns the last extension (if any) for a\npath. path_ext_remove() removes the last extension and returns the rest of\nthe path. path_ext_set() replaces the extension with a new extension. If\nthere is no existing extension the new extension is appended.\n","example_call":"path_ext<-(path, value)"},"fs::link_delete":{"description":"file_delete() and link_delete() delete file and links. Compared to\nfile.remove they always fail if they cannot delete the object rather than\nchanging return value or signalling a warning. If any inputs are\ndirectories, they are passed to dir_delete(), so file_delete() can\ntherefore be used to delete any filesystem object.\n","example_call":"link_delete(path)"},"fs::path_temp":{"description":"file_temp() returns the name which can be used as a temporary file.\n","example_call":"path_temp(...)"},"fs::dir_exists":{"description":"file_exists(path) is a shortcut for file_access(x, \"exists\");\ndir_exists(path) and link_exists(path) are similar but also check that\nthe path is a directory or link, respectively. (file_exists(path) returns\nTRUE if path exists and it is a directory.)\n","example_call":"dir_exists(path)"},"fs::path_file":{"description":"path_file() returns the filename portion of the path, path_dir() returns\nthe directory portion. path_ext() returns the last extension (if any) for a\npath. path_ext_remove() removes the last extension and returns the rest of\nthe path. path_ext_set() replaces the extension with a new extension. If\nthere is no existing extension the new extension is appended.\n","example_call":"path_file(path)"},"fs::is_absolute_path":{"description":"Test if a path is an absolute path\n","example_call":"is_absolute_path(path)"},"fs::dir_delete":{"description":"file_delete() and link_delete() delete file and links. Compared to\nfile.remove they always fail if they cannot delete the object rather than\nchanging return value or signalling a warning. If any inputs are\ndirectories, they are passed to dir_delete(), so file_delete() can\ntherefore be used to delete any filesystem object.\n","example_call":"dir_delete(path)"},"fs::path_expand":{"description":"path_expand() differs from base::path.expand() in the interpretation of\nthe home directory of Windows. In particular path_expand() uses the path\nset in the USERPROFILE environment variable and, if unset, then uses\nHOMEDRIVE/HOMEPATH.\n","example_call":"path_expand(path)"},"fs::file_chown":{"description":"Change owner or group of a file\n","example_call":"file_chown(path, user_id = NULL, group_id = NULL)"},"fs::dir_walk":{"description":"dir_ls() is equivalent to the ls command. It returns filenames as a\nnamed fs_path character vector. The names are equivalent to the values,\nwhich is useful for passing onto functions like purrr::map_dfr().\n","example_call":"dir_walk(path = \".\", fun, all = FALSE, recurse = FALSE, type = \"any\","},"fs::path_norm":{"description":"All functions apart from path_real() are purely path computations, so the\nfiles in question do not need to exist on the filesystem.\n","example_call":"path_norm(path)"},"fs::path_dir":{"description":"path_file() returns the filename portion of the path, path_dir() returns\nthe directory portion. path_ext() returns the last extension (if any) for a\npath. path_ext_remove() removes the last extension and returns the rest of\nthe path. path_ext_set() replaces the extension with a new extension. If\nthere is no existing extension the new extension is appended.\n","example_call":"path_dir(path)"},"fs::path_rel":{"description":"All functions apart from path_real() are purely path computations, so the\nfiles in question do not need to exist on the filesystem.\n","example_call":"path_rel(path, start = \".\")"},"fs::file_delete":{"description":"file_delete() and link_delete() delete file and links. Compared to\nfile.remove they always fail if they cannot delete the object rather than\nchanging return value or signalling a warning. If any inputs are\ndirectories, they are passed to dir_delete(), so file_delete() can\ntherefore be used to delete any filesystem object.\n","example_call":"file_delete(path)"},"fs::link_exists":{"description":"file_exists(path) is a shortcut for file_access(x, \"exists\");\ndir_exists(path) and link_exists(path) are similar but also check that\nthe path is a directory or link, respectively. (file_exists(path) returns\nTRUE if path exists and it is a directory.)\n","example_call":"link_exists(path)"},"fs::file_copy":{"description":"file_copy() copies files.\n","example_call":"file_copy(path, new_path, overwrite = FALSE)"},"fs::path_join":{"description":"All functions apart from path_real() are purely path computations, so the\nfiles in question do not need to exist on the filesystem.\n","example_call":"path_join(parts)"},"fs::link_copy":{"description":"file_copy() copies files.\n","example_call":"link_copy(path, new_path, overwrite = FALSE)"},"fs::path_common":{"description":"All functions apart from path_real() are purely path computations, so the\nfiles in question do not need to exist on the filesystem.\n","example_call":"path_common(path)"},"fs::path_expand_r":{"description":"path_expand() differs from base::path.expand() in the interpretation of\nthe home directory of Windows. In particular path_expand() uses the path\nset in the USERPROFILE environment variable and, if unset, then uses\nHOMEDRIVE/HOMEPATH.\n","example_call":"path_expand_r(path)"},"fs::file_temp":{"description":"file_temp() returns the name which can be used as a temporary file.\n","example_call":"file_temp(pattern = \"file\", tmp_dir = tempdir(), ext = \"\")"},"generics::union":{"description":"Union (union()), intersect (intersect()), difference (setdiff()),\nand equality (setequal()) for two vectors representing sets. Determine\nmembership with is.element().\n","example_call":"union(x, y, ...)"},"generics::rank_results":{"description":"rank_results() computes relative ranks of a collection of objects and\nreturns a summary of the results.\n","example_call":"rank_results(x, ...)"},"generics::fit":{"description":"Estimates parameters for a given model from a set of data.\n","example_call":"fit(object, ...)"},"generics::estfun":{"description":"Extracting the estimating functions of a fitted model.\n","example_call":"estfun(x, ...)"},"generics::var_imp":{"description":"A generic method for calculating variable importance for model objects.\n","example_call":"var_imp(object, ...)"},"generics::train":{"description":"Estimates parameters for a given model from a set of data.\n","example_call":"train(x, ...)"},"generics::forecast":{"description":"The functions allow producing forecasts based on the provided object.\n","example_call":"forecast(object, ...)"},"generics::hypothesize":{"description":"Construct hypotheses.\n","example_call":"hypothesize(x, ...)"},"generics::setdiff":{"description":"Union (union()), intersect (intersect()), difference (setdiff()),\nand equality (setequal()) for two vectors representing sets. Determine\nmembership with is.element().\n","example_call":"setdiff(x, y, ...)"},"generics::glance":{"description":"Construct a single row summary \"glance\" of a model, fit, or other\nobject\n","example_call":"glance(x, ...)"},"generics::visualize":{"description":"Visualize a data set or object.\n","example_call":"visualize(x, ...)"},"generics::fit_xy":{"description":"Estimates parameters for a given model from a set of data in the form of\na set of predictors (x) and outcome(s) (y).\n","example_call":"fit_xy(object, ...)"},"generics::learn":{"description":"Estimates parameters for a given model from a set of data.\n","example_call":"learn(x, ...)"},"generics::accuracy":{"description":"Returns range of summary measures of the forecast accuracy.\n","example_call":"accuracy(object, ...)"},"generics::equation":{"description":"Display the mathematical representation of a fitted model.\n","example_call":"equation(object, ...)"},"generics::prune":{"description":"Prune or reduce an object\n","example_call":"prune(tree, ...)"},"generics::evaluate":{"description":"Evaluate an object.\n","example_call":"evaluate(x, ...)"},"generics::refit":{"description":"Refitting models\n","example_call":"refit(object, ...)"},"generics::calculate":{"description":"Calculate statistics.\n","example_call":"calculate(x, ...)"},"generics::min_grid":{"description":"min_grid() determines exactly what models should be fit in order to\nevaluate the entire set of tuning parameter combinations. This is for\ninternal use only and the API may change in the near future.\n","example_call":"min_grid(x, grid, ...)"},"generics::is.element":{"description":"Union (union()), intersect (intersect()), difference (setdiff()),\nand equality (setequal()) for two vectors representing sets. Determine\nmembership with is.element().\n","example_call":"is.element(el, set, ...)"},"generics::tunable":{"description":"Returns information on potential hyper-parameters that can be optimized.\n","example_call":"tunable(x, ...)"},"generics::as.difftime":{"description":"Coercion functions for creating difftime objects from other\nexisting objects.\n","example_call":"as.difftime(tim, ...)"},"generics::varying_args":{"description":"Find any arguments that are not fully specified.\n","example_call":"varying_args(object, ...)"},"generics::explore":{"description":"explore() invokes a function that starts an interactive, pre-defined widget\n(e.g. plotly visualization, shiny app, etc.) to investigate the results.\n","example_call":"explore(x, ...)"},"generics::as.ordered":{"description":"Coercion functions for creating factors from other existing objects.\n","example_call":"as.ordered(x, ...)"},"generics::intersect":{"description":"Union (union()), intersect (intersect()), difference (setdiff()),\nand equality (setequal()) for two vectors representing sets. Determine\nmembership with is.element().\n","example_call":"intersect(x, y, ...)"},"generics::augment":{"description":"Augment data with information from an object\n","example_call":"augment(x, ...)"},"generics::tune_args":{"description":"tune_args() takes an object such as a model specification or a recipe and\nreturns a tibble of information on all possible tunable arguments and\nwhether or not they are actually tunable.\n","example_call":"tune_args(object, ...)"},"generics::explain":{"description":"Explain details of an object\n","example_call":"explain(x, ...)"},"generics::specify":{"description":"Specify variables or other quantities.\n","example_call":"specify(x, ...)"},"generics::setequal":{"description":"Union (union()), intersect (intersect()), difference (setdiff()),\nand equality (setequal()) for two vectors representing sets. Determine\nmembership with is.element().\n","example_call":"setequal(x, y, ...)"},"generics::as.factor":{"description":"Coercion functions for creating factors from other existing objects.\n","example_call":"as.factor(x, ...)"},"generics::tidy":{"description":"Turn an object into a tidy tibble\n","example_call":"tidy(x, ...)"},"generics::components":{"description":"components can be used to extract elements from an object.\n","example_call":"components(object, ...)"},"generics::compile":{"description":"Finalizes or completes an object.\n","example_call":"compile(object, ...)"},"generics::required_pkgs":{"description":"Determine packages required by objects\n","example_call":"required_pkgs(x, ...)"},"generics::interpolate":{"description":"Interpolates missing values provided in the training dataset using the\nfitted model.\n","example_call":"interpolate(object, ...)"},"generics::generate":{"description":"Generate values based on inputs\n","example_call":"generate(x, ...)"},"ggplot2::update_geom_defaults":{"description":"Modify geom/stat aesthetic defaults for future plots\n","example_call":"update_geom_defaults(geom, new)"},"ggplot2::stat_count":{"description":"There are two types of bar charts: geom_bar() and geom_col().\ngeom_bar() makes the height of the bar proportional to the number of\ncases in each group (or if the weight aesthetic is supplied, the sum\nof the weights). If you want the heights of the bars to represent values\nin the data, use geom_col() instead. geom_bar() uses stat_count() by\ndefault: it counts the number of cases at each x position. geom_col()\nuses stat_identity(): it leaves the data as is.\n","example_call":"stat_count(mapping = NULL, data = NULL, geom = \"bar\", position = \"stack\","},"ggplot2::StatQq":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::guide_custom":{"description":"This is a special guide that can be used to display any graphical object\n(grob) along with the regular guides. This guide has no associated scale.\n","example_call":"guide_custom(grob, width = grobWidth(grob), height = grobHeight(grob),"},"ggplot2::GeomLine":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::render_strips":{"description":"All positions are rendered and it is up to the facet to decide which to use\n","example_call":"render_strips(x = NULL, y = NULL, labeller, theme)"},"ggplot2::GeomLogticks":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::%+replace%":{"description":"The current/active theme (see theme()) is automatically applied to every\nplot you draw. Use theme_get() to get the current theme, and theme_set() to\ncompletely override it. theme_update() and theme_replace() are shorthands for\nchanging individual elements.\n","example_call":"%+replace%(e1, e2)"},"ggplot2::GeomPolygon":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::stat_qq":{"description":"geom_qq() and stat_qq() produce quantile-quantile plots. geom_qq_line() and\nstat_qq_line() compute the slope and intercept of the line connecting the\npoints at specified quartiles of the theoretical and sample distributions.\n","example_call":"stat_qq(mapping = NULL, data = NULL, geom = \"point\", position = \"identity\","},"ggplot2::GeomBoxplot":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::cut_width":{"description":"cut_interval() makes n groups with equal range, cut_number()\nmakes n groups with (approximately) equal numbers of observations;\ncut_width() makes groups of width width.\n","example_call":"cut_width(x, width, center = NULL, boundary = NULL, closed = \"right\","},"ggplot2::scale_linewidth_ordinal":{"description":"scale_linewidth scales the width of lines and polygon strokes. Due to\nhistorical reasons, it is also possible to control this with the size\naesthetic, but using linewidth is encourage to clearly differentiate area\naesthetics from stroke width aesthetics.\n","example_call":"scale_linewidth_ordinal(name = waiver(), ..., range = c(2, 6))"},"ggplot2::ScaleBinnedPosition":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::GeomAnnotationMap":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::GeomDensity":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::scale_fill_fermenter":{"description":"The brewer scales provide sequential, diverging and qualitative\ncolour schemes from ColorBrewer. These are particularly well suited to\ndisplay discrete values on a map. See https://colorbrewer2.org for\nmore information.\n","example_call":"scale_fill_fermenter(name = waiver(), ..., type = \"seq\", palette = 1, direction = -1,"},"ggplot2::get_alt_text":{"description":"This function returns a text that can be used as alt-text in webpages etc.\nCurrently it will use the alt label, added with <U+2060>+ labs(alt = <...>)<U+2060>, or\na return an empty string, but in the future it might try to generate an alt\ntext from the information stored in the plot.\n","example_call":"get_alt_text(p, ...)"},"ggplot2::scale_linetype_manual":{"description":"These functions allow you to specify your own set of mappings from levels in the\ndata to aesthetic values.\n","example_call":"scale_linetype_manual(..., values, breaks = waiver(), na.value = \"blank\")"},"ggplot2::map_data":{"description":"Easily turn data from the maps package into a data frame suitable\nfor plotting with ggplot2.\n","example_call":"map_data(map, region = \".\", exact = FALSE, ...)"},"ggplot2::scale_color_viridis_b":{"description":"The viridis scales provide colour maps that are perceptually uniform in both\ncolour and black-and-white. They are also designed to be perceived by viewers\nwith common forms of colour blindness. See also\nhttps://bids.github.io/colormap/.\n","example_call":"scale_color_viridis_b(name = waiver(), ..., alpha = 1, begin = 0, end = 1,"},"ggplot2::ScaleContinuousIdentity":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::scale_color_viridis_c":{"description":"The viridis scales provide colour maps that are perceptually uniform in both\ncolour and black-and-white. They are also designed to be perceived by viewers\nwith common forms of colour blindness. See also\nhttps://bids.github.io/colormap/.\n","example_call":"scale_color_viridis_c(name = waiver(), ..., alpha = 1, begin = 0, end = 1,"},"ggplot2::scale_color_viridis_d":{"description":"The viridis scales provide colour maps that are perceptually uniform in both\ncolour and black-and-white. They are also designed to be perceived by viewers\nwith common forms of colour blindness. See also\nhttps://bids.github.io/colormap/.\n","example_call":"scale_color_viridis_d(name = waiver(), ..., alpha = 1, begin = 0, end = 1,"},"ggplot2::stat_summary_2d":{"description":"stat_summary_2d() is a 2d variation of stat_summary().\nstat_summary_hex() is a hexagonal variation of\nstat_summary_2d(). The data are divided into bins defined\nby x and y, and then the values of z in each cell is\nare summarised with fun.\n","example_call":"stat_summary_2d(mapping = NULL, data = NULL, geom = \"tile\", position = \"identity\","},"ggplot2::CoordSf":{"description":"This set of geom, stat, and coord are used to visualise simple feature (sf)\nobjects. For simple plots, you will only need geom_sf() as it\nuses stat_sf() and adds coord_sf() for you. geom_sf() is\nan unusual geom because it will draw different geometric objects depending\non what simple features are present in the data: you can get points, lines,\nor polygons.\nFor text and labels, you can use geom_sf_text() and geom_sf_label().\n","example_call":"NULL"},"ggplot2::geom_count":{"description":"This is a variant geom_point() that counts the number of\nobservations at each location, then maps the count to point area. It\nuseful when you have discrete data and overplotting.\n","example_call":"geom_count(mapping = NULL, data = NULL, stat = \"sum\", position = \"identity\","},"ggplot2::CoordFixed":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::scale_fill_ordinal":{"description":"The viridis scales provide colour maps that are perceptually uniform in both\ncolour and black-and-white. They are also designed to be perceived by viewers\nwith common forms of colour blindness. See also\nhttps://bids.github.io/colormap/.\n","example_call":"scale_fill_ordinal(..., type = getOption(\"ggplot2.ordinal.fill\", getOption(\"ggplot2.ordinal.colour\")))"},"ggplot2::sf_transform_xy":{"description":"Helper function that can transform spatial position data (pairs of x, y\nvalues) among coordinate systems. This is implemented as a thin wrapper\naround sf::sf_project().\n","example_call":"sf_transform_xy(data, target_crs, source_crs, authority_compliant = FALSE)"},"ggplot2::StatSf":{"description":"This set of geom, stat, and coord are used to visualise simple feature (sf)\nobjects. For simple plots, you will only need geom_sf() as it\nuses stat_sf() and adds coord_sf() for you. geom_sf() is\nan unusual geom because it will draw different geometric objects depending\non what simple features are present in the data: you can get points, lines,\nor polygons.\nFor text and labels, you can use geom_sf_text() and geom_sf_label().\n","example_call":"NULL"},"ggplot2::draw_key_pointrange":{"description":"Each geom has an associated function that draws the key when the geom needs\nto be displayed in a legend. These functions are called <U+2060>draw_key_*()<U+2060>, where\n* stands for the name of the respective key glyph. The key glyphs can be\ncustomized for individual geoms by providing a geom with the key_glyph\nargument (see layer() or examples below.)\n","example_call":"draw_key_pointrange(data, params, size)"},"ggplot2::is.Coord":{"description":"Is this object a coordinate system?\n","example_call":"is.Coord(x)"},"ggplot2::PositionDodge2":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::scale_alpha_identity":{"description":"Use this set of scales when your data has already been scaled, i.e. it\nalready represents aesthetic values that ggplot2 can handle directly.\nThese scales will not produce a legend unless you also supply the breaks,\nlabels, and type of guide you want.\n","example_call":"scale_alpha_identity(name = waiver(), ..., guide = \"none\")"},"ggplot2::should_stop":{"description":"Used in examples to illustrate when errors should occur.\n","example_call":"should_stop(expr)"},"ggplot2::GeomCurve":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::scale_size_datetime":{"description":"scale_size() scales area, scale_radius() scales radius. The size\naesthetic is most commonly used for points and text, and humans perceive\nthe area of points (not their radius), so this provides for optimal\nperception. scale_size_area() ensures that a value of 0 is mapped\nto a size of 0. scale_size_binned() is a binned version of scale_size() that\nscales by area (but does not ensure 0 equals an area of zero). For a binned\nequivalent of scale_size_area() use scale_size_binned_area().\n","example_call":"scale_size_datetime(name = waiver(), ..., range = c(1, 6))"},"ggplot2::scale_linetype_discrete":{"description":"Default line types based on a set supplied by Richard Pearson,\nUniversity of Manchester. Continuous values can not be mapped to\nline types unless scale_linetype_binned() is used. Still, as linetypes has\nno inherent order, this use is not advised.\n","example_call":"scale_linetype_discrete(name = waiver(), ..., na.value = \"blank\")"},"ggplot2::StatBoxplot":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::scale_color_discrete":{"description":"The default discrete colour scale. Defaults to scale_fill_hue()/scale_fill_brewer()\nunless type (which defaults to the ggplot2.discrete.fill/ggplot2.discrete.colour options)\nis specified.\n","example_call":"scale_color_discrete(..., type = getOption(\"ggplot2.discrete.colour\"))"},"ggplot2::GeomStep":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::fortify":{"description":"Rather than using this function, I now recommend using the broom\npackage, which implements a much wider range of methods. fortify()\nmay be deprecated in the future.\n","example_call":"fortify(model, data, ...)"},"ggplot2::CoordFlip":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::.ignore_data":{"description":"The .ignore_data() function is used to hide <U+2060><AsIs><U+2060> columns during\nscale interactions in ggplot_build(). The .expose_data() function is\nused to restore hidden columns.\n","example_call":".ignore_data(data)"},"ggplot2::geom_crossbar":{"description":"Various ways of representing a vertical interval defined by x,\nymin and ymax. Each case draws a single graphical object.\n","example_call":"geom_crossbar(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\","},"ggplot2::discrete_scale":{"description":"Discrete scale constructor\n","example_call":"discrete_scale(aesthetics, scale_name = deprecated(), palette, name = waiver(),"},"ggplot2::scale_shape_continuous":{"description":"scale_shape() maps discrete variables to six easily discernible shapes.\nIf you have more than six levels, you will get a warning message, and the\nseventh and subsequent levels will not appear on the plot. Use\nscale_shape_manual() to supply your own values. You can not map\na continuous variable to shape unless scale_shape_binned() is used. Still,\nas shape has no inherent order, this use is not advised.\n","example_call":"scale_shape_continuous(...)"},"ggplot2::stat_sf_coordinates":{"description":"stat_sf_coordinates() extracts the coordinates from 'sf' objects and\nsummarises them to one pair of coordinates (x and y) per geometry. This is\nconvenient when you draw an sf object as geoms like text and labels (so\ngeom_sf_text() and geom_sf_label() relies on this).\n","example_call":"stat_sf_coordinates(mapping = aes(), data = NULL, geom = \"point\", position = \"identity\","},"ggplot2::StatBin2d":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::draw_key_label":{"description":"Each geom has an associated function that draws the key when the geom needs\nto be displayed in a legend. These functions are called <U+2060>draw_key_*()<U+2060>, where\n* stands for the name of the respective key glyph. The key glyphs can be\ncustomized for individual geoms by providing a geom with the key_glyph\nargument (see layer() or examples below.)\n","example_call":"draw_key_label(data, params, size)"},"ggplot2::.pt":{"description":"Multiply size in mm by these constants in order to convert to the units\nthat grid uses internally for lwd and fontsize.\n","example_call":"NULL"},"ggplot2::derive":{"description":"This function is used in conjunction with a position scale to create a\nsecondary axis, positioned opposite of the primary axis. All secondary\naxes must be based on a one-to-one transformation of the primary axes.\n","example_call":"derive()"},"ggplot2::aes_all":{"description":"Given a character vector, create a set of identity mappings\n","example_call":"aes_all(vars)"},"ggplot2::PositionStack":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::GeomViolin":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::StatBin":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::scale_shape_binned":{"description":"scale_shape() maps discrete variables to six easily discernible shapes.\nIf you have more than six levels, you will get a warning message, and the\nseventh and subsequent levels will not appear on the plot. Use\nscale_shape_manual() to supply your own values. You can not map\na continuous variable to shape unless scale_shape_binned() is used. Still,\nas shape has no inherent order, this use is not advised.\n","example_call":"scale_shape_binned(name = waiver(), ..., solid = TRUE)"},"ggplot2::stat_quantile":{"description":"This fits a quantile regression to the data and draws the fitted quantiles\nwith lines. This is as a continuous analogue to geom_boxplot().\n","example_call":"stat_quantile(mapping = NULL, data = NULL, geom = \"quantile\", position = \"identity\","},"ggplot2::GeomErrorbarh":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::position_dodge2":{"description":"Dodging preserves the vertical position of an geom while adjusting the\nhorizontal position. position_dodge() requires the grouping variable to be\nbe specified in the global or <U+2060>geom_*<U+2060> layer. Unlike position_dodge(),\nposition_dodge2() works without a grouping variable in a layer.\nposition_dodge2() works with bars and rectangles, but is\nparticularly useful for arranging box plots, which\ncan have variable widths.\n","example_call":"position_dodge2(width = NULL, preserve = \"total\", padding = 0.1, reverse = FALSE)"},"ggplot2::layer_sf":{"description":"The layer_sf() function is a variant of layer() meant to be used by\nextension developers who are writing new sf-based geoms or stats.\nThe sf layer checks whether the data contains a geometry column, and\nif one is found it is automatically mapped to the geometry aesthetic.\n","example_call":"layer_sf(geom = NULL, stat = NULL, data = NULL, mapping = NULL,"},"ggplot2::Geom":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::scale_y_discrete":{"description":"scale_x_discrete() and scale_y_discrete() are used to set the values for\ndiscrete x and y scale aesthetics. For simple manipulation of scale labels\nand limits, you may wish to use labs() and lims() instead.\n","example_call":"scale_y_discrete(name = waiver(), ..., expand = waiver(), guide = waiver(),"},"ggplot2::scale_colour_grey":{"description":"Based on gray.colors(). This is black and white equivalent\nof scale_colour_gradient().\n","example_call":"scale_colour_grey(name = waiver(), ..., start = 0.2, end = 0.8, na.value = \"red\","},"ggplot2::mean_cl_normal":{"description":"These are wrappers around functions from Hmisc designed to make them\neasier to use with stat_summary(). See the Hmisc documentation\nfor more details:\n","example_call":"mean_cl_normal(x, ...)"},"ggplot2::summarise_layout":{"description":"These functions provide summarised information about built ggplot objects.\n","example_call":"summarise_layout(p)"},"ggplot2::Position":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::Coord":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::geom_line":{"description":"geom_path() connects the observations in the order in which they appear\nin the data. geom_line() connects them in order of the variable on the\nx axis. geom_step() creates a stairstep plot, highlighting exactly\nwhen changes occur. The group aesthetic determines which cases are\nconnected together.\n","example_call":"geom_line(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\","},"ggplot2::standardise_aes_names":{"description":"This function standardises aesthetic names by converting color to colour\n(also in substrings, e.g. point_color to point_colour) and translating old style\nR names to ggplot names (eg. pch to shape, cex to size).\n","example_call":"standardise_aes_names(x)"},"ggplot2::CoordPolar":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::ylim":{"description":"This is a shortcut for supplying the limits argument to the individual\nscales. By default, any values outside the limits specified are replaced with\nNA. Be warned that this will remove data outside the limits and this can\nproduce unintended results. For changing x or y axis limits without\ndropping data observations, see coord_cartesian().\n","example_call":"ylim(...)"},"ggplot2::scale_colour_gradient2":{"description":"<U+2060>scale_*_gradient<U+2060> creates a two colour gradient (low-high),\n<U+2060>scale_*_gradient2<U+2060> creates a diverging colour gradient (low-mid-high),\n<U+2060>scale_*_gradientn<U+2060> creates a n-colour gradient. For binned variants of\nthese scales, see the color steps scales.\n","example_call":"scale_colour_gradient2(name = waiver(), ..., low = muted(\"red\"), mid = \"white\","},"ggplot2::stat_density2d_filled":{"description":"Perform a 2D kernel density estimation using MASS::kde2d() and\ndisplay the results with contours. This can be useful for dealing with\noverplotting. This is a 2D version of geom_density(). geom_density_2d()\ndraws contour lines, and geom_density_2d_filled() draws filled contour\nbands.\n","example_call":"stat_density2d_filled(mapping = NULL, data = NULL, geom = \"density_2d_filled\","},"ggplot2::draw_key_vpath":{"description":"Each geom has an associated function that draws the key when the geom needs\nto be displayed in a legend. These functions are called <U+2060>draw_key_*()<U+2060>, where\n* stands for the name of the respective key glyph. The key glyphs can be\ncustomized for individual geoms by providing a geom with the key_glyph\nargument (see layer() or examples below.)\n","example_call":"draw_key_vpath(data, params, size)"},"ggplot2::continuous_scale":{"description":"Continuous scale constructor\n","example_call":"continuous_scale(aesthetics, scale_name = deprecated(), palette, name = waiver(),"},"ggplot2::stat_density":{"description":"Computes and draws kernel density estimate, which is a smoothed version of\nthe histogram. This is a useful alternative to the histogram for continuous\ndata that comes from an underlying smooth distribution.\n","example_call":"stat_density(mapping = NULL, data = NULL, geom = \"area\", position = \"stack\","},"ggplot2::cut_interval":{"description":"cut_interval() makes n groups with equal range, cut_number()\nmakes n groups with (approximately) equal numbers of observations;\ncut_width() makes groups of width width.\n","example_call":"cut_interval(x, n = NULL, length = NULL, ...)"},"ggplot2::PositionJitterdodge":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::geom_label":{"description":"Text geoms are useful for labeling plots. They can be used by themselves as\nscatterplots or in combination with other geoms, for example, for labeling\npoints or for annotating the height of bars. geom_text() adds only text\nto the plot. geom_label() draws a rectangle behind the text, making it\neasier to read.\n","example_call":"geom_label(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\","},"ggplot2::scale_fill_grey":{"description":"Based on gray.colors(). This is black and white equivalent\nof scale_colour_gradient().\n","example_call":"scale_fill_grey(name = waiver(), ..., start = 0.2, end = 0.8, na.value = \"red\","},"ggplot2::qplot":{"description":"qplot() is now deprecated in order to encourage the users to\nlearn ggplot() as it makes it easier to create complex graphics.\n","example_call":"qplot(x, y, ..., data, facets = NULL, margins = FALSE, geom = \"auto\","},"ggplot2::label_both":{"description":"Labeller functions are in charge of formatting the strip labels of\nfacet grids and wraps. Most of them accept a multi_line\nargument to control whether multiple factors (defined in formulae\nsuch as ~first + second) should be displayed on a single\nline separated with commas, or each on their own line.\n","example_call":"label_both(labels, multi_line = TRUE, sep = \": \")"},"ggplot2::coord_trans":{"description":"coord_trans() is different to scale transformations in that it occurs after\nstatistical transformation and will affect the visual appearance of geoms - there is\nno guarantee that straight lines will continue to be straight.\n","example_call":"coord_trans(x = \"identity\", y = \"identity\", xlim = NULL, ylim = NULL,"},"ggplot2::facet_null":{"description":"Facet specification: a single panel.\n","example_call":"facet_null(shrink = TRUE)"},"ggplot2::scale_fill_distiller":{"description":"The brewer scales provide sequential, diverging and qualitative\ncolour schemes from ColorBrewer. These are particularly well suited to\ndisplay discrete values on a map. See https://colorbrewer2.org for\nmore information.\n","example_call":"scale_fill_distiller(name = waiver(), ..., type = \"seq\", palette = 1, direction = -1,"},"ggplot2::StatQuantile":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::scale_colour_identity":{"description":"Use this set of scales when your data has already been scaled, i.e. it\nalready represents aesthetic values that ggplot2 can handle directly.\nThese scales will not produce a legend unless you also supply the breaks,\nlabels, and type of guide you want.\n","example_call":"scale_colour_identity(name = waiver(), ..., guide = \"none\", aesthetics = \"colour\")"},"ggplot2::GeomPointrange":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::scale_y_date":{"description":"These are the default scales for the three date/time class. These will\nusually be added automatically. To override manually, use\n<U+2060>scale_*_date<U+2060> for dates (class Date),\n<U+2060>scale_*_datetime<U+2060> for datetimes (class POSIXct), and\n<U+2060>scale_*_time<U+2060> for times (class hms).\n","example_call":"scale_y_date(name = waiver(), breaks = waiver(), date_breaks = waiver(),"},"ggplot2::StatBindot":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::GuideColoursteps":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::ggplotGrob":{"description":"Generate a ggplot2 plot grob.\n","example_call":"ggplotGrob(x)"},"ggplot2::scale_alpha":{"description":"Alpha-transparency scales are not tremendously useful, but can be a\nconvenient way to visually down-weight less important observations.\nscale_alpha() is an alias for scale_alpha_continuous() since\nthat is the most common use of alpha, and it saves a bit of typing.\n","example_call":"scale_alpha(name = waiver(), ..., range = c(0.1, 1))"},"ggplot2::label_wrap_gen":{"description":"Labeller functions are in charge of formatting the strip labels of\nfacet grids and wraps. Most of them accept a multi_line\nargument to control whether multiple factors (defined in formulae\nsuch as ~first + second) should be displayed on a single\nline separated with commas, or each on their own line.\n","example_call":"label_wrap_gen(width = 25, multi_line = TRUE)"},"ggplot2::scale_alpha_ordinal":{"description":"Alpha-transparency scales are not tremendously useful, but can be a\nconvenient way to visually down-weight less important observations.\nscale_alpha() is an alias for scale_alpha_continuous() since\nthat is the most common use of alpha, and it saves a bit of typing.\n","example_call":"scale_alpha_ordinal(name = waiver(), ..., range = c(0.1, 1))"},"ggplot2::scale_fill_steps":{"description":"<U+2060>scale_*_steps<U+2060> creates a two colour binned gradient (low-high),\n<U+2060>scale_*_steps2<U+2060> creates a diverging binned colour gradient (low-mid-high),\nand <U+2060>scale_*_stepsn<U+2060> creates a n-colour binned gradient. These scales are\nbinned variants of the gradient scale family and\nworks in the same way.\n","example_call":"scale_fill_steps(name = waiver(), ..., low = \"#132B43\", high = \"#56B1F7\","},"ggplot2::GeomSpoke":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::draw_key_smooth":{"description":"Each geom has an associated function that draws the key when the geom needs\nto be displayed in a legend. These functions are called <U+2060>draw_key_*()<U+2060>, where\n* stands for the name of the respective key glyph. The key glyphs can be\ncustomized for individual geoms by providing a geom with the key_glyph\nargument (see layer() or examples below.)\n","example_call":"draw_key_smooth(data, params, size)"},"ggplot2::labeller":{"description":"This function makes it easy to assign different labellers to\ndifferent factors. The labeller can be a function or it can be a\nnamed character vectors that will serve as a lookup table.\n","example_call":"labeller(..., .rows = NULL, .cols = NULL, keep.as.numeric = deprecated(),"},"ggplot2::geom_blank":{"description":"The blank geom draws nothing, but can be a useful way of ensuring common\nscales between different plots. See expand_limits() for\nmore details.\n","example_call":"geom_blank(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\","},"ggplot2::scale_alpha_manual":{"description":"These functions allow you to specify your own set of mappings from levels in the\ndata to aesthetic values.\n","example_call":"scale_alpha_manual(..., values, breaks = waiver(), na.value = NA)"},"ggplot2::draw_key_path":{"description":"Each geom has an associated function that draws the key when the geom needs\nto be displayed in a legend. These functions are called <U+2060>draw_key_*()<U+2060>, where\n* stands for the name of the respective key glyph. The key glyphs can be\ncustomized for individual geoms by providing a geom with the key_glyph\nargument (see layer() or examples below.)\n","example_call":"draw_key_path(data, params, size)"},"ggplot2::draw_key_rect":{"description":"Each geom has an associated function that draws the key when the geom needs\nto be displayed in a legend. These functions are called <U+2060>draw_key_*()<U+2060>, where\n* stands for the name of the respective key glyph. The key glyphs can be\ncustomized for individual geoms by providing a geom with the key_glyph\nargument (see layer() or examples below.)\n","example_call":"draw_key_rect(data, params, size)"},"ggplot2::ggplot":{"description":"ggplot() initializes a ggplot object. It can be used to\ndeclare the input data frame for a graphic and to specify the\nset of plot aesthetics intended to be common throughout all\nsubsequent layers unless specifically overridden.\n","example_call":"ggplot(data = NULL, mapping = aes(), ..., environment = parent.frame())"},"ggplot2::geom_text":{"description":"Text geoms are useful for labeling plots. They can be used by themselves as\nscatterplots or in combination with other geoms, for example, for labeling\npoints or for annotating the height of bars. geom_text() adds only text\nto the plot. geom_label() draws a rectangle behind the text, making it\neasier to read.\n","example_call":"geom_text(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\","},"ggplot2::position_identity":{"description":"Don't adjust position\n","example_call":"position_identity()"},"ggplot2::panel_cols":{"description":"These functions help detect the placement of panels in a gtable, if they are\nnamed with \"panel\" in the beginning. find_panel() returns the extend of\nthe panel area, while panel_cols() and panel_rows() returns the\ncolumns and rows that contains panels respectively.\n","example_call":"panel_cols(table)"},"ggplot2::scale_alpha_binned":{"description":"Alpha-transparency scales are not tremendously useful, but can be a\nconvenient way to visually down-weight less important observations.\nscale_alpha() is an alias for scale_alpha_continuous() since\nthat is the most common use of alpha, and it saves a bit of typing.\n","example_call":"scale_alpha_binned(name = waiver(), ..., range = c(0.1, 1))"},"ggplot2::scale_size_binned":{"description":"scale_size() scales area, scale_radius() scales radius. The size\naesthetic is most commonly used for points and text, and humans perceive\nthe area of points (not their radius), so this provides for optimal\nperception. scale_size_area() ensures that a value of 0 is mapped\nto a size of 0. scale_size_binned() is a binned version of scale_size() that\nscales by area (but does not ensure 0 equals an area of zero). For a binned\nequivalent of scale_size_area() use scale_size_binned_area().\n","example_call":"scale_size_binned(name = waiver(), breaks = waiver(), labels = waiver(),"},"ggplot2::scale_fill_discrete":{"description":"The default discrete colour scale. Defaults to scale_fill_hue()/scale_fill_brewer()\nunless type (which defaults to the ggplot2.discrete.fill/ggplot2.discrete.colour options)\nis specified.\n","example_call":"scale_fill_discrete(..., type = getOption(\"ggplot2.discrete.fill\"))"},"ggplot2::theme_void":{"description":"These are complete themes which control all non-data display. Use\ntheme() if you just need to tweak the display of an existing\ntheme.\n","example_call":"theme_void(base_size = 11, base_family = \"\", base_line_size = base_size/22,"},"ggplot2::scale_x_datetime":{"description":"These are the default scales for the three date/time class. These will\nusually be added automatically. To override manually, use\n<U+2060>scale_*_date<U+2060> for dates (class Date),\n<U+2060>scale_*_datetime<U+2060> for datetimes (class POSIXct), and\n<U+2060>scale_*_time<U+2060> for times (class hms).\n","example_call":"scale_x_datetime(name = waiver(), breaks = waiver(), date_breaks = waiver(),"},"ggplot2::.stroke":{"description":"Multiply size in mm by these constants in order to convert to the units\nthat grid uses internally for lwd and fontsize.\n","example_call":"NULL"},"ggplot2::scale_y_time":{"description":"These are the default scales for the three date/time class. These will\nusually be added automatically. To override manually, use\n<U+2060>scale_*_date<U+2060> for dates (class Date),\n<U+2060>scale_*_datetime<U+2060> for datetimes (class POSIXct), and\n<U+2060>scale_*_time<U+2060> for times (class hms).\n","example_call":"scale_y_time(name = waiver(), breaks = waiver(), minor_breaks = waiver(),"},"ggplot2::StatFunction":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::stat_binhex":{"description":"Divides the plane into regular hexagons, counts the number of cases in\neach hexagon, and then (by default) maps the number of cases to the hexagon\nfill.  Hexagon bins avoid the visual artefacts sometimes generated by\nthe very regular alignment of geom_bin_2d().\n","example_call":"stat_binhex(mapping = NULL, data = NULL, geom = \"hex\", position = \"identity\","},"ggplot2::StatUnique":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::scale_color_steps":{"description":"<U+2060>scale_*_steps<U+2060> creates a two colour binned gradient (low-high),\n<U+2060>scale_*_steps2<U+2060> creates a diverging binned colour gradient (low-mid-high),\nand <U+2060>scale_*_stepsn<U+2060> creates a n-colour binned gradient. These scales are\nbinned variants of the gradient scale family and\nworks in the same way.\n","example_call":"scale_color_steps(name = waiver(), ..., low = \"#132B43\", high = \"#56B1F7\","},"ggplot2::scale_y_continuous":{"description":"scale_x_continuous() and scale_y_continuous() are the default\nscales for continuous x and y aesthetics. There are three variants\nthat set the transform argument for commonly used transformations:\n<U+2060>scale_*_log10()<U+2060>, <U+2060>scale_*_sqrt()<U+2060> and <U+2060>scale_*_reverse()<U+2060>.\n","example_call":"scale_y_continuous(name = waiver(), breaks = waiver(), minor_breaks = waiver(),"},"ggplot2::scale_colour_viridis_b":{"description":"The viridis scales provide colour maps that are perceptually uniform in both\ncolour and black-and-white. They are also designed to be perceived by viewers\nwith common forms of colour blindness. See also\nhttps://bids.github.io/colormap/.\n","example_call":"scale_colour_viridis_b(name = waiver(), ..., alpha = 1, begin = 0, end = 1,"},"ggplot2::stat_qq_line":{"description":"geom_qq() and stat_qq() produce quantile-quantile plots. geom_qq_line() and\nstat_qq_line() compute the slope and intercept of the line connecting the\npoints at specified quartiles of the theoretical and sample distributions.\n","example_call":"stat_qq_line(mapping = NULL, data = NULL, geom = \"path\", position = \"identity\","},"ggplot2::scale_colour_viridis_c":{"description":"The viridis scales provide colour maps that are perceptually uniform in both\ncolour and black-and-white. They are also designed to be perceived by viewers\nwith common forms of colour blindness. See also\nhttps://bids.github.io/colormap/.\n","example_call":"scale_colour_viridis_c(name = waiver(), ..., alpha = 1, begin = 0, end = 1,"},"ggplot2::position_fill":{"description":"position_stack() stacks bars on top of each other;\nposition_fill() stacks bars and standardises each stack to have\nconstant height.\n","example_call":"position_fill(vjust = 1, reverse = FALSE)"},"ggplot2::guide_merge":{"description":"The guide system has been overhauled to use the ggproto infrastructure to\naccommodate guide extensions with the same flexibility as layers, scales and\nother ggplot2 objects. In rewriting, the old S3 system has become defunct,\nmeaning that the previous methods for guides have been superseded by ggproto\nmethods. As a fallback option, the generics, but not the methods, that the\nprevious S3 system used are encapsulated in the GuideOld ggproto class.\n","example_call":"guide_merge(guide, new_guide)"},"ggplot2::scale_colour_viridis_d":{"description":"The viridis scales provide colour maps that are perceptually uniform in both\ncolour and black-and-white. They are also designed to be perceived by viewers\nwith common forms of colour blindness. See also\nhttps://bids.github.io/colormap/.\n","example_call":"scale_colour_viridis_d(name = waiver(), ..., alpha = 1, begin = 0, end = 1,"},"ggplot2::el_def":{"description":"The underlying structure of a ggplot2 theme is defined via the element tree, which\nspecifies for each theme element what type it should have and whether it inherits from\na parent element. In some use cases, it may be necessary to modify or extend this\nelement tree and provide default settings for newly defined theme elements.\n","example_call":"el_def(class = NULL, inherit = NULL, description = NULL)"},"ggplot2::guide_colourbar":{"description":"Colour bar guide shows continuous colour scales mapped onto values.\nColour bar is available with scale_fill and scale_colour.\nFor more information, see the inspiration for this function:\nMatlab's colorbar function.\n","example_call":"guide_colourbar(title = waiver(), theme = NULL, nbin = NULL, display = \"raster\","},"ggplot2::geom_step":{"description":"geom_path() connects the observations in the order in which they appear\nin the data. geom_line() connects them in order of the variable on the\nx axis. geom_step() creates a stairstep plot, highlighting exactly\nwhen changes occur. The group aesthetic determines which cases are\nconnected together.\n","example_call":"geom_step(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\","},"ggplot2::stat_density_2d_filled":{"description":"Perform a 2D kernel density estimation using MASS::kde2d() and\ndisplay the results with contours. This can be useful for dealing with\noverplotting. This is a 2D version of geom_density(). geom_density_2d()\ndraws contour lines, and geom_density_2d_filled() draws filled contour\nbands.\n","example_call":"stat_density_2d_filled(mapping = NULL, data = NULL, geom = \"density_2d_filled\","},"ggplot2::scale_size":{"description":"scale_size() scales area, scale_radius() scales radius. The size\naesthetic is most commonly used for points and text, and humans perceive\nthe area of points (not their radius), so this provides for optimal\nperception. scale_size_area() ensures that a value of 0 is mapped\nto a size of 0. scale_size_binned() is a binned version of scale_size() that\nscales by area (but does not ensure 0 equals an area of zero). For a binned\nequivalent of scale_size_area() use scale_size_binned_area().\n","example_call":"scale_size(name = waiver(), breaks = waiver(), labels = waiver(),"},"ggplot2::scale_alpha_continuous":{"description":"Alpha-transparency scales are not tremendously useful, but can be a\nconvenient way to visually down-weight less important observations.\nscale_alpha() is an alias for scale_alpha_continuous() since\nthat is the most common use of alpha, and it saves a bit of typing.\n","example_call":"scale_alpha_continuous(name = waiver(), ..., range = c(0.1, 1))"},"ggplot2::scale_x_log10":{"description":"scale_x_continuous() and scale_y_continuous() are the default\nscales for continuous x and y aesthetics. There are three variants\nthat set the transform argument for commonly used transformations:\n<U+2060>scale_*_log10()<U+2060>, <U+2060>scale_*_sqrt()<U+2060> and <U+2060>scale_*_reverse()<U+2060>.\n","example_call":"scale_x_log10(...)"},"ggplot2::scale_color_datetime":{"description":"<U+2060>scale_*_gradient<U+2060> creates a two colour gradient (low-high),\n<U+2060>scale_*_gradient2<U+2060> creates a diverging colour gradient (low-mid-high),\n<U+2060>scale_*_gradientn<U+2060> creates a n-colour gradient. For binned variants of\nthese scales, see the color steps scales.\n","example_call":"scale_color_datetime(name = waiver(), ..., low = \"#132B43\", high = \"#56B1F7\","},"ggplot2::update_stat_defaults":{"description":"Modify geom/stat aesthetic defaults for future plots\n","example_call":"update_stat_defaults(stat, new)"},"ggplot2::stat_unique":{"description":"Remove duplicates\n","example_call":"stat_unique(mapping = NULL, data = NULL, geom = \"point\", position = \"identity\","},"ggplot2::scale_colour_stepsn":{"description":"<U+2060>scale_*_steps<U+2060> creates a two colour binned gradient (low-high),\n<U+2060>scale_*_steps2<U+2060> creates a diverging binned colour gradient (low-mid-high),\nand <U+2060>scale_*_stepsn<U+2060> creates a n-colour binned gradient. These scales are\nbinned variants of the gradient scale family and\nworks in the same way.\n","example_call":"scale_colour_stepsn(name = waiver(), ..., colours, values = NULL, space = \"Lab\","},"ggplot2::position_nudge":{"description":"position_nudge() is generally useful for adjusting the position of\nitems on discrete scales by a small amount. Nudging is built in to\ngeom_text() because it's so useful for moving labels a small\ndistance from what they're labelling.\n","example_call":"position_nudge(x = 0, y = 0)"},"ggplot2::scale_color_gradient":{"description":"<U+2060>scale_*_gradient<U+2060> creates a two colour gradient (low-high),\n<U+2060>scale_*_gradient2<U+2060> creates a diverging colour gradient (low-mid-high),\n<U+2060>scale_*_gradientn<U+2060> creates a n-colour gradient. For binned variants of\nthese scales, see the color steps scales.\n","example_call":"scale_color_gradient(name = waiver(), ..., low = \"#132B43\", high = \"#56B1F7\","},"ggplot2::stat_bin":{"description":"Visualise the distribution of a single continuous variable by dividing\nthe x axis into bins and counting the number of observations in each bin.\nHistograms (geom_histogram()) display the counts with bars; frequency\npolygons (geom_freqpoly()) display the counts with lines. Frequency\npolygons are more suitable when you want to compare the distribution\nacross the levels of a categorical variable.\n","example_call":"stat_bin(mapping = NULL, data = NULL, geom = \"bar\", position = \"stack\","},"ggplot2::GeomQuantile":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::Guide":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::scale_discrete_manual":{"description":"These functions allow you to specify your own set of mappings from levels in the\ndata to aesthetic values.\n","example_call":"scale_discrete_manual(aesthetics, ..., values, breaks = waiver())"},"ggplot2::geom_point":{"description":"The point geom is used to create scatterplots. The scatterplot is most\nuseful for displaying the relationship between two continuous variables.\nIt can be used to compare one continuous and one categorical variable, or\ntwo categorical variables, but a variation like geom_jitter(),\ngeom_count(), or geom_bin_2d() is usually more\nappropriate. A bubblechart is a scatterplot with a third variable\nmapped to the size of points.\n","example_call":"geom_point(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\","},"ggplot2::aes_string":{"description":"\n","example_call":"aes_string(x, y, ...)"},"ggplot2::draw_key_text":{"description":"Each geom has an associated function that draws the key when the geom needs\nto be displayed in a legend. These functions are called <U+2060>draw_key_*()<U+2060>, where\n* stands for the name of the respective key glyph. The key glyphs can be\ncustomized for individual geoms by providing a geom with the key_glyph\nargument (see layer() or examples below.)\n","example_call":"draw_key_text(data, params, size)"},"ggplot2::draw_key_dotplot":{"description":"Each geom has an associated function that draws the key when the geom needs\nto be displayed in a legend. These functions are called <U+2060>draw_key_*()<U+2060>, where\n* stands for the name of the respective key glyph. The key glyphs can be\ncustomized for individual geoms by providing a geom with the key_glyph\nargument (see layer() or examples below.)\n","example_call":"draw_key_dotplot(data, params, size)"},"ggplot2::coord_equal":{"description":"A fixed scale coordinate system forces a specified ratio between the\nphysical representation of data units on the axes. The ratio represents the\nnumber of units on the y-axis equivalent to one unit on the x-axis. The\ndefault, ratio = 1, ensures that one unit on the x-axis is the same\nlength as one unit on the y-axis. Ratios higher than one make units on the\ny axis longer than units on the x-axis, and vice versa. This is similar to\nMASS::eqscplot(), but it works for all types of graphics.\n","example_call":"coord_equal(ratio = 1, xlim = NULL, ylim = NULL, expand = TRUE,"},"ggplot2::render_axes":{"description":"These helpers facilitates generating theme compliant axes when\nbuilding up the plot.\n","example_call":"render_axes(x = NULL, y = NULL, coord, theme, transpose = FALSE)"},"ggplot2::scale_x_binned":{"description":"scale_x_binned() and scale_y_binned() are scales that discretize\ncontinuous position data. You can use these scales to transform continuous\ninputs before using it with a geom that requires discrete positions. An\nexample is using scale_x_binned() with geom_bar() to create a histogram.\n","example_call":"scale_x_binned(name = waiver(), n.breaks = 10, nice.breaks = TRUE,"},"ggplot2::scale_fill_steps2":{"description":"<U+2060>scale_*_steps<U+2060> creates a two colour binned gradient (low-high),\n<U+2060>scale_*_steps2<U+2060> creates a diverging binned colour gradient (low-mid-high),\nand <U+2060>scale_*_stepsn<U+2060> creates a n-colour binned gradient. These scales are\nbinned variants of the gradient scale family and\nworks in the same way.\n","example_call":"scale_fill_steps2(name = waiver(), ..., low = muted(\"red\"), mid = \"white\","},"ggplot2::layer_data":{"description":"ggplot_build() takes the plot object, and performs all steps necessary\nto produce an object that can be rendered.  This function outputs two pieces:\na list of data frames (one for each layer), and a panel object, which\ncontain all information about axis limits, breaks etc.\n","example_call":"layer_data(plot = last_plot(), i = 1L)"},"ggplot2::scale_linewidth":{"description":"scale_linewidth scales the width of lines and polygon strokes. Due to\nhistorical reasons, it is also possible to control this with the size\naesthetic, but using linewidth is encourage to clearly differentiate area\naesthetics from stroke width aesthetics.\n","example_call":"scale_linewidth(name = waiver(), breaks = waiver(), labels = waiver(),"},"ggplot2::find_panel":{"description":"These functions help detect the placement of panels in a gtable, if they are\nnamed with \"panel\" in the beginning. find_panel() returns the extend of\nthe panel area, while panel_cols() and panel_rows() returns the\ncolumns and rows that contains panels respectively.\n","example_call":"find_panel(table)"},"ggplot2::stat_bin_hex":{"description":"Divides the plane into regular hexagons, counts the number of cases in\neach hexagon, and then (by default) maps the number of cases to the hexagon\nfill.  Hexagon bins avoid the visual artefacts sometimes generated by\nthe very regular alignment of geom_bin_2d().\n","example_call":"stat_bin_hex(mapping = NULL, data = NULL, geom = \"hex\", position = \"identity\","},"ggplot2::GuideNone":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::set_last_plot":{"description":"Set the last plot to be fetched by lastplot()\n","example_call":"set_last_plot(value)"},"ggplot2::position_dodge":{"description":"Dodging preserves the vertical position of an geom while adjusting the\nhorizontal position. position_dodge() requires the grouping variable to be\nbe specified in the global or <U+2060>geom_*<U+2060> layer. Unlike position_dodge(),\nposition_dodge2() works without a grouping variable in a layer.\nposition_dodge2() works with bars and rectangles, but is\nparticularly useful for arranging box plots, which\ncan have variable widths.\n","example_call":"position_dodge(width = NULL, preserve = \"total\")"},"ggplot2::geom_curve":{"description":"geom_segment() draws a straight line between points (x, y) and\n(xend, yend). geom_curve() draws a curved line. See the underlying\ndrawing function grid::curveGrob() for the parameters that\ncontrol the curve.\n","example_call":"geom_curve(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\","},"ggplot2::geom_bin_2d":{"description":"Divides the plane into rectangles, counts the number of cases in\neach rectangle, and then (by default) maps the number of cases to the\nrectangle's fill. This is a useful alternative to geom_point()\nin the presence of overplotting.\n","example_call":"geom_bin_2d(mapping = NULL, data = NULL, stat = \"bin2d\", position = \"identity\","},"ggplot2::scale_color_gradient2":{"description":"<U+2060>scale_*_gradient<U+2060> creates a two colour gradient (low-high),\n<U+2060>scale_*_gradient2<U+2060> creates a diverging colour gradient (low-mid-high),\n<U+2060>scale_*_gradientn<U+2060> creates a n-colour gradient. For binned variants of\nthese scales, see the color steps scales.\n","example_call":"scale_color_gradient2(name = waiver(), ..., low = muted(\"red\"), mid = \"white\","},"ggplot2::PositionIdentity":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::scale_fill_gradient":{"description":"<U+2060>scale_*_gradient<U+2060> creates a two colour gradient (low-high),\n<U+2060>scale_*_gradient2<U+2060> creates a diverging colour gradient (low-mid-high),\n<U+2060>scale_*_gradientn<U+2060> creates a n-colour gradient. For binned variants of\nthese scales, see the color steps scales.\n","example_call":"scale_fill_gradient(name = waiver(), ..., low = \"#132B43\", high = \"#56B1F7\","},"ggplot2::scale_color_grey":{"description":"Based on gray.colors(). This is black and white equivalent\nof scale_colour_gradient().\n","example_call":"scale_color_grey(name = waiver(), ..., start = 0.2, end = 0.8, na.value = \"red\","},"ggplot2::annotate":{"description":"This function adds geoms to a plot, but unlike a typical geom function,\nthe properties of the geoms are not mapped from variables of a data frame,\nbut are instead passed in as vectors. This is useful for adding small annotations\n(such as text labels) or if you have your data in vectors, and for some\nreason don't want to put them in a data frame.\n","example_call":"annotate(geom, x = NULL, y = NULL, xmin = NULL, xmax = NULL,"},"ggplot2::ScaleBinned":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::GuideCustom":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::geom_density2d":{"description":"Perform a 2D kernel density estimation using MASS::kde2d() and\ndisplay the results with contours. This can be useful for dealing with\noverplotting. This is a 2D version of geom_density(). geom_density_2d()\ndraws contour lines, and geom_density_2d_filled() draws filled contour\nbands.\n","example_call":"geom_density2d(mapping = NULL, data = NULL, stat = \"density_2d\", position = \"identity\","},"ggplot2::panel_rows":{"description":"These functions help detect the placement of panels in a gtable, if they are\nnamed with \"panel\" in the beginning. find_panel() returns the extend of\nthe panel area, while panel_cols() and panel_rows() returns the\ncolumns and rows that contains panels respectively.\n","example_call":"panel_rows(table)"},"ggplot2::ScaleContinuousPosition":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::theme_dark":{"description":"These are complete themes which control all non-data display. Use\ntheme() if you just need to tweak the display of an existing\ntheme.\n","example_call":"theme_dark(base_size = 11, base_family = \"\", base_line_size = base_size/22,"},"ggplot2::geom_density":{"description":"Computes and draws kernel density estimate, which is a smoothed version of\nthe histogram. This is a useful alternative to the histogram for continuous\ndata that comes from an underlying smooth distribution.\n","example_call":"geom_density(mapping = NULL, data = NULL, stat = \"density\", position = \"identity\","},"ggplot2::GuideAxis":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::geom_density_2d":{"description":"Perform a 2D kernel density estimation using MASS::kde2d() and\ndisplay the results with contours. This can be useful for dealing with\noverplotting. This is a 2D version of geom_density(). geom_density_2d()\ndraws contour lines, and geom_density_2d_filled() draws filled contour\nbands.\n","example_call":"geom_density_2d(mapping = NULL, data = NULL, stat = \"density_2d\", position = \"identity\","},"ggplot2::scale_colour_gradientn":{"description":"<U+2060>scale_*_gradient<U+2060> creates a two colour gradient (low-high),\n<U+2060>scale_*_gradient2<U+2060> creates a diverging colour gradient (low-mid-high),\n<U+2060>scale_*_gradientn<U+2060> creates a n-colour gradient. For binned variants of\nthese scales, see the color steps scales.\n","example_call":"scale_colour_gradientn(name = waiver(), ..., colours, values = NULL, space = \"Lab\","},"ggplot2::GeomLabel":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::PositionFill":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::new_guide":{"description":"A constructor function for guides, which performs some standard compatibility\nchecks between the guide and provided arguments.\n","example_call":"new_guide(..., available_aes = \"any\", super)"},"ggplot2::scale_size_discrete":{"description":"scale_size() scales area, scale_radius() scales radius. The size\naesthetic is most commonly used for points and text, and humans perceive\nthe area of points (not their radius), so this provides for optimal\nperception. scale_size_area() ensures that a value of 0 is mapped\nto a size of 0. scale_size_binned() is a binned version of scale_size() that\nscales by area (but does not ensure 0 equals an area of zero). For a binned\nequivalent of scale_size_area() use scale_size_binned_area().\n","example_call":"scale_size_discrete(...)"},"ggplot2::expansion":{"description":"This is a convenience function for generating scale expansion vectors\nfor the expand argument of scale_(x|y)_continuous\nand scale_(x|y)_discrete. The expansion vectors are used to\nadd some space between the data and the axes.\n","example_call":"expansion(mult = 0, add = 0)"},"ggplot2::stat_boxplot":{"description":"The boxplot compactly displays the distribution of a continuous variable.\nIt visualises five summary statistics (the median, two hinges\nand two whiskers), and all \"outlying\" points individually.\n","example_call":"stat_boxplot(mapping = NULL, data = NULL, geom = \"boxplot\", position = \"dodge2\","},"ggplot2::PositionNudge":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::scale_size_identity":{"description":"Use this set of scales when your data has already been scaled, i.e. it\nalready represents aesthetic values that ggplot2 can handle directly.\nThese scales will not produce a legend unless you also supply the breaks,\nlabels, and type of guide you want.\n","example_call":"scale_size_identity(name = waiver(), ..., guide = \"none\")"},"ggplot2::scale_color_ordinal":{"description":"The viridis scales provide colour maps that are perceptually uniform in both\ncolour and black-and-white. They are also designed to be perceived by viewers\nwith common forms of colour blindness. See also\nhttps://bids.github.io/colormap/.\n","example_call":"scale_color_ordinal(..., type = getOption(\"ggplot2.ordinal.colour\", getOption(\"ggplot2.ordinal.fill\")))"},"ggplot2::scale_alpha_discrete":{"description":"Alpha-transparency scales are not tremendously useful, but can be a\nconvenient way to visually down-weight less important observations.\nscale_alpha() is an alias for scale_alpha_continuous() since\nthat is the most common use of alpha, and it saves a bit of typing.\n","example_call":"scale_alpha_discrete(...)"},"ggplot2::scale_colour_steps":{"description":"<U+2060>scale_*_steps<U+2060> creates a two colour binned gradient (low-high),\n<U+2060>scale_*_steps2<U+2060> creates a diverging binned colour gradient (low-mid-high),\nand <U+2060>scale_*_stepsn<U+2060> creates a n-colour binned gradient. These scales are\nbinned variants of the gradient scale family and\nworks in the same way.\n","example_call":"scale_colour_steps(name = waiver(), ..., low = \"#132B43\", high = \"#56B1F7\","},"ggplot2::lims":{"description":"This is a shortcut for supplying the limits argument to the individual\nscales. By default, any values outside the limits specified are replaced with\nNA. Be warned that this will remove data outside the limits and this can\nproduce unintended results. For changing x or y axis limits without\ndropping data observations, see coord_cartesian().\n","example_call":"lims(...)"},"ggplot2::theme_set":{"description":"The current/active theme (see theme()) is automatically applied to every\nplot you draw. Use theme_get() to get the current theme, and theme_set() to\ncompletely override it. theme_update() and theme_replace() are shorthands for\nchanging individual elements.\n","example_call":"theme_set(new)"},"ggplot2::layer_scales":{"description":"ggplot_build() takes the plot object, and performs all steps necessary\nto produce an object that can be rendered.  This function outputs two pieces:\na list of data frames (one for each layer), and a panel object, which\ncontain all information about axis limits, breaks etc.\n","example_call":"layer_scales(plot = last_plot(), i = 1L, j = 1L)"},"ggplot2::GeomPoint":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::GeomDensity2d":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::geom_histogram":{"description":"Visualise the distribution of a single continuous variable by dividing\nthe x axis into bins and counting the number of observations in each bin.\nHistograms (geom_histogram()) display the counts with bars; frequency\npolygons (geom_freqpoly()) display the counts with lines. Frequency\npolygons are more suitable when you want to compare the distribution\nacross the levels of a categorical variable.\n","example_call":"geom_histogram(mapping = NULL, data = NULL, stat = \"bin\", position = \"stack\","},"ggplot2::StatContourFilled":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::scale_alpha_datetime":{"description":"Alpha-transparency scales are not tremendously useful, but can be a\nconvenient way to visually down-weight less important observations.\nscale_alpha() is an alias for scale_alpha_continuous() since\nthat is the most common use of alpha, and it saves a bit of typing.\n","example_call":"scale_alpha_datetime(name = waiver(), ..., range = c(0.1, 1))"},"ggplot2::geom_density2d_filled":{"description":"Perform a 2D kernel density estimation using MASS::kde2d() and\ndisplay the results with contours. This can be useful for dealing with\noverplotting. This is a 2D version of geom_density(). geom_density_2d()\ndraws contour lines, and geom_density_2d_filled() draws filled contour\nbands.\n","example_call":"geom_density2d_filled(mapping = NULL, data = NULL, stat = \"density_2d_filled\","},"ggplot2::sec_axis":{"description":"This function is used in conjunction with a position scale to create a\nsecondary axis, positioned opposite of the primary axis. All secondary\naxes must be based on a one-to-one transformation of the primary axes.\n","example_call":"sec_axis(transform = NULL, name = waiver(), breaks = waiver(),"},"ggplot2::scale_linetype_identity":{"description":"Use this set of scales when your data has already been scaled, i.e. it\nalready represents aesthetic values that ggplot2 can handle directly.\nThese scales will not produce a legend unless you also supply the breaks,\nlabels, and type of guide you want.\n","example_call":"scale_linetype_identity(name = waiver(), ..., guide = \"none\")"},"ggplot2::combine_vars":{"description":"Take input data and define a mapping between faceting variables and ROW,\nCOL and PANEL keys\n","example_call":"combine_vars(data, env = emptyenv(), vars = NULL, drop = TRUE)"},"ggplot2::Facet":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::geom_map":{"description":"Display polygons as a map. This is meant as annotation, so it does not\naffect position scales. Note that this function predates the geom_sf()\nframework and does not work with sf geometry columns as input. However,\nit can be used in conjunction with geom_sf() layers and/or\ncoord_sf() (see examples).\n","example_call":"geom_map(mapping = NULL, data = NULL, stat = \"identity\", ...,"},"ggplot2::draw_key_blank":{"description":"Each geom has an associated function that draws the key when the geom needs\nto be displayed in a legend. These functions are called <U+2060>draw_key_*()<U+2060>, where\n* stands for the name of the respective key glyph. The key glyphs can be\ncustomized for individual geoms by providing a geom with the key_glyph\nargument (see layer() or examples below.)\n","example_call":"draw_key_blank(data, params, size)"},"ggplot2::coord_sf":{"description":"This set of geom, stat, and coord are used to visualise simple feature (sf)\nobjects. For simple plots, you will only need geom_sf() as it\nuses stat_sf() and adds coord_sf() for you. geom_sf() is\nan unusual geom because it will draw different geometric objects depending\non what simple features are present in the data: you can get points, lines,\nor polygons.\nFor text and labels, you can use geom_sf_text() and geom_sf_label().\n","example_call":"coord_sf(xlim = NULL, ylim = NULL, expand = TRUE, crs = NULL,"},"ggplot2::scale_size_continuous":{"description":"scale_size() scales area, scale_radius() scales radius. The size\naesthetic is most commonly used for points and text, and humans perceive\nthe area of points (not their radius), so this provides for optimal\nperception. scale_size_area() ensures that a value of 0 is mapped\nto a size of 0. scale_size_binned() is a binned version of scale_size() that\nscales by area (but does not ensure 0 equals an area of zero). For a binned\nequivalent of scale_size_area() use scale_size_binned_area().\n","example_call":"scale_size_continuous(name = waiver(), breaks = waiver(), labels = waiver(),"},"ggplot2::ScaleContinuousDatetime":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::annotation_custom":{"description":"This is a special geom intended for use as static annotations\nthat are the same in every panel. These annotations will not\naffect scales (i.e. the x and y axes will not grow to cover the range\nof the grob, and the grob will not be modified by any ggplot settings\nor mappings).\n","example_call":"annotation_custom(grob, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf)"},"ggplot2::scale_color_fermenter":{"description":"The brewer scales provide sequential, diverging and qualitative\ncolour schemes from ColorBrewer. These are particularly well suited to\ndisplay discrete values on a map. See https://colorbrewer2.org for\nmore information.\n","example_call":"scale_color_fermenter(name = waiver(), ..., type = \"seq\", palette = 1, direction = -1,"},"ggplot2::fill_alpha":{"description":"This works much like alpha() in that it modifies the\ntransparency of fill colours. It differs in that fill_alpha() also attempts\nto set the transparency of <U+2060><GridPattern><U+2060> objects.\n","example_call":"fill_alpha(fill, alpha)"},"ggplot2::CoordRadial":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::coord_map":{"description":"\n","example_call":"coord_map(projection = \"mercator\", ..., parameters = NULL, orientation = NULL,"},"ggplot2::GeomRibbon":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::ScaleDiscretePosition":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::vars":{"description":"Just like aes(), vars() is a quoting function\nthat takes inputs to be evaluated in the context of a dataset.\nThese inputs can be:\n","example_call":"vars(...)"},"ggplot2::StatBinhex":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::stat_contour":{"description":"ggplot2 can not draw true 3D surfaces, but you can use geom_contour(),\ngeom_contour_filled(), and geom_tile() to visualise 3D surfaces in 2D.\n","example_call":"stat_contour(mapping = NULL, data = NULL, geom = \"contour\", position = \"identity\","},"ggplot2::xlab":{"description":"Good labels are critical for making your plots accessible to a wider\naudience. Always ensure the axis and legend labels display the full\nvariable name. Use the plot title and subtitle to explain the\nmain findings. It's common to use the caption to provide information\nabout the data source. tag can be used for adding identification tags\nto differentiate between multiple plots.\n","example_call":"xlab(label)"},"ggplot2::draw_key_vline":{"description":"Each geom has an associated function that draws the key when the geom needs\nto be displayed in a legend. These functions are called <U+2060>draw_key_*()<U+2060>, where\n* stands for the name of the respective key glyph. The key glyphs can be\ncustomized for individual geoms by providing a geom with the key_glyph\nargument (see layer() or examples below.)\n","example_call":"draw_key_vline(data, params, size)"},"ggplot2::geom_hex":{"description":"Divides the plane into regular hexagons, counts the number of cases in\neach hexagon, and then (by default) maps the number of cases to the hexagon\nfill.  Hexagon bins avoid the visual artefacts sometimes generated by\nthe very regular alignment of geom_bin_2d().\n","example_call":"geom_hex(mapping = NULL, data = NULL, stat = \"binhex\", position = \"identity\","},"ggplot2::scale_fill_continuous":{"description":"The scales scale_colour_continuous() and scale_fill_continuous() are\nthe default colour scales ggplot2 uses when continuous data values are\nmapped onto the colour or fill aesthetics, respectively. The scales\nscale_colour_binned() and scale_fill_binned() are equivalent scale\nfunctions that assign discrete color bins to the continuous values\ninstead of using a continuous color spectrum.\n","example_call":"scale_fill_continuous(..., type = getOption(\"ggplot2.continuous.fill\"))"},"ggplot2::StatIdentity":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::scale_x_discrete":{"description":"scale_x_discrete() and scale_y_discrete() are used to set the values for\ndiscrete x and y scale aesthetics. For simple manipulation of scale labels\nand limits, you may wish to use labs() and lims() instead.\n","example_call":"scale_x_discrete(name = waiver(), ..., expand = waiver(), guide = waiver(),"},"ggplot2::draw_key_crossbar":{"description":"Each geom has an associated function that draws the key when the geom needs\nto be displayed in a legend. These functions are called <U+2060>draw_key_*()<U+2060>, where\n* stands for the name of the respective key glyph. The key glyphs can be\ncustomized for individual geoms by providing a geom with the key_glyph\nargument (see layer() or examples below.)\n","example_call":"draw_key_crossbar(data, params, size)"},"ggplot2::scale_color_date":{"description":"<U+2060>scale_*_gradient<U+2060> creates a two colour gradient (low-high),\n<U+2060>scale_*_gradient2<U+2060> creates a diverging colour gradient (low-mid-high),\n<U+2060>scale_*_gradientn<U+2060> creates a n-colour gradient. For binned variants of\nthese scales, see the color steps scales.\n","example_call":"scale_color_date(name = waiver(), ..., low = \"#132B43\", high = \"#56B1F7\","},"ggplot2::coord_cartesian":{"description":"The Cartesian coordinate system is the most familiar, and common, type of\ncoordinate system. Setting limits on the coordinate system will zoom the\nplot (like you're looking at it with a magnifying glass), and will not\nchange the underlying data like setting limits on a scale will.\n","example_call":"coord_cartesian(xlim = NULL, ylim = NULL, expand = TRUE, default = FALSE,"},"ggplot2::rel":{"description":"In conjunction with the theme system, the element_ functions\nspecify the display of how non-data components of the plot are drawn.\n","example_call":"rel(x)"},"ggplot2::stat_smooth":{"description":"Aids the eye in seeing patterns in the presence of overplotting.\ngeom_smooth() and stat_smooth() are effectively aliases: they\nboth use the same arguments. Use stat_smooth() if you want to\ndisplay the results with a non-standard geom.\n","example_call":"stat_smooth(mapping = NULL, data = NULL, geom = \"smooth\", position = \"identity\","},"ggplot2::cut_number":{"description":"cut_interval() makes n groups with equal range, cut_number()\nmakes n groups with (approximately) equal numbers of observations;\ncut_width() makes groups of width width.\n","example_call":"cut_number(x, n = NULL, ...)"},"ggplot2::label_bquote":{"description":"label_bquote() offers a flexible way of labelling\nfacet rows or columns with plotmath expressions. Backquoted\nvariables will be replaced with their value in the facet.\n","example_call":"label_bquote(rows = NULL, cols = NULL, default)"},"ggplot2::GeomDensity2dFilled":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::stat_density_2d":{"description":"Perform a 2D kernel density estimation using MASS::kde2d() and\ndisplay the results with contours. This can be useful for dealing with\noverplotting. This is a 2D version of geom_density(). geom_density_2d()\ndraws contour lines, and geom_density_2d_filled() draws filled contour\nbands.\n","example_call":"stat_density_2d(mapping = NULL, data = NULL, geom = \"density_2d\", position = \"identity\","},"ggplot2::geom_path":{"description":"geom_path() connects the observations in the order in which they appear\nin the data. geom_line() connects them in order of the variable on the\nx axis. geom_step() creates a stairstep plot, highlighting exactly\nwhen changes occur. The group aesthetic determines which cases are\nconnected together.\n","example_call":"geom_path(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\","},"ggplot2::StatAlign":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::geom_spoke":{"description":"This is a polar parameterisation of geom_segment(). It is\nuseful when you have variables that describe direction and distance.\nThe angles start from east and increase counterclockwise.\n","example_call":"geom_spoke(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\","},"ggplot2::get_guide_data":{"description":"get_guide_data() builds a plot and extracts information from guide keys. This\ninformation typically contains positions, values and/or labels, depending\non which aesthetic is queried or guide is used.\n","example_call":"get_guide_data(plot = last_plot(), aesthetic, panel = 1L)"},"ggplot2::geom_abline":{"description":"These geoms add reference lines (sometimes called rules) to a plot, either\nhorizontal, vertical, or diagonal (specified by slope and intercept).\nThese are useful for annotating plots.\n","example_call":"geom_abline(mapping = NULL, data = NULL, ..., slope, intercept,"},"ggplot2::geom_quantile":{"description":"This fits a quantile regression to the data and draws the fitted quantiles\nwith lines. This is as a continuous analogue to geom_boxplot().\n","example_call":"geom_quantile(mapping = NULL, data = NULL, stat = \"quantile\", position = \"identity\","},"ggplot2::scale_colour_binned":{"description":"The scales scale_colour_continuous() and scale_fill_continuous() are\nthe default colour scales ggplot2 uses when continuous data values are\nmapped onto the colour or fill aesthetics, respectively. The scales\nscale_colour_binned() and scale_fill_binned() are equivalent scale\nfunctions that assign discrete color bins to the continuous values\ninstead of using a continuous color spectrum.\n","example_call":"scale_colour_binned(..., type = getOption(\"ggplot2.binned.colour\"))"},"ggplot2::GeomTile":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::stat_sum":{"description":"This is a variant geom_point() that counts the number of\nobservations at each location, then maps the count to point area. It\nuseful when you have discrete data and overplotting.\n","example_call":"stat_sum(mapping = NULL, data = NULL, geom = \"point\", position = \"identity\","},"ggplot2::Stat":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::autoplot":{"description":"autoplot() uses ggplot2 to draw a particular plot for an object of a\nparticular class in a single command. This defines the S3 generic that\nother classes and packages can extend.\n","example_call":"autoplot(object, ...)"},"ggplot2::geom_violin":{"description":"A violin plot is a compact display of a continuous distribution. It is a\nblend of geom_boxplot() and geom_density(): a\nviolin plot is a mirrored density plot displayed in the same way as a\nboxplot.\n","example_call":"geom_violin(mapping = NULL, data = NULL, stat = \"ydensity\", position = \"dodge\","},"ggplot2::scale_linewidth_continuous":{"description":"scale_linewidth scales the width of lines and polygon strokes. Due to\nhistorical reasons, it is also possible to control this with the size\naesthetic, but using linewidth is encourage to clearly differentiate area\naesthetics from stroke width aesthetics.\n","example_call":"scale_linewidth_continuous(name = waiver(), breaks = waiver(), labels = waiver(),"},"ggplot2::scale_fill_identity":{"description":"Use this set of scales when your data has already been scaled, i.e. it\nalready represents aesthetic values that ggplot2 can handle directly.\nThese scales will not produce a legend unless you also supply the breaks,\nlabels, and type of guide you want.\n","example_call":"scale_fill_identity(name = waiver(), ..., guide = \"none\", aesthetics = \"fill\")"},"ggplot2::GeomContour":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::scale_shape_discrete":{"description":"scale_shape() maps discrete variables to six easily discernible shapes.\nIf you have more than six levels, you will get a warning message, and the\nseventh and subsequent levels will not appear on the plot. Use\nscale_shape_manual() to supply your own values. You can not map\na continuous variable to shape unless scale_shape_binned() is used. Still,\nas shape has no inherent order, this use is not advised.\n","example_call":"scale_shape_discrete(name = waiver(), ..., solid = TRUE)"},"ggplot2::borders":{"description":"This is a quick and dirty way to get map data (from the maps package)\nonto your plot. This is a good place to start if you need some crude\nreference lines, but you'll typically want something more sophisticated\nfor communication graphics.\n","example_call":"borders(database = \"world\", regions = \".\", fill = NA, colour = \"grey50\","},"ggplot2::transform_position":{"description":"Convenience function to transform all position variables.\n","example_call":"transform_position(df, trans_x = NULL, trans_y = NULL, ...)"},"ggplot2::flip_data":{"description":"These functions are what underpins the ability of certain geoms to work\nautomatically in both directions. See the Extending ggplot2 vignette for\nhow they are used when implementing Geom, Stat, and Position classes.\n","example_call":"flip_data(data, flip = NULL)"},"ggplot2::StatSmooth":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::scale_color_brewer":{"description":"The brewer scales provide sequential, diverging and qualitative\ncolour schemes from ColorBrewer. These are particularly well suited to\ndisplay discrete values on a map. See https://colorbrewer2.org for\nmore information.\n","example_call":"scale_color_brewer(name = waiver(), ..., type = \"seq\", palette = 1, direction = 1,"},"ggplot2::GeomCol":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::guide_legend":{"description":"Legend type guide shows key (i.e., geoms) mapped onto values.\nLegend guides for various scales are integrated if possible.\n","example_call":"guide_legend(title = waiver(), theme = NULL, position = NULL, direction = NULL,"},"ggplot2::scale_x_sqrt":{"description":"scale_x_continuous() and scale_y_continuous() are the default\nscales for continuous x and y aesthetics. There are three variants\nthat set the transform argument for commonly used transformations:\n<U+2060>scale_*_log10()<U+2060>, <U+2060>scale_*_sqrt()<U+2060> and <U+2060>scale_*_reverse()<U+2060>.\n","example_call":"scale_x_sqrt(...)"},"ggplot2::scale_size_manual":{"description":"These functions allow you to specify your own set of mappings from levels in the\ndata to aesthetic values.\n","example_call":"scale_size_manual(..., values, breaks = waiver(), na.value = NA)"},"ggplot2::coord_polar":{"description":"The polar coordinate system is most commonly used for pie charts, which\nare a stacked bar chart in polar coordinates. coord_radial() has extended\noptions.\n","example_call":"coord_polar(theta = \"x\", start = 0, direction = 1, clip = \"on\")"},"ggplot2::ScaleContinuousDate":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::coord_fixed":{"description":"A fixed scale coordinate system forces a specified ratio between the\nphysical representation of data units on the axes. The ratio represents the\nnumber of units on the y-axis equivalent to one unit on the x-axis. The\ndefault, ratio = 1, ensures that one unit on the x-axis is the same\nlength as one unit on the y-axis. Ratios higher than one make units on the\ny axis longer than units on the x-axis, and vice versa. This is similar to\nMASS::eqscplot(), but it works for all types of graphics.\n","example_call":"coord_fixed(ratio = 1, xlim = NULL, ylim = NULL, expand = TRUE,"},"ggplot2::wrap_dims":{"description":"Arrange 1d structure into a grid\n","example_call":"wrap_dims(n, nrow = NULL, ncol = NULL)"},"ggplot2::scale_size_date":{"description":"scale_size() scales area, scale_radius() scales radius. The size\naesthetic is most commonly used for points and text, and humans perceive\nthe area of points (not their radius), so this provides for optimal\nperception. scale_size_area() ensures that a value of 0 is mapped\nto a size of 0. scale_size_binned() is a binned version of scale_size() that\nscales by area (but does not ensure 0 equals an area of zero). For a binned\nequivalent of scale_size_area() use scale_size_binned_area().\n","example_call":"scale_size_date(name = waiver(), ..., range = c(1, 6))"},"ggplot2::GeomSmooth":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::scale_colour_gradient":{"description":"<U+2060>scale_*_gradient<U+2060> creates a two colour gradient (low-high),\n<U+2060>scale_*_gradient2<U+2060> creates a diverging colour gradient (low-mid-high),\n<U+2060>scale_*_gradientn<U+2060> creates a n-colour gradient. For binned variants of\nthese scales, see the color steps scales.\n","example_call":"scale_colour_gradient(name = waiver(), ..., low = \"#132B43\", high = \"#56B1F7\","},"ggplot2::scale_linewidth_manual":{"description":"These functions allow you to specify your own set of mappings from levels in the\ndata to aesthetic values.\n","example_call":"scale_linewidth_manual(..., values, breaks = waiver(), na.value = NA)"},"ggplot2::scale_fill_binned":{"description":"The scales scale_colour_continuous() and scale_fill_continuous() are\nthe default colour scales ggplot2 uses when continuous data values are\nmapped onto the colour or fill aesthetics, respectively. The scales\nscale_colour_binned() and scale_fill_binned() are equivalent scale\nfunctions that assign discrete color bins to the continuous values\ninstead of using a continuous color spectrum.\n","example_call":"scale_fill_binned(..., type = getOption(\"ggplot2.binned.fill\"))"},"ggplot2::stat_bin_2d":{"description":"Divides the plane into rectangles, counts the number of cases in\neach rectangle, and then (by default) maps the number of cases to the\nrectangle's fill. This is a useful alternative to geom_point()\nin the presence of overplotting.\n","example_call":"stat_bin_2d(mapping = NULL, data = NULL, geom = \"tile\", position = \"identity\","},"ggplot2::scale_linewidth_identity":{"description":"Use this set of scales when your data has already been scaled, i.e. it\nalready represents aesthetic values that ggplot2 can handle directly.\nThese scales will not produce a legend unless you also supply the breaks,\nlabels, and type of guide you want.\n","example_call":"scale_linewidth_identity(name = waiver(), ..., guide = \"none\")"},"ggplot2::aes":{"description":"Aesthetic mappings describe how variables in the data are mapped to visual\nproperties (aesthetics) of geoms. Aesthetic mappings can be set in\nggplot() and in individual layers.\n","example_call":"aes(x, y, ...)"},"ggplot2::element_rect":{"description":"In conjunction with the theme system, the element_ functions\nspecify the display of how non-data components of the plot are drawn.\n","example_call":"element_rect(fill = NULL, colour = NULL, linewidth = NULL, linetype = NULL,"},"ggplot2::quickplot":{"description":"qplot() is now deprecated in order to encourage the users to\nlearn ggplot() as it makes it easier to create complex graphics.\n","example_call":"quickplot(x, y, ..., data, facets = NULL, margins = FALSE, geom = \"auto\","},"ggplot2::after_scale":{"description":"Most aesthetics are mapped from variables found in the data.\nSometimes, however, you want to delay the mapping until later in the\nrendering process. ggplot2 has three stages of the data that you can map\naesthetics from, and three functions to control at which stage aesthetics\nshould be evaluated.\n","example_call":"after_scale(x)"},"ggplot2::GeomRaster":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::GeomSegment":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::geom_hline":{"description":"These geoms add reference lines (sometimes called rules) to a plot, either\nhorizontal, vertical, or diagonal (specified by slope and intercept).\nThese are useful for annotating plots.\n","example_call":"geom_hline(mapping = NULL, data = NULL, ..., yintercept, na.rm = FALSE,"},"ggplot2::draw_key_abline":{"description":"Each geom has an associated function that draws the key when the geom needs\nto be displayed in a legend. These functions are called <U+2060>draw_key_*()<U+2060>, where\n* stands for the name of the respective key glyph. The key glyphs can be\ncustomized for individual geoms by providing a geom with the key_glyph\nargument (see layer() or examples below.)\n","example_call":"draw_key_abline(data, params, size)"},"ggplot2::scale_size_ordinal":{"description":"scale_size() scales area, scale_radius() scales radius. The size\naesthetic is most commonly used for points and text, and humans perceive\nthe area of points (not their radius), so this provides for optimal\nperception. scale_size_area() ensures that a value of 0 is mapped\nto a size of 0. scale_size_binned() is a binned version of scale_size() that\nscales by area (but does not ensure 0 equals an area of zero). For a binned\nequivalent of scale_size_area() use scale_size_binned_area().\n","example_call":"scale_size_ordinal(name = waiver(), ..., range = c(2, 6))"},"ggplot2::margin":{"description":"In conjunction with the theme system, the element_ functions\nspecify the display of how non-data components of the plot are drawn.\n","example_call":"margin(t = 0, r = 0, b = 0, l = 0, unit = \"pt\")"},"ggplot2::draw_key_timeseries":{"description":"Each geom has an associated function that draws the key when the geom needs\nto be displayed in a legend. These functions are called <U+2060>draw_key_*()<U+2060>, where\n* stands for the name of the respective key glyph. The key glyphs can be\ncustomized for individual geoms by providing a geom with the key_glyph\nargument (see layer() or examples below.)\n","example_call":"draw_key_timeseries(data, params, size)"},"ggplot2::element_render":{"description":"Given a theme object and element name, returns a grob for the element.\nUses element_grob() to generate the grob.\n","example_call":"element_render(theme, element, ..., name = NULL)"},"ggplot2::StatYdensity":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::GeomDotplot":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::draw_key_linerange":{"description":"Each geom has an associated function that draws the key when the geom needs\nto be displayed in a legend. These functions are called <U+2060>draw_key_*()<U+2060>, where\n* stands for the name of the respective key glyph. The key glyphs can be\ncustomized for individual geoms by providing a geom with the key_glyph\nargument (see layer() or examples below.)\n","example_call":"draw_key_linerange(data, params, size)"},"ggplot2::expand_scale":{"description":"This is a convenience function for generating scale expansion vectors\nfor the expand argument of scale_(x|y)_continuous\nand scale_(x|y)_discrete. The expansion vectors are used to\nadd some space between the data and the axes.\n","example_call":"expand_scale(mult = 0, add = 0)"},"ggplot2::GuideLegend":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::element_blank":{"description":"In conjunction with the theme system, the element_ functions\nspecify the display of how non-data components of the plot are drawn.\n","example_call":"element_blank()"},"ggplot2::scale_fill_date":{"description":"<U+2060>scale_*_gradient<U+2060> creates a two colour gradient (low-high),\n<U+2060>scale_*_gradient2<U+2060> creates a diverging colour gradient (low-mid-high),\n<U+2060>scale_*_gradientn<U+2060> creates a n-colour gradient. For binned variants of\nthese scales, see the color steps scales.\n","example_call":"scale_fill_date(name = waiver(), ..., low = \"#132B43\", high = \"#56B1F7\","},"ggplot2::CoordCartesian":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::label_parsed":{"description":"Labeller functions are in charge of formatting the strip labels of\nfacet grids and wraps. Most of them accept a multi_line\nargument to control whether multiple factors (defined in formulae\nsuch as ~first + second) should be displayed on a single\nline separated with commas, or each on their own line.\n","example_call":"label_parsed(labels, multi_line = TRUE)"},"ggplot2::scale_color_distiller":{"description":"The brewer scales provide sequential, diverging and qualitative\ncolour schemes from ColorBrewer. These are particularly well suited to\ndisplay discrete values on a map. See https://colorbrewer2.org for\nmore information.\n","example_call":"scale_color_distiller(name = waiver(), ..., type = \"seq\", palette = 1, direction = -1,"},"ggplot2::geom_ribbon":{"description":"For each x value, geom_ribbon() displays a y interval defined\nby ymin and ymax. geom_area() is a special case of\ngeom_ribbon(), where the ymin is fixed to 0 and y is used instead\nof ymax.\n","example_call":"geom_ribbon(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\","},"ggplot2::PositionJitter":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::GeomMap":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::stat_function":{"description":"Computes and draws a function as a continuous curve. This makes it easy to\nsuperimpose a function on top of an existing plot. The function is called\nwith a grid of evenly spaced values along the x axis, and the results are\ndrawn (by default) with a line.\n","example_call":"stat_function(mapping = NULL, data = NULL, geom = \"function\", position = \"identity\","},"ggplot2::facet_grid":{"description":"facet_grid() forms a matrix of panels defined by row and column\nfaceting variables. It is most useful when you have two discrete\nvariables, and all combinations of the variables exist in the data.\nIf you have only one variable with many levels, try facet_wrap().\n","example_call":"facet_grid(rows = NULL, cols = NULL, scales = \"fixed\", space = \"fixed\","},"ggplot2::AxisSecondary":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::GeomPath":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::has_flipped_aes":{"description":"These functions are what underpins the ability of certain geoms to work\nautomatically in both directions. See the Extending ggplot2 vignette for\nhow they are used when implementing Geom, Stat, and Position classes.\n","example_call":"has_flipped_aes(data, params = list(), main_is_orthogonal = NA, range_is_orthogonal = NA,"},"ggplot2::as_labeller":{"description":"This transforms objects to labeller functions. Used internally by\nlabeller().\n","example_call":"as_labeller(x, default = label_value, multi_line = TRUE)"},"ggplot2::scale_continuous_identity":{"description":"Use this set of scales when your data has already been scaled, i.e. it\nalready represents aesthetic values that ggplot2 can handle directly.\nThese scales will not produce a legend unless you also supply the breaks,\nlabels, and type of guide you want.\n","example_call":"scale_continuous_identity(aesthetics, name = waiver(), ..., guide = \"none\")"},"ggplot2::geom_bin2d":{"description":"Divides the plane into rectangles, counts the number of cases in\neach rectangle, and then (by default) maps the number of cases to the\nrectangle's fill. This is a useful alternative to geom_point()\nin the presence of overplotting.\n","example_call":"geom_bin2d(mapping = NULL, data = NULL, stat = \"bin2d\", position = \"identity\","},"ggplot2::stat_ydensity":{"description":"A violin plot is a compact display of a continuous distribution. It is a\nblend of geom_boxplot() and geom_density(): a\nviolin plot is a mirrored density plot displayed in the same way as a\nboxplot.\n","example_call":"stat_ydensity(mapping = NULL, data = NULL, geom = \"violin\", position = \"dodge\","},"ggplot2::geom_contour_filled":{"description":"ggplot2 can not draw true 3D surfaces, but you can use geom_contour(),\ngeom_contour_filled(), and geom_tile() to visualise 3D surfaces in 2D.\n","example_call":"geom_contour_filled(mapping = NULL, data = NULL, stat = \"contour_filled\","},"ggplot2::scale_colour_hue":{"description":"Maps each level to an evenly spaced hue on the colour wheel.\nIt does not generate colour-blind safe palettes.\n","example_call":"scale_colour_hue(name = waiver(), ..., h = c(0, 360) + 15, c = 100,"},"ggplot2::theme_classic":{"description":"These are complete themes which control all non-data display. Use\ntheme() if you just need to tweak the display of an existing\ntheme.\n","example_call":"theme_classic(base_size = 11, base_family = \"\", base_line_size = base_size/22,"},"ggplot2::geom_polygon":{"description":"Polygons are very similar to paths (as drawn by geom_path())\nexcept that the start and end points are connected and the inside is\ncoloured by fill. The group aesthetic determines which cases\nare connected together into a polygon. From R 3.6 and onwards it is possible\nto draw polygons with holes by providing a subgroup aesthetic that\ndifferentiates the outer ring points from those describing holes in the\npolygon.\n","example_call":"geom_polygon(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\","},"ggplot2::summarise_coord":{"description":"These functions provide summarised information about built ggplot objects.\n","example_call":"summarise_coord(p)"},"ggplot2::geom_tile":{"description":"geom_rect() and geom_tile() do the same thing, but are\nparameterised differently: geom_rect() uses the locations of the four\ncorners (xmin, xmax, ymin and ymax), while\ngeom_tile() uses the center of the tile and its size (x,\ny, width, height). geom_raster() is a high\nperformance special case for when all the tiles are the same size, and no\npattern fills are applied.\n","example_call":"geom_tile(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\","},"ggplot2::GeomBlank":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::GeomCrossbar":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::scale_color_manual":{"description":"These functions allow you to specify your own set of mappings from levels in the\ndata to aesthetic values.\n","example_call":"scale_color_manual(..., values, aesthetics = \"colour\", breaks = waiver(),"},"ggplot2::scale_color_stepsn":{"description":"<U+2060>scale_*_steps<U+2060> creates a two colour binned gradient (low-high),\n<U+2060>scale_*_steps2<U+2060> creates a diverging binned colour gradient (low-mid-high),\nand <U+2060>scale_*_stepsn<U+2060> creates a n-colour binned gradient. These scales are\nbinned variants of the gradient scale family and\nworks in the same way.\n","example_call":"scale_color_stepsn(name = waiver(), ..., colours, values = NULL, space = \"Lab\","},"ggplot2::stat_density2d":{"description":"Perform a 2D kernel density estimation using MASS::kde2d() and\ndisplay the results with contours. This can be useful for dealing with\noverplotting. This is a 2D version of geom_density(). geom_density_2d()\ndraws contour lines, and geom_density_2d_filled() draws filled contour\nbands.\n","example_call":"stat_density2d(mapping = NULL, data = NULL, geom = \"density_2d\", position = \"identity\","},"ggplot2::scale_linetype_continuous":{"description":"Default line types based on a set supplied by Richard Pearson,\nUniversity of Manchester. Continuous values can not be mapped to\nline types unless scale_linetype_binned() is used. Still, as linetypes has\nno inherent order, this use is not advised.\n","example_call":"scale_linetype_continuous(...)"},"ggplot2::CoordMap":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::layer_grob":{"description":"ggplot_build() takes the plot object, and performs all steps necessary\nto produce an object that can be rendered.  This function outputs two pieces:\na list of data frames (one for each layer), and a panel object, which\ncontain all information about axis limits, breaks etc.\n","example_call":"layer_grob(plot = last_plot(), i = 1L)"},"ggplot2::stat_ellipse":{"description":"The method for calculating the ellipses has been modified from\ncar::dataEllipse (Fox and Weisberg 2011, Friendly and Monette 2013)\n","example_call":"stat_ellipse(mapping = NULL, data = NULL, geom = \"path\", position = \"identity\","},"ggplot2::ScaleDiscreteIdentity":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::scale_color_continuous":{"description":"The scales scale_colour_continuous() and scale_fill_continuous() are\nthe default colour scales ggplot2 uses when continuous data values are\nmapped onto the colour or fill aesthetics, respectively. The scales\nscale_colour_binned() and scale_fill_binned() are equivalent scale\nfunctions that assign discrete color bins to the continuous values\ninstead of using a continuous color spectrum.\n","example_call":"scale_color_continuous(..., type = getOption(\"ggplot2.continuous.colour\"))"},"ggplot2::geom_errorbar":{"description":"Various ways of representing a vertical interval defined by x,\nymin and ymax. Each case draws a single graphical object.\n","example_call":"geom_errorbar(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\","},"ggplot2::element_line":{"description":"In conjunction with the theme system, the element_ functions\nspecify the display of how non-data components of the plot are drawn.\n","example_call":"element_line(colour = NULL, linewidth = NULL, linetype = NULL, lineend = NULL,"},"ggplot2::median_hilow":{"description":"These are wrappers around functions from Hmisc designed to make them\neasier to use with stat_summary(). See the Hmisc documentation\nfor more details:\n","example_call":"median_hilow(x, ...)"},"ggplot2::stat":{"description":"Most aesthetics are mapped from variables found in the data.\nSometimes, however, you want to delay the mapping until later in the\nrendering process. ggplot2 has three stages of the data that you can map\naesthetics from, and three functions to control at which stage aesthetics\nshould be evaluated.\n","example_call":"stat(x)"},"ggplot2::stat_spoke":{"description":"This is a polar parameterisation of geom_segment(). It is\nuseful when you have variables that describe direction and distance.\nThe angles start from east and increase counterclockwise.\n","example_call":"stat_spoke(...)"},"ggplot2::element_grob":{"description":"Generate grid grob from theme element\n","example_call":"element_grob(element, ...)"},"ggplot2::scale_x_continuous":{"description":"scale_x_continuous() and scale_y_continuous() are the default\nscales for continuous x and y aesthetics. There are three variants\nthat set the transform argument for commonly used transformations:\n<U+2060>scale_*_log10()<U+2060>, <U+2060>scale_*_sqrt()<U+2060> and <U+2060>scale_*_reverse()<U+2060>.\n","example_call":"scale_x_continuous(name = waiver(), breaks = waiver(), minor_breaks = waiver(),"},"ggplot2::ggplot_gtable":{"description":"This function builds all grobs necessary for displaying the plot, and\nstores them in a special data structure called a gtable().\nThis object is amenable to programmatic manipulation, should you want\nto (e.g.) make the legend box 2 cm wide, or combine multiple plots into\na single display, preserving aspect ratios across the plots.\n","example_call":"ggplot_gtable(data)"},"ggplot2::geom_qq":{"description":"geom_qq() and stat_qq() produce quantile-quantile plots. geom_qq_line() and\nstat_qq_line() compute the slope and intercept of the line connecting the\npoints at specified quartiles of the theoretical and sample distributions.\n","example_call":"geom_qq(mapping = NULL, data = NULL, geom = \"point\", position = \"identity\","},"ggplot2::Layout":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::scale_color_binned":{"description":"The scales scale_colour_continuous() and scale_fill_continuous() are\nthe default colour scales ggplot2 uses when continuous data values are\nmapped onto the colour or fill aesthetics, respectively. The scales\nscale_colour_binned() and scale_fill_binned() are equivalent scale\nfunctions that assign discrete color bins to the continuous values\ninstead of using a continuous color spectrum.\n","example_call":"scale_color_binned(..., type = getOption(\"ggplot2.binned.colour\"))"},"ggplot2::geom_contour":{"description":"ggplot2 can not draw true 3D surfaces, but you can use geom_contour(),\ngeom_contour_filled(), and geom_tile() to visualise 3D surfaces in 2D.\n","example_call":"geom_contour(mapping = NULL, data = NULL, stat = \"contour\", position = \"identity\","},"ggplot2::binned_scale":{"description":"Binning scale constructor\n","example_call":"binned_scale(aesthetics, scale_name = deprecated(), palette, name = waiver(),"},"ggplot2::scale_shape":{"description":"scale_shape() maps discrete variables to six easily discernible shapes.\nIf you have more than six levels, you will get a warning message, and the\nseventh and subsequent levels will not appear on the plot. Use\nscale_shape_manual() to supply your own values. You can not map\na continuous variable to shape unless scale_shape_binned() is used. Still,\nas shape has no inherent order, this use is not advised.\n","example_call":"scale_shape(name = waiver(), ..., solid = TRUE)"},"ggplot2::stat_summary_bin":{"description":"stat_summary() operates on unique x or y; stat_summary_bin()\noperates on binned x or y. They are more flexible versions of\nstat_bin(): instead of just counting, they can compute any\naggregate.\n","example_call":"stat_summary_bin(mapping = NULL, data = NULL, geom = \"pointrange\", position = \"identity\","},"ggplot2::StatCount":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::calc_element":{"description":"Calculate the element properties, by inheriting properties from its parents\n","example_call":"calc_element(element, theme, verbose = FALSE, skip_blank = FALSE,"},"ggplot2::layer":{"description":"A layer is a combination of data, stat and geom with a potential position\nadjustment. Usually layers are created using <U+2060>geom_*<U+2060> or <U+2060>stat_*<U+2060>\ncalls but it can also be created directly using this function.\n","example_call":"layer(geom = NULL, stat = NULL, data = NULL, mapping = NULL,"},"ggplot2::guide_geom":{"description":"The guide system has been overhauled to use the ggproto infrastructure to\naccommodate guide extensions with the same flexibility as layers, scales and\nother ggplot2 objects. In rewriting, the old S3 system has become defunct,\nmeaning that the previous methods for guides have been superseded by ggproto\nmethods. As a fallback option, the generics, but not the methods, that the\nprevious S3 system used are encapsulated in the GuideOld ggproto class.\n","example_call":"guide_geom(guide, layers, default_mapping = NULL)"},"ggplot2::guide_axis":{"description":"Axis guides are the visual representation of position scales like those\ncreated with scale_(x|y)_continuous() and\nscale_(x|y)_discrete().\n","example_call":"guide_axis(title = waiver(), theme = NULL, check.overlap = FALSE,"},"ggplot2::ScaleContinuous":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::aes_q":{"description":"\n","example_call":"aes_q(x, y, ...)"},"ggplot2::annotation_raster":{"description":"This is a special version of geom_raster() optimised for static\nannotations that are the same in every panel. These annotations will not\naffect scales (i.e. the x and y axes will not grow to cover the range\nof the raster, and the raster must already have its own colours). This\nis useful for adding bitmap images.\n","example_call":"annotation_raster(raster, xmin, xmax, ymin, ymax, interpolate = FALSE)"},"ggplot2::FacetWrap":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::scale_y_log10":{"description":"scale_x_continuous() and scale_y_continuous() are the default\nscales for continuous x and y aesthetics. There are three variants\nthat set the transform argument for commonly used transformations:\n<U+2060>scale_*_log10()<U+2060>, <U+2060>scale_*_sqrt()<U+2060> and <U+2060>scale_*_reverse()<U+2060>.\n","example_call":"scale_y_log10(...)"},"ggplot2::scale_colour_brewer":{"description":"The brewer scales provide sequential, diverging and qualitative\ncolour schemes from ColorBrewer. These are particularly well suited to\ndisplay discrete values on a map. See https://colorbrewer2.org for\nmore information.\n","example_call":"scale_colour_brewer(name = waiver(), ..., type = \"seq\", palette = 1, direction = 1,"},"ggplot2::GuideAxisTheta":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::scale_fill_datetime":{"description":"<U+2060>scale_*_gradient<U+2060> creates a two colour gradient (low-high),\n<U+2060>scale_*_gradient2<U+2060> creates a diverging colour gradient (low-mid-high),\n<U+2060>scale_*_gradientn<U+2060> creates a n-colour gradient. For binned variants of\nthese scales, see the color steps scales.\n","example_call":"scale_fill_datetime(name = waiver(), ..., low = \"#132B43\", high = \"#56B1F7\","},"ggplot2::dup_axis":{"description":"This function is used in conjunction with a position scale to create a\nsecondary axis, positioned opposite of the primary axis. All secondary\naxes must be based on a one-to-one transformation of the primary axes.\n","example_call":"dup_axis(transform = ~., name = derive(), breaks = derive(),"},"ggplot2::guide_transform":{"description":"The guide system has been overhauled to use the ggproto infrastructure to\naccommodate guide extensions with the same flexibility as layers, scales and\nother ggplot2 objects. In rewriting, the old S3 system has become defunct,\nmeaning that the previous methods for guides have been superseded by ggproto\nmethods. As a fallback option, the generics, but not the methods, that the\nprevious S3 system used are encapsulated in the GuideOld ggproto class.\n","example_call":"guide_transform(guide, coord, panel_params)"},"ggplot2::gg_dep":{"description":"\n","example_call":"gg_dep(version, msg)"},"ggplot2::scale_fill_stepsn":{"description":"<U+2060>scale_*_steps<U+2060> creates a two colour binned gradient (low-high),\n<U+2060>scale_*_steps2<U+2060> creates a diverging binned colour gradient (low-mid-high),\nand <U+2060>scale_*_stepsn<U+2060> creates a n-colour binned gradient. These scales are\nbinned variants of the gradient scale family and\nworks in the same way.\n","example_call":"scale_fill_stepsn(name = waiver(), ..., colours, values = NULL, space = \"Lab\","},"ggplot2::is.ggplot":{"description":"Reports whether x is a ggplot object\n","example_call":"is.ggplot(x)"},"ggplot2::scale_colour_discrete":{"description":"The default discrete colour scale. Defaults to scale_fill_hue()/scale_fill_brewer()\nunless type (which defaults to the ggplot2.discrete.fill/ggplot2.discrete.colour options)\nis specified.\n","example_call":"scale_colour_discrete(..., type = getOption(\"ggplot2.discrete.colour\"))"},"ggplot2::geom_area":{"description":"For each x value, geom_ribbon() displays a y interval defined\nby ymin and ymax. geom_area() is a special case of\ngeom_ribbon(), where the ymin is fixed to 0 and y is used instead\nof ymax.\n","example_call":"geom_area(mapping = NULL, data = NULL, stat = \"align\", position = \"stack\","},"ggplot2::scale_fill_viridis_b":{"description":"The viridis scales provide colour maps that are perceptually uniform in both\ncolour and black-and-white. They are also designed to be perceived by viewers\nwith common forms of colour blindness. See also\nhttps://bids.github.io/colormap/.\n","example_call":"scale_fill_viridis_b(name = waiver(), ..., alpha = 1, begin = 0, end = 1,"},"ggplot2::scale_linewidth_date":{"description":"scale_linewidth scales the width of lines and polygon strokes. Due to\nhistorical reasons, it is also possible to control this with the size\naesthetic, but using linewidth is encourage to clearly differentiate area\naesthetics from stroke width aesthetics.\n","example_call":"scale_linewidth_date(name = waiver(), ..., range = c(1, 6))"},"ggplot2::geom_sf":{"description":"This set of geom, stat, and coord are used to visualise simple feature (sf)\nobjects. For simple plots, you will only need geom_sf() as it\nuses stat_sf() and adds coord_sf() for you. geom_sf() is\nan unusual geom because it will draw different geometric objects depending\non what simple features are present in the data: you can get points, lines,\nor polygons.\nFor text and labels, you can use geom_sf_text() and geom_sf_label().\n","example_call":"geom_sf(mapping = aes(), data = NULL, stat = \"sf\", position = \"identity\","},"ggplot2::scale_fill_viridis_c":{"description":"The viridis scales provide colour maps that are perceptually uniform in both\ncolour and black-and-white. They are also designed to be perceived by viewers\nwith common forms of colour blindness. See also\nhttps://bids.github.io/colormap/.\n","example_call":"scale_fill_viridis_c(name = waiver(), ..., alpha = 1, begin = 0, end = 1,"},"ggplot2::GuideColourbar":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::scale_fill_viridis_d":{"description":"The viridis scales provide colour maps that are perceptually uniform in both\ncolour and black-and-white. They are also designed to be perceived by viewers\nwith common forms of colour blindness. See also\nhttps://bids.github.io/colormap/.\n","example_call":"scale_fill_viridis_d(name = waiver(), ..., alpha = 1, begin = 0, end = 1,"},"ggplot2::aes_auto":{"description":"\n","example_call":"aes_auto(data = NULL, ...)"},"ggplot2::max_width":{"description":"Get the maximal width/length of a list of grobs\n","example_call":"max_width(grobs, value_only = FALSE)"},"ggplot2::scale_shape_ordinal":{"description":"scale_shape() maps discrete variables to six easily discernible shapes.\nIf you have more than six levels, you will get a warning message, and the\nseventh and subsequent levels will not appear on the plot. Use\nscale_shape_manual() to supply your own values. You can not map\na continuous variable to shape unless scale_shape_binned() is used. Still,\nas shape has no inherent order, this use is not advised.\n","example_call":"scale_shape_ordinal(...)"},"ggplot2::StatSum":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::stat_align":{"description":"For each x value, geom_ribbon() displays a y interval defined\nby ymin and ymax. geom_area() is a special case of\ngeom_ribbon(), where the ymin is fixed to 0 and y is used instead\nof ymax.\n","example_call":"stat_align(mapping = NULL, data = NULL, geom = \"area\", position = \"identity\","},"ggplot2::facet_wrap":{"description":"facet_wrap() wraps a 1d sequence of panels into 2d. This is generally\na better use of screen space than facet_grid() because most\ndisplays are roughly rectangular.\n","example_call":"facet_wrap(facets, nrow = NULL, ncol = NULL, scales = \"fixed\","},"ggplot2::geom_rug":{"description":"A rug plot is a compact visualisation designed to supplement a 2d display\nwith the two 1d marginal distributions. Rug plots display individual\ncases so are best used with smaller datasets.\n","example_call":"geom_rug(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\","},"ggplot2::theme_test":{"description":"These are complete themes which control all non-data display. Use\ntheme() if you just need to tweak the display of an existing\ntheme.\n","example_call":"theme_test(base_size = 11, base_family = \"\", base_line_size = base_size/22,"},"ggplot2::theme_linedraw":{"description":"These are complete themes which control all non-data display. Use\ntheme() if you just need to tweak the display of an existing\ntheme.\n","example_call":"theme_linedraw(base_size = 11, base_family = \"\", base_line_size = base_size/22,"},"ggplot2::StatQqLine":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::draw_key_point":{"description":"Each geom has an associated function that draws the key when the geom needs\nto be displayed in a legend. These functions are called <U+2060>draw_key_*()<U+2060>, where\n* stands for the name of the respective key glyph. The key glyphs can be\ncustomized for individual geoms by providing a geom with the key_glyph\nargument (see layer() or examples below.)\n","example_call":"draw_key_point(data, params, size)"},"ggplot2::scale_colour_distiller":{"description":"The brewer scales provide sequential, diverging and qualitative\ncolour schemes from ColorBrewer. These are particularly well suited to\ndisplay discrete values on a map. See https://colorbrewer2.org for\nmore information.\n","example_call":"scale_colour_distiller(name = waiver(), ..., type = \"seq\", palette = 1, direction = -1,"},"ggplot2::label_context":{"description":"Labeller functions are in charge of formatting the strip labels of\nfacet grids and wraps. Most of them accept a multi_line\nargument to control whether multiple factors (defined in formulae\nsuch as ~first + second) should be displayed on a single\nline separated with commas, or each on their own line.\n","example_call":"label_context(labels, multi_line = TRUE, sep = \": \")"},"ggplot2::mean_se":{"description":"For use with stat_summary()\n","example_call":"mean_se(x, mult = 1)"},"ggplot2::GuideAxisLogticks":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::ggproto_parent":{"description":"Construct a new object with ggproto(), test with is.ggproto(),\nand access parent methods/fields with ggproto_parent().\n","example_call":"ggproto_parent(parent, self)"},"ggplot2::scale_x_reverse":{"description":"scale_x_continuous() and scale_y_continuous() are the default\nscales for continuous x and y aesthetics. There are three variants\nthat set the transform argument for commonly used transformations:\n<U+2060>scale_*_log10()<U+2060>, <U+2060>scale_*_sqrt()<U+2060> and <U+2060>scale_*_reverse()<U+2060>.\n","example_call":"scale_x_reverse(...)"},"ggplot2::scale_colour_ordinal":{"description":"The viridis scales provide colour maps that are perceptually uniform in both\ncolour and black-and-white. They are also designed to be perceived by viewers\nwith common forms of colour blindness. See also\nhttps://bids.github.io/colormap/.\n","example_call":"scale_colour_ordinal(..., type = getOption(\"ggplot2.ordinal.colour\", getOption(\"ggplot2.ordinal.fill\")))"},"ggplot2::geom_bar":{"description":"There are two types of bar charts: geom_bar() and geom_col().\ngeom_bar() makes the height of the bar proportional to the number of\ncases in each group (or if the weight aesthetic is supplied, the sum\nof the weights). If you want the heights of the bars to represent values\nin the data, use geom_col() instead. geom_bar() uses stat_count() by\ndefault: it counts the number of cases at each x position. geom_col()\nuses stat_identity(): it leaves the data as is.\n","example_call":"geom_bar(mapping = NULL, data = NULL, stat = \"count\", position = \"stack\","},"ggplot2::expand_limits":{"description":"Sometimes you may want to ensure limits include a single value, for all\npanels or all plots.  This function is a thin wrapper around\ngeom_blank() that makes it easy to add such values.\n","example_call":"expand_limits(...)"},"ggplot2::scale_fill_brewer":{"description":"The brewer scales provide sequential, diverging and qualitative\ncolour schemes from ColorBrewer. These are particularly well suited to\ndisplay discrete values on a map. See https://colorbrewer2.org for\nmore information.\n","example_call":"scale_fill_brewer(name = waiver(), ..., type = \"seq\", palette = 1, direction = 1,"},"ggplot2::check_device":{"description":"This function makes an attempt to estimate whether the graphics device is\nable to render newer graphics features.\n","example_call":"check_device(feature, action = \"warn\", op = NULL, maybe = FALSE,"},"ggplot2::GuideAxisStack":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::draw_key_boxplot":{"description":"Each geom has an associated function that draws the key when the geom needs\nto be displayed in a legend. These functions are called <U+2060>draw_key_*()<U+2060>, where\n* stands for the name of the respective key glyph. The key glyphs can be\ncustomized for individual geoms by providing a geom with the key_glyph\nargument (see layer() or examples below.)\n","example_call":"draw_key_boxplot(data, params, size)"},"ggplot2::geom_sf_label":{"description":"This set of geom, stat, and coord are used to visualise simple feature (sf)\nobjects. For simple plots, you will only need geom_sf() as it\nuses stat_sf() and adds coord_sf() for you. geom_sf() is\nan unusual geom because it will draw different geometric objects depending\non what simple features are present in the data: you can get points, lines,\nor polygons.\nFor text and labels, you can use geom_sf_text() and geom_sf_label().\n","example_call":"geom_sf_label(mapping = aes(), data = NULL, stat = \"sf_coordinates\","},"ggplot2::xlim":{"description":"This is a shortcut for supplying the limits argument to the individual\nscales. By default, any values outside the limits specified are replaced with\nNA. Be warned that this will remove data outside the limits and this can\nproduce unintended results. For changing x or y axis limits without\ndropping data observations, see coord_cartesian().\n","example_call":"xlim(...)"},"ggplot2::reset_theme_settings":{"description":"The underlying structure of a ggplot2 theme is defined via the element tree, which\nspecifies for each theme element what type it should have and whether it inherits from\na parent element. In some use cases, it may be necessary to modify or extend this\nelement tree and provide default settings for newly defined theme elements.\n","example_call":"reset_theme_settings(reset_current = TRUE)"},"ggplot2::coord_munch":{"description":"This function \"munches\" lines, dividing each line into many small pieces\nso they can be transformed independently. Used inside geom functions.\n","example_call":"coord_munch(coord, data, range, segment_length = 0.01, is_closed = FALSE)"},"ggplot2::guide_colorsteps":{"description":"This guide is version of guide_colourbar() for binned colour and fill\nscales. It shows areas between breaks as a single constant colour instead of\nthe gradient known from the colourbar counterpart.\n","example_call":"guide_colorsteps(title = waiver(), theme = NULL, alpha = NA, even.steps = TRUE,"},"ggplot2::scale_linewidth_binned":{"description":"scale_linewidth scales the width of lines and polygon strokes. Due to\nhistorical reasons, it is also possible to control this with the size\naesthetic, but using linewidth is encourage to clearly differentiate area\naesthetics from stroke width aesthetics.\n","example_call":"scale_linewidth_binned(name = waiver(), breaks = waiver(), labels = waiver(),"},"ggplot2::scale_alpha_date":{"description":"Alpha-transparency scales are not tremendously useful, but can be a\nconvenient way to visually down-weight less important observations.\nscale_alpha() is an alias for scale_alpha_continuous() since\nthat is the most common use of alpha, and it saves a bit of typing.\n","example_call":"scale_alpha_date(name = waiver(), ..., range = c(0.1, 1))"},"ggplot2::scale_size_area":{"description":"scale_size() scales area, scale_radius() scales radius. The size\naesthetic is most commonly used for points and text, and humans perceive\nthe area of points (not their radius), so this provides for optimal\nperception. scale_size_area() ensures that a value of 0 is mapped\nto a size of 0. scale_size_binned() is a binned version of scale_size() that\nscales by area (but does not ensure 0 equals an area of zero). For a binned\nequivalent of scale_size_area() use scale_size_binned_area().\n","example_call":"scale_size_area(name = waiver(), ..., max_size = 6)"},"ggplot2::scale_colour_steps2":{"description":"<U+2060>scale_*_steps<U+2060> creates a two colour binned gradient (low-high),\n<U+2060>scale_*_steps2<U+2060> creates a diverging binned colour gradient (low-mid-high),\nand <U+2060>scale_*_stepsn<U+2060> creates a n-colour binned gradient. These scales are\nbinned variants of the gradient scale family and\nworks in the same way.\n","example_call":"scale_colour_steps2(name = waiver(), ..., low = muted(\"red\"), mid = \"white\","},"ggplot2::scale_type":{"description":"You will need to define a method for this method if you want to extend\nggplot2 to handle new types of data. If you simply want to pass the vector\nthrough as an additional aesthetic, return \"identity\".\n","example_call":"scale_type(x)"},"ggplot2::scale_colour_manual":{"description":"These functions allow you to specify your own set of mappings from levels in the\ndata to aesthetic values.\n","example_call":"scale_colour_manual(..., values, aesthetics = \"colour\", breaks = waiver(),"},"ggplot2::geom_rect":{"description":"geom_rect() and geom_tile() do the same thing, but are\nparameterised differently: geom_rect() uses the locations of the four\ncorners (xmin, xmax, ymin and ymax), while\ngeom_tile() uses the center of the tile and its size (x,\ny, width, height). geom_raster() is a high\nperformance special case for when all the tiles are the same size, and no\npattern fills are applied.\n","example_call":"geom_rect(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\","},"ggplot2::theme_minimal":{"description":"These are complete themes which control all non-data display. Use\ntheme() if you just need to tweak the display of an existing\ntheme.\n","example_call":"theme_minimal(base_size = 11, base_family = \"\", base_line_size = base_size/22,"},"ggplot2::scale_color_gradientn":{"description":"<U+2060>scale_*_gradient<U+2060> creates a two colour gradient (low-high),\n<U+2060>scale_*_gradient2<U+2060> creates a diverging colour gradient (low-mid-high),\n<U+2060>scale_*_gradientn<U+2060> creates a n-colour gradient. For binned variants of\nthese scales, see the color steps scales.\n","example_call":"scale_color_gradientn(name = waiver(), ..., colours, values = NULL, space = \"Lab\","},"ggplot2::scale_fill_hue":{"description":"Maps each level to an evenly spaced hue on the colour wheel.\nIt does not generate colour-blind safe palettes.\n","example_call":"scale_fill_hue(name = waiver(), ..., h = c(0, 360) + 15, c = 100,"},"ggplot2::StatDensity2d":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::geom_errorbarh":{"description":"A rotated version of geom_errorbar().\n","example_call":"geom_errorbarh(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\","},"ggplot2::position_jitter":{"description":"Counterintuitively adding random noise to a plot can sometimes make it\neasier to read. Jittering is particularly useful for small datasets with\nat least one discrete position.\n","example_call":"position_jitter(width = NULL, height = NULL, seed = NA)"},"ggplot2::geom_qq_line":{"description":"geom_qq() and stat_qq() produce quantile-quantile plots. geom_qq_line() and\nstat_qq_line() compute the slope and intercept of the line connecting the\npoints at specified quartiles of the theoretical and sample distributions.\n","example_call":"geom_qq_line(mapping = NULL, data = NULL, geom = \"path\", position = \"identity\","},"ggplot2::GuideOld":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::FacetNull":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::guide_gengrob":{"description":"The guide system has been overhauled to use the ggproto infrastructure to\naccommodate guide extensions with the same flexibility as layers, scales and\nother ggplot2 objects. In rewriting, the old S3 system has become defunct,\nmeaning that the previous methods for guides have been superseded by ggproto\nmethods. As a fallback option, the generics, but not the methods, that the\nprevious S3 system used are encapsulated in the GuideOld ggproto class.\n","example_call":"guide_gengrob(guide, theme)"},"ggplot2::guide_colorbar":{"description":"Colour bar guide shows continuous colour scales mapped onto values.\nColour bar is available with scale_fill and scale_colour.\nFor more information, see the inspiration for this function:\nMatlab's colorbar function.\n","example_call":"guide_colorbar(title = waiver(), theme = NULL, nbin = NULL, display = \"raster\","},"ggplot2::PositionDodge":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::scale_linetype_binned":{"description":"Default line types based on a set supplied by Richard Pearson,\nUniversity of Manchester. Continuous values can not be mapped to\nline types unless scale_linetype_binned() is used. Still, as linetypes has\nno inherent order, this use is not advised.\n","example_call":"scale_linetype_binned(name = waiver(), ..., na.value = \"blank\")"},"ggplot2::scale_x_date":{"description":"These are the default scales for the three date/time class. These will\nusually be added automatically. To override manually, use\n<U+2060>scale_*_date<U+2060> for dates (class Date),\n<U+2060>scale_*_datetime<U+2060> for datetimes (class POSIXct), and\n<U+2060>scale_*_time<U+2060> for times (class hms).\n","example_call":"scale_x_date(name = waiver(), breaks = waiver(), date_breaks = waiver(),"},"ggplot2::scale_shape_manual":{"description":"These functions allow you to specify your own set of mappings from levels in the\ndata to aesthetic values.\n","example_call":"scale_shape_manual(..., values, breaks = waiver(), na.value = NA)"},"ggplot2::guides":{"description":"Guides for each scale can be set scale-by-scale with the guide\nargument, or en masse with guides().\n","example_call":"guides(...)"},"ggplot2::stat_summary_hex":{"description":"stat_summary_2d() is a 2d variation of stat_summary().\nstat_summary_hex() is a hexagonal variation of\nstat_summary_2d(). The data are divided into bins defined\nby x and y, and then the values of z in each cell is\nare summarised with fun.\n","example_call":"stat_summary_hex(mapping = NULL, data = NULL, geom = \"hex\", position = \"identity\","},"ggplot2::scale_radius":{"description":"scale_size() scales area, scale_radius() scales radius. The size\naesthetic is most commonly used for points and text, and humans perceive\nthe area of points (not their radius), so this provides for optimal\nperception. scale_size_area() ensures that a value of 0 is mapped\nto a size of 0. scale_size_binned() is a binned version of scale_size() that\nscales by area (but does not ensure 0 equals an area of zero). For a binned\nequivalent of scale_size_area() use scale_size_binned_area().\n","example_call":"scale_radius(name = waiver(), breaks = waiver(), labels = waiver(),"},"ggplot2::StatSummary":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::Scale":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::annotation_map":{"description":"Display a fixed map on a plot. This function predates the geom_sf()\nframework and does not work with sf geometry columns as input. However,\nit can be used in conjunction with geom_sf() layers and/or\ncoord_sf() (see examples).\n","example_call":"annotation_map(map, ...)"},"ggplot2::GeomContourFilled":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::geom_boxplot":{"description":"The boxplot compactly displays the distribution of a continuous variable.\nIt visualises five summary statistics (the median, two hinges\nand two whiskers), and all \"outlying\" points individually.\n","example_call":"geom_boxplot(mapping = NULL, data = NULL, stat = \"boxplot\", position = \"dodge2\","},"ggplot2::after_stat":{"description":"Most aesthetics are mapped from variables found in the data.\nSometimes, however, you want to delay the mapping until later in the\nrendering process. ggplot2 has three stages of the data that you can map\naesthetics from, and three functions to control at which stage aesthetics\nshould be evaluated.\n","example_call":"after_stat(x)"},"ggplot2::stat_ecdf":{"description":"The empirical cumulative distribution function (ECDF) provides an alternative\nvisualisation of distribution. Compared to other visualisations that rely on\ndensity (like geom_histogram()), the ECDF doesn't require any\ntuning parameters and handles both continuous and categorical variables.\nThe downside is that it requires more training to accurately interpret,\nand the underlying visual tasks are somewhat more challenging.\n","example_call":"stat_ecdf(mapping = NULL, data = NULL, geom = \"step\", position = \"identity\","},"ggplot2::GeomArea":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::theme_update":{"description":"The current/active theme (see theme()) is automatically applied to every\nplot you draw. Use theme_get() to get the current theme, and theme_set() to\ncompletely override it. theme_update() and theme_replace() are shorthands for\nchanging individual elements.\n","example_call":"theme_update(...)"},"ggplot2::ggplot_add":{"description":"This generic allows you to add your own methods for adding custom objects to\na ggplot with +.gg.\n","example_call":"ggplot_add(object, plot, object_name)"},"ggplot2::geom_sf_text":{"description":"This set of geom, stat, and coord are used to visualise simple feature (sf)\nobjects. For simple plots, you will only need geom_sf() as it\nuses stat_sf() and adds coord_sf() for you. geom_sf() is\nan unusual geom because it will draw different geometric objects depending\non what simple features are present in the data: you can get points, lines,\nor polygons.\nFor text and labels, you can use geom_sf_text() and geom_sf_label().\n","example_call":"geom_sf_text(mapping = aes(), data = NULL, stat = \"sf_coordinates\","},"ggplot2::update_labels":{"description":"Update axis/legend labels\n","example_call":"update_labels(p, labels)"},"ggplot2::geom_dotplot":{"description":"In a dot plot, the width of a dot corresponds to the bin width\n(or maximum width, depending on the binning algorithm), and dots are\nstacked, with each dot representing one observation.\n","example_call":"geom_dotplot(mapping = NULL, data = NULL, position = \"identity\","},"ggplot2::theme_light":{"description":"These are complete themes which control all non-data display. Use\ntheme() if you just need to tweak the display of an existing\ntheme.\n","example_call":"theme_light(base_size = 11, base_family = \"\", base_line_size = base_size/22,"},"ggplot2::labs":{"description":"Good labels are critical for making your plots accessible to a wider\naudience. Always ensure the axis and legend labels display the full\nvariable name. Use the plot title and subtitle to explain the\nmain findings. It's common to use the caption to provide information\nabout the data source. tag can be used for adding identification tags\nto differentiate between multiple plots.\n","example_call":"labs(..., title = waiver(), subtitle = waiver(), caption = waiver(),"},"ggplot2::scale_color_identity":{"description":"Use this set of scales when your data has already been scaled, i.e. it\nalready represents aesthetic values that ggplot2 can handle directly.\nThese scales will not produce a legend unless you also supply the breaks,\nlabels, and type of guide you want.\n","example_call":"scale_color_identity(name = waiver(), ..., guide = \"none\", aesthetics = \"colour\")"},"ggplot2::GeomBar":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::GeomRasterAnn":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::geom_raster":{"description":"geom_rect() and geom_tile() do the same thing, but are\nparameterised differently: geom_rect() uses the locations of the four\ncorners (xmin, xmax, ymin and ymax), while\ngeom_tile() uses the center of the tile and its size (x,\ny, width, height). geom_raster() is a high\nperformance special case for when all the tiles are the same size, and no\npattern fills are applied.\n","example_call":"geom_raster(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\","},"ggplot2::theme_replace":{"description":"The current/active theme (see theme()) is automatically applied to every\nplot you draw. Use theme_get() to get the current theme, and theme_set() to\ncompletely override it. theme_update() and theme_replace() are shorthands for\nchanging individual elements.\n","example_call":"theme_replace(...)"},"ggplot2::theme":{"description":"Themes are a powerful way to customize the non-data components of your plots:\ni.e. titles, labels, fonts, background, gridlines, and legends. Themes can be\nused to give plots a consistent customized look. Modify a single plot's theme\nusing theme(); see theme_update() if you want modify the active theme, to\naffect all subsequent plots. Use the themes available in complete themes if you would like to use a complete theme such as\ntheme_bw(), theme_minimal(), and more. Theme elements are documented\ntogether according to inheritance, read more about theme inheritance below.\n","example_call":"theme(..., line, rect, text, title, aspect.ratio, axis.title,"},"ggplot2::GeomVline":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::stat_summary":{"description":"stat_summary() operates on unique x or y; stat_summary_bin()\noperates on binned x or y. They are more flexible versions of\nstat_bin(): instead of just counting, they can compute any\naggregate.\n","example_call":"stat_summary(mapping = NULL, data = NULL, geom = \"pointrange\", position = \"identity\","},"ggplot2::is.ggproto":{"description":"Construct a new object with ggproto(), test with is.ggproto(),\nand access parent methods/fields with ggproto_parent().\n","example_call":"is.ggproto(x)"},"ggplot2::scale_x_time":{"description":"These are the default scales for the three date/time class. These will\nusually be added automatically. To override manually, use\n<U+2060>scale_*_date<U+2060> for dates (class Date),\n<U+2060>scale_*_datetime<U+2060> for datetimes (class POSIXct), and\n<U+2060>scale_*_time<U+2060> for times (class hms).\n","example_call":"scale_x_time(name = waiver(), breaks = waiver(), minor_breaks = waiver(),"},"ggplot2::scale_color_steps2":{"description":"<U+2060>scale_*_steps<U+2060> creates a two colour binned gradient (low-high),\n<U+2060>scale_*_steps2<U+2060> creates a diverging binned colour gradient (low-mid-high),\nand <U+2060>scale_*_stepsn<U+2060> creates a n-colour binned gradient. These scales are\nbinned variants of the gradient scale family and\nworks in the same way.\n","example_call":"scale_color_steps2(name = waiver(), ..., low = muted(\"red\"), mid = \"white\","},"ggplot2::GeomHline":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::scale_fill_manual":{"description":"These functions allow you to specify your own set of mappings from levels in the\ndata to aesthetic values.\n","example_call":"scale_fill_manual(..., values, aesthetics = \"fill\", breaks = waiver(),"},"ggplot2::geom_vline":{"description":"These geoms add reference lines (sometimes called rules) to a plot, either\nhorizontal, vertical, or diagonal (specified by slope and intercept).\nThese are useful for annotating plots.\n","example_call":"geom_vline(mapping = NULL, data = NULL, ..., xintercept, na.rm = FALSE,"},"ggplot2::CoordTrans":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::datetime_scale":{"description":"Date/time scale constructor\n","example_call":"datetime_scale(aesthetics, transform, trans = deprecated(), palette,"},"ggplot2::StatEcdf":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::geom_density_2d_filled":{"description":"Perform a 2D kernel density estimation using MASS::kde2d() and\ndisplay the results with contours. This can be useful for dealing with\noverplotting. This is a 2D version of geom_density(). geom_density_2d()\ndraws contour lines, and geom_density_2d_filled() draws filled contour\nbands.\n","example_call":"geom_density_2d_filled(mapping = NULL, data = NULL, stat = \"density_2d_filled\","},"ggplot2::GeomFunction":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::GeomAbline":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::label_value":{"description":"Labeller functions are in charge of formatting the strip labels of\nfacet grids and wraps. Most of them accept a multi_line\nargument to control whether multiple factors (defined in formulae\nsuch as ~first + second) should be displayed on a single\nline separated with commas, or each on their own line.\n","example_call":"label_value(labels, multi_line = TRUE)"},"ggplot2::.expose_data":{"description":"The .ignore_data() function is used to hide <U+2060><AsIs><U+2060> columns during\nscale interactions in ggplot_build(). The .expose_data() function is\nused to restore hidden columns.\n","example_call":".expose_data(data)"},"ggplot2::theme_grey":{"description":"These are complete themes which control all non-data display. Use\ntheme() if you just need to tweak the display of an existing\ntheme.\n","example_call":"theme_grey(base_size = 11, base_family = \"\", base_line_size = base_size/22,"},"ggplot2::coord_flip":{"description":"\n","example_call":"coord_flip(xlim = NULL, ylim = NULL, expand = TRUE, clip = \"on\")"},"ggplot2::position_stack":{"description":"position_stack() stacks bars on top of each other;\nposition_fill() stacks bars and standardises each stack to have\nconstant height.\n","example_call":"position_stack(vjust = 1, reverse = FALSE)"},"ggplot2::StatSummaryHex":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::is.facet":{"description":"Is this object a faceting specification?\n","example_call":"is.facet(x)"},"ggplot2::geom_function":{"description":"Computes and draws a function as a continuous curve. This makes it easy to\nsuperimpose a function on top of an existing plot. The function is called\nwith a grid of evenly spaced values along the x axis, and the results are\ndrawn (by default) with a line.\n","example_call":"geom_function(mapping = NULL, data = NULL, stat = \"function\", position = \"identity\","},"ggplot2::ggtitle":{"description":"Good labels are critical for making your plots accessible to a wider\naudience. Always ensure the axis and legend labels display the full\nvariable name. Use the plot title and subtitle to explain the\nmain findings. It's common to use the caption to provide information\nabout the data source. tag can be used for adding identification tags\nto differentiate between multiple plots.\n","example_call":"ggtitle(label, subtitle = waiver())"},"ggplot2::benchplot":{"description":"Benchmark plot creation time.\nBroken down into construct, build, render and draw times.\n","example_call":"benchplot(x)"},"ggplot2::GeomHex":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::stat_bin2d":{"description":"Divides the plane into rectangles, counts the number of cases in\neach rectangle, and then (by default) maps the number of cases to the\nrectangle's fill. This is a useful alternative to geom_point()\nin the presence of overplotting.\n","example_call":"stat_bin2d(mapping = NULL, data = NULL, geom = \"tile\", position = \"identity\","},"ggplot2::stat_identity":{"description":"The identity statistic leaves the data unchanged.\n","example_call":"stat_identity(mapping = NULL, data = NULL, geom = \"point\", position = \"identity\","},"ggplot2::ggsave":{"description":"ggsave() is a convenient function for saving a plot. It defaults to\nsaving the last plot that you displayed, using the size of the current\ngraphics device. It also guesses the type of graphics device from the\nextension.\n","example_call":"ggsave(filename, plot = last_plot(), device = NULL, path = NULL,"},"ggplot2::scale_colour_fermenter":{"description":"The brewer scales provide sequential, diverging and qualitative\ncolour schemes from ColorBrewer. These are particularly well suited to\ndisplay discrete values on a map. See https://colorbrewer2.org for\nmore information.\n","example_call":"scale_colour_fermenter(name = waiver(), ..., type = \"seq\", palette = 1, direction = -1,"},"ggplot2::geom_jitter":{"description":"The jitter geom is a convenient shortcut for\ngeom_point(position = \"jitter\"). It adds a small amount of random\nvariation to the location of each point, and is a useful way of handling\noverplotting caused by discreteness in smaller datasets.\n","example_call":"geom_jitter(mapping = NULL, data = NULL, stat = \"identity\", position = \"jitter\","},"ggplot2::GeomRug":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::scale_linewidth_discrete":{"description":"scale_linewidth scales the width of lines and polygon strokes. Due to\nhistorical reasons, it is also possible to control this with the size\naesthetic, but using linewidth is encourage to clearly differentiate area\naesthetics from stroke width aesthetics.\n","example_call":"scale_linewidth_discrete(...)"},"ggplot2::ylab":{"description":"Good labels are critical for making your plots accessible to a wider\naudience. Always ensure the axis and legend labels display the full\nvariable name. Use the plot title and subtitle to explain the\nmain findings. It's common to use the caption to provide information\nabout the data source. tag can be used for adding identification tags\nto differentiate between multiple plots.\n","example_call":"ylab(label)"},"ggplot2::get_element_tree":{"description":"The underlying structure of a ggplot2 theme is defined via the element tree, which\nspecifies for each theme element what type it should have and whether it inherits from\na parent element. In some use cases, it may be necessary to modify or extend this\nelement tree and provide default settings for newly defined theme elements.\n","example_call":"get_element_tree()"},"ggplot2::remove_missing":{"description":"Remove all non-complete rows, with a warning if na.rm = FALSE.\nggplot is somewhat more accommodating of missing values than R generally.\nFor those stats which require complete data, missing values will be\nautomatically removed with a warning. If na.rm = TRUE is supplied\nto the statistic, the warning will be suppressed.\n","example_call":"remove_missing(df, na.rm = FALSE, vars = names(df), name = \"\", finite = FALSE)"},"ggplot2::scale_linewidth_datetime":{"description":"scale_linewidth scales the width of lines and polygon strokes. Due to\nhistorical reasons, it is also possible to control this with the size\naesthetic, but using linewidth is encourage to clearly differentiate area\naesthetics from stroke width aesthetics.\n","example_call":"scale_linewidth_datetime(name = waiver(), ..., range = c(1, 6))"},"ggplot2::geom_segment":{"description":"geom_segment() draws a straight line between points (x, y) and\n(xend, yend). geom_curve() draws a curved line. See the underlying\ndrawing function grid::curveGrob() for the parameters that\ncontrol the curve.\n","example_call":"geom_segment(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\","},"ggplot2::stage":{"description":"Most aesthetics are mapped from variables found in the data.\nSometimes, however, you want to delay the mapping until later in the\nrendering process. ggplot2 has three stages of the data that you can map\naesthetics from, and three functions to control at which stage aesthetics\nshould be evaluated.\n","example_call":"stage(start = NULL, after_stat = NULL, after_scale = NULL)"},"ggplot2::scale_fill_gradientn":{"description":"<U+2060>scale_*_gradient<U+2060> creates a two colour gradient (low-high),\n<U+2060>scale_*_gradient2<U+2060> creates a diverging colour gradient (low-mid-high),\n<U+2060>scale_*_gradientn<U+2060> creates a n-colour gradient. For binned variants of\nthese scales, see the color steps scales.\n","example_call":"scale_fill_gradientn(name = waiver(), ..., colours, values = NULL, space = \"Lab\","},"ggplot2::autolayer":{"description":"autolayer() uses ggplot2 to draw a particular layer for an object of a\nparticular class in a single command. This defines the S3 generic that\nother classes and packages can extend.\n","example_call":"autolayer(object, ...)"},"ggplot2::StatEllipse":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::FacetGrid":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::GeomLinerange":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::scale_y_datetime":{"description":"These are the default scales for the three date/time class. These will\nusually be added automatically. To override manually, use\n<U+2060>scale_*_date<U+2060> for dates (class Date),\n<U+2060>scale_*_datetime<U+2060> for datetimes (class POSIXct), and\n<U+2060>scale_*_time<U+2060> for times (class hms).\n","example_call":"scale_y_datetime(name = waiver(), breaks = waiver(), date_breaks = waiver(),"},"ggplot2::theme_get":{"description":"The current/active theme (see theme()) is automatically applied to every\nplot you draw. Use theme_get() to get the current theme, and theme_set() to\ncompletely override it. theme_update() and theme_replace() are shorthands for\nchanging individual elements.\n","example_call":"theme_get()"},"ggplot2::is.theme":{"description":"Reports whether x is a theme object\n","example_call":"is.theme(x)"},"ggplot2::guide_none":{"description":"This guide draws nothing.\n","example_call":"guide_none(title = waiver(), position = waiver())"},"ggplot2::scale_shape_identity":{"description":"Use this set of scales when your data has already been scaled, i.e. it\nalready represents aesthetic values that ggplot2 can handle directly.\nThese scales will not produce a legend unless you also supply the breaks,\nlabels, and type of guide you want.\n","example_call":"scale_shape_identity(name = waiver(), ..., guide = \"none\")"},"ggplot2::merge_element":{"description":"This is a generic and element classes must provide an implementation of this\nmethod\n","example_call":"merge_element(new, old)"},"ggplot2::StatDensity":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::GeomErrorbar":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::scale_color_hue":{"description":"Maps each level to an evenly spaced hue on the colour wheel.\nIt does not generate colour-blind safe palettes.\n","example_call":"scale_color_hue(name = waiver(), ..., h = c(0, 360) + 15, c = 100,"},"ggplot2::geom_col":{"description":"There are two types of bar charts: geom_bar() and geom_col().\ngeom_bar() makes the height of the bar proportional to the number of\ncases in each group (or if the weight aesthetic is supplied, the sum\nof the weights). If you want the heights of the bars to represent values\nin the data, use geom_col() instead. geom_bar() uses stat_count() by\ndefault: it counts the number of cases at each x position. geom_col()\nuses stat_identity(): it leaves the data as is.\n","example_call":"geom_col(mapping = NULL, data = NULL, position = \"stack\", ...,"},"ggplot2::translate_shape_string":{"description":"translate_shape_string() is a helper function for translating point shapes\ngiven as a character vector into integers that are interpreted by the\ngrid system.\n","example_call":"translate_shape_string(shape_string)"},"ggplot2::theme_bw":{"description":"These are complete themes which control all non-data display. Use\ntheme() if you just need to tweak the display of an existing\ntheme.\n","example_call":"theme_bw(base_size = 11, base_family = \"\", base_line_size = base_size/22,"},"ggplot2::coord_radial":{"description":"The polar coordinate system is most commonly used for pie charts, which\nare a stacked bar chart in polar coordinates. coord_radial() has extended\noptions.\n","example_call":"coord_radial(theta = \"x\", start = 0, end = NULL, expand = TRUE,"},"ggplot2::guide_coloursteps":{"description":"This guide is version of guide_colourbar() for binned colour and fill\nscales. It shows areas between breaks as a single constant colour instead of\nthe gradient known from the colourbar counterpart.\n","example_call":"guide_coloursteps(title = waiver(), theme = NULL, alpha = NA, even.steps = TRUE,"},"ggplot2::aes_":{"description":"\n","example_call":"aes_(x, y, ...)"},"ggplot2::draw_key_polygon":{"description":"Each geom has an associated function that draws the key when the geom needs\nto be displayed in a legend. These functions are called <U+2060>draw_key_*()<U+2060>, where\n* stands for the name of the respective key glyph. The key glyphs can be\ncustomized for individual geoms by providing a geom with the key_glyph\nargument (see layer() or examples below.)\n","example_call":"draw_key_polygon(data, params, size)"},"ggplot2::ggproto":{"description":"Construct a new object with ggproto(), test with is.ggproto(),\nand access parent methods/fields with ggproto_parent().\n","example_call":"ggproto(`_class` = NULL, `_inherit` = NULL, ...)"},"ggplot2::StatDensity2dFilled":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::pattern_alpha":{"description":"This generic allows you to add your own methods for adding transparency to\npattern-like objects.\n","example_call":"pattern_alpha(x, alpha)"},"ggplot2::position_jitterdodge":{"description":"This is primarily used for aligning points generated through\ngeom_point() with dodged boxplots (e.g., a geom_boxplot() with\na fill aesthetic supplied).\n","example_call":"position_jitterdodge(jitter.width = NULL, jitter.height = 0, dodge.width = 0.75,"},"ggplot2::scale_y_sqrt":{"description":"scale_x_continuous() and scale_y_continuous() are the default\nscales for continuous x and y aesthetics. There are three variants\nthat set the transform argument for commonly used transformations:\n<U+2060>scale_*_log10()<U+2060>, <U+2060>scale_*_sqrt()<U+2060> and <U+2060>scale_*_reverse()<U+2060>.\n","example_call":"scale_y_sqrt(...)"},"ggplot2::scale_y_binned":{"description":"scale_x_binned() and scale_y_binned() are scales that discretize\ncontinuous position data. You can use these scales to transform continuous\ninputs before using it with a geom that requires discrete positions. An\nexample is using scale_x_binned() with geom_bar() to create a histogram.\n","example_call":"scale_y_binned(name = waiver(), n.breaks = 10, nice.breaks = TRUE,"},"ggplot2::geom_smooth":{"description":"Aids the eye in seeing patterns in the presence of overplotting.\ngeom_smooth() and stat_smooth() are effectively aliases: they\nboth use the same arguments. Use stat_smooth() if you want to\ndisplay the results with a non-standard geom.\n","example_call":"geom_smooth(mapping = NULL, data = NULL, stat = \"smooth\", position = \"identity\","},"ggplot2::last_plot":{"description":"Retrieve the last plot to be modified or created.\n","example_call":"last_plot()"},"ggplot2::scale_colour_datetime":{"description":"<U+2060>scale_*_gradient<U+2060> creates a two colour gradient (low-high),\n<U+2060>scale_*_gradient2<U+2060> creates a diverging colour gradient (low-mid-high),\n<U+2060>scale_*_gradientn<U+2060> creates a n-colour gradient. For binned variants of\nthese scales, see the color steps scales.\n","example_call":"scale_colour_datetime(name = waiver(), ..., low = \"#132B43\", high = \"#56B1F7\","},"ggplot2::StatSfCoordinates":{"description":"stat_sf_coordinates() extracts the coordinates from 'sf' objects and\nsummarises them to one pair of coordinates (x and y) per geometry. This is\nconvenient when you draw an sf object as geoms like text and labels (so\ngeom_sf_text() and geom_sf_label() relies on this).\n","example_call":"NULL"},"ggplot2::annotation_logticks":{"description":"\n","example_call":"annotation_logticks(base = 10, sides = \"bl\", outside = FALSE, scaled = TRUE,"},"ggplot2::scale_y_reverse":{"description":"scale_x_continuous() and scale_y_continuous() are the default\nscales for continuous x and y aesthetics. There are three variants\nthat set the transform argument for commonly used transformations:\n<U+2060>scale_*_log10()<U+2060>, <U+2060>scale_*_sqrt()<U+2060> and <U+2060>scale_*_reverse()<U+2060>.\n","example_call":"scale_y_reverse(...)"},"ggplot2::resolution":{"description":"The resolution is the smallest non-zero distance between adjacent\nvalues.  If there is only one unique value, then the resolution is defined\nto be one. If x is an integer vector, then it is assumed to represent a\ndiscrete variable, and the resolution is 1.\n","example_call":"resolution(x, zero = TRUE, discrete = FALSE)"},"ggplot2::coord_quickmap":{"description":"\n","example_call":"coord_quickmap(xlim = NULL, ylim = NULL, expand = TRUE, clip = \"on\")"},"ggplot2::%+%":{"description":"+ is the key to constructing sophisticated ggplot2 graphics. It\nallows you to start simple, then get more and more complex, checking your\nwork at each step.\n","example_call":"%+%(e1, e2)"},"ggplot2::scale_fill_gradient2":{"description":"<U+2060>scale_*_gradient<U+2060> creates a two colour gradient (low-high),\n<U+2060>scale_*_gradient2<U+2060> creates a diverging colour gradient (low-mid-high),\n<U+2060>scale_*_gradientn<U+2060> creates a n-colour gradient. For binned variants of\nthese scales, see the color steps scales.\n","example_call":"scale_fill_gradient2(name = waiver(), ..., low = muted(\"red\"), mid = \"white\","},"ggplot2::geom_freqpoly":{"description":"Visualise the distribution of a single continuous variable by dividing\nthe x axis into bins and counting the number of observations in each bin.\nHistograms (geom_histogram()) display the counts with bars; frequency\npolygons (geom_freqpoly()) display the counts with lines. Frequency\npolygons are more suitable when you want to compare the distribution\nacross the levels of a categorical variable.\n","example_call":"geom_freqpoly(mapping = NULL, data = NULL, stat = \"bin\", position = \"identity\","},"ggplot2::guide_axis_logticks":{"description":"This axis guide replaces the placement of ticks marks at intervals in\nlog10 space.\n","example_call":"guide_axis_logticks(long = 2.25, mid = 1.5, short = 0.75, prescale.base = NULL,"},"ggplot2::element_text":{"description":"In conjunction with the theme system, the element_ functions\nspecify the display of how non-data components of the plot are drawn.\n","example_call":"element_text(family = NULL, face = NULL, colour = NULL, size = NULL,"},"ggplot2::old_guide":{"description":"The guide system has been overhauled to use the ggproto infrastructure to\naccommodate guide extensions with the same flexibility as layers, scales and\nother ggplot2 objects. In rewriting, the old S3 system has become defunct,\nmeaning that the previous methods for guides have been superseded by ggproto\nmethods. As a fallback option, the generics, but not the methods, that the\nprevious S3 system used are encapsulated in the GuideOld ggproto class.\n","example_call":"old_guide(guide)"},"ggplot2::GeomCustomAnn":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::StatSummary2d":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::GuideBins":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::GeomSf":{"description":"This set of geom, stat, and coord are used to visualise simple feature (sf)\nobjects. For simple plots, you will only need geom_sf() as it\nuses stat_sf() and adds coord_sf() for you. geom_sf() is\nan unusual geom because it will draw different geometric objects depending\non what simple features are present in the data: you can get points, lines,\nor polygons.\nFor text and labels, you can use geom_sf_text() and geom_sf_label().\n","example_call":"NULL"},"ggplot2::guide_axis_stack":{"description":"This guide can stack other position guides that represent position scales,\nlike those created with scale_(x|y)_continuous() and\nscale_(x|y)_discrete().\n","example_call":"guide_axis_stack(first = \"axis\", ..., title = waiver(), theme = NULL,"},"ggplot2::scale_colour_date":{"description":"<U+2060>scale_*_gradient<U+2060> creates a two colour gradient (low-high),\n<U+2060>scale_*_gradient2<U+2060> creates a diverging colour gradient (low-mid-high),\n<U+2060>scale_*_gradientn<U+2060> creates a n-colour gradient. For binned variants of\nthese scales, see the color steps scales.\n","example_call":"scale_colour_date(name = waiver(), ..., low = \"#132B43\", high = \"#56B1F7\","},"ggplot2::geom_pointrange":{"description":"Various ways of representing a vertical interval defined by x,\nymin and ymax. Each case draws a single graphical object.\n","example_call":"geom_pointrange(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\","},"ggplot2::GeomText":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::waiver":{"description":"A waiver is a \"flag\" object, similar to NULL, that indicates the\ncalling function should just use the default value.  It is used in certain\nfunctions to distinguish between displaying nothing (NULL) and\ndisplaying a default value calculated elsewhere (waiver())\n","example_call":"waiver()"},"ggplot2::StatContour":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::ScaleDiscrete":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::theme_gray":{"description":"These are complete themes which control all non-data display. Use\ntheme() if you just need to tweak the display of an existing\ntheme.\n","example_call":"theme_gray(base_size = 11, base_family = \"\", base_line_size = base_size/22,"},"ggplot2::guide_bins":{"description":"This guide is a version of the guide_legend() guide for binned scales. It\ndiffers in that it places ticks correctly between the keys, and sports a\nsmall axis to better show the binning. Like guide_legend() it can be used\nfor all non-position aesthetics though colour and fill defaults to\nguide_coloursteps(), and it will merge aesthetics together into the same\nguide if they are mapped in the same way.\n","example_call":"guide_bins(title = waiver(), theme = NULL, position = NULL, direction = NULL,"},"ggplot2::CoordQuickmap":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::StatSummaryBin":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::scale_linetype":{"description":"Default line types based on a set supplied by Richard Pearson,\nUniversity of Manchester. Continuous values can not be mapped to\nline types unless scale_linetype_binned() is used. Still, as linetypes has\nno inherent order, this use is not advised.\n","example_call":"scale_linetype(name = waiver(), ..., na.value = \"blank\")"},"ggplot2::summarise_layers":{"description":"These functions provide summarised information about built ggplot objects.\n","example_call":"summarise_layers(p)"},"ggplot2::stat_contour_filled":{"description":"ggplot2 can not draw true 3D surfaces, but you can use geom_contour(),\ngeom_contour_filled(), and geom_tile() to visualise 3D surfaces in 2D.\n","example_call":"stat_contour_filled(mapping = NULL, data = NULL, geom = \"contour_filled\","},"ggplot2::flipped_names":{"description":"These functions are what underpins the ability of certain geoms to work\nautomatically in both directions. See the Extending ggplot2 vignette for\nhow they are used when implementing Geom, Stat, and Position classes.\n","example_call":"flipped_names(flip = FALSE)"},"ggplot2::scale_size_binned_area":{"description":"scale_size() scales area, scale_radius() scales radius. The size\naesthetic is most commonly used for points and text, and humans perceive\nthe area of points (not their radius), so this provides for optimal\nperception. scale_size_area() ensures that a value of 0 is mapped\nto a size of 0. scale_size_binned() is a binned version of scale_size() that\nscales by area (but does not ensure 0 equals an area of zero). For a binned\nequivalent of scale_size_area() use scale_size_binned_area().\n","example_call":"scale_size_binned_area(name = waiver(), ..., max_size = 6)"},"ggplot2::scale_discrete_identity":{"description":"Use this set of scales when your data has already been scaled, i.e. it\nalready represents aesthetic values that ggplot2 can handle directly.\nThese scales will not produce a legend unless you also supply the breaks,\nlabels, and type of guide you want.\n","example_call":"scale_discrete_identity(aesthetics, name = waiver(), ..., guide = \"none\")"},"ggplot2::guide_train":{"description":"The guide system has been overhauled to use the ggproto infrastructure to\naccommodate guide extensions with the same flexibility as layers, scales and\nother ggplot2 objects. In rewriting, the old S3 system has become defunct,\nmeaning that the previous methods for guides have been superseded by ggproto\nmethods. As a fallback option, the generics, but not the methods, that the\nprevious S3 system used are encapsulated in the GuideOld ggproto class.\n","example_call":"guide_train(guide, scale, aesthetic = NULL)"},"ggplot2::GeomRect":{"description":"If you are creating a new geom, stat, position, or scale in another package,\nyou'll need to extend from ggplot2::Geom, ggplot2::Stat,\nggplot2::Position, or ggplot2::Scale.\n","example_call":"NULL"},"ggplot2::register_theme_elements":{"description":"The underlying structure of a ggplot2 theme is defined via the element tree, which\nspecifies for each theme element what type it should have and whether it inherits from\na parent element. In some use cases, it may be necessary to modify or extend this\nelement tree and provide default settings for newly defined theme elements.\n","example_call":"register_theme_elements(..., element_tree = NULL, complete = TRUE)"},"ggplot2::zeroGrob":{"description":"The zero grob draws nothing and has zero size.\n","example_call":"zeroGrob()"},"ggplot2::mean_sdl":{"description":"These are wrappers around functions from Hmisc designed to make them\neasier to use with stat_summary(). See the Hmisc documentation\nfor more details:\n","example_call":"mean_sdl(x, ...)"},"ggplot2::stat_summary2d":{"description":"stat_summary_2d() is a 2d variation of stat_summary().\nstat_summary_hex() is a hexagonal variation of\nstat_summary_2d(). The data are divided into bins defined\nby x and y, and then the values of z in each cell is\nare summarised with fun.\n","example_call":"stat_summary2d(...)"},"ggplot2::guide_axis_theta":{"description":"This is a specialised guide used in coord_radial() to represent the theta\nposition scale.\n","example_call":"guide_axis_theta(title = waiver(), theme = NULL, angle = waiver(), minor.ticks = FALSE,"},"ggplot2::stat_sf":{"description":"This set of geom, stat, and coord are used to visualise simple feature (sf)\nobjects. For simple plots, you will only need geom_sf() as it\nuses stat_sf() and adds coord_sf() for you. geom_sf() is\nan unusual geom because it will draw different geometric objects depending\non what simple features are present in the data: you can get points, lines,\nor polygons.\nFor text and labels, you can use geom_sf_text() and geom_sf_label().\n","example_call":"stat_sf(mapping = NULL, data = NULL, geom = \"rect\", position = \"identity\","},"ggplot2::geom_linerange":{"description":"Various ways of representing a vertical interval defined by x,\nymin and ymax. Each case draws a single graphical object.\n","example_call":"geom_linerange(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\","},"ggplot2::scale_colour_continuous":{"description":"The scales scale_colour_continuous() and scale_fill_continuous() are\nthe default colour scales ggplot2 uses when continuous data values are\nmapped onto the colour or fill aesthetics, respectively. The scales\nscale_colour_binned() and scale_fill_binned() are equivalent scale\nfunctions that assign discrete color bins to the continuous values\ninstead of using a continuous color spectrum.\n","example_call":"scale_colour_continuous(..., type = getOption(\"ggplot2.continuous.colour\"))"},"ggplot2::max_height":{"description":"Get the maximal width/length of a list of grobs\n","example_call":"max_height(grobs, value_only = FALSE)"},"ggplot2::mean_cl_boot":{"description":"These are wrappers around functions from Hmisc designed to make them\neasier to use with stat_summary(). See the Hmisc documentation\nfor more details:\n","example_call":"mean_cl_boot(x, ...)"},"ggplot2::ggplot_build":{"description":"ggplot_build() takes the plot object, and performs all steps necessary\nto produce an object that can be rendered.  This function outputs two pieces:\na list of data frames (one for each layer), and a panel object, which\ncontain all information about axis limits, breaks etc.\n","example_call":"ggplot_build(plot)"},"glue::glue_safe":{"description":"glue_safe() and glue_data_safe() differ from glue() and glue_data()\nin that the safe versions only look up symbols from an environment using\nget(). They do not execute any R code. This makes them suitable for use\nwith untrusted input, such as inputs in a Shiny application, where using the\nnormal functions would allow an attacker to execute arbitrary code.\n","example_call":"glue_safe(..., .envir = parent.frame())"},"glue::trim":{"description":"This trims a character vector according to the trimming rules used by glue.\nThese follow similar rules to Python Docstrings,\nwith the following features.\n","example_call":"trim(x)"},"glue::glue_sql":{"description":"SQL databases often have custom quotation syntax for identifiers and strings\nwhich make writing SQL queries error prone and cumbersome to do. glue_sql() and\nglue_data_sql() are analogs to glue() and glue_data() which handle the\nSQL quoting. glue_sql_collapse() can be used to collapse DBI::SQL() objects.\n","example_call":"glue_sql(..., .con, .sep = \"\", .envir = parent.frame(), .open = \"{\","},"glue::single_quote":{"description":"These functions make it easy to quote each individual element and are useful\nin conjunction with glue_collapse(). These are thin wrappers around\nbase::encodeString().\n","example_call":"single_quote(x)"},"glue::as_glue":{"description":"A glue object is a character vector with S3 class \"glue\". The \"glue\"\nclass implements a print method that shows the literal contents (rather than\nthe string implementation) and a + method, so that you can concatenate with\nthe addition operator.\n","example_call":"as_glue(x, ...)"},"glue::glue_data_safe":{"description":"glue_safe() and glue_data_safe() differ from glue() and glue_data()\nin that the safe versions only look up symbols from an environment using\nget(). They do not execute any R code. This makes them suitable for use\nwith untrusted input, such as inputs in a Shiny application, where using the\nnormal functions would allow an attacker to execute arbitrary code.\n","example_call":"glue_data_safe(.x, ..., .envir = parent.frame())"},"glue::glue_col":{"description":"The crayon package defines a number of functions used to\ncolor terminal output. glue_col() and glue_data_col() functions provide\nadditional syntax to make using these functions in glue strings easier.\n","example_call":"glue_col(..., .envir = parent.frame(), .na = \"NA\", .literal = FALSE)"},"glue::glue":{"description":"Expressions enclosed by braces will be evaluated as R code. Long strings are\nbroken by line and concatenated together. Leading whitespace and blank lines\nfrom the first and last lines are automatically trimmed.\n","example_call":"glue(..., .sep = \"\", .envir = parent.frame(), .open = \"{\","},"glue::backtick":{"description":"These functions make it easy to quote each individual element and are useful\nin conjunction with glue_collapse(). These are thin wrappers around\nbase::encodeString().\n","example_call":"backtick(x)"},"glue::glue_collapse":{"description":"glue_collapse() collapses a character vector of any length into a length 1 vector.\nglue_sql_collapse() does the same but returns a <U+2060>[DBI::SQL()]<U+2060>\nobject rather than a glue object.\n","example_call":"glue_collapse(x, sep = \"\", width = Inf, last = \"\")"},"glue::glue_sql_collapse":{"description":"glue_collapse() collapses a character vector of any length into a length 1 vector.\nglue_sql_collapse() does the same but returns a <U+2060>[DBI::SQL()]<U+2060>\nobject rather than a glue object.\n","example_call":"glue_sql_collapse(x, sep = \"\", width = Inf, last = \"\")"},"glue::glue_data_sql":{"description":"SQL databases often have custom quotation syntax for identifiers and strings\nwhich make writing SQL queries error prone and cumbersome to do. glue_sql() and\nglue_data_sql() are analogs to glue() and glue_data() which handle the\nSQL quoting. glue_sql_collapse() can be used to collapse DBI::SQL() objects.\n","example_call":"glue_data_sql(.x, ..., .con, .sep = \"\", .envir = parent.frame(),"},"glue::glue_data":{"description":"Expressions enclosed by braces will be evaluated as R code. Long strings are\nbroken by line and concatenated together. Leading whitespace and blank lines\nfrom the first and last lines are automatically trimmed.\n","example_call":"glue_data(.x, ..., .sep = \"\", .envir = parent.frame(), .open = \"{\","},"glue::double_quote":{"description":"These functions make it easy to quote each individual element and are useful\nin conjunction with glue_collapse(). These are thin wrappers around\nbase::encodeString().\n","example_call":"double_quote(x)"},"glue::identity_transformer":{"description":"This is a simple wrapper around eval(parse()), used as the default\ntransformer.\n","example_call":"identity_transformer(text, envir = parent.frame())"},"glue::glue_data_col":{"description":"The crayon package defines a number of functions used to\ncolor terminal output. glue_col() and glue_data_col() functions provide\nadditional syntax to make using these functions in glue strings easier.\n","example_call":"glue_data_col(.x, ..., .envir = parent.frame(), .na = \"NA\", .literal = FALSE)"},"graphics::polypath":{"description":"path draws a path whose vertices are\ngiven in x and y.\n","example_call":"polypath(x, y = NULL, border = NULL, col = NA, lty = par(\"lty\"),"},"graphics::sunflowerplot":{"description":"Multiple points are plotted as <U+2018>sunflowers<U+2019> with multiple leaves\n(<U+2018>petals<U+2019>) such that overplotting is visualized instead of\naccidental and invisible.\n","example_call":"sunflowerplot(x, ...)"},"graphics::plot.new":{"description":"This function (frame is an alias for\nplot.new) causes the completion of plotting in the current plot\n(if there is one) and an advance to a new graphics frame.  This is\nused in all high-level plotting functions and also useful for skipping\nplots when a multi-figure region is in use.\n","example_call":"plot.new()"},"graphics::layout.show":{"description":"layout divides the device up into as many rows and columns as\nthere are in matrix mat, with the column-widths and the\nrow-heights specified in the respective arguments.\n","example_call":"layout.show(n = 1)"},"graphics::matplot":{"description":"Plot the columns of one matrix against the columns of another (which\noften is just a vector treated as 1-column matrix).\n","example_call":"matplot(x, y, type = \"p\", lty = 1:5, lwd = 1, lend = par(\"lend\"),"},"graphics::boxplot":{"description":"Produce box-and-whisker plot(s) of the given (grouped) values.\n","example_call":"boxplot(x, ...)"},"graphics::panel.smooth":{"description":"An example of a simple useful panel function to be used as\nargument in e.g., coplot or pairs.\n","example_call":"panel.smooth(x, y, col = par(\"col\"), bg = NA, pch = par(\"pch\"),"},"graphics::box":{"description":"This function draws a box around the current plot in the given color\nand line type.  The bty parameter determines\nthe type of box drawn.  See par for details.\n","example_call":"box(which = \"plot\", lty = \"solid\", ...)"},"graphics::lcm":{"description":"layout divides the device up into as many rows and columns as\nthere are in matrix mat, with the column-widths and the\nrow-heights specified in the respective arguments.\n","example_call":"lcm(x)"},"graphics::locator":{"description":"Reads the position of the graphics cursor when the (first) mouse\nbutton is pressed.\n","example_call":"locator(n = 512, type = \"n\", ...)"},"graphics::plot.design":{"description":"Plot univariate effects of one or more factors,\ntypically for a designed experiment as analyzed by aov().\n","example_call":"plot.design(x, y = NULL, fun = mean, data = NULL, ..., ylim = NULL,"},"graphics::barplot.default":{"description":"Creates a bar plot with vertical or horizontal bars.\n","example_call":"barplot.default(height, width = 1, space = NULL, names.arg = NULL,"},"graphics::axis.POSIXct":{"description":"Add a date/time axis to the current plot of an object of class\n\"POSIXt\" or \"Date\", respectively.\n","example_call":"axis.POSIXct(side, x, at, format, labels = TRUE, ...)"},"graphics::curve":{"description":"Draws a curve corresponding to a function over the interval\n[from, to]. curve can plot also an expression in the variable\nxname, default <U+2018><U+2060>x<U+2060><U+2019>.\n","example_call":"curve(expr, from = NULL, to = NULL, n = 101, add = FALSE,"},"graphics::matpoints":{"description":"Plot the columns of one matrix against the columns of another (which\noften is just a vector treated as 1-column matrix).\n","example_call":"matpoints(x, y, type = \"p\", lty = 1:5, lwd = 1, pch = NULL, col = 1:6,"},"graphics::plot.default":{"description":"Draw a scatter plot with decorations such as axes and titles\nin the active graphics window.\n","example_call":"plot.default(x, y = NULL, type = \"p\", xlim = NULL, ylim = NULL,"},"graphics::pairs.default":{"description":"A matrix of scatterplots is produced.\n","example_call":"pairs.default(x, labels, panel = points, ..., horInd = 1:nc, verInd = 1:nc,"},"graphics::coplot":{"description":"This function produces two variants of the conditioning plots\ndiscussed in the reference below.\n","example_call":"coplot(formula, data, given.values, panel = points, rows,"},"graphics::par":{"description":"par can be used to set or query graphical parameters.\nParameters can be set by specifying them as arguments to par in\ntag = value form, or by passing them as a list of tagged\nvalues.\n","example_call":"par(..., no.readonly = FALSE)"},"graphics::co.intervals":{"description":"This function produces two variants of the conditioning plots\ndiscussed in the reference below.\n","example_call":"co.intervals(x, number = 6, overlap = 0.5)"},"graphics::hist.default":{"description":"The generic function hist computes a histogram of the given\ndata values.  If plot = TRUE, the resulting object of\nclass \"histogram\" is plotted by\nplot.histogram, before it is returned.\n","example_call":"hist.default(x, breaks = \"Sturges\", freq = NULL, probability = !freq,"},"graphics::xyinch":{"description":"xinch and yinch convert the specified number of inches\ngiven as their arguments into the correct units for plotting with\ngraphics functions.  Usually, this only makes sense when normal\ncoordinates are used, i.e., no log scale (see the\nlog argument to par).\n","example_call":"xyinch(xy = 1, warn.log = TRUE)"},"graphics::mtext":{"description":"Text is written in one of the four margins of the current figure region\nor one of the outer margins of the device region.\n","example_call":"mtext(text, side = 3, line = 0, outer = FALSE, at = NA, adj = NA,"},"graphics::frame":{"description":"This function (frame is an alias for\nplot.new) causes the completion of plotting in the current plot\n(if there is one) and an advance to a new graphics frame.  This is\nused in all high-level plotting functions and also useful for skipping\nplots when a multi-figure region is in use.\n","example_call":"frame()"},"graphics::screen":{"description":"split.screen defines a number of regions within the current\ndevice which can, to some extent, be treated as separate graphics\ndevices.  It is useful for generating multiple plots on a single\ndevice.  Screens can themselves be split, allowing for quite complex\narrangements of plots.\n","example_call":"screen(n = cur.screen, new = TRUE)"},"graphics::image.default":{"description":"Creates a grid of colored or gray-scale rectangles with colors\ncorresponding to the values in z.  This can be used to display\nthree-dimensional or spatial data aka images.\nThis is a generic function.\n","example_call":"image.default(x = seq(0, 1, length.out = nrow(z)), y = seq(0, 1,"},"graphics::boxplot.default":{"description":"Produce box-and-whisker plot(s) of the given (grouped) values.\n","example_call":"boxplot.default(x, ..., range = 1.5, width = NULL, varwidth = FALSE,"},"graphics::stem":{"description":"stem produces a stem-and-leaf plot of the values in x.\nThe parameter scale can be used to expand the scale of the\nplot.  A value of scale = 2 will cause the plot to be roughly\ntwice as long as the default.\n","example_call":"stem(x, scale = 1, width = 80, atom = 1e-08)"},"graphics::polygon":{"description":"polygon draws the polygons whose vertices are\ngiven in x and y.\n","example_call":"polygon(x, y = NULL, density = NULL, angle = 45, border = NULL,"},"graphics::stars":{"description":"Draw star plots or segment diagrams of a multivariate data set.\nWith one single location, also draws <U+2018>spider<U+2019>\n(or <U+2018>radar<U+2019>) plots.\n","example_call":"stars(x, full = TRUE, scale = TRUE, radius = TRUE, labels = dimnames(x)[[1L]],"},"graphics::lines":{"description":"A generic function taking coordinates given in various ways and\njoining the corresponding points with line segments.\n","example_call":"lines(x, ...)"},"graphics::symbols":{"description":"This function draws symbols on a plot.  One of six symbols;\ncircles, squares, rectangles, stars,\nthermometers, and boxplots, can be plotted at a\nspecified set of x and y coordinates.  Specific aspects of the\nsymbols, such as relative size, can be customized by additional\nparameters.\n","example_call":"symbols(x, y = NULL, circles, squares, rectangles, stars, thermometers,"},"graphics::pairs":{"description":"A matrix of scatterplots is produced.\n","example_call":"pairs(x, ...)"},"graphics::points":{"description":"points is a generic function to draw a sequence of points at\nthe specified coordinates.  The specified character(s) are plotted,\ncentered at the coordinates.\n","example_call":"points(x, ...)"},"graphics::grconvertX":{"description":"Convert between graphics coordinate systems.\n","example_call":"grconvertX(x, from = \"user\", to = \"user\")"},"graphics::assocplot":{"description":"Produce a Cohen-Friendly association plot indicating deviations from\nindependence of rows and columns in a 2-dimensional contingency\ntable.\n","example_call":"assocplot(x, col = c(\"black\", \"red\"), space = 0.3, main = NULL,"},"graphics::spineplot":{"description":"Spine plots are a special cases of mosaic plots, and can be seen as\na generalization of stacked (or highlighted) bar plots. Analogously,\nspinograms are an extension of histograms.\n","example_call":"spineplot(x, ...)"},"graphics::grconvertY":{"description":"Convert between graphics coordinate systems.\n","example_call":"grconvertY(y, from = \"user\", to = \"user\")"},"graphics::title":{"description":"This function can be used to add labels to a plot.  Its first four\nprincipal arguments can also be used as arguments in most high-level\nplotting functions.  They must be of type character or\nexpression. In the latter case, quite a bit of\nmathematical notation is available such as sub- and superscripts,\nGreek letters, fractions, etc: see plotmath\n","example_call":"title(main = NULL, sub = NULL, xlab = NULL, ylab = NULL,"},"graphics::barplot":{"description":"Creates a bar plot with vertical or horizontal bars.\n","example_call":"barplot(height, ...)"},"graphics::persp":{"description":"This function draws perspective plots of a surface over the\nx<U+2013>y plane.  persp is a generic function.\n","example_call":"persp(x, ...)"},"graphics::legend":{"description":"This function can be used to add legends to plots.  Note that a call\nto the function locator(1) can be used in place of the x\nand y arguments.\n","example_call":"legend(x, y = NULL, legend, fill = NULL, col = par(\"col\"),"},"graphics::identify":{"description":"identify reads the position of the graphics pointer when the\n(first) mouse button is pressed.  It then searches the coordinates\ngiven in x and y for the point closest to the pointer.\nIf this point is close enough to the pointer, its index will be returned as\npart of the value of the call.\n","example_call":"identify(x, ...)"},"graphics::image":{"description":"Creates a grid of colored or gray-scale rectangles with colors\ncorresponding to the values in z.  This can be used to display\nthree-dimensional or spatial data aka images.\nThis is a generic function.\n","example_call":"image(x, ...)"},"graphics::filled.contour":{"description":"This function produces a contour plot with the areas between the\ncontours filled in solid color (Cleveland calls this a level plot).  A\nkey showing how the colors map to z values is shown to the right of\nthe plot.\n","example_call":"filled.contour(x = seq(0, 1, length.out = nrow(z)), y = seq(0, 1,"},"graphics::lines.default":{"description":"A generic function taking coordinates given in various ways and\njoining the corresponding points with line segments.\n","example_call":"lines.default(x, y = NULL, type = \"l\", ...)"},"graphics::hist":{"description":"The generic function hist computes a histogram of the given\ndata values.  If plot = TRUE, the resulting object of\nclass \"histogram\" is plotted by\nplot.histogram, before it is returned.\n","example_call":"hist(x, ...)"},"graphics::stripchart":{"description":"stripchart produces one dimensional scatter plots (or dot\nplots) of the given data.  These plots are a good alternative to\nboxplots when sample sizes are small.\n","example_call":"stripchart(x, ...)"},"graphics::contour":{"description":"Create a contour plot, or add contour lines to an existing plot.\n","example_call":"contour(x, ...)"},"graphics::plot.function":{"description":"Draws a curve corresponding to a function over the interval\n[from, to]. curve can plot also an expression in the variable\nxname, default <U+2018><U+2060>x<U+2060><U+2019>.\n","example_call":"plot.function(x, y = 0, to = 1, from = y, xlim = NULL, ylab = NULL,"},"graphics::mosaicplot":{"description":"Plots a mosaic on the current graphics device.","example_call":"mosaicplot(x, ...)"},"graphics::fourfoldplot":{"description":"Creates a fourfold display of a 2 by 2 by k contingency table on\nthe current graphics device, allowing for the visual inspection of the\nassociation between two dichotomous variables in one or several\npopulations (strata).\n","example_call":"fourfoldplot(x, color = c(\"#99CCFF\", \"#6699CC\"), conf.level = 0.95,"},"graphics::split.screen":{"description":"split.screen defines a number of regions within the current\ndevice which can, to some extent, be treated as separate graphics\ndevices.  It is useful for generating multiple plots on a single\ndevice.  Screens can themselves be split, allowing for quite complex\narrangements of plots.\n","example_call":"split.screen(figs, screen, erase = TRUE)"},"graphics::smoothScatter":{"description":"smoothScatter produces a smoothed color density\nrepresentation of a scatterplot, obtained through a (2D) kernel\ndensity estimate.\n","example_call":"smoothScatter(x, y = NULL, nbin = 128, bandwidth, colramp = colorRampPalette(c(\"white\","},"graphics::matlines":{"description":"Plot the columns of one matrix against the columns of another (which\noften is just a vector treated as 1-column matrix).\n","example_call":"matlines(x, y, type = \"l\", lty = 1:5, lwd = 1, pch = NULL, col = 1:6,"},"graphics::axTicks":{"description":"Compute pretty tickmark locations, the same way as R does internally.\nThis is only non-trivial when log coordinates are active.\nBy default, gives the at values which\naxis(side) would use.\n","example_call":"axTicks(side, axp = NULL, usr = NULL, log = NULL, nintLog = NULL)"},"graphics::arrows":{"description":"Draw arrows between pairs of points.\n","example_call":"arrows(x0, y0, x1 = x0, y1 = y0, length = 0.25, angle = 30,"},"graphics::text.default":{"description":"text draws the strings given in the vector labels at the\ncoordinates given by x and y.\ny may be missing since xy.coords(x, y) is used for\nconstruction of the coordinates.\n","example_call":"text.default(x, y = NULL, labels = seq_along(x$x), adj = NULL, pos = NULL,"},"graphics::points.default":{"description":"points is a generic function to draw a sequence of points at\nthe specified coordinates.  The specified character(s) are plotted,\ncentered at the coordinates.\n","example_call":"points.default(x, y = NULL, type = \"p\", ...)"},"graphics::xinch":{"description":"xinch and yinch convert the specified number of inches\ngiven as their arguments into the correct units for plotting with\ngraphics functions.  Usually, this only makes sense when normal\ncoordinates are used, i.e., no log scale (see the\nlog argument to par).\n","example_call":"xinch(x = 1, warn.log = TRUE)"},"graphics::dotchart":{"description":"Draw a Cleveland dot plot.\n","example_call":"dotchart(x, labels = NULL, groups = NULL, gdata = NULL, offset = 1/8,"},"graphics::strheight":{"description":"These functions compute the width or height, respectively, of the\ngiven strings or mathematical expressions s[i] on\nthe current plotting device in user coordinates, inches\nor as fraction of the figure width par(\"fin\").\n","example_call":"strheight(s, units = \"user\", cex = NULL, font = NULL, vfont = NULL,"},"graphics::rect":{"description":"rect draws a rectangle (or sequence of rectangles) with the\ngiven coordinates, fill and border colors.\n","example_call":"rect(xleft, ybottom, xright, ytop, density = NULL, angle = 45,"},"graphics::grid":{"description":"grid adds an nx by ny rectangular grid to an\nexisting plot.\n","example_call":"grid(nx = NULL, ny = nx, col = \"lightgray\", lty = \"dotted\","},"graphics::.filled.contour":{"description":"This function produces a contour plot with the areas between the\ncontours filled in solid color (Cleveland calls this a level plot).  A\nkey showing how the colors map to z values is shown to the right of\nthe plot.\n","example_call":".filled.contour(x, y, z, levels, col)"},"graphics::close.screen":{"description":"split.screen defines a number of regions within the current\ndevice which can, to some extent, be treated as separate graphics\ndevices.  It is useful for generating multiple plots on a single\ndevice.  Screens can themselves be split, allowing for quite complex\narrangements of plots.\n","example_call":"close.screen(n, all.screens = FALSE)"},"graphics::axis":{"description":"Adds an axis to the current plot, allowing the\nspecification of the side, position, labels, and other options.\n","example_call":"axis(side, at = NULL, labels = TRUE, tick = TRUE, line = NA,"},"graphics::layout":{"description":"layout divides the device up into as many rows and columns as\nthere are in matrix mat, with the column-widths and the\nrow-heights specified in the respective arguments.\n","example_call":"layout(mat, widths = rep.int(1, ncol(mat)), heights = rep.int(1,"},"graphics::contour.default":{"description":"Create a contour plot, or add contour lines to an existing plot.\n","example_call":"contour.default(x = seq(0, 1, length.out = nrow(z)), y = seq(0, 1,"},"graphics::cdplot":{"description":"Computes and plots conditional densities describing how the\nconditional distribution of a categorical variable y changes over a\nnumerical variable x.\n","example_call":"cdplot(x, ...)"},"graphics::pie":{"description":"Draw a pie chart.\n","example_call":"pie(x, labels = names(x), edges = 200, radius = 0.8, clockwise = FALSE,"},"graphics::xspline":{"description":"Draw an X-spline, a curve drawn relative to control points.\n","example_call":"xspline(x, y = NULL, shape = 0, open = TRUE, repEnds = TRUE,"},"graphics::text":{"description":"text draws the strings given in the vector labels at the\ncoordinates given by x and y.\ny may be missing since xy.coords(x, y) is used for\nconstruction of the coordinates.\n","example_call":"text(x, ...)"},"graphics::strwidth":{"description":"These functions compute the width or height, respectively, of the\ngiven strings or mathematical expressions s[i] on\nthe current plotting device in user coordinates, inches\nor as fraction of the figure width par(\"fin\").\n","example_call":"strwidth(s, units = \"user\", cex = NULL, font = NULL, vfont = NULL,"},"graphics::axis.Date":{"description":"Add a date/time axis to the current plot of an object of class\n\"POSIXt\" or \"Date\", respectively.\n","example_call":"axis.Date(side, x, at, format, labels = TRUE, ...)"},"graphics::boxplot.matrix":{"description":"Interpreting the columns (or rows) of a matrix as different groups, draw a\nboxplot for each.\n","example_call":"boxplot.matrix(x, use.cols = TRUE, ...)"},"graphics::bxp":{"description":"bxp draws box plots based on the given summaries in z.\nIt is usually called from within boxplot, but can be\ninvoked directly.\n","example_call":"bxp(z, notch = FALSE, width = NULL, varwidth = FALSE, outline = TRUE,"},"graphics::abline":{"description":"This function adds one or more straight lines through the current plot.\n","example_call":"abline(a = NULL, b = NULL, h = NULL, v = NULL, reg = NULL,"},"graphics::plot.xy":{"description":"This is the internal function that does the basic plotting of\npoints and lines.  Usually, one should rather use the higher level\nfunctions instead and refer to their help pages for explanation of the\narguments.\n","example_call":"plot.xy(xy, type, pch = par(\"pch\"), lty = par(\"lty\"), col = par(\"col\"),"},"graphics::rasterImage":{"description":"rasterImage draws a raster image at the given locations and sizes.\n","example_call":"rasterImage(image, xleft, ybottom, xright, ytop, angle = 0, interpolate = TRUE,"},"graphics::segments":{"description":"Draw line segments between pairs of points.\n","example_call":"segments(x0, y0, x1 = x0, y1 = y0, col = par(\"fg\"), lty = par(\"lty\"),"},"graphics::yinch":{"description":"xinch and yinch convert the specified number of inches\ngiven as their arguments into the correct units for plotting with\ngraphics functions.  Usually, this only makes sense when normal\ncoordinates are used, i.e., no log scale (see the\nlog argument to par).\n","example_call":"yinch(y = 1, warn.log = TRUE)"},"graphics::plot.window":{"description":"This function sets up the world coordinate system for a graphics\nwindow.  It is called by higher level functions such as\nplot.default (after plot.new).\n","example_call":"plot.window(xlim, ylim, log = \"\", asp = NA, ...)"},"graphics::clip":{"description":"Set clipping region in user coordinates\n","example_call":"clip(x1, x2, y1, y2)"},"graphics::erase.screen":{"description":"split.screen defines a number of regions within the current\ndevice which can, to some extent, be treated as separate graphics\ndevices.  It is useful for generating multiple plots on a single\ndevice.  Screens can themselves be split, allowing for quite complex\narrangements of plots.\n","example_call":"erase.screen(n = cur.screen)"},"graphics::rug":{"description":"Adds a rug representation (1-d plot) of the data to the plot.\n","example_call":"rug(x, ticksize = 0.03, side = 1, lwd = 0.5, col = par(\"fg\"),"},"graphics::Axis":{"description":"Generic function to add a suitable axis to the current plot.\n","example_call":"Axis(x = NULL, at = NULL, ..., side, labels = NULL)"},"grDevices::.radialGradientPattern":{"description":"Internal grDevices functions\n","example_call":".radialGradientPattern(colours = c(\"black\", \"white\"), stops = seq(0, 1, length.out = length(colours)),"},"grDevices::gray.colors":{"description":"Create a vector of n gamma-corrected gray colors.\n","example_call":"gray.colors(n, start = 0.3, end = 0.9, gamma = 2.2, alpha, rev = FALSE)"},"grDevices::rainbow":{"description":"Create a vector of n contiguous colors.\n","example_call":"rainbow(n, s = 1, v = 1, start = 0, end = max(1, n - 1)/n,"},"grDevices::check.options":{"description":"Utility function for setting options with some consistency checks.\nThe attributes of the new settings in new are\nchecked for consistency with the model (often default)\nlist in name.opt.\n","example_call":"check.options(new, name.opt, reset = FALSE, assign.opt = FALSE, envir = .GlobalEnv,"},"grDevices::hcl.pals":{"description":"Create a vector of n contiguous colors.\n","example_call":"hcl.pals(type = NULL)"},"grDevices::glyphFontList":{"description":"Create an object that contains information about typeset glyphs.\nThis includes glyph identifiers, glyph locations, font and colour\ninformation, and metric information.\n","example_call":"glyphFontList(...)"},"grDevices::embedFonts":{"description":"Runs Ghostscript to process a PDF or PostScript file and\nembed all fonts in the file.\n","example_call":"embedFonts(file, format, outfile = file, fontpaths = character(),"},"grDevices::cairo_ps":{"description":"Graphics devices for SVG, PDF and PostScript graphics files using\nthe cairo graphics API.\n","example_call":"cairo_ps(filename = if (onefile) \"Rplots.ps\" else \"Rplot%03d.ps\","},"grDevices::colorspaces":{"description":"Convert colours between their representations in standard\ncolour spaces.\n","example_call":"NULL"},"grDevices::cairo_pdf":{"description":"Graphics devices for SVG, PDF and PostScript graphics files using\nthe cairo graphics API.\n","example_call":"cairo_pdf(filename = if (onefile) \"Rplots.pdf\" else \"Rplot%03d.pdf\","},"grDevices::getGraphicsEventEnv":{"description":"This function waits for input from a graphics window in the\nform of a mouse or keyboard event.\n","example_call":"getGraphicsEventEnv(which = dev.cur())"},"grDevices::.axisPars":{"description":"Compute pretty axis scales and tick mark locations, the same way as\ntraditional R graphics do it.  This is interesting particularly for\nlog scale axes.\n","example_call":".axisPars(usr, log = FALSE, nintLog = 5)"},"grDevices::bmp":{"description":"Graphics devices for BMP, JPEG, PNG and TIFF format bitmap files.\n","example_call":"bmp(filename = \"Rplot%03d.bmp\", width = 480, height = 480,"},"grDevices::.devUp":{"description":"Internal grDevices functions\n","example_call":".devUp()"},"grDevices::.mask":{"description":"Internal grDevices functions\n","example_call":".mask(fun, type)"},"grDevices::graphics.off":{"description":"These functions provide control over multiple graphics devices.\n","example_call":"graphics.off()"},"grDevices::densCols":{"description":"densCols produces a vector containing colors which encode the\nlocal densities at each point in a scatterplot.\n","example_call":"densCols(x, y = NULL, nbin = 128, bandwidth, colramp = colorRampPalette(blues9[-(1:3)]))"},"grDevices::savePlot":{"description":"Save the current page of a cairo X11() device to a file.\n","example_call":"savePlot(filename = paste0(\"Rplot.\", type), type = c(\"png\","},"grDevices::X11Font":{"description":"These functions handle the translation of a device-independent R graphics\nfont family name to an X11 font description on Unix-alike platforms.\n","example_call":"X11Font(font)"},"grDevices::grey":{"description":"Create a vector of colors from a vector of gray levels.\n","example_call":"grey(level, alpha)"},"grDevices::.setMask":{"description":"Internal grDevices functions\n","example_call":".setMask(mask, ref)"},"grDevices::deviceIsInteractive":{"description":"Test if the current graphics device (or that which would be opened) is\ninteractive.\n","example_call":"deviceIsInteractive(name = NULL)"},"grDevices::.opIndex":{"description":"Internal grDevices functions\n","example_call":".opIndex(x)"},"grDevices::quartz.save":{"description":"quartz starts a graphics device driver for the macOS system.\nIt supports plotting both to the screen (the default) and to various\ngraphics file formats.\n","example_call":"quartz.save(file, type = \"png\", device = dev.cur(), dpi = 100,"},"grDevices::quartz":{"description":"quartz starts a graphics device driver for the macOS system.\nIt supports plotting both to the screen (the default) and to various\ngraphics file formats.\n","example_call":"quartz(title, width, height, pointsize, family, antialias,"},"grDevices::xfig":{"description":"xfig starts the graphics device driver for producing XFig\n(version 3.2) graphics.\n","example_call":"xfig(file = if (onefile) \"Rplots.fig\" else \"Rplot%03d.fig\","},"grDevices::dev.capabilities":{"description":"Query the capabilities of the current graphics device.\n","example_call":"dev.capabilities(what = NULL)"},"grDevices::extendrange":{"description":"Extends a numerical range by a small percentage, i.e., fraction,\non both sides.\n","example_call":"extendrange(x, r = range(x, na.rm = TRUE), f = 0.05)"},"grDevices::nclass.Sturges":{"description":"Compute the number of classes for a histogram, notably hist().\n","example_call":"nclass.Sturges(x)"},"grDevices::.defineGroup":{"description":"Internal grDevices functions\n","example_call":".defineGroup(source, op, destination)"},"grDevices::.useGroup":{"description":"Internal grDevices functions\n","example_call":".useGroup(ref, trans)"},"grDevices::colors":{"description":"Returns the built-in color names which R knows about.\n","example_call":"colors(distinct = FALSE)"},"grDevices::pictex":{"description":"This function produces simple graphics suitable for inclusion in TeX\nand LaTeX documents.  It dates from the very early days of R and is\nfor historical interest only.  It was deprecated in R 4.4.0.\nConsider the tikzDevice instead.\n","example_call":"pictex(file = \"Rplots.tex\", width = 5, height = 4, debug = FALSE,"},"grDevices::.ruleIndex":{"description":"Internal grDevices functions\n","example_call":".ruleIndex(x)"},"grDevices::dev.set":{"description":"These functions provide control over multiple graphics devices.\n","example_call":"dev.set(which = dev.next())"},"grDevices::trans3d":{"description":"Projection of 3-dimensional to 2-dimensional points using a 4x4\nviewing transformation matrix.  Mainly for adding to\nperspective plots such as persp.\n","example_call":"trans3d(x, y, z, pmat, continuous = FALSE, verbose = TRUE)"},"grDevices::recordPlot":{"description":"Functions to save the current plot in an R variable, and to replay it.\n","example_call":"recordPlot(load = NULL, attach = NULL)"},"grDevices::glyphWidthLeft":{"description":"Create an object that contains information about typeset glyphs.\nThis includes glyph identifiers, glyph locations, font and colour\ninformation, and metric information.\n","example_call":"glyphWidthLeft(w, label)"},"grDevices::hsv":{"description":"Create a vector of colors from vectors specifying hue, saturation and\nvalue.\n","example_call":"hsv(h = 1, s = 1, v = 1, alpha)"},"grDevices::bitmap":{"description":"bitmap generates a graphics file.\ndev2bitmap copies the current graphics device to a file in a\ngraphics format.\n","example_call":"bitmap(file, type = \"png16m\", height = 7, width = 7, res = 72,"},"grDevices::embedGlyphs":{"description":"Runs Ghostscript to process a PDF or PostScript file and\nembed all fonts in the file.\n","example_call":"embedGlyphs(file, glyphInfo, outfile = file, options = character())"},"grDevices::hcl":{"description":"Create a vector of colors from vectors specifying hue,\nchroma and luminance.\n","example_call":"hcl(h = 0, c = 35, l = 85, alpha, fixup = TRUE)"},"grDevices::postscriptFonts":{"description":"These functions handle the translation of a R graphics\nfont family name to a PostScript or PDF font description, used by the\npostscript or pdf graphics devices.\n","example_call":"postscriptFonts(...)"},"grDevices::tiff":{"description":"Graphics devices for BMP, JPEG, PNG and TIFF format bitmap files.\n","example_call":"tiff(filename = \"Rplot%03d.tiff\", width = 480, height = 480,"},"grDevices::X11":{"description":"The defaults for all of the arguments of X11 are set by\nX11.options: the <U+2018>Arguments<U+2019> section gives the\n<U+2018>factory-fresh<U+2019> defaults.\n","example_call":"X11(display = \"\", width, height, pointsize, gamma, bg,"},"grDevices::Hershey":{"description":"If the family graphical parameter (see par)\nhas been set to one of the Hershey fonts (see <U+2018>Details<U+2019>)\nHershey vector fonts are used to render text.\n","example_call":"NULL"},"grDevices::palette.colors":{"description":"View or manipulate the color palette which is used when col=\nhas a numeric index and supporting functions.\n","example_call":"palette.colors(n = NULL, palette = \"Okabe-Ito\", alpha, recycle = FALSE,"},"grDevices::glyphHeight":{"description":"Create an object that contains information about typeset glyphs.\nThis includes glyph identifiers, glyph locations, font and colour\ninformation, and metric information.\n","example_call":"glyphHeight(h, label = \"height\", bottom = \"bottom\")"},"grDevices::is.raster":{"description":"Functions to create a raster object (representing a bitmap\nimage) and coerce other objects to a raster object.\n","example_call":"is.raster(x)"},"grDevices::colorConverter":{"description":"These functions specify colour spaces for use in\nconvertColor.\n","example_call":"colorConverter(toXYZ, fromXYZ, name, white = NULL, vectorized = FALSE)"},"grDevices::glyphFont":{"description":"Create an object that contains information about typeset glyphs.\nThis includes glyph identifiers, glyph locations, font and colour\ninformation, and metric information.\n","example_call":"glyphFont(file, index, family, weight, style, PSname = NA)"},"grDevices::dev2bitmap":{"description":"bitmap generates a graphics file.\ndev2bitmap copies the current graphics device to a file in a\ngraphics format.\n","example_call":"dev2bitmap(file, type = \"png16m\", height = 7, width = 7, res = 72,"},"grDevices::dev.next":{"description":"These functions provide control over multiple graphics devices.\n","example_call":"dev.next(which = dev.cur())"},"grDevices::dev.interactive":{"description":"Test if the current graphics device (or that which would be opened) is\ninteractive.\n","example_call":"dev.interactive(orNone = FALSE)"},"grDevices::grey.colors":{"description":"Create a vector of n gamma-corrected gray colors.\n","example_call":"grey.colors(n, start = 0.3, end = 0.9, gamma = 2.2, alpha, rev = FALSE)"},"grDevices::dev.copy2pdf":{"description":"dev.copy copies the graphics contents of the current device\nto the device specified by which or to a new device which has\nbeen created by the function specified by device (it is an\nerror to specify both which and device).  (If recording\nis off on the current device, there are no contents to copy: this will\nresult in no plot or an empty plot.)\nThe device copied to becomes the current device.\n","example_call":"dev.copy2pdf(..., out.type = \"pdf\")"},"grDevices::terrain.colors":{"description":"Create a vector of n contiguous colors.\n","example_call":"terrain.colors(n, alpha, rev = FALSE)"},"grDevices::grSoftVersion":{"description":"Report versions of third-party graphics software available on the\ncurrent platform for R's graphics.\n","example_call":"grSoftVersion()"},"grDevices::quartz.options":{"description":"quartz starts a graphics device driver for the macOS system.\nIt supports plotting both to the screen (the default) and to various\ngraphics file formats.\n","example_call":"quartz.options(..., reset = FALSE)"},"grDevices::.tilingPattern":{"description":"Internal grDevices functions\n","example_call":".tilingPattern(fun, x, y, width, height, extend)"},"grDevices::hcl.colors":{"description":"Create a vector of n contiguous colors.\n","example_call":"hcl.colors(n, palette = \"viridis\", alpha = NULL, rev = FALSE,"},"grDevices::glyphAnchor":{"description":"Create an object that contains information about typeset glyphs.\nThis includes glyph identifiers, glyph locations, font and colour\ninformation, and metric information.\n","example_call":"glyphAnchor(value, label)"},"grDevices::nclass.scott":{"description":"Compute the number of classes for a histogram, notably hist().\n","example_call":"nclass.scott(x)"},"grDevices::dev.hold":{"description":"This gives a way to hold/flush output on certain on-screen devices,\nand is ignored by other devices.\n","example_call":"dev.hold(level = 1L)"},"grDevices::glyphWidth":{"description":"Create an object that contains information about typeset glyphs.\nThis includes glyph identifiers, glyph locations, font and colour\ninformation, and metric information.\n","example_call":"glyphWidth(w, label = \"width\", left = \"left\")"},"grDevices::devAskNewPage":{"description":"This function can be used to control (for the current device)\nwhether the user is prompted before starting a new page of output.\n","example_call":"devAskNewPage(ask = NULL)"},"grDevices::x11":{"description":"The defaults for all of the arguments of X11 are set by\nX11.options: the <U+2018>Arguments<U+2019> section gives the\n<U+2018>factory-fresh<U+2019> defaults.\n","example_call":"x11(display = \"\", width, height, pointsize, gamma, bg,"},"grDevices::as.raster":{"description":"Functions to create a raster object (representing a bitmap\nimage) and coerce other objects to a raster object.\n","example_call":"as.raster(x, ...)"},"grDevices::.clipPath":{"description":"Internal grDevices functions\n","example_call":".clipPath(fun, rule)"},"grDevices::rgb2hsv":{"description":"rgb2hsv transforms colors\nfrom RGB space (red/green/blue)\ninto HSV space (hue/saturation/value).\n","example_call":"rgb2hsv(r, g = NULL, b = NULL, maxColorValue = 255)"},"grDevices::setGraphicsEventEnv":{"description":"This function waits for input from a graphics window in the\nform of a mouse or keyboard event.\n","example_call":"setGraphicsEventEnv(which = dev.cur(), env)"},"grDevices::heat.colors":{"description":"Create a vector of n contiguous colors.\n","example_call":"heat.colors(n, alpha, rev = FALSE)"},"grDevices::topo.colors":{"description":"Create a vector of n contiguous colors.\n","example_call":"topo.colors(n, alpha, rev = FALSE)"},"grDevices::blues9":{"description":"densCols produces a vector containing colors which encode the\nlocal densities at each point in a scatterplot.\n","example_call":"NULL"},"grDevices::recordGraphics":{"description":"Records arbitrary code on the graphics engine display list.\nUseful for encapsulating calculations with graphical output\nthat depends on the calculations.\nIntended only for expert use.\n","example_call":"recordGraphics(expr, list, env)"},"grDevices::boxplot.stats":{"description":"This function is typically called by another function to\ngather the statistics necessary for producing box plots,\nbut may be invoked separately.\n","example_call":"boxplot.stats(x, coef = 1.5, do.conf = TRUE, do.out = TRUE)"},"grDevices::svg":{"description":"Graphics devices for SVG, PDF and PostScript graphics files using\nthe cairo graphics API.\n","example_call":"svg(filename = if (onefile) \"Rplots.svg\" else \"Rplot%03d.svg\","},"grDevices::dev.list":{"description":"These functions provide control over multiple graphics devices.\n","example_call":"dev.list()"},"grDevices::colours":{"description":"Returns the built-in color names which R knows about.\n","example_call":"colours(distinct = FALSE)"},"grDevices::convertColor":{"description":"Convert colours between their representations in standard\ncolour spaces.\n","example_call":"convertColor(color, from, to, from.ref.white = NULL, to.ref.white = NULL,"},"grDevices::dev.copy":{"description":"dev.copy copies the graphics contents of the current device\nto the device specified by which or to a new device which has\nbeen created by the function specified by device (it is an\nerror to specify both which and device).  (If recording\nis off on the current device, there are no contents to copy: this will\nresult in no plot or an empty plot.)\nThe device copied to becomes the current device.\n","example_call":"dev.copy(device, ..., which = dev.next())"},"grDevices::chull":{"description":"Computes the subset of points which lie on the convex hull of the\nset of points specified.\n","example_call":"chull(x, y = NULL)"},"grDevices::xy.coords":{"description":"xy.coords is used by many functions to obtain\nx and y coordinates for plotting.  The use of this common mechanism\nacross all relevant R functions produces a measure of consistency.\n","example_call":"xy.coords(x, y = NULL, xlab = NULL, ylab = NULL, log = NULL,"},"grDevices::dev.capture":{"description":"dev.capture captures the current contents of a graphics device\nas a raster (bitmap) image.\n","example_call":"dev.capture(native = FALSE)"},"grDevices::dev.cur":{"description":"These functions provide control over multiple graphics devices.\n","example_call":"dev.cur()"},"grDevices::glyphJust":{"description":"Create an object that contains information about typeset glyphs.\nThis includes glyph identifiers, glyph locations, font and colour\ninformation, and metric information.\n","example_call":"glyphJust(just, ...)"},"grDevices::setEPS":{"description":"The auxiliary function ps.options can be used to set or view\n(if called without arguments) the default values for some of the\narguments to postscript.\n","example_call":"setEPS(...)"},"grDevices::cm":{"description":"Translates from inches to cm (centimeters).\n","example_call":"cm(x)"},"grDevices::dev.flush":{"description":"This gives a way to hold/flush output on certain on-screen devices,\nand is ignored by other devices.\n","example_call":"dev.flush(level = 1L)"},"grDevices::glyphHeightBottom":{"description":"Create an object that contains information about typeset glyphs.\nThis includes glyph identifiers, glyph locations, font and colour\ninformation, and metric information.\n","example_call":"glyphHeightBottom(h, label)"},"grDevices::dev.size":{"description":"Find the dimensions of the device surface of the current device.\n","example_call":"dev.size(units = c(\"in\", \"cm\", \"px\"))"},"grDevices::setPS":{"description":"The auxiliary function ps.options can be used to set or view\n(if called without arguments) the default values for some of the\narguments to postscript.\n","example_call":"setPS(...)"},"grDevices::cm.colors":{"description":"Create a vector of n contiguous colors.\n","example_call":"cm.colors(n, alpha, rev = FALSE)"},"grDevices::dev.off":{"description":"These functions provide control over multiple graphics devices.\n","example_call":"dev.off(which = dev.cur())"},"grDevices::pdf":{"description":"pdf starts the graphics device driver for producing PDF\ngraphics.\n","example_call":"pdf(file = if (onefile) \"Rplots.pdf\" else \"Rplot%03d.pdf\","},"grDevices::gray":{"description":"Create a vector of colors from a vector of gray levels.\n","example_call":"gray(level, alpha)"},"grDevices::nclass.FD":{"description":"Compute the number of classes for a histogram, notably hist().\n","example_call":"nclass.FD(x, digits = 5)"},"grDevices::ps.options":{"description":"The auxiliary function ps.options can be used to set or view\n(if called without arguments) the default values for some of the\narguments to postscript.\n","example_call":"ps.options(..., reset = FALSE, override.check = FALSE)"},"grDevices::as.graphicsAnnot":{"description":"Coerce an R object into a form suitable for graphics annotation.\n","example_call":"as.graphicsAnnot(x)"},"grDevices::.setPattern":{"description":"Internal grDevices functions\n","example_call":".setPattern(pattern)"},"grDevices::X11.options":{"description":"The defaults for all of the arguments of X11 are set by\nX11.options: the <U+2018>Arguments<U+2019> section gives the\n<U+2018>factory-fresh<U+2019> defaults.\n","example_call":"X11.options(..., reset = FALSE)"},"grDevices::palette":{"description":"View or manipulate the color palette which is used when col=\nhas a numeric index and supporting functions.\n","example_call":"palette(value)"},"grDevices::replayPlot":{"description":"Functions to save the current plot in an R variable, and to replay it.\n","example_call":"replayPlot(x, reloadPkgs = FALSE)"},"grDevices::pdfFonts":{"description":"These functions handle the translation of a R graphics\nfont family name to a PostScript or PDF font description, used by the\npostscript or pdf graphics devices.\n","example_call":"pdfFonts(...)"},"grDevices::cairoSymbolFont":{"description":"Specify a symbol font for a Cairo-based graphics device.\nThis function provides the opportunity to specify whether the font\nsupports Private Use Area code points.\n","example_call":"cairoSymbolFont(family, usePUA = TRUE)"},"grDevices::dev.new":{"description":"These functions provide control over multiple graphics devices.\n","example_call":"dev.new(..., noRStudioGD = FALSE)"},"grDevices::pdf.options":{"description":"The auxiliary function pdf.options can be used to set or view\n(if called without arguments) the default values for some of the\narguments to pdf.\n","example_call":"pdf.options(..., reset = FALSE)"},"grDevices::X11Fonts":{"description":"These functions handle the translation of a device-independent R graphics\nfont family name to an X11 font description on Unix-alike platforms.\n","example_call":"X11Fonts(...)"},"grDevices::axisTicks":{"description":"Compute pretty axis scales and tick mark locations, the same way as\ntraditional R graphics do it.  This is interesting particularly for\nlog scale axes.\n","example_call":"axisTicks(usr, log, axp = NULL, nint = 5)"},"grDevices::make.rgb":{"description":"These functions specify colour spaces for use in\nconvertColor.\n","example_call":"make.rgb(red, green, blue, name = NULL, white = \"D65\", gamma = 2.2)"},"grDevices::.setClipPath":{"description":"Internal grDevices functions\n","example_call":".setClipPath(path, index)"},"grDevices::n2mfrow":{"description":"Easy setup for plotting multiple figures (in a rectangular layout) on\none page.  This computes a sensible default for\npar(mfrow).\n","example_call":"n2mfrow(nr.plots, asp = 1)"},"grDevices::rgb":{"description":"This function creates colors corresponding to the given\nintensities (between 0 and max) of the red, green and blue\nprimaries.  The colour specification refers to the\nstandard sRGB colorspace (IEC standard 61966).\n","example_call":"rgb(red, green, blue, alpha, names = NULL, maxColorValue = 1)"},"grDevices::quartzFont":{"description":"These functions handle the translation of a device-independent R graphics\nfont family name to a quartz font description.\n","example_call":"quartzFont(family)"},"grDevices::getGraphicsEvent":{"description":"This function waits for input from a graphics window in the\nform of a mouse or keyboard event.\n","example_call":"getGraphicsEvent(prompt = \"Waiting for input\", onMouseDown = NULL, onMouseMove = NULL,"},"grDevices::xyz.coords":{"description":"Utility for obtaining consistent x, y and z coordinates and labels\nfor three dimensional (3D) plots.\n","example_call":"xyz.coords(x, y = NULL, z = NULL, xlab = NULL, ylab = NULL, zlab = NULL,"},"grDevices::xyTable":{"description":"Given (x,y) points, determine their multiplicity <U+2013> checking for\nequality only up to some (crude kind of) noise.  Note that this is\nspecial kind of 2D binning.\n","example_call":"xyTable(x, y = NULL, digits)"},"grDevices::CIDFont":{"description":"These functions are used to define the translation of a R graphics\nfont family name to Type 1 or CID font descriptions, used by\nthe pdf and postscript graphics devices.\n","example_call":"CIDFont(family, cmap, cmapEncoding, pdfresource = \"\")"},"grDevices::adjustcolor":{"description":"Adjust or modify a vector of colors by <U+201C>turning knobs<U+201D> on one or more\ncoordinates in (r,g,b,\\alpha) space, typically by up or down\nscaling them.\n","example_call":"adjustcolor(col, alpha.f = 1, red.f = 1, green.f = 1, blue.f = 1,"},"grDevices::col2rgb":{"description":"R color to RGB (red/green/blue) conversion.\n","example_call":"col2rgb(col, alpha = FALSE)"},"grDevices::dev.prev":{"description":"These functions provide control over multiple graphics devices.\n","example_call":"dev.prev(which = dev.cur())"},"grDevices::quartzFonts":{"description":"These functions handle the translation of a device-independent R graphics\nfont family name to a quartz font description.\n","example_call":"quartzFonts(...)"},"grDevices::png":{"description":"Graphics devices for BMP, JPEG, PNG and TIFF format bitmap files.\n","example_call":"png(filename = \"Rplot%03d.png\", width = 480, height = 480,"},"grDevices::colorRampPalette":{"description":"These functions return functions that interpolate a set of given\ncolors to create new color palettes (like topo.colors) and\ncolor ramps, functions that map the interval [0, 1] to colors\n(like grey).\n","example_call":"colorRampPalette(colors, ...)"},"grDevices::palette.pals":{"description":"View or manipulate the color palette which is used when col=\nhas a numeric index and supporting functions.\n","example_call":"palette.pals()"},"grDevices::glyphInfo":{"description":"Create an object that contains information about typeset glyphs.\nThis includes glyph identifiers, glyph locations, font and colour\ninformation, and metric information.\n","example_call":"glyphInfo(id, x, y, font, size, fontList, width, height, hAnchor,"},"grDevices::.linearGradientPattern":{"description":"Internal grDevices functions\n","example_call":".linearGradientPattern(colours = c(\"black\", \"white\"), stops = seq(0, 1, length.out = length(colours)),"},"grDevices::jpeg":{"description":"Graphics devices for BMP, JPEG, PNG and TIFF format bitmap files.\n","example_call":"jpeg(filename = \"Rplot%03d.jpeg\", width = 480, height = 480,"},"grDevices::colorRamp":{"description":"These functions return functions that interpolate a set of given\ncolors to create new color palettes (like topo.colors) and\ncolor ramps, functions that map the interval [0, 1] to colors\n(like grey).\n","example_call":"colorRamp(colors, bias = 1, space = c(\"rgb\", \"Lab\"), interpolate = c(\"linear\","},"grDevices::setGraphicsEventHandlers":{"description":"This function waits for input from a graphics window in the\nform of a mouse or keyboard event.\n","example_call":"setGraphicsEventHandlers(which = dev.cur(), ...)"},"grDevices::dev.control":{"description":"dev.copy copies the graphics contents of the current device\nto the device specified by which or to a new device which has\nbeen created by the function specified by device (it is an\nerror to specify both which and device).  (If recording\nis off on the current device, there are no contents to copy: this will\nresult in no plot or an empty plot.)\nThe device copied to becomes the current device.\n","example_call":"dev.control(displaylist = c(\"inhibit\", \"enable\"))"},"grDevices::dev.print":{"description":"dev.copy copies the graphics contents of the current device\nto the device specified by which or to a new device which has\nbeen created by the function specified by device (it is an\nerror to specify both which and device).  (If recording\nis off on the current device, there are no contents to copy: this will\nresult in no plot or an empty plot.)\nThe device copied to becomes the current device.\n","example_call":"dev.print(device = postscript, ...)"},"grDevices::dev.copy2eps":{"description":"dev.copy copies the graphics contents of the current device\nto the device specified by which or to a new device which has\nbeen created by the function specified by device (it is an\nerror to specify both which and device).  (If recording\nis off on the current device, there are no contents to copy: this will\nresult in no plot or an empty plot.)\nThe device copied to becomes the current device.\n","example_call":"dev.copy2eps(...)"},"grDevices::Type1Font":{"description":"These functions are used to define the translation of a R graphics\nfont family name to Type 1 or CID font descriptions, used by\nthe pdf and postscript graphics devices.\n","example_call":"Type1Font(family, metrics, encoding = \"default\")"},"grDevices::contourLines":{"description":"Calculate contour lines for a given set of data.\n","example_call":"contourLines(x = seq(0, 1, length.out = nrow(z)), y = seq(0, 1,"},"grDevices::postscript":{"description":"postscript starts the graphics device driver for producing\nPostScript graphics.\n","example_call":"postscript(file = if (onefile) \"Rplots.ps\" else \"Rplot%03d.ps\","},"grid::pathGrob":{"description":"These functions create and draw one or more paths.\nThe final point of a path will automatically\nbe connected to the initial point.\n","example_call":"pathGrob(x, y, id = NULL, id.lengths = NULL, pathId = NULL,"},"grid::drawDetails":{"description":"These generic hook functions are called whenever a grid grob is drawn.\nThey provide an opportunity for customising the drawing of a\nnew class derived from grob (or gTree).\n","example_call":"drawDetails(x, recording)"},"grid::grid.multipanel":{"description":"Internal Grid functions\n","example_call":"grid.multipanel(x = stats::runif(90), y = stats::runif(90), z = stats::runif(90),"},"grid::addGrob":{"description":"Add a grob to a gTree or a descendant of a gTree.\n","example_call":"addGrob(gTree, child, gPath = NULL, strict = FALSE, grep = FALSE,"},"grid::grobDescent":{"description":"These functions create a unit object describing the width or height of\na grob.  They are generic.\n","example_call":"grobDescent(x)"},"grid::grid.roundrect":{"description":"Draw a single rectangle with rounded corners.","example_call":"grid.roundrect(...)"},"grid::convertNative":{"description":"The functions or variables listed here are no longer part of grid.\n","example_call":"convertNative(unit, dimension = \"x\", type = \"location\")"},"grid::vpPath":{"description":"This function can be used to generate a viewport path for use\nin downViewport or seekViewport.\n","example_call":"vpPath(...)"},"grid::getGrob":{"description":"Retrieve a grob or a descendant of a grob.\n","example_call":"getGrob(gTree, gPath, strict = FALSE, grep = FALSE, global = FALSE)"},"grid::xsplineGrob":{"description":"These functions create and draw an xspline, a curve drawn\nrelative to control points.\n","example_call":"xsplineGrob(x = c(0, 0.5, 1, 0.5), y = c(0.5, 1, 0.5, 0), id = NULL,"},"grid::rectGrob":{"description":"These functions create and draw rectangles.\n","example_call":"rectGrob(x = unit(0.5, \"npc\"), y = unit(0.5, \"npc\"), width = unit(1,"},"grid::pointsGrob":{"description":"These functions create and draw data symbols.\n","example_call":"pointsGrob(x = stats::runif(10), y = stats::runif(10), pch = 1,"},"grid::grid.grep":{"description":"Given a path, find all matching grobs and/or viewports on the display list\nor within a given grob.\n","example_call":"grid.grep(path, x = NULL, grobs = TRUE, viewports = FALSE, strict = FALSE,"},"grid::applyEdits":{"description":"The functions gEdit and gEditList create\nobjects representing an edit operation (essentially a list\nof arguments to editGrob).\n","example_call":"applyEdits(x, edits)"},"grid::absolute.size":{"description":"This function converts a unit object into absolute units.\nAbsolute units are unaffected, but non-absolute units are\nconverted into \"null\" units.\n","example_call":"absolute.size(unit)"},"grid::explode":{"description":"Explode a viewport path or grob path into its components.\n","example_call":"explode(x)"},"grid::gpar":{"description":"gpar() should be used to create a set of graphical\nparameter settings.  It returns an object of class \"gpar\".  This is\nbasically a list of name-value pairs.\n","example_call":"gpar(...)"},"grid::gPath":{"description":"This function can be used to generate a grob path for use\nin grid.edit and friends.\n","example_call":"gPath(...)"},"grid::widthDetails":{"description":"These generic functions are used to determine the size of grid grobs.\n","example_call":"widthDetails(x)"},"grid::current.transform":{"description":"current.viewport()\nreturns the viewport that Grid is going to draw into.\n","example_call":"current.transform()"},"grid::descentDetails":{"description":"These generic functions are used to determine the size of grid grobs.\n","example_call":"descentDetails(x)"},"grid::grid.stroke":{"description":"These functions stroke (draw a line along the border) or\nfill (or both) a path, where the path is defined by\na grob.\n","example_call":"grid.stroke(...)"},"grid::bezierPoints":{"description":"Rather than drawing an xspline (or Bezier curve), this function returns\nthe points that would be used to draw the series of line\nsegments for the xspline.  This may be useful to post-process\nthe xspline curve, for example, to clip the curve.\n","example_call":"bezierPoints(x)"},"grid::getNames":{"description":"Returns a character vector containing the names of all\ntop-level grobs on the display list.\n","example_call":"getNames()"},"grid::convertUnit":{"description":"These functions take a unit object and convert it to an\nequivalent\nunit object in a different coordinate system.\n","example_call":"convertUnit(x, unitTo, axisFrom = \"x\", typeFrom = \"location\", axisTo = axisFrom,"},"grid::grid.rect":{"description":"These functions create and draw rectangles.\n","example_call":"grid.rect(x = unit(0.5, \"npc\"), y = unit(0.5, \"npc\"), width = unit(1,"},"grid::grid.show.layout":{"description":"This function uses Grid graphics to draw a diagram of a\nGrid layout.\n","example_call":"grid.show.layout(l, newpage = TRUE, vp.ex = 0.8, bg = \"light grey\","},"grid::is.grob":{"description":"Creating grid graphical objects, short (<U+201C>grob<U+201D>s).\n","example_call":"is.grob(x)"},"grid::grid.legend":{"description":"Constructing a legend grob (in progress)\n","example_call":"grid.legend(..., draw = TRUE)"},"grid::grid.place":{"description":"These functions provide a simpler (and faster) alternative\nto the grid.pack() and packGrob\nfunctions.  They can be used to place objects within the existing\nrows and columns of a frame layout.  They do not provide the ability to\nadd new rows and columns nor do they affect the\nheights and widths of the rows and columns.\n","example_call":"grid.place(gPath, grob, row = 1, col = 1, redraw = TRUE)"},"grid::emptyCoords":{"description":"These functions support the development of grobPoints\nmethods for custom grobs.\n","example_call":"NULL"},"grid::radialGradient":{"description":"Functions to define gradient fills and pattern fills.\n","example_call":"radialGradient(colours = c(\"black\", \"white\"), stops = seq(0, 1, length.out = length(colours)),"},"grid::groupShear":{"description":"These functions define the transformation that will be applied\nwhen a grid.define()d group is grid.use()d.\n","example_call":"groupShear(sx = 0, sy = 0)"},"grid::stringDescent":{"description":"These functions create a unit object describing the width or height of\na string.\n","example_call":"stringDescent(string)"},"grid::removeGrob":{"description":"Remove a grob from a gTree or a descendant of a gTree.\n","example_call":"removeGrob(gTree, gPath, strict = FALSE, grep = FALSE, global = FALSE,"},"grid::grid.yaxis":{"description":"These functions create and draw a y-axis.\n","example_call":"grid.yaxis(at = NULL, label = TRUE, main = TRUE, edits = NULL,"},"grid::viewportScale":{"description":"These functions define the transformation that will be applied\nwhen a grid.define()d group is grid.use()d.\n","example_call":"viewportScale(group, device = TRUE)"},"grid::vpList":{"description":"These functions create viewports, which describe rectangular regions\non a graphics device and define a number of coordinate systems within\nthose regions.\n","example_call":"vpList(...)"},"grid::grid.revert":{"description":"Some grobs only generate their content to draw at\ndrawing time;  this function replaces such grobs with\ntheir at-drawing-time content.\n","example_call":"grid.revert(x, ...)"},"grid::grid.grob":{"description":"The functions or variables listed here are no longer part of grid.\n","example_call":"grid.grob(list.struct, cl = NULL, draw = TRUE)"},"grid::arrow":{"description":"Produces a description of what arrows to add to a line.\nThe result can be passed to a function that draws a line,\ne.g., grid.lines.\n","example_call":"arrow(angle = 30, length = unit(0.25, \"inches\"), ends = \"last\","},"grid::strokeGrob":{"description":"These functions stroke (draw a line along the border) or\nfill (or both) a path, where the path is defined by\na grob.\n","example_call":"strokeGrob(x, ...)"},"grid::useRotate":{"description":"These functions define the transformation that will be applied\nwhen a grid.define()d group is grid.use()d.\n","example_call":"useRotate(inverse = FALSE, device = TRUE)"},"grid::fillGrob":{"description":"These functions stroke (draw a line along the border) or\nfill (or both) a path, where the path is defined by\na grob.\n","example_call":"fillGrob(x, ...)"},"grid::gList":{"description":"Creating grid graphical objects, short (<U+201C>grob<U+201D>s).\n","example_call":"gList(...)"},"grid::grid.locator":{"description":"Allows the user to click the mouse once within the current\ngraphics\ndevice and returns the location of the mouse click within the\ncurrent viewport, in the specified coordinate system.\n","example_call":"grid.locator(unit = \"native\")"},"grid::emptyGTreeCoords":{"description":"These functions support the development of grobPoints\nmethods for custom grobs.\n","example_call":"emptyGTreeCoords(name)"},"grid::grid.pretty":{"description":"Produces a pretty set of approximately n breakpoints within the\nrange given.\n","example_call":"grid.pretty(range, n = 5L)"},"grid::applyEdit":{"description":"The functions gEdit and gEditList create\nobjects representing an edit operation (essentially a list\nof arguments to editGrob).\n","example_call":"applyEdit(x, edit)"},"grid::fillStrokeGrob":{"description":"These functions stroke (draw a line along the border) or\nfill (or both) a path, where the path is defined by\na grob.\n","example_call":"fillStrokeGrob(x, ...)"},"grid::deviceLoc":{"description":"These functions take a pair of unit objects and convert\nthem to a pair of device locations (or dimensions) in inches\n(or native device coordinates).\n","example_call":"deviceLoc(x, y, valueOnly = FALSE, device = FALSE)"},"grid::arcCurvature":{"description":"These functions create and draw a curve from one location\nto another.\n","example_call":"arcCurvature(theta)"},"grid::viewportTransform":{"description":"These functions define the transformation that will be applied\nwhen a grid.define()d group is grid.use()d.\n","example_call":"viewportTransform(group, shear = groupShear(), flip = groupFlip(), device = TRUE)"},"grid::grid.curve":{"description":"These functions create and draw a curve from one location\nto another.\n","example_call":"grid.curve(...)"},"grid::useGrob":{"description":"These functions define and draw one or more groups, where\na group is a grob that is drawn in isolation before being\ncombined with the main image.  The concept of groups\nallows for compositing operators, object reuse, and\naffine transformations (see the Details section).\n","example_call":"useGrob(group, transform = viewportTransform, name = NULL,"},"grid::grobWidth":{"description":"These functions create a unit object describing the width or height of\na grob.  They are generic.\n","example_call":"grobWidth(x)"},"grid::viewport.transform":{"description":"The functions or variables listed here are no longer part of grid.\n","example_call":"viewport.transform(vp)"},"grid::glyphGrob":{"description":"These functions create and draw a set of typeset glyphs.\n","example_call":"glyphGrob(glyphInfo, x = 0.5, y = 0.5, default.units = \"npc\","},"grid::grid.layout":{"description":"This function returns a Grid layout, which describes a subdivision\nof a rectangular region.\n","example_call":"grid.layout(nrow = 1, ncol = 1, widths = unit(rep_len(1, ncol),"},"grid::setChildren":{"description":"Add a grob to a gTree or a descendant of a gTree.\n","example_call":"setChildren(x, children)"},"grid::grid.lines":{"description":"These functions create and draw a series of lines.\n","example_call":"grid.lines(x = unit(c(0, 1), \"npc\"), y = unit(c(0, 1), \"npc\"),"},"grid::grobAscent":{"description":"These functions create a unit object describing the width or height of\na grob.  They are generic.\n","example_call":"grobAscent(x)"},"grid::unit.pmin":{"description":"Returns a unit object whose i-th value is the minimum (or maximum)\nof the i-th values of the arguments.\n","example_call":"unit.pmin(...)"},"grid::grid.ls":{"description":"Return a listing of the names of grobs or viewports.\n","example_call":"grid.ls(x = NULL, grobs = TRUE, viewports = FALSE, fullNames = FALSE,"},"grid::viewport.layout":{"description":"Internal Grid functions\n","example_call":"viewport.layout(vp)"},"grid::current.viewport":{"description":"current.viewport()\nreturns the viewport that Grid is going to draw into.\n","example_call":"current.viewport()"},"grid::grid.reorder":{"description":"Change the order in which the children of a gTree get drawn.\n","example_call":"grid.reorder(gPath, order, back = TRUE, grep = FALSE, redraw = TRUE)"},"grid::grobHeight":{"description":"These functions create a unit object describing the width or height of\na grob.  They are generic.\n","example_call":"grobHeight(x)"},"grid::plotViewport":{"description":"This is a convenience function for producing a viewport with\nthe common S-style plot layout <U+2013> i.e., a central\nplot region surrounded by margins given in terms of a\nnumber of lines of text.\n","example_call":"plotViewport(margins = c(5.1, 4.1, 4.1, 2.1), ...)"},"grid::moveToGrob":{"description":"Grid has the notion of a current location.  These functions\nsets that location.\n","example_call":"moveToGrob(x = 0, y = 0, default.units = \"npc\", name = NULL, vp = NULL)"},"grid::preDrawDetails":{"description":"These generic hook functions are called whenever a grid grob is drawn.\nThey provide an opportunity for customising the drawing of a\nnew class derived from grob (or gTree).\n","example_call":"preDrawDetails(x)"},"grid::downViewport":{"description":"Grid maintains a tree of viewports <U+2014> nested drawing\ncontexts.\n","example_call":"downViewport(name, strict = FALSE, recording = TRUE)"},"grid::grid.add":{"description":"Add a grob to a gTree or a descendant of a gTree.\n","example_call":"grid.add(gPath, child, strict = FALSE, grep = FALSE, global = FALSE,"},"grid::xsplinePoints":{"description":"Rather than drawing an xspline (or Bezier curve), this function returns\nthe points that would be used to draw the series of line\nsegments for the xspline.  This may be useful to post-process\nthe xspline curve, for example, to clip the curve.\n","example_call":"xsplinePoints(x)"},"grid::grid.segments":{"description":"These functions create and draw line segments.\n","example_call":"grid.segments(x0 = unit(0, \"npc\"), y0 = unit(0, \"npc\"), x1 = unit(1,"},"grid::unitType":{"description":"This function returns the units of a unit object.\n","example_call":"unitType(x, recurse = FALSE)"},"grid::groupScale":{"description":"These functions define the transformation that will be applied\nwhen a grid.define()d group is grid.use()d.\n","example_call":"groupScale(sx = 1, sy = 1)"},"grid::grid.xspline":{"description":"These functions create and draw an xspline, a curve drawn\nrelative to control points.\n","example_call":"grid.xspline(...)"},"grid::viewportRotate":{"description":"These functions define the transformation that will be applied\nwhen a grid.define()d group is grid.use()d.\n","example_call":"viewportRotate(group, device = TRUE)"},"grid::grid.plot.and.legend":{"description":"This function is just a wrapper for a simple demonstration of how\na basic plot and legend can be drawn from scratch using grid.\n","example_call":"grid.plot.and.legend()"},"grid::showGrob":{"description":"Produces a graphical display of (by default) the current grid scene,\nwith labels showing the names of each grob in the scene.\nIt is also possible to label only specific grobs in the scene.\n","example_call":"showGrob(x = NULL, gPath = NULL, strict = FALSE, grep = FALSE,"},"grid::grid.get":{"description":"Retrieve a grob or a descendant of a grob.\n","example_call":"grid.get(gPath, strict = FALSE, grep = FALSE, global = FALSE,"},"grid::layout.widths":{"description":"Internal Grid functions\n","example_call":"layout.widths(lay)"},"grid::frameGrob":{"description":"These functions, together with grid.pack,\ngrid.place, packGrob, and placeGrob are part of a\nGUI-builder-like interface to constructing graphical images.\nThe idea is that you create a frame with this function then\nuse grid.pack or whatever to pack/place objects into the frame.\n","example_call":"frameGrob(layout = NULL, name = NULL, gp = gpar(), vp = NULL)"},"grid::grid.glyph":{"description":"These functions create and draw a set of typeset glyphs.\n","example_call":"grid.glyph(...)"},"grid::grid.fillStroke":{"description":"These functions stroke (draw a line along the border) or\nfill (or both) a path, where the path is defined by\na grob.\n","example_call":"grid.fillStroke(...)"},"grid::isClosed":{"description":"These functions calculate points along the perimeter (or length) of\na grob.\n","example_call":"isClosed(x, ...)"},"grid::grid.xaxis":{"description":"These functions create and draw an x-axis.\n","example_call":"grid.xaxis(at = NULL, label = TRUE, main = TRUE, edits = NULL,"},"grid::resolveRasterSize":{"description":"Determine the width and height of a raster grob when one or both\nare not given explicitly.\n","example_call":"resolveRasterSize(x)"},"grid::yDetails":{"description":"These generic functions are used to determine a location\non the boundary of a grid grob.\n","example_call":"yDetails(x, theta)"},"grid::grid.text":{"description":"These functions create and draw text and plotmath expressions.\n","example_call":"grid.text(label, x = unit(0.5, \"npc\"), y = unit(0.5, \"npc\"),"},"grid::vpStack":{"description":"These functions create viewports, which describe rectangular regions\non a graphics device and define a number of coordinate systems within\nthose regions.\n","example_call":"vpStack(...)"},"grid::convertHeight":{"description":"These functions take a unit object and convert it to an\nequivalent\nunit object in a different coordinate system.\n","example_call":"convertHeight(x, unitTo, valueOnly = FALSE)"},"grid::defnRotate":{"description":"These functions define the transformation that will be applied\nwhen a grid.define()d group is grid.use()d.\n","example_call":"defnRotate(group, inverse = FALSE, device = TRUE)"},"grid::grid.draw":{"description":"Produces graphical output from a graphical object.\n","example_call":"grid.draw(x, recording = TRUE)"},"grid::linesGrob":{"description":"These functions create and draw a series of lines.\n","example_call":"linesGrob(x = unit(c(0, 1), \"npc\"), y = unit(c(0, 1), \"npc\"),"},"grid::grid.gedit":{"description":"Changes the value of one of the slots of a grob\nand redraws the grob.\n","example_call":"grid.gedit(..., grep = TRUE, global = TRUE)"},"grid::valid.just":{"description":"Utility functions for determining\nwhether a justification specification is valid\nand for resolving a single justification value from\na combination of character and numeric values.\n","example_call":"valid.just(just)"},"grid::postDrawDetails":{"description":"These generic hook functions are called whenever a grid grob is drawn.\nThey provide an opportunity for customising the drawing of a\nnew class derived from grob (or gTree).\n","example_call":"postDrawDetails(x)"},"grid::convertX":{"description":"These functions take a unit object and convert it to an\nequivalent\nunit object in a different coordinate system.\n","example_call":"convertX(x, unitTo, valueOnly = FALSE)"},"grid::grid.record":{"description":"Evaluates an expression that includes both calculations\nand drawing that depends on the calculations so that\nboth the calculations and the drawing will be rerun when\nthe scene is redrawn (e.g., device resize or editing).\n","example_call":"grid.record(expr, list, name = NULL, gp = NULL, vp = NULL)"},"grid::convertY":{"description":"These functions take a unit object and convert it to an\nequivalent\nunit object in a different coordinate system.\n","example_call":"convertY(x, unitTo, valueOnly = FALSE)"},"grid::layoutRegion":{"description":"Internal Grid functions\n","example_call":"layoutRegion(layout.pos.row = 1, layout.pos.col = 1)"},"grid::grid.frame":{"description":"These functions, together with grid.pack,\ngrid.place, packGrob, and placeGrob are part of a\nGUI-builder-like interface to constructing graphical images.\nThe idea is that you create a frame with this function then\nuse grid.pack or whatever to pack/place objects into the frame.\n","example_call":"grid.frame(layout = NULL, name = NULL, gp = gpar(), vp = NULL,"},"grid::grobPoints":{"description":"These functions calculate points along the perimeter (or length) of\na grob.\n","example_call":"grobPoints(x, closed, ...)"},"grid::polylineGrob":{"description":"These functions create and draw a series of lines.\n","example_call":"polylineGrob(x = unit(c(0, 1), \"npc\"), y = unit(c(0, 1), \"npc\"),"},"grid::clipGrob":{"description":"These functions set the clipping region within the current viewport\nwithout altering the current coordinate system.\n","example_call":"clipGrob(x = unit(0.5, \"npc\"), y = unit(0.5, \"npc\"), width = unit(1,"},"grid::rasterGrob":{"description":"Render a raster object (bitmap image) at the given location, size,\nand orientation.\n","example_call":"rasterGrob(image, x = unit(0.5, \"npc\"), y = unit(0.5, \"npc\"),"},"grid::convertWidth":{"description":"These functions take a unit object and convert it to an\nequivalent\nunit object in a different coordinate system.\n","example_call":"convertWidth(x, unitTo, valueOnly = FALSE)"},"grid::xDetails":{"description":"These generic functions are used to determine a location\non the boundary of a grid grob.\n","example_call":"xDetails(x, theta)"},"grid::push.viewport":{"description":"The functions or variables listed here are no longer part of grid.\n","example_call":"push.viewport(..., recording = TRUE)"},"grid::pathListing":{"description":"Return a listing of the names of grobs or viewports.\n","example_call":"pathListing(x, gvpSep = \" | \", gAlign = TRUE)"},"grid::as.mask":{"description":"Define either an alpha mask or a luminance mask,\nbased on a grob.\n","example_call":"as.mask(x, type = c(\"alpha\", \"luminance\"))"},"grid::segmentsGrob":{"description":"These functions create and draw line segments.\n","example_call":"segmentsGrob(x0 = unit(0, \"npc\"), y0 = unit(0, \"npc\"), x1 = unit(1,"},"grid::resolveVJust":{"description":"Utility functions for determining\nwhether a justification specification is valid\nand for resolving a single justification value from\na combination of character and numeric values.\n","example_call":"resolveVJust(just, vjust)"},"grid::grid.polygon":{"description":"These functions create and draw a polygon.\nThe final point will automatically\nbe connected to the initial point.\n","example_call":"grid.polygon(x = c(0, 0.5, 1, 0.5), y = c(0.5, 1, 0.5, 0), id = NULL,"},"grid::get.gpar":{"description":"gpar() should be used to create a set of graphical\nparameter settings.  It returns an object of class \"gpar\".  This is\nbasically a list of name-value pairs.\n","example_call":"get.gpar(names = NULL)"},"grid::unit.pmax":{"description":"Returns a unit object whose i-th value is the minimum (or maximum)\nof the i-th values of the arguments.\n","example_call":"unit.pmax(...)"},"grid::unit.psum":{"description":"Returns a unit object whose i-th value is the minimum (or maximum)\nof the i-th values of the arguments.\n","example_call":"unit.psum(...)"},"grid::dataViewport":{"description":"This is a convenience function for producing a viewport with\nx- and/or y-scales based on numeric values passed to the function.\n","example_call":"dataViewport(xData = NULL, yData = NULL, xscale = NULL, yscale = NULL,"},"grid::current.vpPath":{"description":"current.viewport()\nreturns the viewport that Grid is going to draw into.\n","example_call":"current.vpPath()"},"grid::ascentDetails":{"description":"These generic functions are used to determine the size of grid grobs.\n","example_call":"ascentDetails(x)"},"grid::grid.abline":{"description":"Draw a curve representing a function.\n","example_call":"grid.abline(intercept = 0, slope = 1, ...)"},"grid::childNames":{"description":"Creating grid graphical objects, short (<U+201C>grob<U+201D>s).\n","example_call":"childNames(gTree)"},"grid::grobPathListing":{"description":"Return a listing of the names of grobs or viewports.\n","example_call":"grobPathListing(x, ...)"},"grid::delayGrob":{"description":"Evaluates an expression that includes both calculations\nand generating a grob that depends on the calculations so that\nboth the calculations and the grob generation will be rerun when\nthe scene is redrawn (e.g., device resize or editing).\n","example_call":"delayGrob(expr, list, name = NULL, gp = NULL, vp = NULL)"},"grid::grid.move.to":{"description":"Grid has the notion of a current location.  These functions\nsets that location.\n","example_call":"grid.move.to(x = 0, y = 0, default.units = \"npc\", name = NULL, draw = TRUE,"},"grid::grid.convertHeight":{"description":"The functions or variables listed here are no longer part of grid.\n","example_call":"grid.convertHeight(x, unitTo, valueOnly = FALSE)"},"grid::pattern":{"description":"Functions to define gradient fills and pattern fills.\n","example_call":"pattern(grob, x = 0.5, y = 0.5, width = 1, height = 1, default.units = \"npc\","},"grid::grid.gget":{"description":"Retrieve a grob or a descendant of a grob.\n","example_call":"grid.gget(..., grep = TRUE, global = TRUE)"},"grid::xaxisGrob":{"description":"These functions create and draw an x-axis.\n","example_call":"xaxisGrob(at = NULL, label = TRUE, main = TRUE, edits = NULL,"},"grid::editDetails":{"description":"This generic hook function is called whenever a grid grob is edited\nvia grid.edit or editGrob.\nThis provides an opportunity for customising the editing of a\nnew class derived from grob (or gTree).\n","example_call":"editDetails(x, specs)"},"grid::grid.define":{"description":"These functions define and draw one or more groups, where\na group is a grob that is drawn in isolation before being\ncombined with the main image.  The concept of groups\nallows for compositing operators, object reuse, and\naffine transformations (see the Details section).\n","example_call":"grid.define(src, op = \"over\", dst = NULL, coords = TRUE, name = NULL,"},"grid::viewportTranslate":{"description":"These functions define the transformation that will be applied\nwhen a grid.define()d group is grid.use()d.\n","example_call":"viewportTranslate(group, device = TRUE)"},"grid::grobTree":{"description":"Creating grid graphical objects, short (<U+201C>grob<U+201D>s).\n","example_call":"grobTree(..., name = NULL, gp = NULL, vp = NULL, childrenvp = NULL,"},"grid::grid.DLapply":{"description":"Call a function on each element of the current display list.\n","example_call":"grid.DLapply(FUN, ...)"},"grid::grid.grill":{"description":"This function draws a grill within a Grid viewport.\n","example_call":"grid.grill(h = unit(seq(0.25, 0.75, 0.25), \"npc\"), v = unit(seq(0.25,"},"grid::nestedListing":{"description":"Return a listing of the names of grobs or viewports.\n","example_call":"nestedListing(x, gindent = \"  \", vpindent = gindent)"},"grid::as.path":{"description":"These functions stroke (draw a line along the border) or\nfill (or both) a path, where the path is defined by\na grob.\n","example_call":"as.path(x, gp = gpar(), rule = c(\"winding\", \"evenodd\"))"},"grid::layout.heights":{"description":"Internal Grid functions\n","example_call":"layout.heights(lay)"},"grid::unit.c":{"description":"This function produces a new unit object by combining the\nunit objects specified as arguments.\n","example_call":"unit.c(..., check = TRUE)"},"grid::grid.use":{"description":"These functions define and draw one or more groups, where\na group is a grob that is drawn in isolation before being\ncombined with the main image.  The concept of groups\nallows for compositing operators, object reuse, and\naffine transformations (see the Details section).\n","example_call":"grid.use(group, transform = viewportTransform, name = NULL,"},"grid::grid.refresh":{"description":"Replays the current grid display list.\n","example_call":"grid.refresh()"},"grid::resolveHJust":{"description":"Utility functions for determining\nwhether a justification specification is valid\nand for resolving a single justification value from\na combination of character and numeric values.\n","example_call":"resolveHJust(just, hjust)"},"grid::emptyGrobCoords":{"description":"These functions support the development of grobPoints\nmethods for custom grobs.\n","example_call":"emptyGrobCoords(name)"},"grid::grobName":{"description":"This function generates a unique (within-session) name for\na grob, based on the grob's class.\n","example_call":"grobName(grob = NULL, prefix = \"GRID\")"},"grid::editGrob":{"description":"Changes the value of one of the slots of a grob\nand redraws the grob.\n","example_call":"editGrob(grob, gPath = NULL, ..., strict = FALSE, grep = FALSE,"},"grid::grid.strip":{"description":"Internal Grid functions\n","example_call":"grid.strip(label = \"whatever\", range.full = c(0, 1), range.thumb = c(0.3,"},"grid::grid.clip":{"description":"These functions set the clipping region within the current viewport\nwithout altering the current coordinate system.\n","example_call":"grid.clip(...)"},"grid::arrowsGrob":{"description":"The functions or variables listed here are no longer part of grid.\n","example_call":"arrowsGrob(x = c(0.25, 0.75), y = 0.5, default.units = \"npc\","},"grid::grid.raster":{"description":"Render a raster object (bitmap image) at the given location, size,\nand orientation.\n","example_call":"grid.raster(image, x = unit(0.5, \"npc\"), y = unit(0.5, \"npc\"),"},"grid::unit.rep":{"description":"Replicates the units according to the values given in times and\nlength.out.\n","example_call":"unit.rep(x, ...)"},"grid::grid.circle":{"description":"Functions to create and draw a circle.\n","example_call":"grid.circle(x = 0.5, y = 0.5, r = 0.5, default.units = \"npc\", name = NULL,"},"grid::grid.copy":{"description":"This function is redundant and will disappear in future versions.\n","example_call":"grid.copy(grob)"},"grid::grid.fill":{"description":"These functions stroke (draw a line along the border) or\nfill (or both) a path, where the path is defined by\na grob.\n","example_call":"grid.fill(...)"},"grid::stringAscent":{"description":"These functions create a unit object describing the width or height of\na string.\n","example_call":"stringAscent(string)"},"grid::gridGTreeCoords":{"description":"These functions support the development of grobPoints\nmethods for custom grobs.\n","example_call":"gridGTreeCoords(x, name)"},"grid::grid.points":{"description":"These functions create and draw data symbols.\n","example_call":"grid.points(x = stats::runif(10), y = stats::runif(10), pch = 1,"},"grid::legendGrob":{"description":"Constructing a legend grob (in progress)\n","example_call":"legendGrob(labels, nrow, ncol, byrow = FALSE, do.lines = has.lty ||"},"grid::popViewport":{"description":"Grid maintains a tree of viewports <U+2014> nested drawing\ncontexts.\n","example_call":"popViewport(n = 1, recording = TRUE)"},"grid::grid.polyline":{"description":"These functions create and draw a series of lines.\n","example_call":"grid.polyline(...)"},"grid::useScale":{"description":"These functions define the transformation that will be applied\nwhen a grid.define()d group is grid.use()d.\n","example_call":"useScale(inverse = FALSE)"},"grid::grid.group":{"description":"These functions define and draw one or more groups, where\na group is a grob that is drawn in isolation before being\ncombined with the main image.  The concept of groups\nallows for compositing operators, object reuse, and\naffine transformations (see the Details section).\n","example_call":"grid.group(src, op = \"over\", dst = NULL, coords = TRUE, name = NULL,"},"grid::recordGrob":{"description":"Evaluates an expression that includes both calculations\nand drawing that depends on the calculations so that\nboth the calculations and the drawing will be rerun when\nthe scene is redrawn (e.g., device resize or editing).\n","example_call":"recordGrob(expr, list, name = NULL, gp = NULL, vp = NULL)"},"grid::circleGrob":{"description":"Functions to create and draw a circle.\n","example_call":"circleGrob(x = 0.5, y = 0.5, r = 0.5, default.units = \"npc\", name = NULL,"},"grid::useTranslate":{"description":"These functions define the transformation that will be applied\nwhen a grid.define()d group is grid.use()d.\n","example_call":"useTranslate(inverse = FALSE, device = TRUE)"},"grid::grid.newpage":{"description":"This function erases the current device or moves to a new page.\n","example_call":"grid.newpage(recording = TRUE, clearGroups = TRUE)"},"grid::grid.edit":{"description":"Changes the value of one of the slots of a grob\nand redraws the grob.\n","example_call":"grid.edit(gPath, ..., strict = FALSE, grep = FALSE, global = FALSE,"},"grid::forceGrob":{"description":"Some grobs only generate their content to draw at\ndrawing time;  this function replaces such grobs with\ntheir at-drawing-time content.\n","example_call":"forceGrob(x)"},"grid::grid.convertX":{"description":"The functions or variables listed here are no longer part of grid.\n","example_call":"grid.convertX(x, unitTo, valueOnly = FALSE)"},"grid::isEmptyCoords":{"description":"These functions support the development of grobPoints\nmethods for custom grobs.\n","example_call":"isEmptyCoords(coords)"},"grid::grid.convertY":{"description":"The functions or variables listed here are no longer part of grid.\n","example_call":"grid.convertY(x, unitTo, valueOnly = FALSE)"},"grid::grid.collection":{"description":"The functions or variables listed here are no longer part of grid.\n","example_call":"grid.collection(..., gp = gpar(), draw = TRUE, vp = NULL)"},"grid::polygonGrob":{"description":"These functions create and draw a polygon.\nThe final point will automatically\nbe connected to the initial point.\n","example_call":"polygonGrob(x = c(0, 0.5, 1, 0.5), y = c(0.5, 1, 0.5, 0), id = NULL,"},"grid::showViewport":{"description":"Produces a graphical display of (by default) the current\ngrid viewport tree.  It is also possible to display only\nspecific viewports.  Each viewport is drawn as a rectangle\nand the leaf viewports are labelled with the viewport name.\n","example_call":"showViewport(vp = NULL, recurse = TRUE, depth = NULL, newpage = FALSE,"},"grid::grid.set":{"description":"Replace a grob or a descendant of a grob.\n","example_call":"grid.set(gPath, newGrob, strict = FALSE, grep = FALSE, redraw = TRUE)"},"grid::vpTree":{"description":"These functions create viewports, which describe rectangular regions\non a graphics device and define a number of coordinate systems within\nthose regions.\n","example_call":"vpTree(parent, children)"},"grid::makeContent":{"description":"These generic hook functions are called whenever a grid grob is drawn.\nThey provide an opportunity for customising the drawing context\nand drawing content of a\nnew class derived from grob (or gTree).\n","example_call":"makeContent(x)"},"grid::unit":{"description":"This function creates a unit object <U+2014> a vector of unit values.\nA unit value is typically just a single numeric value with an\nassociated unit.\n","example_call":"unit(x, units, data = NULL)"},"grid::grid.bezier":{"description":"These functions create and draw Bezier Curves (a curve drawn\nrelative to 4 control points).\n","example_call":"grid.bezier(...)"},"grid::grid.display.list":{"description":"Turn the Grid display list on or off.\n","example_call":"grid.display.list(on = TRUE)"},"grid::pushViewport":{"description":"Grid maintains a tree of viewports <U+2014> nested drawing\ncontexts.\n","example_call":"pushViewport(..., recording = TRUE)"},"grid::gTree":{"description":"Creating grid graphical objects, short (<U+201C>grob<U+201D>s).\n","example_call":"gTree(..., name = NULL, gp = NULL, vp = NULL, children = NULL,"},"grid::gridGrobCoords":{"description":"These functions support the development of grobPoints\nmethods for custom grobs.\n","example_call":"gridGrobCoords(x, name, rule = NULL)"},"grid::grid.pack":{"description":"these functions, together with grid.frame and frameGrob\nare part of a\nGUI-builder-like interface to constructing graphical images.\nThe idea is that you create a frame with grid.frame or\nframeGrob then\nuse these functions to pack objects into the frame.\n","example_call":"grid.pack(gPath, grob, redraw = TRUE, side = NULL, row = NULL,"},"grid::groupGrob":{"description":"These functions define and draw one or more groups, where\na group is a grob that is drawn in isolation before being\ncombined with the main image.  The concept of groups\nallows for compositing operators, object reuse, and\naffine transformations (see the Details section).\n","example_call":"groupGrob(src, op = \"over\", dst = NULL, coords = TRUE, name = NULL,"},"grid::viewport":{"description":"These functions create viewports, which describe rectangular regions\non a graphics device and define a number of coordinate systems within\nthose regions.\n","example_call":"viewport(x = unit(0.5, \"npc\"), y = unit(0.5, \"npc\"), width = unit(1,"},"grid::defineGrob":{"description":"These functions define and draw one or more groups, where\na group is a grob that is drawn in isolation before being\ncombined with the main image.  The concept of groups\nallows for compositing operators, object reuse, and\naffine transformations (see the Details section).\n","example_call":"defineGrob(src, op = \"over\", dst = NULL, coords = TRUE, name = NULL,"},"grid::groupFlip":{"description":"These functions define the transformation that will be applied\nwhen a grid.define()d group is grid.use()d.\n","example_call":"groupFlip(flipX = FALSE, flipY = FALSE)"},"grid::nullGrob":{"description":"These functions create a NULL graphical object,\nwhich has zero width, zero height, and draw nothing.\nIt can be used as a place-holder or as an invisible\nreference point for other drawing.\n","example_call":"nullGrob(x = unit(0.5, \"npc\"), y = unit(0.5, \"npc\"), default.units = \"npc\","},"grid::deviceDim":{"description":"These functions take a pair of unit objects and convert\nthem to a pair of device locations (or dimensions) in inches\n(or native device coordinates).\n","example_call":"deviceDim(w, h, valueOnly = FALSE, device = FALSE)"},"grid::current.rotation":{"description":"current.viewport()\nreturns the viewport that Grid is going to draw into.\n","example_call":"current.rotation()"},"grid::editViewport":{"description":"This is a convenience function for producing a new viewport\nfrom a copy of an existing viewport (by default the current\nviewport), with specified modifications.\n","example_call":"editViewport(vp = current.viewport(), ...)"},"grid::upViewport":{"description":"Grid maintains a tree of viewports <U+2014> nested drawing\ncontexts.\n","example_call":"upViewport(n = 1, recording = TRUE)"},"grid::grid.grabExpr":{"description":"Creates a gTree object from the current grid display list\nor from a scene generated by user-specified code.\n","example_call":"grid.grabExpr(expr, warn = 2, wrap = wrap.grobs, wrap.grobs = FALSE,"},"grid::grob":{"description":"Creating grid graphical objects, short (<U+201C>grob<U+201D>s).\n","example_call":"grob(..., name = NULL, gp = NULL, vp = NULL, cl = NULL)"},"grid::curveGrob":{"description":"These functions create and draw a curve from one location\nto another.\n","example_call":"curveGrob(x1, y1, x2, y2, default.units = \"npc\", curvature = 1,"},"grid::gridCoords":{"description":"These functions support the development of grobPoints\nmethods for custom grobs.\n","example_call":"gridCoords(x, y)"},"grid::yaxisGrob":{"description":"These functions create and draw a y-axis.\n","example_call":"yaxisGrob(at = NULL, label = TRUE, main = TRUE, edits = NULL,"},"grid::seekViewport":{"description":"Grid maintains a tree of viewports <U+2014> nested drawing\ncontexts.\n","example_call":"seekViewport(name, recording = TRUE)"},"grid::groupRotate":{"description":"These functions define the transformation that will be applied\nwhen a grid.define()d group is grid.use()d.\n","example_call":"groupRotate(r = 0, device = TRUE)"},"grid::grid.line.to":{"description":"Grid has the notion of a current location.  These functions\nsets that location.\n","example_call":"grid.line.to(x = 1, y = 1, default.units = \"npc\", arrow = NULL,"},"grid::placeGrob":{"description":"These functions provide a simpler (and faster) alternative\nto the grid.pack() and packGrob\nfunctions.  They can be used to place objects within the existing\nrows and columns of a frame layout.  They do not provide the ability to\nadd new rows and columns nor do they affect the\nheights and widths of the rows and columns.\n","example_call":"placeGrob(frame, grob, row = NULL, col = NULL)"},"grid::reorderGrob":{"description":"Change the order in which the children of a gTree get drawn.\n","example_call":"reorderGrob(x, order, back = TRUE)"},"grid::depth":{"description":"Determine the number of levels in a viewport stack or tree,\nin a viewport path, or in a grob path.\n","example_call":"depth(x, ...)"},"grid::defnScale":{"description":"These functions define the transformation that will be applied\nwhen a grid.define()d group is grid.use()d.\n","example_call":"defnScale(group, inverse = FALSE)"},"grid::groupTranslate":{"description":"These functions define the transformation that will be applied\nwhen a grid.define()d group is grid.use()d.\n","example_call":"groupTranslate(dx = 0, dy = 0)"},"grid::heightDetails":{"description":"These generic functions are used to determine the size of grid grobs.\n","example_call":"heightDetails(x)"},"grid::bezierGrob":{"description":"These functions create and draw Bezier Curves (a curve drawn\nrelative to 4 control points).\n","example_call":"bezierGrob(x = c(0, 0.5, 1, 0.5), y = c(0.5, 1, 0.5, 0), id = NULL,"},"grid::is.unit":{"description":"This function creates a unit object <U+2014> a vector of unit values.\nA unit value is typically just a single numeric value with an\nassociated unit.\n","example_call":"is.unit(x)"},"grid::grobX":{"description":"These functions create a unit object describing a location somewhere\non the boundary of\na grob.  They are generic.\n","example_call":"grobX(x, theta)"},"grid::stringHeight":{"description":"These functions create a unit object describing the width or height of\na string.\n","example_call":"stringHeight(string)"},"grid::grid.convert":{"description":"The functions or variables listed here are no longer part of grid.\n","example_call":"grid.convert(x, unitTo, axisFrom = \"x\", typeFrom = \"location\", axisTo = axisFrom,"},"grid::makeContext":{"description":"These generic hook functions are called whenever a grid grob is drawn.\nThey provide an opportunity for customising the drawing context\nand drawing content of a\nnew class derived from grob (or gTree).\n","example_call":"makeContext(x)"},"grid::grobY":{"description":"These functions create a unit object describing a location somewhere\non the boundary of\na grob.  They are generic.\n","example_call":"grobY(x, theta)"},"grid::grid.path":{"description":"These functions create and draw one or more paths.\nThe final point of a path will automatically\nbe connected to the initial point.\n","example_call":"grid.path(...)"},"grid::unit.length":{"description":"The length of a unit object is defined as the number of unit\nvalues in the unit object.\n","example_call":"unit.length(unit)"},"grid::linearGradient":{"description":"Functions to define gradient fills and pattern fills.\n","example_call":"linearGradient(colours = c(\"black\", \"white\"), stops = seq(0, 1, length.out = length(colours)),"},"grid::grid.null":{"description":"These functions create a NULL graphical object,\nwhich has zero width, zero height, and draw nothing.\nIt can be used as a place-holder or as an invisible\nreference point for other drawing.\n","example_call":"grid.null(...)"},"grid::grid.arrows":{"description":"The functions or variables listed here are no longer part of grid.\n","example_call":"grid.arrows(x = c(0.25, 0.75), y = 0.5, default.units = \"npc\","},"grid::defnTranslate":{"description":"These functions define the transformation that will be applied\nwhen a grid.define()d group is grid.use()d.\n","example_call":"defnTranslate(group, inverse = FALSE, device = TRUE)"},"grid::grid.delay":{"description":"Evaluates an expression that includes both calculations\nand generating a grob that depends on the calculations so that\nboth the calculations and the grob generation will be rerun when\nthe scene is redrawn (e.g., device resize or editing).\n","example_call":"grid.delay(expr, list, name = NULL, gp = NULL, vp = NULL)"},"grid::textGrob":{"description":"These functions create and draw text and plotmath expressions.\n","example_call":"textGrob(label, x = unit(0.5, \"npc\"), y = unit(0.5, \"npc\"),"},"grid::roundrectGrob":{"description":"Draw a single rectangle with rounded corners.","example_call":"roundrectGrob(x = 0.5, y = 0.5, width = 1, height = 1, default.units = \"npc\","},"grid::grid.cap":{"description":"Capture the current contents of a graphics device as a raster\n(bitmap) image.\n","example_call":"grid.cap()"},"grid::validDetails":{"description":"This generic hook function is called whenever a grid grob is created\nor\nedited\nvia grob, gTree, grid.edit or editGrob.\nThis provides an opportunity for customising the validation of a\nnew class derived from grob (or gTree).\n","example_call":"validDetails(x)"},"grid::grid.gremove":{"description":"Remove a grob from a gTree or a descendant of a gTree.\n","example_call":"grid.gremove(..., grep = TRUE, global = TRUE)"},"grid::pop.viewport":{"description":"The functions or variables listed here are no longer part of grid.\n","example_call":"pop.viewport(n = 1, recording = TRUE)"},"grid::layout.torture":{"description":"Internal Grid functions\n","example_call":"layout.torture()"},"grid::packGrob":{"description":"these functions, together with grid.frame and frameGrob\nare part of a\nGUI-builder-like interface to constructing graphical images.\nThe idea is that you create a frame with grid.frame or\nframeGrob then\nuse these functions to pack objects into the frame.\n","example_call":"packGrob(frame, grob, side = NULL, row = NULL, row.before = NULL,"},"grid::grid.show.viewport":{"description":"This function uses Grid graphics to draw a diagram of\na Grid viewport.\n","example_call":"grid.show.viewport(v, parent.layout = NULL, newpage = TRUE, vp.ex = 0.8,"},"grid::gEdit":{"description":"The functions gEdit and gEditList create\nobjects representing an edit operation (essentially a list\nof arguments to editGrob).\n","example_call":"gEdit(...)"},"grid::current.parent":{"description":"current.viewport()\nreturns the viewport that Grid is going to draw into.\n","example_call":"current.parent(n = 1)"},"grid::grobCoords":{"description":"These functions calculate points along the perimeter (or length) of\na grob.\n","example_call":"grobCoords(x, closed, ...)"},"grid::engine.display.list":{"description":"Turn the Grid display list on or off.\n","example_call":"engine.display.list(on = TRUE)"},"grid::grid.convertWidth":{"description":"The functions or variables listed here are no longer part of grid.\n","example_call":"grid.convertWidth(x, unitTo, valueOnly = FALSE)"},"grid::grid.function":{"description":"Draw a curve representing a function.\n","example_call":"grid.function(...)"},"grid::gEditList":{"description":"The functions gEdit and gEditList create\nobjects representing an edit operation (essentially a list\nof arguments to editGrob).\n","example_call":"gEditList(...)"},"grid::calcStringMetric":{"description":"This function returns the ascent, descent, and width metric\ninformation for a character or expression vector.\n","example_call":"calcStringMetric(text)"},"grid::grid.remove":{"description":"Remove a grob from a gTree or a descendant of a gTree.\n","example_call":"grid.remove(gPath, warn = TRUE, strict = FALSE, grep = FALSE, global = FALSE,"},"grid::grid.grab":{"description":"Creates a gTree object from the current grid display list\nor from a scene generated by user-specified code.\n","example_call":"grid.grab(warn = 2, wrap = wrap.grobs, wrap.grobs = FALSE, ...)"},"grid::functionGrob":{"description":"Draw a curve representing a function.\n","example_call":"functionGrob(f, n = 101, range = \"x\", units = \"native\", name = NULL,"},"grid::grid.force":{"description":"Some grobs only generate their content to draw at\ndrawing time;  this function replaces such grobs with\ntheir at-drawing-time content.\n","example_call":"grid.force(x, ...)"},"grid::grid.panel":{"description":"Internal Grid functions\n","example_call":"grid.panel(x = stats::runif(10), y = stats::runif(10), zrange = c(0,"},"grid::setGrob":{"description":"Replace a grob or a descendant of a grob.\n","example_call":"setGrob(gTree, gPath, newGrob, strict = FALSE, grep = FALSE)"},"grid::stringWidth":{"description":"These functions create a unit object describing the width or height of\na string.\n","example_call":"stringWidth(string)"},"grid::lineToGrob":{"description":"Grid has the notion of a current location.  These functions\nsets that location.\n","example_call":"lineToGrob(x = 1, y = 1, default.units = \"npc\", arrow = NULL,"},"grid::draw.details":{"description":"The functions or variables listed here are no longer part of grid.\n","example_call":"draw.details(x, recording)"},"grid::current.vpTree":{"description":"current.viewport()\nreturns the viewport that Grid is going to draw into.\n","example_call":"current.vpTree(all = TRUE)"},"gtable::gtable_trim":{"description":"This function detects rows and columns that does not contain any grobs and\nremoves thewm from the gtable. If the rows and/or columns removed had a\nnon-zero height/width the relative layout of the gtable may change.\n","example_call":"gtable_trim(x)"},"gtable::gtable_add_rows":{"description":"Insert new rows in a gtable and adjust the grob placement accordingly. If\nrows are added in the middle of a grob spanning multiple rows, the grob will\ncontinue to span them all. If a row is added above or below a grob, the grob\nwill not span the new row(s).\n","example_call":"gtable_add_rows(x, heights, pos = -1)"},"gtable::gtable_row":{"description":"This function puts grobs in a list side-by-side in a single-row gtable from\nleft to right witrh the given widths and height.\n","example_call":"gtable_row(name, grobs, height = NULL, widths = NULL, z = NULL,"},"gtable::gtable_height":{"description":"Note that unlike heightDetails.gtable, this can return relative units.\n","example_call":"gtable_height(x)"},"gtable::gtable_add_cols":{"description":"Insert new columns in a gtable and adjust the grob placement accordingly. If\ncolumns are added in the middle of a grob spanning multiple columns, the grob\nwill continue to span them all. If a column is added to the left or right of\na grob, the grob will not span the new column(s).\n","example_call":"gtable_add_cols(x, widths, pos = -1)"},"gtable::gtable_add_row_space":{"description":"Adds width space between the columns or height space between\nthe rows, effictvely pushing the existing cells apart.\n","example_call":"gtable_add_row_space(x, height)"},"gtable::gtable":{"description":"A grob table captures all the information needed to layout grobs in a table\nstructure. It supports row and column spanning, offers some tools to\nautomatically figure out the correct dimensions, and makes it easy to\nalign and combine multiple tables.\n","example_call":"gtable(widths = list(), heights = list(), respect = FALSE,"},"gtable::is.gtable":{"description":"Is this a gtable?\n","example_call":"is.gtable(x)"},"gtable::gtable_show_layout":{"description":"This function is a simple wrapper around grid::grid.show.layout() that\nallows you to inspect the layout of the gtable.\n","example_call":"gtable_show_layout(x, ...)"},"gtable::gtable_add_grob":{"description":"This only adds grobs into the table - it doesn't affect the table layout in\nany way.  In the gtable model, grobs always fill up the complete table\ncell.  If you want custom justification you might need to define the grob\ndimension in absolute units, or put it into another gtable that can then be\nadded to the gtable instead of the grob.\n","example_call":"gtable_add_grob(x, grobs, t, l, b = t, r = l, z = Inf, clip = \"on\","},"gtable::gtable_col_spacer":{"description":"Create a zero-column or zero-row gtable with the given heights or widths\nrespectively.\n","example_call":"gtable_col_spacer(heights)"},"gtable::gtable_matrix":{"description":"This function takes a matrix of grobs and create a gtable matching with the\ngrobs in the same position as they were in the matrix, with the given heights\nand widths.\n","example_call":"gtable_matrix(name, grobs, widths = NULL, heights = NULL, z = NULL,"},"gtable::gtable_col":{"description":"This function stacks a list of grobs into a single column gtable of the given\nwidth and heights.\n","example_call":"gtable_col(name, grobs, width = NULL, heights = NULL, z = NULL,"},"gtable::gtable_add_padding":{"description":"This is a convenience function for adding an extra row and an extra column at\neach edge of the table.\n","example_call":"gtable_add_padding(x, padding)"},"gtable::gtable_row_spacer":{"description":"Create a zero-column or zero-row gtable with the given heights or widths\nrespectively.\n","example_call":"gtable_row_spacer(widths)"},"gtable::gtable_add_col_space":{"description":"Adds width space between the columns or height space between\nthe rows, effictvely pushing the existing cells apart.\n","example_call":"gtable_add_col_space(x, width)"},"gtable::gtable_width":{"description":"Note that unlike widthDetails.gtable, this can return relative units.\n","example_call":"gtable_width(x)"},"gtable::gtable_filter":{"description":"Normally a gtable is considered a matrix when indexing so that indexing is\nworking on the cell layout and not on the grobs it contains. gtable_filter\nallows you to subset the grobs by name and optionally remove rows or columns\nif left empty after the subsetting\n","example_call":"gtable_filter(x, pattern, fixed = FALSE, trim = TRUE, invert = FALSE)"},"haven::print_tagged_na":{"description":"\"Tagged\" missing values work exactly like regular R missing values except\nthat they store one additional byte of information a tag, which is usually\na letter (\"a\" to \"z\"). When by loading a SAS and Stata file, the tagged\nmissing values always use lower case values.\n","example_call":"print_tagged_na(x, digits = getOption(\"digits\"))"},"haven::write_xpt":{"description":"The SAS transport format is a open format, as is required for submission\nof the data to the FDA.\n","example_call":"write_xpt(data, path, version = 8, name = NULL, label = attr(data,"},"haven::write_sav":{"description":"read_sav() reads both .sav and .zsav files; write_sav() creates\n.zsav files when compress = TRUE. read_por() reads .por files.\nread_spss() uses either read_por() or read_sav() based on the\nfile extension.\n","example_call":"write_sav(data, path, compress = c(\"byte\", \"none\", \"zsav\"), adjust_tz = TRUE)"},"haven::zap_formats":{"description":"To provide some mild support for round-tripping variables between Stata/SPSS\nand R, haven stores variable formats in an attribute: format.stata,\nformat.spss, or format.sas. If this causes problems for your\ncode, you can get rid of them with zap_formats.\n","example_call":"zap_formats(x)"},"haven::labelled":{"description":"A labelled vector is a common data structure in other statistical\nenvironments, allowing you to assign text labels to specific values.\nThis class makes it possible to import such labelled vectors in to R\nwithout loss of fidelity. This class provides few methods, as I\nexpect you'll coerce to a standard R class (e.g. a factor())\nsoon after importing.\n","example_call":"labelled(x = double(), labels = NULL, label = NULL)"},"haven::read_stata":{"description":"Currently haven can read and write logical, integer, numeric, character\nand factors. See labelled() for how labelled variables in\nStata are handled in R.\n","example_call":"read_stata(file, encoding = NULL, col_select = NULL, skip = 0,"},"haven::is_tagged_na":{"description":"\"Tagged\" missing values work exactly like regular R missing values except\nthat they store one additional byte of information a tag, which is usually\na letter (\"a\" to \"z\"). When by loading a SAS and Stata file, the tagged\nmissing values always use lower case values.\n","example_call":"is_tagged_na(x, tag = NULL)"},"haven::write_dta":{"description":"Currently haven can read and write logical, integer, numeric, character\nand factors. See labelled() for how labelled variables in\nStata are handled in R.\n","example_call":"write_dta(data, path, version = 14, label = attr(data, \"label\"),"},"haven::print_labels":{"description":"This is a convenience function, useful to explore the variables of\na newly imported dataset.\n","example_call":"print_labels(x, name = NULL)"},"haven::read_por":{"description":"read_sav() reads both .sav and .zsav files; write_sav() creates\n.zsav files when compress = TRUE. read_por() reads .por files.\nread_spss() uses either read_por() or read_sav() based on the\nfile extension.\n","example_call":"read_por(file, user_na = FALSE, col_select = NULL, skip = 0,"},"haven::tagged_na":{"description":"\"Tagged\" missing values work exactly like regular R missing values except\nthat they store one additional byte of information a tag, which is usually\na letter (\"a\" to \"z\"). When by loading a SAS and Stata file, the tagged\nmissing values always use lower case values.\n","example_call":"tagged_na(...)"},"haven::na_tag":{"description":"\"Tagged\" missing values work exactly like regular R missing values except\nthat they store one additional byte of information a tag, which is usually\na letter (\"a\" to \"z\"). When by loading a SAS and Stata file, the tagged\nmissing values always use lower case values.\n","example_call":"na_tag(x)"},"haven::zap_empty":{"description":"Convert empty strings into missing values\n","example_call":"zap_empty(x)"},"haven::vec_arith.haven_labelled":{"description":"Internal vctrs methods\n","example_call":"vec_arith.haven_labelled(op, x, y, ...)"},"haven::zap_missing":{"description":"This is useful if you want to convert tagged missing values from SAS or\nStata, or user-defined missings from SPSS, to regular R NA.\n","example_call":"zap_missing(x)"},"haven::zap_labels":{"description":"Removes value labels, leaving unlabelled vectors as is. Use this if you\nwant to simply drop all labels from a data frame.\n","example_call":"zap_labels(x, ...)"},"haven::format_tagged_na":{"description":"\"Tagged\" missing values work exactly like regular R missing values except\nthat they store one additional byte of information a tag, which is usually\na letter (\"a\" to \"z\"). When by loading a SAS and Stata file, the tagged\nmissing values always use lower case values.\n","example_call":"format_tagged_na(x, digits = getOption(\"digits\"))"},"haven::zap_widths":{"description":"To provide some mild support for round-tripping variables between SPSS\nand R, haven stores display widths in an attribute: display_width. If this\ncauses problems for your code, you can get rid of them with zap_widths.\n","example_call":"zap_widths(x)"},"haven::zap_label":{"description":"Removes variable label, leaving unlabelled vectors as is.\n","example_call":"zap_label(x)"},"haven::read_spss":{"description":"read_sav() reads both .sav and .zsav files; write_sav() creates\n.zsav files when compress = TRUE. read_por() reads .por files.\nread_spss() uses either read_por() or read_sav() based on the\nfile extension.\n","example_call":"read_spss(file, user_na = FALSE, col_select = NULL, skip = 0,"},"haven::read_sas":{"description":"read_sas() supports both sas7bdat files and the accompanying sas7bcat files\nthat SAS uses to record value labels.\n","example_call":"read_sas(data_file, catalog_file = NULL, encoding = NULL, catalog_encoding = encoding,"},"haven::labelled_spss":{"description":"This class is only used when user_na = TRUE in\nread_sav(). It is similar to the labelled() class\nbut it also models SPSS's user-defined missings, which can be up to\nthree distinct values, or for numeric vectors a range.\n","example_call":"labelled_spss(x = double(), labels = NULL, na_values = NULL, na_range = NULL,"},"haven::read_xpt":{"description":"The SAS transport format is a open format, as is required for submission\nof the data to the FDA.\n","example_call":"read_xpt(file, col_select = NULL, skip = 0, n_max = Inf, .name_repair = \"unique\")"},"haven::read_sav":{"description":"read_sav() reads both .sav and .zsav files; write_sav() creates\n.zsav files when compress = TRUE. read_por() reads .por files.\nread_spss() uses either read_por() or read_sav() based on the\nfile extension.\n","example_call":"read_sav(file, encoding = NULL, user_na = FALSE, col_select = NULL,"},"haven::write_sas":{"description":"\n","example_call":"write_sas(data, path)"},"haven::read_dta":{"description":"Currently haven can read and write logical, integer, numeric, character\nand factors. See labelled() for how labelled variables in\nStata are handled in R.\n","example_call":"read_dta(file, encoding = NULL, col_select = NULL, skip = 0,"},"haven::is.labelled":{"description":"A labelled vector is a common data structure in other statistical\nenvironments, allowing you to assign text labels to specific values.\nThis class makes it possible to import such labelled vectors in to R\nwithout loss of fidelity. This class provides few methods, as I\nexpect you'll coerce to a standard R class (e.g. a factor())\nsoon after importing.\n","example_call":"is.labelled(x)"},"hms::hms":{"description":"The values are stored as a difftime vector with a custom class,\nand always with \"seconds\" as unit for robust coercion to numeric.\nSupports construction from time values, coercion to and from\nvarious data types, and formatting.  Can be used as a regular column in a\ndata frame.\n","example_call":"hms(seconds = NULL, minutes = NULL, hours = NULL, days = NULL)"},"hms::as_hms":{"description":"The values are stored as a difftime vector with a custom class,\nand always with \"seconds\" as unit for robust coercion to numeric.\nSupports construction from time values, coercion to and from\nvarious data types, and formatting.  Can be used as a regular column in a\ndata frame.\n","example_call":"as_hms(x, ...)"},"hms::as.hms":{"description":"is.hms() has been replaced by is_hms().\n","example_call":"as.hms(x, ...)"},"hms::round_hms":{"description":"Convenience functions to round or truncate to a multiple of seconds.\n","example_call":"round_hms(x, secs = NULL, digits = NULL)"},"hms::parse_hms":{"description":"These functions convert character vectors to objects of the hms class.\nNA values are supported.\n","example_call":"parse_hms(x)"},"hms::vec_cast.hms":{"description":"Double dispatch methods to support vctrs::vec_cast().\n","example_call":"vec_cast.hms(x, to, ...)"},"hms::is_hms":{"description":"The values are stored as a difftime vector with a custom class,\nand always with \"seconds\" as unit for robust coercion to numeric.\nSupports construction from time values, coercion to and from\nvarious data types, and formatting.  Can be used as a regular column in a\ndata frame.\n","example_call":"is_hms(x)"},"hms::parse_hm":{"description":"These functions convert character vectors to objects of the hms class.\nNA values are supported.\n","example_call":"parse_hm(x)"},"hms::is.hms":{"description":"is.hms() has been replaced by is_hms().\n","example_call":"is.hms(x)"},"hms::new_hms":{"description":"The values are stored as a difftime vector with a custom class,\nand always with \"seconds\" as unit for robust coercion to numeric.\nSupports construction from time values, coercion to and from\nvarious data types, and formatting.  Can be used as a regular column in a\ndata frame.\n","example_call":"new_hms(x = numeric())"},"hms::vec_ptype2.hms":{"description":"Double dispatch methods to support vctrs::vec_ptype2().\n","example_call":"vec_ptype2.hms(x, y, ..., x_arg = \"\", y_arg = \"\")"},"hms::trunc_hms":{"description":"Convenience functions to round or truncate to a multiple of seconds.\n","example_call":"trunc_hms(x, secs = NULL, digits = NULL)"},"insight::get_sigma":{"description":"Returns sigma, which corresponds the estimated standard\ndeviation of the residuals. This function extends the sigma() base R\ngeneric for models that don't have implemented it. It also computes the\nconfidence interval (CI), which is stored as an attribute.\n","example_call":"get_sigma(x, ci = NULL, verbose = TRUE)"},"insight::format_number":{"description":"Convert number to words\n","example_call":"format_number(x, textual = TRUE, ...)"},"insight::get_transformation":{"description":"This functions checks whether any transformation, such as log- or\nexp-transforming, was applied to the response variable (dependent variable)\nin a regression formula, and returns the related function that was used for\ntransformation.\n","example_call":"get_transformation(x, verbose = TRUE)"},"insight::find_response":{"description":"Returns the name(s) of the response variable(s) from a model object.\n","example_call":"find_response(x, combine = TRUE, ...)"},"insight::get_varcov":{"description":"Returns the variance-covariance, as retrieved by stats::vcov(), but works\nfor more model objects that probably don't provide a vcov()-method.\n","example_call":"get_varcov(x, ...)"},"insight::object_has_names":{"description":"object_has_names() checks if specified names are present in the given object.\nobject_has_rownames() checks if rownames are present in a dataframe.\n","example_call":"object_has_names(x, names)"},"insight::format_error":{"description":"Inserts line breaks into a longer message or warning string.\nLine length is adjusted to maximum length of the console, if the width\ncan be accessed. By default, new lines are indented by two spaces.\n","example_call":"format_error(...)"},"insight::colour_text":{"description":"Convenient function that allows coloured output in the console.\nMainly implemented to reduce package dependencies.\n","example_call":"colour_text(text, colour)"},"insight::get_family":{"description":"A robust and resilient alternative to stats::family. To avoid issues\nwith models like gamm4.\n","example_call":"get_family(x, ...)"},"insight::standardize_names":{"description":"Standardize column names from data frames, in particular objects returned\nfrom parameters::model_parameters(), so column names are consistent and\nthe same for any model object.\n","example_call":"standardize_names(data, ...)"},"insight::format_string":{"description":"String Values Formatting\n","example_call":"format_string(x, ...)"},"insight::get_parameters":{"description":"Returns the coefficients (or posterior samples for Bayesian\nmodels) from a model. See the documentation for your object's class:\n","example_call":"get_parameters(x, ...)"},"insight::ellipsis_info":{"description":"Provides information regarding the models entered in an ellipsis.\nIt detects whether all are models, regressions, nested regressions etc.,\nassigning different classes to the list of objects.\n","example_call":"ellipsis_info(objects, ...)"},"insight::has_intercept":{"description":"Checks if model has an intercept.\n","example_call":"has_intercept(x, verbose = TRUE)"},"insight::format_message":{"description":"Inserts line breaks into a longer message or warning string.\nLine length is adjusted to maximum length of the console, if the width\ncan be accessed. By default, new lines are indented by two spaces.\n","example_call":"format_message(string, ..., line_length = 0.9 * getOption(\"width\","},"insight::link_function":{"description":"Returns the link-function from a model object.\n","example_call":"link_function(x, ...)"},"insight::find_parameters":{"description":"Returns the names of model parameters, like they typically\nappear in the summary() output. For Bayesian models, the parameter\nnames equal the column names of the posterior samples after coercion\nfrom as.data.frame(). See the documentation for your object's class:\n","example_call":"find_parameters(x, ...)"},"insight::format_ci":{"description":"Confidence/Credible Interval (CI) Formatting\n","example_call":"format_ci(CI_low, ...)"},"insight::null_model":{"description":"This function computes the null-model (i.e. (y ~ 1)) of\na model. For mixed models, the null-model takes random effects into account.\n","example_call":"null_model(model, verbose = TRUE, ...)"},"insight::clean_names":{"description":"This function \"cleans\" names of model terms (or a character\nvector with such names) by removing patterns like log() or\nas.factor() etc.\n","example_call":"clean_names(x, ...)"},"insight::display":{"description":"display() is a generic function to export data frames\ninto various table formats (like plain text, markdown, ...). print_md()\nusually is a convenient wrapper for display(format = \"markdown\").\nSimilar, print_html() is a shortcut for display(format = \"html\").\nSee the documentation for the specific objects' classes.\n","example_call":"display(object, ...)"},"insight::find_statistic":{"description":"Returns the statistic for a regression model (t-statistic,\nz-statistic, etc.).\n","example_call":"find_statistic(x, ...)"},"insight::format_p":{"description":"Format p-values.\n","example_call":"format_p(p, stars = FALSE, stars_only = FALSE, whitespace = TRUE,"},"insight::get_variance_residual":{"description":"This function extracts the different variance components of a mixed model and\nreturns the result as list. Functions like get_variance_residual(x) or\nget_variance_fixed(x) are shortcuts for get_variance(x, component = \"residual\")\netc.\n","example_call":"get_variance_residual(x, verbose = TRUE, ...)"},"insight::apply_table_theme":{"description":"Data frame and Tables Pretty Formatting\n","example_call":"apply_table_theme(out, x, theme = \"default\", sub_header_positions = NULL)"},"insight::get_deviance":{"description":"Returns model deviance (see stats::deviance()).\n","example_call":"get_deviance(x, ...)"},"insight::export_table":{"description":"Data frame and Tables Pretty Formatting\n","example_call":"export_table(x, sep = \" | \", header = \"-\", cross = NULL, empty_line = NULL,"},"insight::get_correlation_slope_intercept":{"description":"This function extracts the different variance components of a mixed model and\nreturns the result as list. Functions like get_variance_residual(x) or\nget_variance_fixed(x) are shortcuts for get_variance(x, component = \"residual\")\netc.\n","example_call":"get_correlation_slope_intercept(x, verbose = TRUE, ...)"},"insight::format_rope":{"description":"Percentage in ROPE formatting\n","example_call":"format_rope(rope_percentage, name = \"in ROPE\", digits = 2)"},"insight::object_has_rownames":{"description":"object_has_names() checks if specified names are present in the given object.\nobject_has_rownames() checks if rownames are present in a dataframe.\n","example_call":"object_has_rownames(x)"},"insight::get_intercept":{"description":"Returns the value at the intercept (i.e., the intercept\nparameter), and NA if there isn't one.\n","example_call":"get_intercept(x, ...)"},"insight::get_modelmatrix":{"description":"Creates a design matrix from the description. Any character variables are coerced to factors.\n","example_call":"get_modelmatrix(x, ...)"},"insight::get_statistic":{"description":"Returns the statistic (t, z, ...) for model\nestimates. In most cases, this is the related column from\ncoef(summary()).\n","example_call":"get_statistic(x, ...)"},"insight::find_formula":{"description":"Returns the formula(s) for the different parts of a model\n(like fixed or random effects, zero-inflated component, ...).\nformula_ok() checks if a model formula has valid syntax\nregarding writing TRUE instead of T inside poly()\nand that no data names are used (i.e. no data$variable, but rather\nvariable).\n","example_call":"find_formula(x, ...)"},"insight::model_info":{"description":"Retrieve information from model objects.\n","example_call":"model_info(x, ...)"},"insight::has_single_value":{"description":"Collection of small helper functions. trim_ws() is an\nefficient function to trim leading and trailing whitespaces from character\nvectors or strings. n_unique() returns the number of unique values in a\nvector. has_single_value() is equivalent to n_unique() == 1 but is faster.\nsafe_deparse() is comparable to deparse1(), i.e. it can safely\ndeparse very long expressions into a single string. safe_deparse_symbol()\nonly deparses a substituted expressions when possible, which can be much faster\nthan deparse(substitute()) for those cases where substitute() returns no\nvalid object name.\n","example_call":"has_single_value(x, na.rm = FALSE)"},"insight::compact_list":{"description":"Remove empty elements from lists\n","example_call":"compact_list(x, remove_na = FALSE)"},"insight::get_variance_slope":{"description":"This function extracts the different variance components of a mixed model and\nreturns the result as list. Functions like get_variance_residual(x) or\nget_variance_fixed(x) are shortcuts for get_variance(x, component = \"residual\")\netc.\n","example_call":"get_variance_slope(x, verbose = TRUE, ...)"},"insight::n_obs":{"description":"This method returns the number of observation that were used\nto fit the model, as numeric value.\n","example_call":"n_obs(x, ...)"},"insight::find_variables":{"description":"Returns a list with the names of all variables, including\nresponse value and random effects.\n","example_call":"find_variables(x, effects = \"all\", component = \"all\", flatten = FALSE,"},"insight::find_terms":{"description":"Returns a list with the names of all terms, including response\nvalue and random effects, \"as is\". This means, on-the-fly tranformations\nor arithmetic expressions like log(), I(), as.factor() etc. are\npreserved.\n","example_call":"find_terms(x, ...)"},"insight::check_if_installed":{"description":"Checking if needed package is installed\n","example_call":"check_if_installed(package, reason = \"for this function to work\", stop = TRUE,"},"insight::supported_models":{"description":"Small helper that checks if a model is a supported\n(regression) model object. supported_models() prints a list\nof currently supported model classes.\n","example_call":"supported_models()"},"insight::print_parameters":{"description":"This function takes a data frame, typically a data frame with information on\nsummaries of model parameters like bayestestR::describe_posterior(),\nbayestestR::hdi() or parameters::model_parameters(), as input and splits\nthis information into several parts, depending on the model. See details\nbelow.\n","example_call":"print_parameters(x, ..., by = c(\"Effects\", \"Component\", \"Group\", \"Response\"),"},"insight::standardize_column_order":{"description":"Standardizes order of columns for dataframes and other objects from\neasystats and broom ecosystem packages.\n","example_call":"standardize_column_order(data, ...)"},"insight::get_response":{"description":"Returns the values the response variable(s) from a model object.\nIf the model is a multivariate response model, a data frame with values\nfrom all response variables is returned.\n","example_call":"get_response(x, ...)"},"insight::find_random":{"description":"Return the name of the grouping factors from mixed effects models.\n","example_call":"find_random(x, split_nested = FALSE, flatten = FALSE)"},"insight::is_nullmodel":{"description":"Checks if model is a null-model (intercept-only), i.e. if\nthe conditional part of the model has no predictors.\n","example_call":"is_nullmodel(x)"},"insight::format_alert":{"description":"Inserts line breaks into a longer message or warning string.\nLine length is adjusted to maximum length of the console, if the width\ncan be accessed. By default, new lines are indented by two spaces.\n","example_call":"format_alert(string, ..., line_length = 0.9 * getOption(\"width\","},"insight::color_text":{"description":"Convenient function that allows coloured output in the console.\nMainly implemented to reduce package dependencies.\n","example_call":"color_text(text, color)"},"insight::get_variance_fixed":{"description":"This function extracts the different variance components of a mixed model and\nreturns the result as list. Functions like get_variance_residual(x) or\nget_variance_fixed(x) are shortcuts for get_variance(x, component = \"residual\")\netc.\n","example_call":"get_variance_fixed(x, verbose = TRUE, ...)"},"insight::print_md":{"description":"display() is a generic function to export data frames\ninto various table formats (like plain text, markdown, ...). print_md()\nusually is a convenient wrapper for display(format = \"markdown\").\nSimilar, print_html() is a shortcut for display(format = \"html\").\nSee the documentation for the specific objects' classes.\n","example_call":"print_md(x, ...)"},"insight::find_predictors":{"description":"Returns the names of the predictor variables for the\ndifferent parts of a model (like fixed or random effects, zero-inflated\ncomponent, ...). Unlike find_parameters(), the names from\nfind_predictors() match the original variable names from the data\nthat was used to fit the model.\n","example_call":"find_predictors(x, ...)"},"insight::is_multivariate":{"description":"Small helper that checks if a model is a multivariate response\nmodel, i.e. a model with multiple outcomes.\n","example_call":"is_multivariate(x)"},"insight::format_warning":{"description":"Inserts line breaks into a longer message or warning string.\nLine length is adjusted to maximum length of the console, if the width\ncan be accessed. By default, new lines are indented by two spaces.\n","example_call":"format_warning(..., immediate = FALSE)"},"insight::is_model":{"description":"Small helper that checks if a model is a regression model or\na statistical object. is_regression_model() is stricter and only\nreturns TRUE for regression models, but not for, e.g., htest\nobjects.\n","example_call":"is_model(x)"},"insight::format_percent":{"description":"format_value() converts numeric values into formatted string values, where\nformatting can be something like rounding digits, scientific notation etc.\nformat_percent() is a short-cut for format_value(as_percent = TRUE).\n","example_call":"format_percent(x, ...)"},"insight::find_offset":{"description":"Returns a character vector with the name(s) of offset terms.\n","example_call":"find_offset(x)"},"insight::formula_ok":{"description":"Returns the formula(s) for the different parts of a model\n(like fixed or random effects, zero-inflated component, ...).\nformula_ok() checks if a model formula has valid syntax\nregarding writing TRUE instead of T inside poly()\nand that no data names are used (i.e. no data$variable, but rather\nvariable).\n","example_call":"formula_ok(x, verbose = TRUE, ...)"},"insight::get_call":{"description":"Returns the model's function call when available.\n","example_call":"get_call(x)"},"insight::color_theme":{"description":"Convenient function that allows coloured output in the console.\nMainly implemented to reduce package dependencies.\n","example_call":"color_theme()"},"insight::print_color":{"description":"Convenient function that allows coloured output in the console.\nMainly implemented to reduce package dependencies.\n","example_call":"print_color(text, color)"},"insight::is_mixed_model":{"description":"Small helper that checks if a model is a mixed effects model,\ni.e. if it the model has random effects.\n","example_call":"is_mixed_model(x)"},"insight::is_empty_object":{"description":"Check if object is empty\n","example_call":"is_empty_object(x)"},"insight::n_grouplevels":{"description":"Returns the number of group levels of random effects from mixed models.\n","example_call":"n_grouplevels(x, ...)"},"insight::get_predicted_ci":{"description":"Confidence intervals around predicted values\n","example_call":"get_predicted_ci(x, ...)"},"insight::find_random_slopes":{"description":"Return the name of the random slopes from mixed effects models.\n","example_call":"find_random_slopes(x)"},"insight::is_regression_model":{"description":"Small helper that checks if a model is a regression model or\na statistical object. is_regression_model() is stricter and only\nreturns TRUE for regression models, but not for, e.g., htest\nobjects.\n","example_call":"is_regression_model(x)"},"insight::trim_ws":{"description":"Collection of small helper functions. trim_ws() is an\nefficient function to trim leading and trailing whitespaces from character\nvectors or strings. n_unique() returns the number of unique values in a\nvector. has_single_value() is equivalent to n_unique() == 1 but is faster.\nsafe_deparse() is comparable to deparse1(), i.e. it can safely\ndeparse very long expressions into a single string. safe_deparse_symbol()\nonly deparses a substituted expressions when possible, which can be much faster\nthan deparse(substitute()) for those cases where substitute() returns no\nvalid object name.\n","example_call":"trim_ws(x, ...)"},"insight::find_weights":{"description":"Returns the name of the variable that describes the weights of a\nmodel.\n","example_call":"find_weights(x, ...)"},"insight::get_weights":{"description":"Returns weighting variable of a model.\n","example_call":"get_weights(x, ...)"},"insight::clean_parameters":{"description":"This function \"cleans\" names of model parameters by removing\npatterns like \"r_\" or \"b[]\" (mostly applicable to Stan models)\nand adding columns with information to which group or component parameters\nbelong (i.e. fixed or random, count or zero-inflated...)\n","example_call":"clean_parameters(x, ...)"},"insight::print_colour":{"description":"Convenient function that allows coloured output in the console.\nMainly implemented to reduce package dependencies.\n","example_call":"print_colour(text, colour)"},"insight::print_html":{"description":"display() is a generic function to export data frames\ninto various table formats (like plain text, markdown, ...). print_md()\nusually is a convenient wrapper for display(format = \"markdown\").\nSimilar, print_html() is a shortcut for display(format = \"html\").\nSee the documentation for the specific objects' classes.\n","example_call":"print_html(x, ...)"},"insight::loglikelihood":{"description":"A robust function to compute the log-likelihood of a model, as well as\nindividual log-likelihoods (for each observation) whenever possible. Can be\nused as a replacement for stats::logLik() out of the box, as the\nreturned object is of the same class (and it gives the same results by\ndefault).\n","example_call":"loglikelihood(x, ...)"},"insight::is_gam_model":{"description":"Small helper that checks if a model is a generalized additive\nmodel.\n","example_call":"is_gam_model(x)"},"insight::get_datagrid":{"description":"Create a reference matrix, useful for visualisation, with evenly spread and\ncombined values. Usually used to make generate predictions using get_predicted().\nSee this vignette\nfor a tutorial on how to create a visualisation matrix using this function.\n","example_call":"get_datagrid(x, ...)"},"insight::is_converged":{"description":"is_converged() provides an alternative convergence\ntest for merMod-objects.\n","example_call":"is_converged(x, tolerance = 0.001, ...)"},"insight::safe_deparse_symbol":{"description":"Collection of small helper functions. trim_ws() is an\nefficient function to trim leading and trailing whitespaces from character\nvectors or strings. n_unique() returns the number of unique values in a\nvector. has_single_value() is equivalent to n_unique() == 1 but is faster.\nsafe_deparse() is comparable to deparse1(), i.e. it can safely\ndeparse very long expressions into a single string. safe_deparse_symbol()\nonly deparses a substituted expressions when possible, which can be much faster\nthan deparse(substitute()) for those cases where substitute() returns no\nvalid object name.\n","example_call":"safe_deparse_symbol(x)"},"insight::download_model":{"description":"Downloads pre-compiled models from the circus-repository.\nThe circus-repository contains a variety of fitted models to help\nthe systematic testing of other packages\n","example_call":"download_model(name, url = \"https://raw.github.com/easystats/circus/master/data/\","},"insight::get_residuals":{"description":"Returns the residuals from regression models.\n","example_call":"get_residuals(x, ...)"},"insight::get_auxiliary":{"description":"Returns the requested auxiliary parameters from models, like\ndispersion, sigma, or beta...\n","example_call":"get_auxiliary(x, type = \"sigma\", summary = TRUE, centrality = \"mean\","},"insight::get_variance":{"description":"This function extracts the different variance components of a mixed model and\nreturns the result as list. Functions like get_variance_residual(x) or\nget_variance_fixed(x) are shortcuts for get_variance(x, component = \"residual\")\netc.\n","example_call":"get_variance(x, ...)"},"insight::get_correlation_slopes":{"description":"This function extracts the different variance components of a mixed model and\nreturns the result as list. Functions like get_variance_residual(x) or\nget_variance_fixed(x) are shortcuts for get_variance(x, component = \"residual\")\netc.\n","example_call":"get_correlation_slopes(x, verbose = TRUE, ...)"},"insight::text_remove_backticks":{"description":"This function removes backticks from a string.\n","example_call":"text_remove_backticks(x, ...)"},"insight::get_loglikelihood":{"description":"A robust function to compute the log-likelihood of a model, as well as\nindividual log-likelihoods (for each observation) whenever possible. Can be\nused as a replacement for stats::logLik() out of the box, as the\nreturned object is of the same class (and it gives the same results by\ndefault).\n","example_call":"get_loglikelihood(x, ...)"},"insight::find_transformation":{"description":"This functions checks whether any transformation, such as log-\nor exp-transforming, was applied to the response variable (dependent\nvariable) in a regression formula. Currently, following patterns are\ndetected: log, log1p, log2, log10, exp, expm1, sqrt,\n<U+2060>log(x+<number>)<U+2060>, log-log, power (to 2nd power, like I(x^2)), and\ninverse (like 1/y).\n","example_call":"find_transformation(x, ...)"},"insight::is_model_supported":{"description":"Small helper that checks if a model is a supported\n(regression) model object. supported_models() prints a list\nof currently supported model classes.\n","example_call":"is_model_supported(x)"},"insight::safe_deparse":{"description":"Collection of small helper functions. trim_ws() is an\nefficient function to trim leading and trailing whitespaces from character\nvectors or strings. n_unique() returns the number of unique values in a\nvector. has_single_value() is equivalent to n_unique() == 1 but is faster.\nsafe_deparse() is comparable to deparse1(), i.e. it can safely\ndeparse very long expressions into a single string. safe_deparse_symbol()\nonly deparses a substituted expressions when possible, which can be much faster\nthan deparse(substitute()) for those cases where substitute() returns no\nvalid object name.\n","example_call":"safe_deparse(x, ...)"},"insight::find_interactions":{"description":"Returns all lowest to highest order interaction terms from a model.\n","example_call":"find_interactions(x, component = c(\"all\", \"conditional\", \"zi\", \"zero_inflated\","},"insight::get_df":{"description":"Estimate or extract residual or model-based degrees of freedom\nfrom regression models.\n","example_call":"get_df(x, ...)"},"insight::get_variance_distribution":{"description":"This function extracts the different variance components of a mixed model and\nreturns the result as list. Functions like get_variance_residual(x) or\nget_variance_fixed(x) are shortcuts for get_variance(x, component = \"residual\")\netc.\n","example_call":"get_variance_distribution(x, verbose = TRUE, ...)"},"insight::get_variance_random":{"description":"This function extracts the different variance components of a mixed model and\nreturns the result as list. Functions like get_variance_residual(x) or\nget_variance_fixed(x) are shortcuts for get_variance(x, component = \"residual\")\netc.\n","example_call":"get_variance_random(x, verbose = TRUE, tolerance = 1e-08, ...)"},"insight::get_data":{"description":"This functions tries to get the data that was used to fit the\nmodel and returns it as data frame.\n","example_call":"get_data(x, ...)"},"insight::colour_if":{"description":"Convenient function that formats columns in data frames with color codes,\nwhere the color is chosen based on certain conditions. Columns are then\nprinted in color in the console.\n","example_call":"colour_if(x, columns, predicate = `>`, value = 0, colour_if = \"green\","},"insight::all_models_equal":{"description":"Small helper that checks if all objects are supported\n(regression) model objects and of same class.\n","example_call":"all_models_equal(..., verbose = FALSE)"},"insight::is_nested_models":{"description":"Checks whether a list of models are nested models, strictly\nfollowing the order they were passed to the function.\n","example_call":"is_nested_models(...)"},"insight::color_if":{"description":"Convenient function that formats columns in data frames with color codes,\nwhere the color is chosen based on certain conditions. Columns are then\nprinted in color in the console.\n","example_call":"color_if(x, columns, predicate = `>`, value = 0, color_if = \"green\","},"insight::format_table":{"description":"This functions takes a data frame with model parameters as input\nand formats certain columns into a more readable layout (like collapsing\nseparate columns for lower and upper confidence interval values). Furthermore,\ncolumn names are formatted as well. Note that format_table()\nconverts all columns into character vectors!\n","example_call":"format_table(x, pretty_names = TRUE, stars = FALSE, digits = 2,"},"insight::format_pd":{"description":"Probability of direction (pd) formatting\n","example_call":"format_pd(pd, stars = FALSE, stars_only = FALSE, name = \"pd\")"},"insight::model_name":{"description":"Returns the \"name\" (class attribute) of a model, possibly including further information.\n","example_call":"model_name(x, ...)"},"insight::n_parameters":{"description":"Returns the number of parameters (coefficients) of a model.\n","example_call":"n_parameters(x, ...)"},"insight::format_capitalize":{"description":"This function converts the first letter in a string into upper case.\n","example_call":"format_capitalize(x, verbose = TRUE)"},"insight::all_models_same_class":{"description":"Small helper that checks if all objects are supported\n(regression) model objects and of same class.\n","example_call":"all_models_same_class(..., verbose = FALSE)"},"insight::link_inverse":{"description":"Returns the link-inverse function from a model object.\n","example_call":"link_inverse(x, ...)"},"insight::get_predictors":{"description":"Returns the data from all predictor variables (fixed effects).\n","example_call":"get_predictors(x, verbose = TRUE)"},"insight::format_value":{"description":"format_value() converts numeric values into formatted string values, where\nformatting can be something like rounding digits, scientific notation etc.\nformat_percent() is a short-cut for format_value(as_percent = TRUE).\n","example_call":"format_value(x, ...)"},"insight::find_smooth":{"description":"Return the names of smooth terms from a model object.\n","example_call":"find_smooth(x, flatten = FALSE)"},"insight::get_predicted":{"description":"The get_predicted() function is a robust, flexible and user-friendly\nalternative to base R predict() function. Additional features and\nadvantages include availability of uncertainty intervals (CI), bootstrapping,\na more intuitive API and the support of more models than base R's predict()\nfunction. However, although the interface are simplified, it is still very\nimportant to read the documentation of the arguments. This is because making\n\"predictions\" (a lose term for a variety of things) is a non-trivial process,\nwith lots of caveats and complications. Read the 'Details' section for more\ninformation.\n","example_call":"get_predicted(x, ...)"},"insight::get_random":{"description":"Returns the data from all random effects terms.\n","example_call":"get_random(x)"},"insight::format_bf":{"description":"Bayes Factor formatting\n","example_call":"format_bf(bf, stars = FALSE, stars_only = FALSE, name = \"BF\","},"insight::compact_character":{"description":"Remove empty strings from character\n","example_call":"compact_character(x)"},"insight::get_variance_intercept":{"description":"This function extracts the different variance components of a mixed model and\nreturns the result as list. Functions like get_variance_residual(x) or\nget_variance_fixed(x) are shortcuts for get_variance(x, component = \"residual\")\netc.\n","example_call":"get_variance_intercept(x, verbose = TRUE, ...)"},"insight::find_algorithm":{"description":"Returns information on the sampling or estimation algorithm\nas well as optimization functions, or for Bayesian model information on\nchains, iterations and warmup-samples.\n","example_call":"find_algorithm(x, ...)"},"insight::n_unique":{"description":"Collection of small helper functions. trim_ws() is an\nefficient function to trim leading and trailing whitespaces from character\nvectors or strings. n_unique() returns the number of unique values in a\nvector. has_single_value() is equivalent to n_unique() == 1 but is faster.\nsafe_deparse() is comparable to deparse1(), i.e. it can safely\ndeparse very long expressions into a single string. safe_deparse_symbol()\nonly deparses a substituted expressions when possible, which can be much faster\nthan deparse(substitute()) for those cases where substitute() returns no\nvalid object name.\n","example_call":"n_unique(x, ...)"},"insight::get_priors":{"description":"Provides a summary of the prior distributions used\nfor the parameters in a given model.\n","example_call":"get_priors(x, ...)"},"insight::get_variance_dispersion":{"description":"This function extracts the different variance components of a mixed model and\nreturns the result as list. Functions like get_variance_residual(x) or\nget_variance_fixed(x) are shortcuts for get_variance(x, component = \"residual\")\netc.\n","example_call":"get_variance_dispersion(x, verbose = TRUE, ...)"},"jsonlite::base64_enc":{"description":"Simple in-memory base64 encoder and decoder. Used internally for converting\nraw vectors to text. Interchangeable with encoder from base64enc or\nopenssl package.\n","example_call":"base64_enc(input)"},"jsonlite::stream_out":{"description":"The stream_in and stream_out functions implement line-by-line processing\nof JSON data over a connection, such as a socket, url, file or pipe. JSON\nstreaming requires the ndjson format, which slightly differs\nfrom fromJSON() and toJSON(), see details.\n","example_call":"stream_out(x, con = stdout(), pagesize = 500, verbose = TRUE,"},"jsonlite::base64url_enc":{"description":"Simple in-memory base64 encoder and decoder. Used internally for converting\nraw vectors to text. Interchangeable with encoder from base64enc or\nopenssl package.\n","example_call":"base64url_enc(input)"},"jsonlite::serializeJSON":{"description":"The serializeJSON() and unserializeJSON() functions convert between\nR objects to JSON data. Instead of using a class based mapping like\ntoJSON() and fromJSON(), the serialize functions base the encoding\nschema on the storage type, and capture all data and attributes from any object.\nThereby the object can be restored almost perfectly from its JSON representation, but\nthe resulting JSON output is very verbose. Apart from environments, all standard storage\ntypes are supported.\n","example_call":"serializeJSON(x, digits = 8, pretty = FALSE)"},"jsonlite::rbind_pages":{"description":"The rbind_pages function is used to combine a list of data frames into a single\ndata frame. This is often needed when working with a JSON API that limits the amount\nof data per request. If we need more data than what fits in a single request, we need to\nperform multiple requests that each retrieve a fragment of data, not unlike pages in a\nbook. In practice this is often implemented using a page parameter in the API. The\nrbind_pages function can be used to combine these pages back into a single dataset.\n","example_call":"rbind_pages(pages)"},"jsonlite::parse_gzjson_b64":{"description":"Wrapper to generate and parse gzipped JSON, in order to save some disk or\nnetwork space. This is mainly effective for larger json objects with many\nrepeated keys, as is common in serialized data frames.\n","example_call":"parse_gzjson_b64(b64, ...)"},"jsonlite::base64_dec":{"description":"Simple in-memory base64 encoder and decoder. Used internally for converting\nraw vectors to text. Interchangeable with encoder from base64enc or\nopenssl package.\n","example_call":"base64_dec(input)"},"jsonlite::as_gzjson_b64":{"description":"Wrapper to generate and parse gzipped JSON, in order to save some disk or\nnetwork space. This is mainly effective for larger json objects with many\nrepeated keys, as is common in serialized data frames.\n","example_call":"as_gzjson_b64(x, ...)"},"jsonlite::stream_in":{"description":"The stream_in and stream_out functions implement line-by-line processing\nof JSON data over a connection, such as a socket, url, file or pipe. JSON\nstreaming requires the ndjson format, which slightly differs\nfrom fromJSON() and toJSON(), see details.\n","example_call":"stream_in(con, handler = NULL, pagesize = 500, verbose = TRUE,"},"jsonlite::fromJSON":{"description":"These functions are used to convert between JSON data and R objects. The toJSON() and fromJSON()\nfunctions use a class based mapping, which follows conventions outlined in this paper:  https://arxiv.org/abs/1403.2805 (also available as vignette).\n","example_call":"fromJSON(txt, simplifyVector = TRUE, simplifyDataFrame = simplifyVector,"},"jsonlite::flatten":{"description":"In a nested data frame, one or more of the columns consist of another data\nframe. These structures frequently appear when parsing JSON data from the web.\nWe can flatten such data frames into a regular 2 dimensional tabular structure.\n","example_call":"flatten(x, recursive = TRUE)"},"jsonlite::as_gzjson_raw":{"description":"Wrapper to generate and parse gzipped JSON, in order to save some disk or\nnetwork space. This is mainly effective for larger json objects with many\nrepeated keys, as is common in serialized data frames.\n","example_call":"as_gzjson_raw(x, ...)"},"jsonlite::minify":{"description":"Prettify adds indentation to a JSON string; minify removes all indentation/whitespace.\n","example_call":"minify(txt)"},"jsonlite::write_json":{"description":"These functions are similar to toJSON() and fromJSON() except they\nexplicitly distinguish between path and literal input, and do not simplify\nby default.\n","example_call":"write_json(x, path, ...)"},"jsonlite::unbox":{"description":"This function marks an atomic vector or data frame as a\nsingleton, i.e.\na set with exactly 1 element. Thereby, the value will not turn into an\narray when encoded into JSON. This can only be done for\natomic vectors of length 1, or data frames with exactly 1 row. To automatically\nunbox all vectors of length 1 within an object, use the auto_unbox argument\nin toJSON().\n","example_call":"unbox(x)"},"jsonlite::validate":{"description":"Test if a string contains valid JSON. Characters vectors will be collapsed into a single string.\n","example_call":"validate(txt)"},"jsonlite::parse_gzjson_raw":{"description":"Wrapper to generate and parse gzipped JSON, in order to save some disk or\nnetwork space. This is mainly effective for larger json objects with many\nrepeated keys, as is common in serialized data frames.\n","example_call":"parse_gzjson_raw(buf, ...)"},"jsonlite::prettify":{"description":"Prettify adds indentation to a JSON string; minify removes all indentation/whitespace.\n","example_call":"prettify(txt, indent = 4)"},"jsonlite::base64url_dec":{"description":"Simple in-memory base64 encoder and decoder. Used internally for converting\nraw vectors to text. Interchangeable with encoder from base64enc or\nopenssl package.\n","example_call":"base64url_dec(input)"},"jsonlite::read_json":{"description":"These functions are similar to toJSON() and fromJSON() except they\nexplicitly distinguish between path and literal input, and do not simplify\nby default.\n","example_call":"read_json(path, simplifyVector = FALSE, ...)"},"jsonlite::toJSON":{"description":"These functions are used to convert between JSON data and R objects. The toJSON() and fromJSON()\nfunctions use a class based mapping, which follows conventions outlined in this paper:  https://arxiv.org/abs/1403.2805 (also available as vignette).\n","example_call":"toJSON(x, dataframe = c(\"rows\", \"columns\", \"values\"), matrix = c(\"rowmajor\","},"jsonlite::parse_json":{"description":"These functions are similar to toJSON() and fromJSON() except they\nexplicitly distinguish between path and literal input, and do not simplify\nby default.\n","example_call":"parse_json(json, simplifyVector = FALSE, ...)"},"jsonlite::unserializeJSON":{"description":"The serializeJSON() and unserializeJSON() functions convert between\nR objects to JSON data. Instead of using a class based mapping like\ntoJSON() and fromJSON(), the serialize functions base the encoding\nschema on the storage type, and capture all data and attributes from any object.\nThereby the object can be restored almost perfectly from its JSON representation, but\nthe resulting JSON output is very verbose. Apart from environments, all standard storage\ntypes are supported.\n","example_call":"unserializeJSON(txt)"},"labeling::wilkinson":{"description":"Wilkinson's labeling algorithm\n","example_call":"wilkinson(dmin, dmax, m, Q = c(1, 5, 2, 2.5, 3, 4, 1.5, 7, 6,"},"labeling::matplotlib":{"description":"Matplotlib's labeling algorithm\n","example_call":"matplotlib(dmin, dmax, m)"},"labeling::gnuplot":{"description":"gnuplot's labeling algorithm\n","example_call":"gnuplot(dmin, dmax, m)"},"labeling::sparks":{"description":"Sparks' labeling algorithm\n","example_call":"sparks(dmin, dmax, m)"},"labeling::extended":{"description":"extended is an enhanced version of Wilkinson's\noptimization-based axis labeling approach. It is\ndescribed in detail in our paper. See the references.\n","example_call":"extended(dmin, dmax, m, Q = c(1, 5, 2, 2.5, 4, 3), only.loose = FALSE,"},"labeling::rpretty":{"description":"R's pretty algorithm implemented in R\n","example_call":"rpretty(dmin, dmax, m = 6, n = floor(m) - 1, min.n = n%/%3,"},"labeling::heckbert":{"description":"Heckbert's labeling algorithm\n","example_call":"heckbert(dmin, dmax, m)"},"labeling::nelder":{"description":"Nelder's labeling algorithm\n","example_call":"nelder(dmin, dmax, m, Q = c(1, 1.2, 1.6, 2, 2.5, 3, 4, 5,"},"labeling::thayer":{"description":"Thayer and Storer's labeling algorithm\n","example_call":"thayer(dmin, dmax, m)"},"labeling::extended.figures":{"description":"Generates Figures 2 and 3 from our paper.\n","example_call":"extended.figures(samples = 100)"},"lattice::panel.text":{"description":"These functions are intended to replace common low level traditional\ngraphics functions, primarily for use in panel functions.  The\noriginals can not be used (at least not easily) because lattice panel\nfunctions need to use grid graphics.  Low level drawing functions in\ngrid can be used directly as well, and is often more flexible.  These\nfunctions are provided for convenience and portability.\n","example_call":"panel.text(...)"},"lattice::panel.3dscatter":{"description":"Default panel functions controlling cloud and\nwireframe displays.\n","example_call":"panel.3dscatter(x, y, z, rot.mat = diag(4), distance, groups = NULL,"},"lattice::ltext":{"description":"These functions are intended to replace common low level traditional\ngraphics functions, primarily for use in panel functions.  The\noriginals can not be used (at least not easily) because lattice panel\nfunctions need to use grid graphics.  Low level drawing functions in\ngrid can be used directly as well, and is often more flexible.  These\nfunctions are provided for convenience and portability.\n","example_call":"ltext(x, ...)"},"lattice::lattice.options":{"description":"Functions to handle settings used by lattice.  Their main purpose is\nto make code maintainance easier, and users normally should not need\nto use these functions.  However, fine control at this level maybe\nuseful in certain cases.\n","example_call":"lattice.options(...)"},"lattice::as.shingle":{"description":"Functions to handle shingles\n","example_call":"as.shingle(x)"},"lattice::panel.curve":{"description":"These are predefined panel functions available in lattice for use in\nconstructing new panel functions (often on-the-fly).\n","example_call":"panel.curve(expr, from, to, n = 101, curve.type = \"l\", col = add.line$col,"},"lattice::panel.lines":{"description":"These functions are intended to replace common low level traditional\ngraphics functions, primarily for use in panel functions.  The\noriginals can not be used (at least not easily) because lattice panel\nfunctions need to use grid graphics.  Low level drawing functions in\ngrid can be used directly as well, and is often more flexible.  These\nfunctions are provided for convenience and portability.\n","example_call":"panel.lines(...)"},"lattice::panel.fill":{"description":"These are predefined panel functions available in lattice for use in\nconstructing new panel functions (often on-the-fly).\n","example_call":"panel.fill(col = trellis.par.get(\"background\")$col, border = \"transparent\","},"lattice::panel.levelplot.raster":{"description":"These are the default panel functions for levelplot and\ncontourplot.  Also documented is an alternative raster-based\npanel function for use with levelplot.\n","example_call":"panel.levelplot.raster(x, y, z, subscripts, at = pretty(z), ..., col.regions = regions$col,"},"lattice::prepanel.default.cloud":{"description":"These prepanel functions are used as fallback defaults in various\nhigh level plot functions in Lattice.  These are rarely useful to\nnormal users but may be helpful in developing new displays.\n","example_call":"prepanel.default.cloud(perspective = TRUE, distance = if (perspective) 0.2 else 0,"},"lattice::current.panel.limits":{"description":"panel.axis is the function used by lattice to draw axes. It is\ntypically not used by users, except those wishing to create advanced\nannotation. Keep in mind issues of clipping when trying to use it as\npart of the panel function. current.panel.limits can be used to\nretrieve a panel's x and y limits.\n","example_call":"current.panel.limits(unit = \"native\")"},"lattice::lplot.xy":{"description":"These functions are intended to replace common low level traditional\ngraphics functions, primarily for use in panel functions.  The\noriginals can not be used (at least not easily) because lattice panel\nfunctions need to use grid graphics.  Low level drawing functions in\ngrid can be used directly as well, and is often more flexible.  These\nfunctions are provided for convenience and portability.\n","example_call":"lplot.xy(xy, type = c(\"p\", \"l\", \"o\", \"b\", \"c\", \"s\", \"S\", \"h\","},"lattice::levelplot":{"description":"Draws false color level plots and contour plots.\n","example_call":"levelplot(x, data, ...)"},"lattice::panel.tmd.qqmath":{"description":"tmd Creates Tukey Mean-Difference Plots from a trellis object\nreturned by xyplot, qq or qqmath.  The prepanel\nand panel functions are used as appropriate.  The formula and\ndata.frame methods for tmd are provided for convenience,\nand simply call tmd on the object created by the corresponding\nxyplot methods.\n","example_call":"panel.tmd.qqmath(x, f.value = NULL, distribution = qnorm, qtype = 7,"},"lattice::trellis.device":{"description":"Initialization of a display device with appropriate graphical\nparameters.\n","example_call":"trellis.device(device = getOption(\"device\"), color = !(dev.name =="},"lattice::larrows":{"description":"These functions are intended to replace common low level traditional\ngraphics functions, primarily for use in panel functions.  The\noriginals can not be used (at least not easily) because lattice panel\nfunctions need to use grid graphics.  Low level drawing functions in\ngrid can be used directly as well, and is often more flexible.  These\nfunctions are provided for convenience and portability.\n","example_call":"larrows(...)"},"lattice::panel.axis":{"description":"panel.axis is the function used by lattice to draw axes. It is\ntypically not used by users, except those wishing to create advanced\nannotation. Keep in mind issues of clipping when trying to use it as\npart of the panel function. current.panel.limits can be used to\nretrieve a panel's x and y limits.\n","example_call":"panel.axis(side = c(\"bottom\", \"left\", \"top\", \"right\"), at = pretty(scale.range),"},"lattice::qqmath":{"description":"Draw quantile-Quantile plots of a sample against a theoretical\ndistribution, possibly conditioned on other variables.\n","example_call":"qqmath(x, data, ...)"},"lattice::panel.link.splom":{"description":"The classic Trellis paradigm is to plot the whole object at once,\nwithout the possibility of interacting with it afterwards.  However,\nby keeping track of the grid viewports where the panels and strips are\ndrawn, it is possible to go back to them afterwards and enhance them\none panel at a time.  These functions provide convenient interfaces to\nhelp in this.  Note that these are still experimental and the exact\ndetails may change in future.\n","example_call":"panel.link.splom(threshold = 18, verbose = getOption(\"verbose\"), ...)"},"lattice::lpoints":{"description":"These functions are intended to replace common low level traditional\ngraphics functions, primarily for use in panel functions.  The\noriginals can not be used (at least not easily) because lattice panel\nfunctions need to use grid graphics.  Low level drawing functions in\ngrid can be used directly as well, and is often more flexible.  These\nfunctions are provided for convenience and portability.\n","example_call":"lpoints(x, ...)"},"lattice::prepanel.tmd.qqmath":{"description":"tmd Creates Tukey Mean-Difference Plots from a trellis object\nreturned by xyplot, qq or qqmath.  The prepanel\nand panel functions are used as appropriate.  The formula and\ndata.frame methods for tmd are provided for convenience,\nand simply call tmd on the object created by the corresponding\nxyplot methods.\n","example_call":"prepanel.tmd.qqmath(x, f.value = NULL, distribution = qnorm, qtype = 7,"},"lattice::which.packet":{"description":"Control over lattice plots are provided through a collection of user\nspecifiable functions that perform various tasks during the plotting.\nNot all information is available to all functions.  The functions\ndocumented here attempt to provide a consistent interface to access\nrelevant information from within these user specified functions,\nnamely those specified as the panel, strip and\naxis functions.  Note that this information is not available to\nthe prepanel function, which is executed prior to the actual\nplotting.\n","example_call":"which.packet(prefix = lattice.getStatus(\"current.prefix\"))"},"lattice::prepanel.default.qqmath":{"description":"These prepanel functions are used as fallback defaults in various\nhigh level plot functions in Lattice.  These are rarely useful to\nnormal users but may be helpful in developing new displays.\n","example_call":"prepanel.default.qqmath(x, f.value = NULL, distribution = qnorm, qtype = 7,"},"lattice::prepanel.default.bwplot":{"description":"These prepanel functions are used as fallback defaults in various\nhigh level plot functions in Lattice.  These are rarely useful to\nnormal users but may be helpful in developing new displays.\n","example_call":"prepanel.default.bwplot(x, y, horizontal = TRUE, nlevels, origin = NULL, stack = FALSE,"},"lattice::strip.default":{"description":"strip.default is the function that draws the strips by default\nin Trellis plots.  Users can write their own strip functions, but most\ncommonly this involves calling strip.default with a slightly\ndifferent arguments.  strip.custom provides a convenient way to\nobtain new strip functions that differ from strip.default only\nin the default values of certain arguments.\n","example_call":"strip.default(which.given, which.panel, var.name, factor.levels,"},"lattice::xyplot.ts":{"description":"This function handles time series plotting, including cut-and-stack plots.\nExamples are given of superposing, juxtaposing and styling\ndifferent time series.\n","example_call":"xyplot.ts(x, data = NULL, screens = if (superpose) 1 else colnames(x),"},"lattice::trellis.currentLayout":{"description":"Control over lattice plots are provided through a collection of user\nspecifiable functions that perform various tasks during the plotting.\nNot all information is available to all functions.  The functions\ndocumented here attempt to provide a consistent interface to access\nrelevant information from within these user specified functions,\nnamely those specified as the panel, strip and\naxis functions.  Note that this information is not available to\nthe prepanel function, which is executed prior to the actual\nplotting.\n","example_call":"trellis.currentLayout(which = c(\"packet\", \"panel\"), prefix = lattice.getStatus(\"current.prefix\"))"},"lattice::panel.grid":{"description":"These are predefined panel functions available in lattice for use in\nconstructing new panel functions (often on-the-fly).\n","example_call":"panel.grid(h = 3, v = 3, col, col.line = reference.line$col, lty = reference.line$lty,"},"lattice::panel.densityplot":{"description":"This is the default panel function for densityplot.\n","example_call":"panel.densityplot(x, darg = list(n = 512), plot.points = \"jitter\", ref = FALSE,"},"lattice::panel.violin":{"description":"This is a panel function that can create a violin plot.  It is\ntypically used in a high-level call to bwplot.\n","example_call":"panel.violin(x, y, box.ratio = 1, box.width = box.ratio/(1 + box.ratio),"},"lattice::packet.panel.default":{"description":"When a \"trellis\" object is plotted, panels are always drawn in\nan order such that columns vary the fastest, then rows and then pages.\nAn optional function can be specified that determines, given the\ncolumn, row and page and other relevant information, the packet (if\nany) which should be used in that panel.  The function documented here\nimplements the default behaviour, which is to match panel order with\npacket order, determined by varying the first conditioning variable\nthe fastest, then the second, and so on.  This matching is performed\nafter any reordering and/or permutation of the conditioning variables.\n","example_call":"packet.panel.default(layout, condlevels, page, row, column, skip, all.pages.skip = TRUE)"},"lattice::banking":{"description":"Calculates banking slope\n","example_call":"banking(dx, dy = 1)"},"lattice::lsegments":{"description":"These functions are intended to replace common low level traditional\ngraphics functions, primarily for use in panel functions.  The\noriginals can not be used (at least not easily) because lattice panel\nfunctions need to use grid graphics.  Low level drawing functions in\ngrid can be used directly as well, and is often more flexible.  These\nfunctions are provided for convenience and portability.\n","example_call":"lsegments(...)"},"lattice::axis.default":{"description":"Lattice funtions provide control over how the plot axes are annotated\nthrough a common interface.  There are two levels of control.  The\nxscale.components and yscale.components arguments can be\nfunctions that determine tick mark locations and labels given a\npacket.  For more direct control, the axis argument can be a\nfunction that actually draws the axes.  The functions documented here\nare the defaults for these arguments.  They can additonally be used as\ncomponents of user written replacements.\n","example_call":"axis.default(side = c(\"top\", \"bottom\", \"left\", \"right\"), scales,"},"lattice::parallelplot":{"description":"Draw Conditional Scatter Plot Matrices and Parallel Coordinate Plots\n","example_call":"parallelplot(x, data, ...)"},"lattice::panel.stripplot":{"description":"This is the default panel function for stripplot. Also see\npanel.superpose\n","example_call":"panel.stripplot(x, y, jitter.data = FALSE, factor = 0.5, amount = NULL,"},"lattice::trellis.unfocus":{"description":"The classic Trellis paradigm is to plot the whole object at once,\nwithout the possibility of interacting with it afterwards.  However,\nby keeping track of the grid viewports where the panels and strips are\ndrawn, it is possible to go back to them afterwards and enhance them\none panel at a time.  These functions provide convenient interfaces to\nhelp in this.  Note that these are still experimental and the exact\ndetails may change in future.\n","example_call":"trellis.unfocus()"},"lattice::contourplot":{"description":"Draws false color level plots and contour plots.\n","example_call":"contourplot(x, data, ...)"},"lattice::panel.superpose.plain":{"description":"These are panel functions for Trellis displays useful when a grouping\nvariable is specified for use within panels. The x (and\ny where appropriate) variables are plotted with different\ngraphical parameters for each distinct value of the grouping variable.\n","example_call":"panel.superpose.plain(..., col = NA, col.line = plot.line$col, col.symbol = plot.symbol$col,"},"lattice::draw.key":{"description":"Produces (and possibly draws) a Grid frame grob which is a legend (aka \nkey) that can be placed in other Grid plots.\n","example_call":"draw.key(key, draw = FALSE, vp = NULL, ...)"},"lattice::canonical.theme":{"description":"Built-in graphical parameter settings. These mainly differ in their\nchoice of colors.\n","example_call":"canonical.theme(...)"},"lattice::panel.levelplot":{"description":"These are the default panel functions for levelplot and\ncontourplot.  Also documented is an alternative raster-based\npanel function for use with levelplot.\n","example_call":"panel.levelplot(x, y, z, subscripts, at = pretty(z), shrink, labels = FALSE,"},"lattice::xyplot":{"description":"This help page documents several commonly used high-level Lattice\nfunctions.  xyplot produces bivariate scatterplots or\ntime-series plots, bwplot produces box-and-whisker plots,\ndotplot produces Cleveland dot plots, barchart produces\nbar plots, and stripplot produces one-dimensional scatterplots.\nAll these functions, along with other high-level Lattice functions,\nrespond to a common set of arguments that control conditioning,\nlayout, aspect ratio, legends, axis annotation, and many other details\nin a consistent manner.  These arguments are described extensively in\nthis help page, and should be used as the reference for other\nhigh-level functions as well.\n","example_call":"xyplot(x, data, ...)"},"lattice::panel.polygon":{"description":"These functions are intended to replace common low level traditional\ngraphics functions, primarily for use in panel functions.  The\noriginals can not be used (at least not easily) because lattice panel\nfunctions need to use grid graphics.  Low level drawing functions in\ngrid can be used directly as well, and is often more flexible.  These\nfunctions are provided for convenience and portability.\n","example_call":"panel.polygon(...)"},"lattice::latticeParseFormula":{"description":"this function is used by high level Lattice functions like\nxyplot to parse the formula argument and evaluate various\ncomponents of the data.\n","example_call":"latticeParseFormula(model, data, dimension = 2, subset = TRUE, groups = NULL,"},"lattice::prepanel.default.qq":{"description":"These prepanel functions are used as fallback defaults in various\nhigh level plot functions in Lattice.  These are rarely useful to\nnormal users but may be helpful in developing new displays.\n","example_call":"prepanel.default.qq(x, y, ...)"},"lattice::panel.linejoin":{"description":"These are predefined panel functions available in lattice for use in\nconstructing new panel functions (often on-the-fly).\n","example_call":"panel.linejoin(x, y, fun = mean, horizontal = TRUE, lwd = reference.line$lwd,"},"lattice::packet.number":{"description":"Control over lattice plots are provided through a collection of user\nspecifiable functions that perform various tasks during the plotting.\nNot all information is available to all functions.  The functions\ndocumented here attempt to provide a consistent interface to access\nrelevant information from within these user specified functions,\nnamely those specified as the panel, strip and\naxis functions.  Note that this information is not available to\nthe prepanel function, which is executed prior to the actual\nplotting.\n","example_call":"packet.number(prefix = lattice.getStatus(\"current.prefix\"))"},"lattice::panel.3dwire":{"description":"Default panel functions controlling cloud and\nwireframe displays.\n","example_call":"panel.3dwire(x, y, z, rot.mat = diag(4), distance, shade = FALSE,"},"lattice::qq":{"description":"Quantile-Quantile plots for comparing two Distributions\n","example_call":"qq(x, data, ...)"},"lattice::ltransform3dto3d":{"description":"These are (related to) the default panel functions for cloud\nand wireframe.\n","example_call":"ltransform3dto3d(x, R.mat, dist = 0)"},"lattice::trellis.vpname":{"description":"The classic Trellis paradigm is to plot the whole object at once,\nwithout the possibility of interacting with it afterwards.  However,\nby keeping track of the grid viewports where the panels and strips are\ndrawn, it is possible to go back to them afterwards and enhance them\none panel at a time.  These functions provide convenient interfaces to\nhelp in this.  Note that these are still experimental and the exact\ndetails may change in future.\n","example_call":"trellis.vpname(name = c(\"position\", \"split\", \"split.location\", \"toplevel\","},"lattice::panel.wireframe":{"description":"Default panel functions controlling cloud and\nwireframe displays.\n","example_call":"panel.wireframe(...)"},"lattice::lrect":{"description":"These functions are intended to replace common low level traditional\ngraphics functions, primarily for use in panel functions.  The\noriginals can not be used (at least not easily) because lattice panel\nfunctions need to use grid graphics.  Low level drawing functions in\ngrid can be used directly as well, and is often more flexible.  These\nfunctions are provided for convenience and portability.\n","example_call":"lrect(...)"},"lattice::trellis.panelArgs":{"description":"The classic Trellis paradigm is to plot the whole object at once,\nwithout the possibility of interacting with it afterwards.  However,\nby keeping track of the grid viewports where the panels and strips are\ndrawn, it is possible to go back to them afterwards and enhance them\none panel at a time.  These functions provide convenient interfaces to\nhelp in this.  Note that these are still experimental and the exact\ndetails may change in future.\n","example_call":"trellis.panelArgs(x, packet.number)"},"lattice::strip.custom":{"description":"strip.default is the function that draws the strips by default\nin Trellis plots.  Users can write their own strip functions, but most\ncommonly this involves calling strip.default with a slightly\ndifferent arguments.  strip.custom provides a convenient way to\nobtain new strip functions that differ from strip.default only\nin the default values of certain arguments.\n","example_call":"strip.custom(...)"},"lattice::trellis.last.object":{"description":"Update method for objects of class \"trellis\", and a way to retrieve\nthe last printed trellis object (that was saved).\n","example_call":"trellis.last.object(..., prefix = lattice.getStatus(\"current.prefix\"))"},"lattice::panel.number":{"description":"Control over lattice plots are provided through a collection of user\nspecifiable functions that perform various tasks during the plotting.\nNot all information is available to all functions.  The functions\ndocumented here attempt to provide a consistent interface to access\nrelevant information from within these user specified functions,\nnamely those specified as the panel, strip and\naxis functions.  Note that this information is not available to\nthe prepanel function, which is executed prior to the actual\nplotting.\n","example_call":"panel.number(prefix = lattice.getStatus(\"current.prefix\"))"},"lattice::stripplot":{"description":"This help page documents several commonly used high-level Lattice\nfunctions.  xyplot produces bivariate scatterplots or\ntime-series plots, bwplot produces box-and-whisker plots,\ndotplot produces Cleveland dot plots, barchart produces\nbar plots, and stripplot produces one-dimensional scatterplots.\nAll these functions, along with other high-level Lattice functions,\nrespond to a common set of arguments that control conditioning,\nlayout, aspect ratio, legends, axis annotation, and many other details\nin a consistent manner.  These arguments are described extensively in\nthis help page, and should be used as the reference for other\nhigh-level functions as well.\n","example_call":"stripplot(x, data, ...)"},"lattice::tmd":{"description":"tmd Creates Tukey Mean-Difference Plots from a trellis object\nreturned by xyplot, qq or qqmath.  The prepanel\nand panel functions are used as appropriate.  The formula and\ndata.frame methods for tmd are provided for convenience,\nand simply call tmd on the object created by the corresponding\nxyplot methods.\n","example_call":"tmd(object, ...)"},"lattice::is.shingle":{"description":"Functions to handle shingles\n","example_call":"is.shingle(x)"},"lattice::histogram":{"description":"Draw Histograms and Kernel Density Plots, possibly conditioned on\nother variables.\n","example_call":"histogram(x, data, ...)"},"lattice::prepanel.lmline":{"description":"These are predefined prepanel functions available in Lattice.\n","example_call":"prepanel.lmline(x, y, ...)"},"lattice::panel.polypath":{"description":"These functions are intended to replace common low level traditional\ngraphics functions, primarily for use in panel functions.  The\noriginals can not be used (at least not easily) because lattice panel\nfunctions need to use grid graphics.  Low level drawing functions in\ngrid can be used directly as well, and is often more flexible.  These\nfunctions are provided for convenience and portability.\n","example_call":"panel.polypath(...)"},"lattice::panel.contourplot":{"description":"These are the default panel functions for levelplot and\ncontourplot.  Also documented is an alternative raster-based\npanel function for use with levelplot.\n","example_call":"panel.contourplot(...)"},"lattice::cloud":{"description":"Generic functions to draw 3d scatter plots and surfaces.  The\n\"formula\" methods do most of the actual work.\n","example_call":"cloud(x, data, ...)"},"lattice::panel.points":{"description":"These functions are intended to replace common low level traditional\ngraphics functions, primarily for use in panel functions.  The\noriginals can not be used (at least not easily) because lattice panel\nfunctions need to use grid graphics.  Low level drawing functions in\ngrid can be used directly as well, and is often more flexible.  These\nfunctions are provided for convenience and portability.\n","example_call":"panel.points(...)"},"lattice::panel.cloud":{"description":"Default panel functions controlling cloud and\nwireframe displays.\n","example_call":"panel.cloud(x, y, subscripts, z, groups = NULL, perspective = TRUE,"},"lattice::lattice.getOption":{"description":"Functions to handle settings used by lattice.  Their main purpose is\nto make code maintainance easier, and users normally should not need\nto use these functions.  However, fine control at this level maybe\nuseful in certain cases.\n","example_call":"lattice.getOption(name)"},"lattice::panel.qq":{"description":"This is the default panel function for xyplot. Also see\npanel.superpose.  The default panel functions for\nsplom and qq are essentially the same function.\n","example_call":"panel.qq(..., identifier = \"qq\")"},"lattice::trellis.par.get":{"description":"Functions used to query, display and modify graphical parameters for\nfine control of Trellis displays.  Modifications are made to the\nsettings for the currently active device only.\n","example_call":"trellis.par.get(name = NULL)"},"lattice::densityplot":{"description":"Draw Histograms and Kernel Density Plots, possibly conditioned on\nother variables.\n","example_call":"densityplot(x, data, ...)"},"lattice::panel.arrows":{"description":"These functions are intended to replace common low level traditional\ngraphics functions, primarily for use in panel functions.  The\noriginals can not be used (at least not easily) because lattice panel\nfunctions need to use grid graphics.  Low level drawing functions in\ngrid can be used directly as well, and is often more flexible.  These\nfunctions are provided for convenience and portability.\n","example_call":"panel.arrows(...)"},"lattice::current.row":{"description":"Control over lattice plots are provided through a collection of user\nspecifiable functions that perform various tasks during the plotting.\nNot all information is available to all functions.  The functions\ndocumented here attempt to provide a consistent interface to access\nrelevant information from within these user specified functions,\nnamely those specified as the panel, strip and\naxis functions.  Note that this information is not available to\nthe prepanel function, which is executed prior to the actual\nplotting.\n","example_call":"current.row(prefix = lattice.getStatus(\"current.prefix\"))"},"lattice::lpolygon":{"description":"These functions are intended to replace common low level traditional\ngraphics functions, primarily for use in panel functions.  The\noriginals can not be used (at least not easily) because lattice panel\nfunctions need to use grid graphics.  Low level drawing functions in\ngrid can be used directly as well, and is often more flexible.  These\nfunctions are provided for convenience and portability.\n","example_call":"lpolygon(x, ...)"},"lattice::level.colors":{"description":"Calculates false colors from a numeric variable (including factors,\nusing their numeric codes) given a color scheme and breakpoints.\n","example_call":"level.colors(x, at, col.regions, colors = TRUE, ...)"},"lattice::panel.qqmath":{"description":"This is the default panel function for qqmath.\n","example_call":"panel.qqmath(x, f.value = NULL, distribution = qnorm, qtype = 7,"},"lattice::panel.refline":{"description":"These are predefined panel functions available in lattice for use in\nconstructing new panel functions (often on-the-fly).\n","example_call":"panel.refline(...)"},"lattice::shingle":{"description":"Functions to handle shingles\n","example_call":"shingle(x, intervals = sort(unique(x)))"},"lattice::splom":{"description":"Draw Conditional Scatter Plot Matrices and Parallel Coordinate Plots\n","example_call":"splom(x, data, ...)"},"lattice::panel.splom":{"description":"This is the default panel function for xyplot. Also see\npanel.superpose.  The default panel functions for\nsplom and qq are essentially the same function.\n","example_call":"panel.splom(..., identifier = \"splom\")"},"lattice::panel.dotplot":{"description":"Default panel function for dotplot.\n","example_call":"panel.dotplot(x, y, horizontal = TRUE, pch = if (is.null(groups)) dot.symbol$pch else sup.symbol$pch,"},"lattice::panel.loess":{"description":"A predefined panel function that can be used to add a LOESS smooth\nbased on the provided data.\n","example_call":"panel.loess(x, y, span = 2/3, degree = 1, family = c(\"symmetric\","},"lattice::trellis.par.set":{"description":"Functions used to query, display and modify graphical parameters for\nfine control of Trellis displays.  Modifications are made to the\nsettings for the currently active device only.\n","example_call":"trellis.par.set(name, value, ..., theme, warn = TRUE, strict = FALSE)"},"lattice::equal.count":{"description":"Functions to handle shingles\n","example_call":"equal.count(x, ...)"},"lattice::show.settings":{"description":"Functions used to query, display and modify graphical parameters for\nfine control of Trellis displays.  Modifications are made to the\nsettings for the currently active device only.\n","example_call":"show.settings(x = NULL)"},"lattice::panel.average":{"description":"These are predefined panel functions available in lattice for use in\nconstructing new panel functions (often on-the-fly).\n","example_call":"panel.average(x, y, fun = mean, horizontal = TRUE, lwd = reference.line$lwd,"},"lattice::panel.superpose":{"description":"These are panel functions for Trellis displays useful when a grouping\nvariable is specified for use within panels. The x (and\ny where appropriate) variables are plotted with different\ngraphical parameters for each distinct value of the grouping variable.\n","example_call":"panel.superpose(x, y = NULL, subscripts, groups, panel.groups = \"panel.xyplot\","},"lattice::current.column":{"description":"Control over lattice plots are provided through a collection of user\nspecifiable functions that perform various tasks during the plotting.\nNot all information is available to all functions.  The functions\ndocumented here attempt to provide a consistent interface to access\nrelevant information from within these user specified functions,\nnamely those specified as the panel, strip and\naxis functions.  Note that this information is not available to\nthe prepanel function, which is executed prior to the actual\nplotting.\n","example_call":"current.column(prefix = lattice.getStatus(\"current.prefix\"))"},"lattice::panel.segments":{"description":"These functions are intended to replace common low level traditional\ngraphics functions, primarily for use in panel functions.  The\noriginals can not be used (at least not easily) because lattice panel\nfunctions need to use grid graphics.  Low level drawing functions in\ngrid can be used directly as well, and is often more flexible.  These\nfunctions are provided for convenience and portability.\n","example_call":"panel.segments(...)"},"lattice::yscale.components.default":{"description":"Lattice funtions provide control over how the plot axes are annotated\nthrough a common interface.  There are two levels of control.  The\nxscale.components and yscale.components arguments can be\nfunctions that determine tick mark locations and labels given a\npacket.  For more direct control, the axis argument can be a\nfunction that actually draws the axes.  The functions documented here\nare the defaults for these arguments.  They can additonally be used as\ncomponents of user written replacements.\n","example_call":"yscale.components.default(lim, packet.number = 0, packet.list = NULL, right = TRUE,"},"lattice::panel.rect":{"description":"These functions are intended to replace common low level traditional\ngraphics functions, primarily for use in panel functions.  The\noriginals can not be used (at least not easily) because lattice panel\nfunctions need to use grid graphics.  Low level drawing functions in\ngrid can be used directly as well, and is often more flexible.  These\nfunctions are provided for convenience and portability.\n","example_call":"panel.rect(...)"},"lattice::panel.bwplot":{"description":"This is the default panel function for bwplot.\n","example_call":"panel.bwplot(x, y, box.ratio = 1, box.width = box.ratio/(1 + box.ratio),"},"lattice::panel.qqmathline":{"description":"Useful panel function with qqmath. Draws a line passing through the\npoints (usually) determined by the .25 and .75 quantiles of the sample\nand the theoretical distribution.\n","example_call":"panel.qqmathline(x, y = x, distribution = qnorm, probs = c(0.25, 0.75),"},"lattice::draw.colorkey":{"description":"Creates (and optionally draws) a grid frame grob representing a color\nkey that can be placed in other grid-based plots. Primarily used by\nlevelplot when a color key is requested.\n","example_call":"draw.colorkey(key, draw = FALSE, vp = NULL)"},"lattice::panel.lmline":{"description":"These are predefined panel functions available in lattice for use in\nconstructing new panel functions (often on-the-fly).\n","example_call":"panel.lmline(x, y, ..., identifier = \"lmline\")"},"lattice::lpolypath":{"description":"These functions are intended to replace common low level traditional\ngraphics functions, primarily for use in panel functions.  The\noriginals can not be used (at least not easily) because lattice panel\nfunctions need to use grid graphics.  Low level drawing functions in\ngrid can be used directly as well, and is often more flexible.  These\nfunctions are provided for convenience and portability.\n","example_call":"lpolypath(x, ...)"},"lattice::col.whitebg":{"description":"Built-in graphical parameter settings. These mainly differ in their\nchoice of colors.\n","example_call":"col.whitebg()"},"lattice::prepanel.default.xyplot":{"description":"These prepanel functions are used as fallback defaults in various\nhigh level plot functions in Lattice.  These are rarely useful to\nnormal users but may be helpful in developing new displays.\n","example_call":"prepanel.default.xyplot(x, y, type, subscripts, groups = NULL, ...)"},"lattice::prepanel.tmd.default":{"description":"tmd Creates Tukey Mean-Difference Plots from a trellis object\nreturned by xyplot, qq or qqmath.  The prepanel\nand panel functions are used as appropriate.  The formula and\ndata.frame methods for tmd are provided for convenience,\nand simply call tmd on the object created by the corresponding\nxyplot methods.\n","example_call":"prepanel.tmd.default(x, y, ...)"},"lattice::xscale.components.default":{"description":"Lattice funtions provide control over how the plot axes are annotated\nthrough a common interface.  There are two levels of control.  The\nxscale.components and yscale.components arguments can be\nfunctions that determine tick mark locations and labels given a\npacket.  For more direct control, the axis argument can be a\nfunction that actually draws the axes.  The functions documented here\nare the defaults for these arguments.  They can additonally be used as\ncomponents of user written replacements.\n","example_call":"xscale.components.default(lim, packet.number = 0, packet.list = NULL, top = TRUE,"},"lattice::prepanel.loess":{"description":"These are predefined prepanel functions available in Lattice.\n","example_call":"prepanel.loess(x, y, span = 2/3, degree = 1, family = c(\"symmetric\","},"lattice::classic.theme":{"description":"Built-in graphical parameter settings. These mainly differ in their\nchoice of colors.\n","example_call":"classic.theme(name = .Device, color = name != \"postscript\")"},"lattice::llines":{"description":"These functions are intended to replace common low level traditional\ngraphics functions, primarily for use in panel functions.  The\noriginals can not be used (at least not easily) because lattice panel\nfunctions need to use grid graphics.  Low level drawing functions in\ngrid can be used directly as well, and is often more flexible.  These\nfunctions are provided for convenience and portability.\n","example_call":"llines(x, ...)"},"lattice::Rows":{"description":"Convenience function to extract subset of a list. Usually used in\ncreating keys.\n","example_call":"Rows(x, which)"},"lattice::panel.parallel":{"description":"This is the default panel function for parallel.\n","example_call":"panel.parallel(x, y, z, subscripts, groups = NULL, col = superpose.line$col,"},"lattice::trellis.switchFocus":{"description":"The classic Trellis paradigm is to plot the whole object at once,\nwithout the possibility of interacting with it afterwards.  However,\nby keeping track of the grid viewports where the panels and strips are\ndrawn, it is possible to go back to them afterwards and enhance them\none panel at a time.  These functions provide convenient interfaces to\nhelp in this.  Note that these are still experimental and the exact\ndetails may change in future.\n","example_call":"trellis.switchFocus(name, side = NULL, clip.off = FALSE, highlight, ...,"},"lattice::panel.brush.splom":{"description":"The classic Trellis paradigm is to plot the whole object at once,\nwithout the possibility of interacting with it afterwards.  However,\nby keeping track of the grid viewports where the panels and strips are\ndrawn, it is possible to go back to them afterwards and enhance them\none panel at a time.  These functions provide convenient interfaces to\nhelp in this.  Note that these are still experimental and the exact\ndetails may change in future.\n","example_call":"panel.brush.splom(threshold = 18, verbose = getOption(\"verbose\"), ...)"},"lattice::make.groups":{"description":"Combines two or more vectors, possibly of different lengths, producing\na data frame with a second column indicating which of these vectors\nthat row came from.  This is mostly useful for getting data into a\nform suitable for use in high level Lattice functions.\n","example_call":"make.groups(...)"},"lattice::diag.panel.splom":{"description":"This is the default superpanel function for splom.\n","example_call":"diag.panel.splom(x = NULL, varname = NULL, limits, at = NULL, labels = NULL,"},"lattice::panel.xyplot":{"description":"This is the default panel function for xyplot. Also see\npanel.superpose.  The default panel functions for\nsplom and qq are essentially the same function.\n","example_call":"panel.xyplot(x, y, type = \"p\", groups = NULL, pch = if (is.null(groups)) plot.symbol$pch else superpose.symbol$pch,"},"lattice::panel.identify":{"description":"The classic Trellis paradigm is to plot the whole object at once,\nwithout the possibility of interacting with it afterwards.  However,\nby keeping track of the grid viewports where the panels and strips are\ndrawn, it is possible to go back to them afterwards and enhance them\none panel at a time.  These functions provide convenient interfaces to\nhelp in this.  Note that these are still experimental and the exact\ndetails may change in future.\n","example_call":"panel.identify(x, y = NULL, subscripts = seq_along(x), labels = subscripts,"},"lattice::prepanel.default.levelplot":{"description":"These prepanel functions are used as fallback defaults in various\nhigh level plot functions in Lattice.  These are rarely useful to\nnormal users but may be helpful in developing new displays.\n","example_call":"prepanel.default.levelplot(x, y, subscripts, ...)"},"lattice::panel.tmd.default":{"description":"tmd Creates Tukey Mean-Difference Plots from a trellis object\nreturned by xyplot, qq or qqmath.  The prepanel\nand panel functions are used as appropriate.  The formula and\ndata.frame methods for tmd are provided for convenience,\nand simply call tmd on the object created by the corresponding\nxyplot methods.\n","example_call":"panel.tmd.default(x, y, groups = NULL, ..., identifier = \"tmd\")"},"lattice::prepanel.default.splom":{"description":"These prepanel functions are used as fallback defaults in various\nhigh level plot functions in Lattice.  These are rarely useful to\nnormal users but may be helpful in developing new displays.\n","example_call":"prepanel.default.splom(z, ...)"},"lattice::prepanel.default.densityplot":{"description":"These prepanel functions are used as fallback defaults in various\nhigh level plot functions in Lattice.  These are rarely useful to\nnormal users but may be helpful in developing new displays.\n","example_call":"prepanel.default.densityplot(x, darg, groups = NULL, weights = NULL, subscripts = TRUE,"},"lattice::simpleTheme":{"description":"Simple interface to generate a list appropriate as a theme, typically\nused as the par.settings argument in a high level call\n","example_call":"simpleTheme(col, alpha, cex, pch, lty, lwd, font, fill, border,"},"lattice::panel.identify.qqmath":{"description":"The classic Trellis paradigm is to plot the whole object at once,\nwithout the possibility of interacting with it afterwards.  However,\nby keeping track of the grid viewports where the panels and strips are\ndrawn, it is possible to go back to them afterwards and enhance them\none panel at a time.  These functions provide convenient interfaces to\nhelp in this.  Note that these are still experimental and the exact\ndetails may change in future.\n","example_call":"panel.identify.qqmath(x = panel.args$x, distribution = panel.args$distribution,"},"lattice::panel.histogram":{"description":"This is the default panel function for histogram.\n","example_call":"panel.histogram(x, breaks, equal.widths = TRUE, type = \"density\", nint = round(log2(length(x)) +"},"lattice::as.factorOrShingle":{"description":"Functions to handle shingles\n","example_call":"as.factorOrShingle(x, subset = TRUE, drop = FALSE)"},"lattice::panel.identify.cloud":{"description":"The classic Trellis paradigm is to plot the whole object at once,\nwithout the possibility of interacting with it afterwards.  However,\nby keeping track of the grid viewports where the panels and strips are\ndrawn, it is possible to go back to them afterwards and enhance them\none panel at a time.  These functions provide convenient interfaces to\nhelp in this.  Note that these are still experimental and the exact\ndetails may change in future.\n","example_call":"panel.identify.cloud(x = panel.args$x, y = panel.args$y, z = panel.args$z,"},"lattice::panel.mathdensity":{"description":"These are predefined panel functions available in lattice for use in\nconstructing new panel functions (often on-the-fly).\n","example_call":"panel.mathdensity(dmath = dnorm, args = list(mean = 0, sd = 1), n = 50,"},"lattice::rfs":{"description":"Plots fitted values and residuals (via qqmath) on a common scale for\nany object that has methods for fitted values and residuals. \n","example_call":"rfs(model, layout = c(2, 1), xlab = \"f-value\", ylab = NULL,"},"lattice::prepanel.default.histogram":{"description":"These prepanel functions are used as fallback defaults in various\nhigh level plot functions in Lattice.  These are rarely useful to\nnormal users but may be helpful in developing new displays.\n","example_call":"prepanel.default.histogram(x, breaks, equal.widths = TRUE, type = \"density\", nint = round(log2(length(x)) +"},"lattice::prepanel.default.parallel":{"description":"These prepanel functions are used as fallback defaults in various\nhigh level plot functions in Lattice.  These are rarely useful to\nnormal users but may be helpful in developing new displays.\n","example_call":"prepanel.default.parallel(x, y, z, ..., horizontal.axis = TRUE)"},"lattice::oneway":{"description":"Fits a One-way model to univariate data grouped by a factor, the\nresult often being displayed using rfs \n","example_call":"oneway(formula, data, location = mean, spread = function(x) sqrt(var(x)))"},"lattice::ltransform3dMatrix":{"description":"These are (related to) the default panel functions for cloud\nand wireframe.\n","example_call":"ltransform3dMatrix(screen, R.mat = diag(4))"},"lattice::dotplot":{"description":"This help page documents several commonly used high-level Lattice\nfunctions.  xyplot produces bivariate scatterplots or\ntime-series plots, bwplot produces box-and-whisker plots,\ndotplot produces Cleveland dot plots, barchart produces\nbar plots, and stripplot produces one-dimensional scatterplots.\nAll these functions, along with other high-level Lattice functions,\nrespond to a common set of arguments that control conditioning,\nlayout, aspect ratio, legends, axis annotation, and many other details\nin a consistent manner.  These arguments are described extensively in\nthis help page, and should be used as the reference for other\nhigh-level functions as well.\n","example_call":"dotplot(x, data, ...)"},"lattice::panel.error":{"description":"The print and plot methods produce a graph from a\n\"trellis\" object.  The print method is necessary for\nautomatic plotting.  plot method is essentially\nan alias, provided for convenience.  The summary method\ngives a textual summary of the object.  dim and dimnames\ndescribe the cross-tabulation induced by conditioning.\npanel.error is the default handler used when an error occurs\nwhile executing the panel function.\n","example_call":"panel.error(e)"},"lattice::bwplot":{"description":"This help page documents several commonly used high-level Lattice\nfunctions.  xyplot produces bivariate scatterplots or\ntime-series plots, bwplot produces box-and-whisker plots,\ndotplot produces Cleveland dot plots, barchart produces\nbar plots, and stripplot produces one-dimensional scatterplots.\nAll these functions, along with other high-level Lattice functions,\nrespond to a common set of arguments that control conditioning,\nlayout, aspect ratio, legends, axis annotation, and many other details\nin a consistent manner.  These arguments are described extensively in\nthis help page, and should be used as the reference for other\nhigh-level functions as well.\n","example_call":"bwplot(x, data, ...)"},"lattice::panel.rug":{"description":"These are predefined panel functions available in lattice for use in\nconstructing new panel functions (often on-the-fly).\n","example_call":"panel.rug(x = NULL, y = NULL, regular = TRUE, start = if (regular) 0 else 0.97,"},"lattice::makeShadePalette":{"description":"Default panel functions controlling cloud and\nwireframe displays.\n","example_call":"makeShadePalette(col.regions, ..., min = 0.05, pref = 0.75)"},"lattice::parallel":{"description":"Draw Conditional Scatter Plot Matrices and Parallel Coordinate Plots\n","example_call":"parallel(x, data, ...)"},"lattice::panel.abline":{"description":"These are predefined panel functions available in lattice for use in\nconstructing new panel functions (often on-the-fly).\n","example_call":"panel.abline(a = NULL, b = 0, h = NULL, v = NULL, reg = NULL, coef = NULL,"},"lattice::barchart":{"description":"This help page documents several commonly used high-level Lattice\nfunctions.  xyplot produces bivariate scatterplots or\ntime-series plots, bwplot produces box-and-whisker plots,\ndotplot produces Cleveland dot plots, barchart produces\nbar plots, and stripplot produces one-dimensional scatterplots.\nAll these functions, along with other high-level Lattice functions,\nrespond to a common set of arguments that control conditioning,\nlayout, aspect ratio, legends, axis annotation, and many other details\nin a consistent manner.  These arguments are described extensively in\nthis help page, and should be used as the reference for other\nhigh-level functions as well.\n","example_call":"barchart(x, data, ...)"},"lattice::trellis.focus":{"description":"The classic Trellis paradigm is to plot the whole object at once,\nwithout the possibility of interacting with it afterwards.  However,\nby keeping track of the grid viewports where the panels and strips are\ndrawn, it is possible to go back to them afterwards and enhance them\none panel at a time.  These functions provide convenient interfaces to\nhelp in this.  Note that these are still experimental and the exact\ndetails may change in future.\n","example_call":"trellis.focus(name, column = stop(\"column must be specified\"), row = stop(\"row must be specified\"),"},"lattice::standard.theme":{"description":"Built-in graphical parameter settings. These mainly differ in their\nchoice of colors.\n","example_call":"standard.theme(name, color = TRUE, symbol = palette.colors(palette = \"Okabe-Ito\")[c(6,"},"lattice::panel.superpose.2":{"description":"These are panel functions for Trellis displays useful when a grouping\nvariable is specified for use within panels. The x (and\ny where appropriate) variables are plotted with different\ngraphical parameters for each distinct value of the grouping variable.\n","example_call":"panel.superpose.2(..., distribute.type = TRUE)"},"lattice::panel.barchart":{"description":"Default panel function for barchart.\n","example_call":"panel.barchart(x, y, box.ratio = 1, box.width = box.ratio/(1 + box.ratio),"},"lattice::trellis.grobname":{"description":"The classic Trellis paradigm is to plot the whole object at once,\nwithout the possibility of interacting with it afterwards.  However,\nby keeping track of the grid viewports where the panels and strips are\ndrawn, it is possible to go back to them afterwards and enhance them\none panel at a time.  These functions provide convenient interfaces to\nhelp in this.  Note that these are still experimental and the exact\ndetails may change in future.\n","example_call":"trellis.grobname(name, type = c(\"\", \"panel\", \"strip\", \"strip.left\","},"lattice::panel.pairs":{"description":"This is the default superpanel function for splom.\n","example_call":"panel.pairs(z, panel = lattice.getOption(\"panel.splom\"), lower.panel = panel,"},"lattice::simpleKey":{"description":"Simple interface to generate a list appropriate for draw.key\n","example_call":"simpleKey(text, points = TRUE, rectangles = FALSE, lines = FALSE,"},"lattice::wireframe":{"description":"Generic functions to draw 3d scatter plots and surfaces.  The\n\"formula\" methods do most of the actual work.\n","example_call":"wireframe(x, data, ...)"},"lattice::panel.spline":{"description":"A predefined panel function that can be used to add a spline smooth\nbased on the provided data.\n","example_call":"panel.spline(x, y, npoints = 101, lwd = plot.line$lwd, lty = plot.line$lty,"},"lattice::panel.smoothScatter":{"description":"This function allows the user to place smoothScatter plots in\nlattice graphics.\n","example_call":"panel.smoothScatter(x, y = NULL, nbin = 64, cuts = 255, bandwidth, col.regions,"},"lattice::prepanel.spline":{"description":"These are predefined prepanel functions available in Lattice.\n","example_call":"prepanel.spline(x, y, npoints = 101, horizontal = FALSE, ..., keep.data = FALSE)"},"lattice::prepanel.qqmathline":{"description":"These are predefined prepanel functions available in Lattice.\n","example_call":"prepanel.qqmathline(x, y = x, distribution = qnorm, probs = c(0.25, 0.75),"},"lattice::do.breaks":{"description":"Draw Histograms and Kernel Density Plots, possibly conditioned on\nother variables.\n","example_call":"do.breaks(endpoints, nint)"},"magrittr::add":{"description":"magrittr provides a series of aliases which can be more pleasant to use\nwhen composing chains using the %>% operator.\n","example_call":"add(e1, e2)"},"magrittr::set_class":{"description":"magrittr provides a series of aliases which can be more pleasant to use\nwhen composing chains using the %>% operator.\n","example_call":"set_class(x, value)"},"magrittr::multiply_by":{"description":"magrittr provides a series of aliases which can be more pleasant to use\nwhen composing chains using the %>% operator.\n","example_call":"multiply_by(e1, e2)"},"magrittr::multiply_by_matrix":{"description":"magrittr provides a series of aliases which can be more pleasant to use\nwhen composing chains using the %>% operator.\n","example_call":"multiply_by_matrix(x, y)"},"magrittr::equals":{"description":"magrittr provides a series of aliases which can be more pleasant to use\nwhen composing chains using the %>% operator.\n","example_call":"equals(e1, e2)"},"magrittr::pipe_eager_lexical":{"description":"Assign these pipe variants to an infix symbol like <U+2060>%>%<U+2060>.\n","example_call":"pipe_eager_lexical(lhs, rhs)"},"magrittr::is_weakly_greater_than":{"description":"magrittr provides a series of aliases which can be more pleasant to use\nwhen composing chains using the %>% operator.\n","example_call":"is_weakly_greater_than(e1, e2)"},"magrittr::debug_fseq":{"description":"This is a utility function for marking functions in a functional\nsequence for debbuging.\n","example_call":"debug_fseq(fseq, ...)"},"magrittr::%>%":{"description":"Pipe an object forward into a function or call expression.\n","example_call":"%>%(lhs, rhs)"},"magrittr::divide_by":{"description":"magrittr provides a series of aliases which can be more pleasant to use\nwhen composing chains using the %>% operator.\n","example_call":"divide_by(e1, e2)"},"magrittr::set_rownames":{"description":"magrittr provides a series of aliases which can be more pleasant to use\nwhen composing chains using the %>% operator.\n","example_call":"set_rownames(x, value)"},"magrittr::set_names":{"description":"magrittr provides a series of aliases which can be more pleasant to use\nwhen composing chains using the %>% operator.\n","example_call":"set_names(x, value)"},"magrittr::is_less_than":{"description":"magrittr provides a series of aliases which can be more pleasant to use\nwhen composing chains using the %>% operator.\n","example_call":"is_less_than(e1, e2)"},"magrittr::set_attr":{"description":"magrittr provides a series of aliases which can be more pleasant to use\nwhen composing chains using the %>% operator.\n","example_call":"set_attr(x, which, value)"},"magrittr::raise_to_power":{"description":"magrittr provides a series of aliases which can be more pleasant to use\nwhen composing chains using the %>% operator.\n","example_call":"raise_to_power(e1, e2)"},"magrittr::is_in":{"description":"magrittr provides a series of aliases which can be more pleasant to use\nwhen composing chains using the %>% operator.\n","example_call":"is_in(x, table)"},"magrittr::extract":{"description":"magrittr provides a series of aliases which can be more pleasant to use\nwhen composing chains using the %>% operator.\n","example_call":"NULL"},"magrittr::divide_by_int":{"description":"magrittr provides a series of aliases which can be more pleasant to use\nwhen composing chains using the %>% operator.\n","example_call":"divide_by_int(e1, e2)"},"magrittr::pipe_nested":{"description":"Assign these pipe variants to an infix symbol like <U+2060>%>%<U+2060>.\n","example_call":"pipe_nested(lhs, rhs)"},"magrittr::%T>%":{"description":"Pipe a value forward into a function- or call expression and return the\noriginal value instead of the result. This is useful when an expression\nis used for its side-effect, say plotting or printing.\n","example_call":"%T>%(lhs, rhs)"},"magrittr::subtract":{"description":"magrittr provides a series of aliases which can be more pleasant to use\nwhen composing chains using the %>% operator.\n","example_call":"subtract(e1, e2)"},"magrittr::freduce":{"description":"This function applies the first function to value, then the\nnext function to the result of the previous function call, etc.\n","example_call":"freduce(value, function_list)"},"magrittr::%$%":{"description":"Expose the names in lhs to the rhs expression. This is useful when functions\ndo not have a built-in data argument.\n","example_call":"%$%(lhs, rhs)"},"magrittr::mod":{"description":"magrittr provides a series of aliases which can be more pleasant to use\nwhen composing chains using the %>% operator.\n","example_call":"mod(e1, e2)"},"magrittr::inset2":{"description":"magrittr provides a series of aliases which can be more pleasant to use\nwhen composing chains using the %>% operator.\n","example_call":"NULL"},"magrittr::is_greater_than":{"description":"magrittr provides a series of aliases which can be more pleasant to use\nwhen composing chains using the %>% operator.\n","example_call":"is_greater_than(e1, e2)"},"magrittr::%<>%":{"description":"Pipe an object forward into a function or call expression and update the\nlhs object with the resulting value.\n","example_call":"%<>%(lhs, rhs)"},"magrittr::functions":{"description":"This can be used to extract the list of functions inside a functional\nsequence created with a chain like . %>% foo %>% bar.\n","example_call":"functions(fseq)"},"magrittr::set_colnames":{"description":"magrittr provides a series of aliases which can be more pleasant to use\nwhen composing chains using the %>% operator.\n","example_call":"set_colnames(x, value)"},"magrittr::extract2":{"description":"magrittr provides a series of aliases which can be more pleasant to use\nwhen composing chains using the %>% operator.\n","example_call":"NULL"},"magrittr::use_series":{"description":"magrittr provides a series of aliases which can be more pleasant to use\nwhen composing chains using the %>% operator.\n","example_call":"NULL"},"magrittr::and":{"description":"magrittr provides a series of aliases which can be more pleasant to use\nwhen composing chains using the %>% operator.\n","example_call":"and(e1, e2)"},"magrittr::pipe_lazy_masking":{"description":"Assign these pipe variants to an infix symbol like <U+2060>%>%<U+2060>.\n","example_call":"pipe_lazy_masking(lhs, rhs)"},"magrittr::debug_pipe":{"description":"This function is a wrapper around browser, which makes it\neasier to debug at certain places in a magrittr pipe chain.\n","example_call":"debug_pipe(x)"},"magrittr::inset":{"description":"magrittr provides a series of aliases which can be more pleasant to use\nwhen composing chains using the %>% operator.\n","example_call":"NULL"},"magrittr::set_attributes":{"description":"magrittr provides a series of aliases which can be more pleasant to use\nwhen composing chains using the %>% operator.\n","example_call":"set_attributes(x, value)"},"magrittr::%!>%":{"description":"Whereas <U+2060>%>%<U+2060> is lazy and only evaluates the piped expressions when\nneeded, <U+2060>%!>%<U+2060> is eager and evaluates the piped input at each step.\nThis produces more intuitive behaviour when functions are called\nfor their side effects, such as displaying a message.\n","example_call":"%!>%(lhs, rhs)"},"magrittr::n'est pas":{"description":"magrittr provides a series of aliases which can be more pleasant to use\nwhen composing chains using the %>% operator.\n","example_call":"n'est pas(x)"},"magrittr::is_weakly_less_than":{"description":"magrittr provides a series of aliases which can be more pleasant to use\nwhen composing chains using the %>% operator.\n","example_call":"is_weakly_less_than(e1, e2)"},"magrittr::not":{"description":"magrittr provides a series of aliases which can be more pleasant to use\nwhen composing chains using the %>% operator.\n","example_call":"not(x)"},"magrittr::undebug_fseq":{"description":"This is a utility function for marking functions in a functional\nsequence for debbuging.\n","example_call":"undebug_fseq(fseq)"},"magrittr::or":{"description":"magrittr provides a series of aliases which can be more pleasant to use\nwhen composing chains using the %>% operator.\n","example_call":"or(e1, e2)"},"MASS::boxcox":{"description":"Computes and optionally plots profile log-likelihoods for the\nparameter of the Box-Cox power transformation.\n","example_call":"boxcox(object, ...)"},"MASS::lm.ridge":{"description":"Fit a linear model by ridge regression.\n","example_call":"lm.ridge(formula, data, subset, na.action, lambda = 0, model = FALSE,"},"MASS::con2tr":{"description":"Convert lists to data frames for use by lattice.\n","example_call":"con2tr(obj)"},"MASS::rms.curv":{"description":"Calculates the root mean square parameter effects and intrinsic relative\ncurvatures, c^\\theta and c^\\iota, for a\nfitted nonlinear regression, as defined in Bates & Watts, section 7.3,\np. 253ff\n","example_call":"rms.curv(obj)"},"MASS::cov.rob":{"description":"Compute a multivariate location and scale estimate with a high\nbreakdown point <U+2013> this can be thought of as estimating the mean and\ncovariance of the good part of the data. cov.mve and\ncov.mcd are compatibility wrappers.\n","example_call":"cov.rob(x, cor = FALSE, quantile.used = floor((n + p + 1)/2),"},"MASS::parcoord":{"description":"Parallel coordinates plot\n","example_call":"parcoord(x, col = 1, lty = 1, var.label = FALSE, ...)"},"MASS::Null":{"description":"Given a matrix, M, find a matrix N giving a basis for the\n(left) null space.  That is crossprod(N, M) = t(N) %*% M\nis an all-zero matrix and N has the maximum number of linearly\nindependent columns.\n","example_call":"Null(M)"},"MASS::lqs":{"description":"Fit a regression to the good points in the dataset, thereby\nachieving a regression estimator with a high breakdown point.\nlmsreg and ltsreg are compatibility wrappers.\n","example_call":"lqs(x, ...)"},"MASS::enlist":{"description":"Internal MASS functions.\n","example_call":"enlist(vec)"},"MASS::write.matrix":{"description":"Writes a matrix or data frame to a file or the console, using column\nlabels and a layout respecting columns.\n","example_call":"write.matrix(x, file = \"\", sep = \" \", blocksize)"},"MASS::rational":{"description":"Find rational approximations to the components of a real numeric\nobject using a standard continued fraction method.\n","example_call":"rational(x, cycles = 10, max.denominator = 2000, ...)"},"MASS::lda":{"description":"Linear discriminant analysis.\n","example_call":"lda(x, ...)"},"MASS::is.fractions":{"description":"Find rational approximations to the components of a real numeric\nobject using a standard continued fraction method.\n","example_call":"is.fractions(f)"},"MASS::select":{"description":"Fit a linear model by ridge regression.\n","example_call":"select(obj)"},"MASS::rlm":{"description":"Fit a linear model by robust regression using an M estimator.\n","example_call":"rlm(x, ...)"},"MASS::sammon":{"description":"One form of non-metric multidimensional scaling.\n","example_call":"sammon(d, y = cmdscale(d, k), k = 2, niter = 100, trace = TRUE,"},"MASS::negative.binomial":{"description":"Specifies the information required to fit a Negative Binomial generalized\nlinear model, with known theta parameter, using glm().\n","example_call":"negative.binomial(theta = stop(\"'theta' must be specified\"), link = \"log\")"},"MASS::Shepard":{"description":"One form of non-metric multidimensional scaling\n","example_call":"Shepard(d, x, p = 2)"},"MASS::logtrans":{"description":"Find and optionally plot the marginal (profile) likelihood for alpha\nfor a transformation model of the form log(y + alpha) ~ x1 + x2 + ....\n","example_call":"logtrans(object, ...)"},"MASS::psi.hampel":{"description":"Fit a linear model by robust regression using an M estimator.\n","example_call":"psi.hampel(u, a = 2, b = 4, c = 8, deriv = 0)"},"MASS::mca":{"description":"Computes a multiple correspondence analysis of a set of factors.\n","example_call":"mca(df, nf = 2, abbrev = FALSE)"},"MASS::loglm1":{"description":"loglm1 is an internal function used by loglm.\nIt is a generic function dispatching on the data argument.\n","example_call":"loglm1(formula, data, ...)"},"MASS::frequency.polygon":{"description":"Internal MASS functions.\n","example_call":"frequency.polygon(x, nclass = nclass.freq(x), xlab = \"\", ylab = \"\", ...)"},"MASS::stepAIC":{"description":"Performs stepwise model selection by AIC.\n","example_call":"stepAIC(object, scope, scale = 0, direction = c(\"both\", \"backward\","},"MASS::kde2d":{"description":"Two-dimensional kernel density estimation with an axis-aligned\nbivariate normal kernel, evaluated on a square grid.\n","example_call":"kde2d(x, y, h, n = 25, lims = c(range(x), range(y)))"},"MASS::area":{"description":"Integrate a function of one variable over a finite range using a\nrecursive adaptive method.  This function is mainly for\ndemonstration purposes.\n","example_call":"area(f, a, b, ..., fa = f(a, ...), fb = f(b, ...), limit = 10,"},"MASS::polr":{"description":"Fits a logistic or probit regression model to an ordered factor\nresponse.  The default logistic case is proportional odds\nlogistic regression, after which the function is named.\n","example_call":"polr(formula, data, weights, start, ..., subset, na.action,"},"MASS::cov.mcd":{"description":"Compute a multivariate location and scale estimate with a high\nbreakdown point <U+2013> this can be thought of as estimating the mean and\ncovariance of the good part of the data. cov.mve and\ncov.mcd are compatibility wrappers.\n","example_call":"cov.mcd(...)"},"MASS::hist.FD":{"description":"Plot a histogram with automatic bin width selection, using the Scott\nor Freedman<U+2013>Diaconis formulae.\n","example_call":"hist.FD(x, prob = TRUE, xlab = deparse(substitute(x)), ...)"},"MASS::addterm":{"description":"Try fitting all models that differ from the current model by adding a\nsingle term from those supplied, maintaining marginality.\n","example_call":"addterm(object, ...)"},"MASS::nclass.freq":{"description":"Internal MASS functions.\n","example_call":"nclass.freq(x)"},"MASS::huber":{"description":"Finds the Huber M-estimator of location with MAD scale.\n","example_call":"huber(y, k = 1.5, tol = 1e-06)"},"MASS::psi.huber":{"description":"Fit a linear model by robust regression using an M estimator.\n","example_call":"psi.huber(u, k = 1.345, deriv = 0)"},"MASS::renumerate":{"description":"denumerate converts a formula written using the conventions of\nloglm into one that terms is able to process.  renumerate\nconverts it back again to a form like the original.\n","example_call":"renumerate(x)"},"MASS::gamma.dispersion":{"description":"A front end to gamma.shape for convenience.  Finds the\nreciprocal of the estimate of the shape parameter only.\n","example_call":"gamma.dispersion(object, ...)"},"MASS::glm.nb":{"description":"A modification of the system function glm() to include\nestimation of the additional parameter, theta, for a\nNegative Binomial generalized linear model.\n","example_call":"glm.nb(formula, data, weights, subset, na.action, start = NULL,"},"MASS::lm.gls":{"description":"Fit linear models by Generalized Least Squares\n","example_call":"lm.gls(formula, data, W, subset, na.action, inverse = FALSE,"},"MASS::ucv":{"description":"Uses unbiased cross-validation to select the bandwidth of a Gaussian\nkernel density estimator.\n","example_call":"ucv(x, nb = 1000, lower = 0.1 * hmax, upper = hmax)"},"MASS::bcv":{"description":"Uses biased cross-validation to select the bandwidth of a  Gaussian\nkernel density estimator.\n","example_call":"bcv(x, nb = 1000, lower = 0.1 * hmax, upper = hmax)"},"MASS::neg.bin":{"description":"Internal MASS functions.\n","example_call":"neg.bin(theta = stop(\"'theta' must be given\"))"},"MASS::loglm":{"description":"This function provides a front-end to the standard function,\nloglin, to allow log-linear models to be specified and fitted\nin a manner similar to that of other fitting functions, such as\nglm.\n","example_call":"loglm(formula, data, subset, na.action, ...)"},"MASS::dropterm":{"description":"Try fitting all models that differ from the current model by dropping a\nsingle term, maintaining marginality.\n","example_call":"dropterm(object, ...)"},"MASS::ginv":{"description":"Calculates the Moore-Penrose generalized inverse of a matrix\nX.\n","example_call":"ginv(X, tol = sqrt(.Machine$double.eps))"},"MASS::as.fractions":{"description":"Find rational approximations to the components of a real numeric\nobject using a standard continued fraction method.\n","example_call":"as.fractions(x)"},"MASS::dose.p":{"description":"Calibrate binomial assays, generalizing the calculation of LD50.\n","example_call":"dose.p(obj, cf = 1:2, p = 0.5)"},"MASS::theta.md":{"description":"Given the estimated mean vector, estimate theta of the\nNegative Binomial Distribution.\n","example_call":"theta.md(y, mu, dfr, weights, limit = 20, eps = .Machine$double.eps^0.25)"},"MASS::lmsreg":{"description":"Fit a regression to the good points in the dataset, thereby\nachieving a regression estimator with a high breakdown point.\nlmsreg and ltsreg are compatibility wrappers.\n","example_call":"lmsreg(...)"},"MASS::fractions":{"description":"Find rational approximations to the components of a real numeric\nobject using a standard continued fraction method.\n","example_call":"fractions(x, cycles = 10, max.denominator = 2000, ...)"},"MASS::studres":{"description":"The Studentized residuals.  Like standardized residuals, these are\nnormalized to unit variance, but the Studentized version is fitted\nignoring the current data point. (They are sometimes called jackknifed\nresiduals).\n","example_call":"studres(object)"},"MASS::glmmPQL":{"description":"Fit a GLMM model with multivariate normal random effects, using\nPenalized Quasi-Likelihood.\n","example_call":"glmmPQL(fixed, random, family, data, correlation, weights,"},"MASS::eqscplot":{"description":"Version of a scatterplot with scales chosen to be equal on both axes, that\nis 1cm represents the same units on each\n","example_call":"eqscplot(x, y, ratio = 1, tol = 0.04, uin, ...)"},"MASS::ldahist":{"description":"Plot histograms or density plots of data on a single Fisher linear\ndiscriminant.\n","example_call":"ldahist(data, g, nbins = 25, h, x0 = -h/1000, breaks, xlim = range(breaks),"},"MASS::hist.scott":{"description":"Plot a histogram with automatic bin width selection, using the Scott\nor Freedman<U+2013>Diaconis formulae.\n","example_call":"hist.scott(x, prob = TRUE, xlab = deparse(substitute(x)), ...)"},"MASS::cov.trob":{"description":"Estimates a covariance or correlation matrix assuming the data came\nfrom a multivariate t distribution: this provides some degree of\nrobustness to outlier without giving a high breakdown point.\n","example_call":"cov.trob(x, wt = rep(1, n), cor = FALSE, center = TRUE, nu = 5,"},"MASS::corresp":{"description":"Find the principal canonical correlation and corresponding row- and\ncolumn-scores from a correspondence analysis of a two-way contingency\ntable.\n","example_call":"corresp(x, ...)"},"MASS::theta.ml":{"description":"Given the estimated mean vector, estimate theta of the\nNegative Binomial Distribution.\n","example_call":"theta.ml(y, mu, n = sum(weights), weights, limit = 10, eps = .Machine$double.eps^0.25,"},"MASS::cov.mve":{"description":"Compute a multivariate location and scale estimate with a high\nbreakdown point <U+2013> this can be thought of as estimating the mean and\ncovariance of the good part of the data. cov.mve and\ncov.mcd are compatibility wrappers.\n","example_call":"cov.mve(...)"},"MASS::gamma.shape":{"description":"Find the maximum likelihood estimate of the shape parameter of\nthe gamma distribution after fitting a Gamma generalized\nlinear model.\n","example_call":"gamma.shape(object, ...)"},"MASS::theta.mm":{"description":"Given the estimated mean vector, estimate theta of the\nNegative Binomial Distribution.\n","example_call":"theta.mm(y, mu, dfr, weights, limit = 10, eps = .Machine$double.eps^0.25)"},"MASS::fitdistr":{"description":"Maximum-likelihood fitting of univariate distributions, allowing\nparameters to be held fixed if desired.\n","example_call":"fitdistr(x, densfun, start, ...)"},"MASS::rnegbin":{"description":"Function to generate random outcomes from a Negative Binomial distribution,\nwith mean mu and variance mu + mu^2/theta.\n","example_call":"rnegbin(n, mu = n, theta = stop(\"'theta' must be specified\"))"},"MASS::glm.convert":{"description":"This function modifies an output object from glm.nb() to one\nthat looks like the output from glm() with a negative binomial\nfamily.  This allows it to be updated keeping the theta parameter\nfixed.\n","example_call":"glm.convert(object)"},"MASS::contr.sdif":{"description":"A coding for factors based on successive differences.\n","example_call":"contr.sdif(n, contrasts = TRUE, sparse = FALSE)"},"MASS::fbeta":{"description":"Internal MASS functions.\n","example_call":"fbeta(x, alpha, beta)"},"MASS::ltsreg":{"description":"Fit a regression to the good points in the dataset, thereby\nachieving a regression estimator with a high breakdown point.\nlmsreg and ltsreg are compatibility wrappers.\n","example_call":"ltsreg(...)"},"MASS::hubers":{"description":"Finds the Huber M-estimator for location with scale specified, scale\nwith location specified, or both if neither is specified.\n","example_call":"hubers(y, k = 1.5, mu, s, initmu = median(y), tol = 1e-06)"},"MASS::negexp.SSival":{"description":"Internal MASS functions.\n","example_call":"negexp.SSival(mCall, data, LHS)"},"MASS::psi.bisquare":{"description":"Fit a linear model by robust regression using an M estimator.\n","example_call":"psi.bisquare(u, c = 4.685, deriv = 0)"},"MASS::truehist":{"description":"Creates a histogram on the current graphics device.\n","example_call":"truehist(data, nbins = \"Scott\", h, x0 = -h/1000, breaks, prob = TRUE,"},"MASS::bandwidth.nrd":{"description":"A well-supported rule-of-thumb for choosing the bandwidth of a Gaussian\nkernel density estimator.\n","example_call":"bandwidth.nrd(x)"},"MASS::mvrnorm":{"description":"Produces one or more samples from the specified\nmultivariate normal distribution.\n","example_call":"mvrnorm(n = 1, mu, Sigma, tol = 1e-06, empirical = FALSE, EISPACK = FALSE)"},"MASS::denumerate":{"description":"loglm allows dimension numbers to be used in place of names in\nthe formula.  denumerate modifies such a formula into one that\nterms can process.\n","example_call":"denumerate(x)"},"MASS::width.SJ":{"description":"Uses the method of Sheather & Jones (1991) to select the bandwidth of\na Gaussian kernel density estimator.\n","example_call":"width.SJ(x, nb = 1000, lower = 0.1 * hmax, upper = hmax, method = c(\"ste\","},"MASS::isoMDS":{"description":"One form of non-metric multidimensional scaling\n","example_call":"isoMDS(d, y = cmdscale(d, k), k = 2, maxit = 50, trace = TRUE,"},"MASS::stdres":{"description":"The standardized residuals.  These are normalized to unit\nvariance, fitted including the current data point.\n","example_call":"stdres(object)"},"MASS::lqs.formula":{"description":"Fit a regression to the good points in the dataset, thereby\nachieving a regression estimator with a high breakdown point.\nlmsreg and ltsreg are compatibility wrappers.\n","example_call":"lqs.formula(formula, data, ..., method = c(\"lts\", \"lqs\", \"lms\","},"MASS::qda":{"description":"Quadratic discriminant analysis.\n","example_call":"qda(x, ...)"},"Matrix::.asmatrix":{"description":"These functions are provided for compatibility with older versions\nof Matrix only and may be defunct as soon as the next release.\n","example_call":".asmatrix(x)"},"Matrix::Diagonal":{"description":"Construct a formally diagonal Matrix,\ni.e., an object inheriting from virtual class\ndiagonalMatrix\n(or, if desired, a mathematically diagonal\nCsparseMatrix).\n","example_call":"Diagonal(n, x = NULL, names = FALSE)"},"Matrix::diagU2N":{"description":"Transform a triangular matrix x, i.e., of class\ntriangularMatrix,\nfrom (internally!) unit triangular (<U+201C>unitriangular<U+201D>) to\n<U+201C>general<U+201D> triangular (diagU2N(x)) or back (diagN2U(x)).\nNote that the latter, diagN2U(x), also sets the diagonal to one\nin cases where diag(x) was not all one.\n","example_call":"diagU2N(x, cl = getClassDef(class(x)), checkDense = FALSE)"},"Matrix::.m2lgC":{"description":"These functions are provided for compatibility with older versions\nof Matrix only and may be defunct as soon as the next release.\n","example_call":".m2lgC(from)"},"Matrix::rankMatrix":{"description":"Compute <U+2018>the<U+2019> matrix rank, a well-defined functional in theory(*),\nsomewhat ambiguous in practice.  We provide several methods, the\ndefault corresponding to Matlab's definition.\n","example_call":"rankMatrix(x, tol = NULL, method = c(\"tolNorm2\", \"qr.R\", \"qrLINPACK\","},"Matrix::%&%":{"description":"For boolean or <U+201C>pattern<U+201D> matrices, i.e., R objects of\nclass nMatrix, it is natural to allow matrix\nproducts using boolean instead of numerical arithmetic.\n","example_call":"%&%(x, y)"},"Matrix::nnzero":{"description":"Returns the number of non-zero values of a numeric-like R object, and\nin particular an object x inheriting from class\nMatrix.\n","example_call":"nnzero(x, na.counted = NA)"},"Matrix::norm":{"description":"Computes a matrix norm of x, using Lapack for dense matrices.\nThe norm can be the one  (\"O\", or \"1\") norm, the\ninfinity (\"I\") norm, the Frobenius  (\"F\") norm,\nthe maximum modulus (\"M\") among elements of a matrix, or the\nspectral norm or 2-norm (\"2\"), as determined by the value of\ntype.\n","example_call":"norm(x, type, ...)"},"Matrix::uniqTsparse":{"description":"Detect or standardize a TsparseMatrix with\nunsorted or duplicated (i,j) pairs.\n","example_call":"uniqTsparse(x, class.x = class(x))"},"Matrix::bdiag":{"description":"Build a block diagonal matrix given several building block matrices.\n","example_call":"bdiag(...)"},"Matrix::mat2triplet":{"description":"From an R object coercible to \"TsparseMatrix\",\ntypically a (sparse) matrix, produce its triplet representation which may\ncollapse to a <U+201C>Duplet<U+201D> in the case of binary aka pattern, such as\n\"nMatrix\" objects.\n","example_call":"mat2triplet(x, uniqT = FALSE)"},"Matrix::qr2rankMatrix":{"description":"Compute <U+2018>the<U+2019> matrix rank, a well-defined functional in theory(*),\nsomewhat ambiguous in practice.  We provide several methods, the\ndefault corresponding to Matlab's definition.\n","example_call":"qr2rankMatrix(qr, tol = NULL, isBqr = is.qr(qr), do.warn = TRUE)"},"Matrix::.dxC2mat":{"description":"These functions are provided for compatibility with older versions\nof Matrix only and may be defunct as soon as the next release.\n","example_call":".dxC2mat(from, chkUdiag)"},"Matrix::rowScale":{"description":"dimScale, rowScale, and colScale implement\nD1 %*% x %*% D2, D %*% x, and x %*% D\nfor diagonal matrices D1, D2, and D with\ndiagonal entries d1, d2, and d, respectively.\nUnlike the explicit products, these functions preserve dimnames(x)\nand symmetry where appropriate.\n","example_call":"rowScale(x, d)"},"Matrix::readHB":{"description":"Read matrices stored in the Harwell-Boeing or MatrixMarket formats\nor write sparseMatrix objects to one of these\nformats.\n","example_call":"readHB(file)"},"Matrix::.trDiagonal":{"description":"Construct a formally diagonal Matrix,\ni.e., an object inheriting from virtual class\ndiagonalMatrix\n(or, if desired, a mathematically diagonal\nCsparseMatrix).\n","example_call":".trDiagonal(n, x = NULL, uplo = \"U\", unitri = TRUE, kind)"},"Matrix::skewpart":{"description":"symmpart(x) computes the symmetric part (x + t(x))/2 and\nskewpart(x) the\nskew symmetric part (x - t(x))/2 of a square matrix x,\nmore efficiently for specific Matrix classes.\n","example_call":"skewpart(x)"},"Matrix::nearPD":{"description":"Compute the nearest positive definite matrix to an approximate\none, typically a correlation or variance-covariance matrix.\n","example_call":"nearPD(x, corr = FALSE, keepDiag = FALSE, base.matrix = FALSE,"},"Matrix::Schur":{"description":"Computes the Schur factorization of an n \\times n\nreal matrix A, which has the general form \n","example_call":"Schur(x, vectors = TRUE, ...)"},"Matrix::det":{"description":"The Matrix class is a class contained by all actual\nclasses in the Matrix package.  It is a <U+201C>virtual<U+201D> class.\n","example_call":"det(x, ...)"},"Matrix::.nC2d":{"description":"These functions are provided for compatibility with older versions\nof Matrix only and may be defunct as soon as the next release.\n","example_call":".nC2d(from)"},"Matrix::.dense2sparse":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".dense2sparse(from, repr = \"C\")"},"Matrix::.bdiag":{"description":"Build a block diagonal matrix given several building block matrices.\n","example_call":".bdiag(lst)"},"Matrix::.nC2l":{"description":"These functions are provided for compatibility with older versions\nof Matrix only and may be defunct as soon as the next release.\n","example_call":".nC2l(from)"},"Matrix::formatSpMatrix":{"description":"Format and print sparse matrices flexibly.  These are the <U+201C>workhorses<U+201D> used by\nthe format, show and print\nmethods for sparse matrices.  If x is large,\nprintSpMatrix2(x) calls printSpMatrix() twice, namely,\nfor the first and the last few rows, suppressing those in between, and\nalso suppresses columns when x is too wide.\n","example_call":"formatSpMatrix(x, digits = NULL, maxp = 1e+09, cld = getClassDef(class(x)),"},"Matrix::.ind2dense":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".ind2dense(from, kind = \"n\")"},"Matrix::signPerm":{"description":"invertPerm and signPerm compute the inverse and sign\nof a length-n permutation vector.  isPerm tests\nif a length-n integer vector is a valid permutation vector.\nasPerm coerces a length-m transposition vector to a\nlength-n permutation vector, where m <= n.\n","example_call":"signPerm(p, off = 1L)"},"Matrix::isLDL":{"description":"CHMfactor is the virtual class of sparse Cholesky\nfactorizations of n \\times n real, symmetric\nmatrices A, having the general form\n","example_call":"isLDL(x)"},"Matrix::fac2Sparse":{"description":"Construct a sparse model or <U+201C>design<U+201D> matrix,\nfrom a formula and data frame (sparse.model.matrix) or a single\nfactor (fac2sparse).\n","example_call":"fac2Sparse(from, to = c(\"d\", \"l\", \"n\"), drop.unused.levels = TRUE,"},"Matrix::.M2C":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".M2C(from)"},"Matrix::colScale":{"description":"dimScale, rowScale, and colScale implement\nD1 %*% x %*% D2, D %*% x, and x %*% D\nfor diagonal matrices D1, D2, and D with\ndiagonal entries d1, d2, and d, respectively.\nUnlike the explicit products, these functions preserve dimnames(x)\nand symmetry where appropriate.\n","example_call":"colScale(x, d)"},"Matrix::printSpMatrix":{"description":"Format and print sparse matrices flexibly.  These are the <U+201C>workhorses<U+201D> used by\nthe format, show and print\nmethods for sparse matrices.  If x is large,\nprintSpMatrix2(x) calls printSpMatrix() twice, namely,\nfor the first and the last few rows, suppressing those in between, and\nalso suppresses columns when x is too wide.\n","example_call":"printSpMatrix(x, digits = NULL, maxp = max(100L, getOption(\"max.print\")),"},"Matrix::.SuiteSparse_version":{"description":"These functions are provided for compatibility with older versions\nof Matrix only and may be defunct as soon as the next release.\n","example_call":".SuiteSparse_version()"},"Matrix::isSymmetric":{"description":"isSymmetric tests whether its argument is a symmetric square\nmatrix, by default tolerating some numerical fuzz and requiring\nsymmetric [dD]imnames in addition to symmetry in the\nmathematical sense.  isSymmetric is a generic function in\nbase, which has a method for traditional\nmatrices of implicit class \"matrix\".\nMethods are defined here for various proper and virtual classes\nin Matrix, so that isSymmetric works for all objects\ninheriting from virtual class \"Matrix\".\n","example_call":"isSymmetric(object, ...)"},"Matrix::fac2sparse":{"description":"Construct a sparse model or <U+201C>design<U+201D> matrix,\nfrom a formula and data frame (sparse.model.matrix) or a single\nfactor (fac2sparse).\n","example_call":"fac2sparse(from, to = c(\"d\", \"l\", \"n\"), drop.unused.levels = TRUE,"},"Matrix::.M2R":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".M2R(from)"},"Matrix::.CR2RC":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".CR2RC(from)"},"Matrix::.M2T":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".M2T(from)"},"Matrix::.tCR2RC":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".tCR2RC(from)"},"Matrix::.M2V":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".M2V(from)"},"Matrix::T2graph":{"description":"Since 2005, package Matrix has supported coercions to and\nfrom class graph from package\ngraph.\nSince 2013, this functionality has been exposed via functions\nT2graph and graph2T, which, unlike methods for\nas(from, \"<Class>\"), support optional arguments.\n","example_call":"T2graph(from, need.uniq = !isUniqueT(from), edgemode = NULL)"},"Matrix::unpack":{"description":"pack() coerces dense symmetric and dense triangular matrices\nfrom unpacked format (storing the full matrix) to packed format\n(storing only one of the upper and lower triangles).  unpack()\nperforms the reverse coercion. The two formats are formalized\nby the virtual classes \"packedMatrix\" and\n\"unpackedMatrix\".\n","example_call":"unpack(x, ...)"},"Matrix::rep2abI":{"description":"rep2abI(x, times) conceptually computes\nrep.int(x, times) but with an\nabIndex class result.\n","example_call":"rep2abI(x, times)"},"Matrix::.M2gen":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".M2gen(from, kind = \".\")"},"Matrix::.M2packed":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".M2packed(from)"},"Matrix::drop0":{"description":"Deletes <U+201C>non-structural<U+201D> zeros (i.e., zeros stored explicitly,\nin memory) from a sparse matrix and returns the result.\n","example_call":"drop0(x, tol = 0, is.Csparse = NA, give.Csparse = TRUE)"},"Matrix::formatSparseM":{"description":"Utilities for formatting sparse numeric matrices in a flexible way.\nThese functions are used by the format and print\nmethods for sparse matrices and can be applied as well to standard R\nmatrices.  Note that all arguments but the first are optional.\n","example_call":"formatSparseM(x, zero.print = \".\", align = c(\"fancy\", \"right\"), m = as(x,"},"Matrix::Matrix.Version":{"description":"The Matrix class is a class contained by all actual\nclasses in the Matrix package.  It is a <U+201C>virtual<U+201D> class.\n","example_call":"Matrix.Version()"},"Matrix::Hilbert":{"description":"Generate the n by n symmetric Hilbert matrix.  Because\nthese matrices are ill-conditioned for moderate to large n,\nthey are often used for testing numerical linear algebra code.\n","example_call":"Hilbert(n)"},"Matrix::abIseq1":{"description":"Generation of abstract index vectors, i.e., objects of class\n\"abIndex\".\n","example_call":"abIseq1(from = 1, to = 1)"},"Matrix::.M2m":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".M2m(from)"},"Matrix::.validateCsparse":{"description":"The \"CsparseMatrix\" class is the virtual class of\nall sparse matrices coded in sorted compressed column-oriented form.\nSince it is a virtual class, no objects may be created from it.  See\nshowClass(\"CsparseMatrix\") for its subclasses.\n","example_call":".validateCsparse(x, sort.if.needed = FALSE)"},"Matrix::.m2sparse":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".m2sparse(from, class = \".gC\", uplo = \"U\", diag = \"N\", trans = FALSE)"},"Matrix::.C2nC":{"description":"These functions are provided for compatibility with older versions\nof Matrix only and may be defunct as soon as the next release.\n","example_call":".C2nC(from, isTri)"},"Matrix::writeMM":{"description":"Read matrices stored in the Harwell-Boeing or MatrixMarket formats\nor write sparseMatrix objects to one of these\nformats.\n","example_call":"writeMM(obj, file, ...)"},"Matrix::symmpart":{"description":"symmpart(x) computes the symmetric part (x + t(x))/2 and\nskewpart(x) the\nskew symmetric part (x - t(x))/2 of a square matrix x,\nmore efficiently for specific Matrix classes.\n","example_call":"symmpart(x)"},"Matrix::.M2sym":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".M2sym(from, ...)"},"Matrix::chol2inv":{"description":"Given formally upper and lower triangular matrices\nU and L, compute (U' U)^{-1}\nand (L L')^{-1}, respectively.\n","example_call":"chol2inv(x, ...)"},"Matrix::.M2v":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".M2v(from)"},"Matrix::band":{"description":"Return the matrix obtained by setting to zero elements below a diagonal\n(triu), above a diagonal (tril), or outside of a general\nband (band).\n","example_call":"band(x, k1, k2, ...)"},"Matrix::anyDuplicatedT":{"description":"Detect or standardize a TsparseMatrix with\nunsorted or duplicated (i,j) pairs.\n","example_call":"anyDuplicatedT(x, ...)"},"Matrix::.solve.dgC.lu":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".solve.dgC.lu(a, b, tol = .Machine$double.eps, check = TRUE)"},"Matrix::asUniqueT":{"description":"Detect or standardize a TsparseMatrix with\nunsorted or duplicated (i,j) pairs.\n","example_call":"asUniqueT(x, byrow = FALSE, isT = is(x, \"TsparseMatrix\"))"},"Matrix::readMM":{"description":"Read matrices stored in the Harwell-Boeing or MatrixMarket formats\nor write sparseMatrix objects to one of these\nformats.\n","example_call":"readMM(file)"},"Matrix::Cholesky":{"description":"Computes the pivoted Cholesky factorization of an\nn \\times n real, symmetric matrix A,\nwhich has the general form\n","example_call":"Cholesky(A, ...)"},"Matrix::abIseq":{"description":"Generation of abstract index vectors, i.e., objects of class\n\"abIndex\".\n","example_call":"abIseq(from = 1, to = 1, by = ((to - from)/(length.out - 1)),"},"Matrix::.formatSparseSimple":{"description":"Utilities for formatting sparse numeric matrices in a flexible way.\nThese functions are used by the format and print\nmethods for sparse matrices and can be applied as well to standard R\nmatrices.  Note that all arguments but the first are optional.\n","example_call":".formatSparseSimple(m, asLogical = FALSE, digits = NULL, col.names, note.dropping.colnames = TRUE,"},"Matrix::invertPerm":{"description":"invertPerm and signPerm compute the inverse and sign\nof a length-n permutation vector.  isPerm tests\nif a length-n integer vector is a valid permutation vector.\nasPerm coerces a length-m transposition vector to a\nlength-n permutation vector, where m <= n.\n","example_call":"invertPerm(p, off = 1L, ioff = 1L)"},"Matrix::condest":{"description":"<U+201C>Estimate<U+201D>, i.e. compute approximately the CONDition number of\na (potentially large, often sparse) matrix A.\nIt works by apply a fast randomized approximation of the 1-norm,\nnorm(A,\"1\"), through onenormest(.).\n","example_call":"condest(A, t = min(n, 5), normA = norm(A, \"1\"), silent = FALSE,"},"Matrix::asPerm":{"description":"invertPerm and signPerm compute the inverse and sign\nof a length-n permutation vector.  isPerm tests\nif a length-n integer vector is a valid permutation vector.\nasPerm coerces a length-m transposition vector to a\nlength-n permutation vector, where m <= n.\n","example_call":"asPerm(pivot, off = 1L, ioff = 1L, n = length(pivot))"},"Matrix::isPerm":{"description":"invertPerm and signPerm compute the inverse and sign\nof a length-n permutation vector.  isPerm tests\nif a length-n integer vector is a valid permutation vector.\nasPerm coerces a length-m transposition vector to a\nlength-n permutation vector, where m <= n.\n","example_call":"isPerm(p, off = 1L)"},"Matrix::expm":{"description":"Compute the exponential of a matrix.\n","example_call":"expm(x)"},"Matrix::.diagU2N":{"description":"Transform a triangular matrix x, i.e., of class\ntriangularMatrix,\nfrom (internally!) unit triangular (<U+201C>unitriangular<U+201D>) to\n<U+201C>general<U+201D> triangular (diagU2N(x)) or back (diagN2U(x)).\nNote that the latter, diagN2U(x), also sets the diagonal to one\nin cases where diag(x) was not all one.\n","example_call":".diagU2N(x, cl = getClassDef(class(x)), checkDense = FALSE)"},"Matrix::expand":{"description":"expand1 and expand2 construct matrix factors from\nobjects specifying matrix factorizations.  Such objects typically\ndo not store the factors explicitly, employing instead a compact\nrepresentation to save memory.\n","example_call":"expand(x, ...)"},"Matrix::BunchKaufman":{"description":"Computes the Bunch-Kaufman factorization of an n \\times n\nreal, symmetric matrix A, which has the general form\n","example_call":"BunchKaufman(x, ...)"},"Matrix::graph2T":{"description":"Since 2005, package Matrix has supported coercions to and\nfrom class graph from package\ngraph.\nSince 2013, this functionality has been exposed via functions\nT2graph and graph2T, which, unlike methods for\nas(from, \"<Class>\"), support optional arguments.\n","example_call":"graph2T(from, use.weights = graph.has.weights(from) && graph.non.1.weights(from))"},"Matrix::invPerm":{"description":"invertPerm and signPerm compute the inverse and sign\nof a length-n permutation vector.  isPerm tests\nif a length-n integer vector is a valid permutation vector.\nasPerm coerces a length-m transposition vector to a\nlength-n permutation vector, where m <= n.\n","example_call":"invPerm(p, zero.p = FALSE, zero.res = FALSE)"},"Matrix::.n2dgT":{"description":"These functions are provided for compatibility with older versions\nof Matrix only and may be defunct as soon as the next release.\n","example_call":".n2dgT(from)"},"Matrix::KhatriRao":{"description":"Computes Khatri-Rao products for any kind of matrices.\n","example_call":"KhatriRao(X, Y = X, FUN = \"*\", sparseY = TRUE, make.dimnames = FALSE)"},"Matrix::.M2unpacked":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".M2unpacked(from)"},"Matrix::lu":{"description":"Computes the pivoted LU factorization of an m \\times n\nreal matrix A, which has the general form\n","example_call":"lu(x, ...)"},"Matrix::colSums":{"description":"Form row and column sums and means for\nobjects, for sparseMatrix the result may\noptionally be sparse (sparseVector), too.\nRow or column names are kept respectively as for base matrices\nand colSums methods, when the result is\nnumeric vector.\n","example_call":"colSums(x, na.rm = FALSE, dims = 1, ...)"},"Matrix::sparseVector":{"description":"User friendly construction of sparse vectors,\ni.e., objects inheriting from class\nsparseVector, from indices and values of its\nnon-zero entries.\n","example_call":"sparseVector(x, i, length)"},"Matrix::is.null.DN":{"description":"Are the dimnames dn NULL-like?\n","example_call":"is.null.DN(dn)"},"Matrix::qrR":{"description":"sparseQR is the class of sparse, row- and column-pivoted\nQR factorizations of m \\times n (m \\ge n)\nreal matrices, having the general form\n","example_call":"qrR(qr, complete = FALSE, backPermute = TRUE, row.names = TRUE)"},"Matrix::..2dge":{"description":"These functions are provided for compatibility with older versions\nof Matrix only and may be defunct as soon as the next release.\n","example_call":"..2dge(from)"},"Matrix::.tCRT":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".tCRT(x, lazy = TRUE)"},"Matrix::sparse.model.matrix":{"description":"Construct a sparse model or <U+201C>design<U+201D> matrix,\nfrom a formula and data frame (sparse.model.matrix) or a single\nfactor (fac2sparse).\n","example_call":"sparse.model.matrix(object, data = environment(object), contrasts.arg = NULL,"},"Matrix::.m2V":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".m2V(from, kind = \".\")"},"Matrix::.m2ngC":{"description":"These functions are provided for compatibility with older versions\nof Matrix only and may be defunct as soon as the next release.\n","example_call":".m2ngC(from)"},"Matrix::.m2ngTn":{"description":"These functions are provided for compatibility with older versions\nof Matrix only and may be defunct as soon as the next release.\n","example_call":".m2ngTn(from, na.is.not.0 = FALSE)"},"Matrix::rcond":{"description":"Estimate the reciprocal of the condition number of a matrix.\n","example_call":"rcond(x, norm, ...)"},"Matrix::.diagN2U":{"description":"Transform a triangular matrix x, i.e., of class\ntriangularMatrix,\nfrom (internally!) unit triangular (<U+201C>unitriangular<U+201D>) to\n<U+201C>general<U+201D> triangular (diagU2N(x)) or back (diagN2U(x)).\nNote that the latter, diagN2U(x), also sets the diagonal to one\nin cases where diag(x) was not all one.\n","example_call":".diagN2U(x, cl = getClassDef(class(x)), checkDense = FALSE)"},"Matrix::isUniqueT":{"description":"Detect or standardize a TsparseMatrix with\nunsorted or duplicated (i,j) pairs.\n","example_call":"isUniqueT(x, byrow = FALSE, isT = is(x, \"TsparseMatrix\"))"},"Matrix::dimScale":{"description":"dimScale, rowScale, and colScale implement\nD1 %*% x %*% D2, D %*% x, and x %*% D\nfor diagonal matrices D1, D2, and D with\ndiagonal entries d1, d2, and d, respectively.\nUnlike the explicit products, these functions preserve dimnames(x)\nand symmetry where appropriate.\n","example_call":"dimScale(x, d1 = sqrt(1/diag(x, names = FALSE)), d2 = d1)"},"Matrix::facmul":{"description":"Multiplies a matrix or vector on the left or right by a factor\nfrom a matrix factorization or its transpose.\n","example_call":"facmul(x, factor, y, trans = FALSE, left = TRUE, ...)"},"Matrix::rowMeans":{"description":"Form row and column sums and means for\nobjects, for sparseMatrix the result may\noptionally be sparse (sparseVector), too.\nRow or column names are kept respectively as for base matrices\nand colSums methods, when the result is\nnumeric vector.\n","example_call":"rowMeans(x, na.rm = FALSE, dims = 1, ...)"},"Matrix::.dense2sy":{"description":"These functions are provided for compatibility with older versions\nof Matrix only and may be defunct as soon as the next release.\n","example_call":".dense2sy(from, ...)"},"Matrix::bandSparse":{"description":"Construct a sparse banded matrix by specifying its non-zero sup- and\nsuper-diagonals.\n","example_call":"bandSparse(n, m = n, k, diagonals, symmetric = FALSE, repr = \"C\","},"Matrix::.dense2kind":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".dense2kind(from, kind)"},"Matrix::MatrixClass":{"description":"Return the (maybe super-)class of class cl from\npackage Matrix, returning character(0) if there is none.\n","example_call":"MatrixClass(cl, cld = getClassDef(cl), ...Matrix = TRUE, dropVirtual = TRUE,"},"Matrix::.diag.dsC":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".diag.dsC(x, Chx = Cholesky(x, LDL = TRUE), res.kind = \"diag\")"},"Matrix::.solve.dgC.qr":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".solve.dgC.qr(a, b, order = 3L, check = TRUE)"},"Matrix::rowSums":{"description":"Form row and column sums and means for\nobjects, for sparseMatrix the result may\noptionally be sparse (sparseVector), too.\nRow or column names are kept respectively as for base matrices\nand colSums methods, when the result is\nnumeric vector.\n","example_call":"rowSums(x, na.rm = FALSE, dims = 1, ...)"},"Matrix::.m2dense":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".m2dense(from, class = \".ge\", uplo = \"U\", diag = \"N\", trans = FALSE)"},"Matrix::aggregateT":{"description":"Detect or standardize a TsparseMatrix with\nunsorted or duplicated (i,j) pairs.\n","example_call":"aggregateT(x)"},"Matrix::all.equal":{"description":"Methods for function all.equal() (from R package\nbase) are defined for all Matrix classes.\n","example_call":"all.equal(target, current, ...)"},"Matrix::qr":{"description":"Computes the pivoted QR factorization of an m \\times n\nreal matrix A, which has the general form\n","example_call":"qr(x, ...)"},"Matrix::diagN2U":{"description":"Transform a triangular matrix x, i.e., of class\ntriangularMatrix,\nfrom (internally!) unit triangular (<U+201C>unitriangular<U+201D>) to\n<U+201C>general<U+201D> triangular (diagU2N(x)) or back (diagN2U(x)).\nNote that the latter, diagN2U(x), also sets the diagonal to one\nin cases where diag(x) was not all one.\n","example_call":"diagN2U(x, cl = getClassDef(class(x)), checkDense = FALSE)"},"Matrix::printSpMatrix2":{"description":"Format and print sparse matrices flexibly.  These are the <U+201C>workhorses<U+201D> used by\nthe format, show and print\nmethods for sparse matrices.  If x is large,\nprintSpMatrix2(x) calls printSpMatrix() twice, namely,\nfor the first and the last few rows, suppressing those in between, and\nalso suppresses columns when x is too wide.\n","example_call":"printSpMatrix2(x, digits = NULL, maxp = max(100L, getOption(\"max.print\")),"},"Matrix::spMatrix":{"description":"User friendly construction of a sparse matrix (inheriting from class\nTsparseMatrix) from the triplet representation.\n","example_call":"spMatrix(nrow, ncol, i = integer(0L), j = integer(0L), x = double(0L))"},"Matrix::.M2tri":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".M2tri(from, ...)"},"Matrix::.T2Cmat":{"description":"These functions are provided for compatibility with older versions\nof Matrix only and may be defunct as soon as the next release.\n","example_call":".T2Cmat(from, isTri)"},"Matrix::.diag2sparse":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".diag2sparse(from, kind = \".\", shape = \"t\", repr = \"C\", uplo = \"U\")"},"Matrix::c.sparseVector":{"description":"Sparse Vector Classes: The virtual mother class\n\"sparseVector\" has the five actual daughter classes\n\"dsparseVector\", \"isparseVector\",\n\"lsparseVector\", \"nsparseVector\", and\n\"zsparseVector\", where we've mainly implemented methods for\nthe d*, l* and n* ones.\n","example_call":"c.sparseVector(...)"},"Matrix::.diag2sT":{"description":"These functions are provided for compatibility with older versions\nof Matrix only and may be defunct as soon as the next release.\n","example_call":".diag2sT(from, uplo = \"U\", kind = \".\", drop0 = TRUE)"},"Matrix::onenormest":{"description":"<U+201C>Estimate<U+201D>, i.e. compute approximately the CONDition number of\na (potentially large, often sparse) matrix A.\nIt works by apply a fast randomized approximation of the 1-norm,\nnorm(A,\"1\"), through onenormest(.).\n","example_call":"onenormest(A, t = min(n, 5), A.x, At.x, n, silent = FALSE, quiet = silent,"},"Matrix::forceSymmetric":{"description":"Force a square matrix x to a symmetricMatrix,\nwithout a symmetry check as it would be applied for as(x,\n    \"symmetricMatrix\").\n","example_call":"forceSymmetric(x, uplo)"},"Matrix::tril":{"description":"Return the matrix obtained by setting to zero elements below a diagonal\n(triu), above a diagonal (tril), or outside of a general\nband (band).\n","example_call":"tril(x, k = 0L, ...)"},"Matrix::.diag2tT":{"description":"These functions are provided for compatibility with older versions\nof Matrix only and may be defunct as soon as the next release.\n","example_call":".diag2tT(from, uplo = \"U\", kind = \".\", drop0 = TRUE)"},"Matrix::.CR2T":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".CR2T(from)"},"Matrix::rsparsematrix":{"description":"Generate a random sparse matrix efficiently.  The default has rounded\ngaussian non-zero entries, and rand.x = NULL generates random\npattern matrices, i.e. inheriting from nsparseMatrix.\n","example_call":"rsparsematrix(nrow, ncol, density, nnz = round(density * maxE), symmetric = FALSE,"},"Matrix::.m2ngCn":{"description":"These functions are provided for compatibility with older versions\nof Matrix only and may be defunct as soon as the next release.\n","example_call":".m2ngCn(from, na.is.not.0 = FALSE)"},"Matrix::.sparse2dense":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".sparse2dense(from, packed = FALSE)"},"Matrix::triu":{"description":"Return the matrix obtained by setting to zero elements below a diagonal\n(triu), above a diagonal (tril), or outside of a general\nband (band).\n","example_call":"triu(x, k = 0L, ...)"},"Matrix::.diag2mat":{"description":"These functions are provided for compatibility with older versions\nof Matrix only and may be defunct as soon as the next release.\n","example_call":".diag2mat(from)"},"Matrix::.solve.dgC.chol":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".solve.dgC.chol(a, b, check = TRUE)"},"Matrix::.updateCHMfactor":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".updateCHMfactor(object, parent, mult = 0)"},"Matrix::sparseMatrix":{"description":"User-friendly construction of sparse matrices (inheriting from\nvirtual class CsparseMatrix,\nRsparseMatrix, or\nTsparseMatrix)\nfrom the positions and values of their nonzero entries.\n","example_call":"sparseMatrix(i, j, p, x, dims, dimnames, symmetric = FALSE, triangular = FALSE,"},"Matrix::chol":{"description":"Computes the upper triangular Cholesky factor of an\nn \\times n real, symmetric, positive semidefinite\nmatrix A, optionally after pivoting.\nThat is the factor L' in\n","example_call":"chol(x, ...)"},"Matrix::.dsy2mat":{"description":"These functions are provided for compatibility with older versions\nof Matrix only and may be defunct as soon as the next release.\n","example_call":".dsy2mat(from, keep.dimnames = TRUE)"},"Matrix::.dsy2dsp":{"description":"These functions are provided for compatibility with older versions\nof Matrix only and may be defunct as soon as the next release.\n","example_call":".dsy2dsp(from)"},"Matrix::cBind":{"description":"The functions or variables listed here are no longer part of\nMatrix as they are no longer needed.\n","example_call":"cBind(..., deparse.level = 1)"},"Matrix::isDiagonal":{"description":"isTriangular and isDiagonal test whether their argument\nis a triangular or diagonal matrix, respectively.  Unlike the analogous\nisSymmetric, these two functions are generically\nfrom Matrix rather than base.  Hence Matrix\ndefines methods for traditional matrices of implicit class\n\"matrix\" in addition to matrices inheriting from\nvirtual class \"Matrix\".\n","example_call":"isDiagonal(object)"},"Matrix::.diag2dense":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".diag2dense(from, kind = \".\", shape = \"t\", packed = FALSE, uplo = \"U\")"},"Matrix::.sparse2g":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".sparse2g(from, kind = \".\")"},"Matrix::updown":{"description":"Computes a rank-k update or downdate of a sparse Cholesky\nfactorization\n","example_call":"updown(update, C, L)"},"Matrix::rBind":{"description":"The functions or variables listed here are no longer part of\nMatrix as they are no longer needed.\n","example_call":"rBind(..., deparse.level = 1)"},"Matrix::.ind2sparse":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".ind2sparse(from, kind = \"n\", repr = \".\")"},"Matrix::image":{"description":"Methods for function image in package\nMatrix.  An image of a matrix simply color codes all matrix\nentries and draws the n\\times m matrix using an\nn\\times m grid of (colored) rectangles.\n","example_call":"image(x, ...)"},"Matrix::.sparse2m":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".sparse2m(from)"},"Matrix::isTriangular":{"description":"isTriangular and isDiagonal test whether their argument\nis a triangular or diagonal matrix, respectively.  Unlike the analogous\nisSymmetric, these two functions are generically\nfrom Matrix rather than base.  Hence Matrix\ndefines methods for traditional matrices of implicit class\n\"matrix\" in addition to matrices inheriting from\nvirtual class \"Matrix\".\n","example_call":"isTriangular(object, upper = NA, ...)"},"Matrix::Matrix":{"description":"Construct a Matrix of a class that inherits from Matrix.\n","example_call":"Matrix(data = NA, nrow = 1, ncol = 1, byrow = FALSE, dimnames = NULL,"},"Matrix::.dense2g":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".dense2g(from, kind = \".\")"},"Matrix::.T2CR":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".T2CR(from, Csparse = TRUE)"},"Matrix::.m2dgC":{"description":"These functions are provided for compatibility with older versions\nof Matrix only and may be defunct as soon as the next release.\n","example_call":".m2dgC(from)"},"Matrix::expand1":{"description":"expand1 and expand2 construct matrix factors from\nobjects specifying matrix factorizations.  Such objects typically\ndo not store the factors explicitly, employing instead a compact\nrepresentation to save memory.\n","example_call":"expand1(x, which, ...)"},"Matrix::.M2kind":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".M2kind(from, kind = \".\", sparse = NA)"},"Matrix::.symDiagonal":{"description":"Construct a formally diagonal Matrix,\ni.e., an object inheriting from virtual class\ndiagonalMatrix\n(or, if desired, a mathematically diagonal\nCsparseMatrix).\n","example_call":".symDiagonal(n, x = NULL, uplo = \"U\", kind)"},"Matrix::expand2":{"description":"expand1 and expand2 construct matrix factors from\nobjects specifying matrix factorizations.  Such objects typically\ndo not store the factors explicitly, employing instead a compact\nrepresentation to save memory.\n","example_call":"expand2(x, ...)"},"Matrix::.sparse2kind":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".sparse2kind(from, kind, drop0 = FALSE)"},"Matrix::.dense2m":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".dense2m(from)"},"Matrix::.sparse2v":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".sparse2v(from)"},"Matrix::.M2diag":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".M2diag(from)"},"Matrix::.dense2v":{"description":"<U+201C>Semi-API<U+201D> functions used internally by Matrix,\noften to bypass S4 dispatch and avoid the associated overhead.\nThese are exported to provide this capability to expert users.\nTypical users should continue to rely on S4 generic functions\nto dispatch suitable methods, by calling,\ne.g., as(., <class>) for coercions.\n","example_call":".dense2v(from)"},"Matrix::pack":{"description":"pack() coerces dense symmetric and dense triangular matrices\nfrom unpacked format (storing the full matrix) to packed format\n(storing only one of the upper and lower triangles).  unpack()\nperforms the reverse coercion. The two formats are formalized\nby the virtual classes \"packedMatrix\" and\n\"unpackedMatrix\".\n","example_call":"pack(x, ...)"},"Matrix::colMeans":{"description":"Form row and column sums and means for\nobjects, for sparseMatrix the result may\noptionally be sparse (sparseVector), too.\nRow or column names are kept respectively as for base matrices\nand colSums methods, when the result is\nnumeric vector.\n","example_call":"colMeans(x, na.rm = FALSE, dims = 1, ...)"},"Matrix::solve":{"description":"Methods for generic function solve for solving\nlinear systems of equations,\ni.e., for X in A X = B,\nwhere A is a square matrix and X and B are matrices\nwith dimensions consistent with A.\n","example_call":"solve(a, b, ...)"},"Matrix::.sparseDiagonal":{"description":"Construct a formally diagonal Matrix,\ni.e., an object inheriting from virtual class\ndiagonalMatrix\n(or, if desired, a mathematically diagonal\nCsparseMatrix).\n","example_call":".sparseDiagonal(n, x = NULL, uplo = \"U\", shape = \"t\", unitri = TRUE,"},"Matrix::dmperm":{"description":"For any n \\times m (typically) sparse matrix x\ncompute the Dulmage-Mendelsohn row and columns permutations which at\nfirst splits the n rows and m columns into coarse partitions\neach; and then a finer one, reordering rows and columns such that the\npermutated matrix is <U+201C>as upper triangular<U+201D> as possible.\n","example_call":"dmperm(x, nAns = 6L, seed = 0L)"},"matrixStats::rowWeightedVars":{"description":"Computes a weighted variance / standard deviation of a numeric vector or\nacross rows or columns of a matrix.\n","example_call":"rowWeightedVars(x, w = NULL, rows = NULL, cols = NULL, na.rm = FALSE,"},"matrixStats::rowWeightedMedians":{"description":"Calculates the weighted medians for each row (column) in a matrix.\n","example_call":"rowWeightedMedians(x, w = NULL, rows = NULL, cols = NULL, na.rm = FALSE,"},"matrixStats::rowWeightedMads":{"description":"Computes a weighted MAD of a numeric vector.\n","example_call":"rowWeightedMads(x, w = NULL, rows = NULL, cols = NULL, na.rm = FALSE,"},"matrixStats::rowVarDiffs":{"description":"Estimation of scale based on sequential-order differences, corresponding to\nthe scale estimates provided by var,\nsd, mad and\nIQR.\n","example_call":"rowVarDiffs(x, rows = NULL, cols = NULL, na.rm = FALSE, diff = 1L,"},"matrixStats::colSds":{"description":"Standard deviation estimates for each row (column) in a matrix.\n","example_call":"colSds(x, rows = NULL, cols = NULL, na.rm = FALSE, refine = TRUE,"},"matrixStats::rowCumsums":{"description":"Cumulative sums, products, minima and maxima for each row (column) in a\nmatrix.\n","example_call":"rowCumsums(x, rows = NULL, cols = NULL, dim. = dim(x), ..., useNames = TRUE)"},"matrixStats::rowQuantiles":{"description":"Estimates quantiles for each row (column) in a matrix.\n","example_call":"rowQuantiles(x, rows = NULL, cols = NULL, probs = seq(from = 0,"},"matrixStats::rowLogSumExps":{"description":"Accurately computes the logarithm of the sum of exponentials across rows or\ncolumns.\n","example_call":"rowLogSumExps(lx, rows = NULL, cols = NULL, na.rm = FALSE, dim. = dim(lx),"},"matrixStats::rowMaxs":{"description":"Gets the range of values in each row (column) of a matrix.\n","example_call":"rowMaxs(x, rows = NULL, cols = NULL, na.rm = FALSE, dim. = dim(x),"},"matrixStats::x_OP_y":{"description":"Fast calculation of 'z <- x OP y' and 'z <- t(t(x) OP y)', where OP can be\n+, -, *, and /.  For + and *, na.rm = TRUE will drop missing values first.\n","example_call":"x_OP_y(x, y, OP, xrows = NULL, xcols = NULL, yidxs = NULL,"},"matrixStats::allValue":{"description":"Checks if a value exists / does not exist in each row (column) of a matrix.\n","example_call":"allValue(x, idxs = NULL, value = TRUE, na.rm = FALSE, ...)"},"matrixStats::rowMeans2":{"description":"Calculates the mean for each row (column) in a matrix.\n","example_call":"rowMeans2(x, rows = NULL, cols = NULL, na.rm = FALSE, refine = TRUE,"},"matrixStats::indexByRow":{"description":"Translates matrix indices by rows into indices by columns.\n","example_call":"indexByRow(dim, idxs = NULL, ...)"},"matrixStats::colMads":{"description":"Standard deviation estimates for each row (column) in a matrix.\n","example_call":"colMads(x, rows = NULL, cols = NULL, center = NULL, constant = 1.4826,"},"matrixStats::rowIQRs":{"description":"Estimates of the interquartile range for each row (column) in a matrix.\n","example_call":"rowIQRs(x, rows = NULL, cols = NULL, na.rm = FALSE, ..., useNames = TRUE)"},"matrixStats::colAlls":{"description":"Checks if a value exists / does not exist in each row (column) of a matrix.\n","example_call":"colAlls(x, rows = NULL, cols = NULL, value = TRUE, na.rm = FALSE,"},"matrixStats::rowWeightedSds":{"description":"Computes a weighted variance / standard deviation of a numeric vector or\nacross rows or columns of a matrix.\n","example_call":"rowWeightedSds(x, w = NULL, rows = NULL, cols = NULL, na.rm = FALSE,"},"matrixStats::rowTabulates":{"description":"Tabulates the values in a matrix by row (column).\n","example_call":"rowTabulates(x, rows = NULL, cols = NULL, values = NULL, ..., useNames = TRUE)"},"matrixStats::rowProds":{"description":"Calculates the product for each row (column) in a matrix.\n","example_call":"rowProds(x, rows = NULL, cols = NULL, na.rm = FALSE, method = c(\"direct\","},"matrixStats::rowAnyNAs":{"description":"Checks if there are any missing values in an object or not.\nPlease use base::anyNA() instead of anyMissing(),\ncolAnyNAs() instead of colAnyMissings(), and\nrowAnyNAs() instead of rowAnyMissings().\n","example_call":"rowAnyNAs(x, rows = NULL, cols = NULL, ..., useNames = TRUE)"},"matrixStats::rowDiffs":{"description":"Calculates difference for each row (column) in a matrix.\n","example_call":"rowDiffs(x, rows = NULL, cols = NULL, lag = 1L, differences = 1L,"},"matrixStats::weightedVar":{"description":"Computes a weighted variance / standard deviation of a numeric vector or\nacross rows or columns of a matrix.\n","example_call":"weightedVar(x, w = NULL, idxs = NULL, na.rm = FALSE, center = NULL,"},"matrixStats::iqrDiff":{"description":"Estimation of scale based on sequential-order differences, corresponding to\nthe scale estimates provided by var,\nsd, mad and\nIQR.\n","example_call":"iqrDiff(x, idxs = NULL, na.rm = FALSE, diff = 1L, trim = 0,"},"matrixStats::colIQRDiffs":{"description":"Estimation of scale based on sequential-order differences, corresponding to\nthe scale estimates provided by var,\nsd, mad and\nIQR.\n","example_call":"colIQRDiffs(x, rows = NULL, cols = NULL, na.rm = FALSE, diff = 1L,"},"matrixStats::rowOrderStats":{"description":"Gets an order statistic for each row (column) in a matrix.\n","example_call":"rowOrderStats(x, rows = NULL, cols = NULL, which, dim. = dim(x),"},"matrixStats::rowRanks":{"description":"Gets the rank of the elements in each row (column) of a matrix.\n","example_call":"rowRanks(x, rows = NULL, cols = NULL, ties.method = c(\"max\","},"matrixStats::colAvgsPerRowSet":{"description":"Applies a row-by-row (column-by-column) averaging function to equally-sized\nsubsets of matrix columns (rows).  Each subset is averaged independently of\nthe others.\n","example_call":"colAvgsPerRowSet(X, W = NULL, cols = NULL, S, FUN = colMeans, ..., na.rm = NA,"},"matrixStats::diff2":{"description":"Computes the lagged and iterated differences.\n","example_call":"diff2(x, idxs = NULL, lag = 1L, differences = 1L, ..., useNames = TRUE)"},"matrixStats::colCounts":{"description":"The row- and column-wise functions take either a matrix or a vector as\ninput. If a vector, then argument dim. must be specified and fulfill\nprod(dim.) == length(x).  The result will be identical to the results\nobtained when passing matrix(x, nrow = dim.[1L], ncol = dim.[2L]),\nbut avoids having to temporarily create/allocate a matrix, if only such is\nneeded only for these calculations.\n","example_call":"colCounts(x, rows = NULL, cols = NULL, value = TRUE, na.rm = FALSE,"},"matrixStats::rowAnys":{"description":"Checks if a value exists / does not exist in each row (column) of a matrix.\n","example_call":"rowAnys(x, rows = NULL, cols = NULL, value = TRUE, na.rm = FALSE,"},"matrixStats::rowMedians":{"description":"Calculates the median for each row (column) in a matrix.\n","example_call":"rowMedians(x, rows = NULL, cols = NULL, na.rm = FALSE, dim. = dim(x),"},"matrixStats::rowCummins":{"description":"Cumulative sums, products, minima and maxima for each row (column) in a\nmatrix.\n","example_call":"rowCummins(x, rows = NULL, cols = NULL, dim. = dim(x), ..., useNames = TRUE)"},"matrixStats::binMeans":{"description":"Computes the sample means in non-overlapping bins\n","example_call":"binMeans(y, x, idxs = NULL, bx, na.rm = TRUE, count = TRUE,"},"matrixStats::colWeightedMads":{"description":"Computes a weighted MAD of a numeric vector.\n","example_call":"colWeightedMads(x, w = NULL, rows = NULL, cols = NULL, na.rm = FALSE,"},"matrixStats::colWeightedVars":{"description":"Computes a weighted variance / standard deviation of a numeric vector or\nacross rows or columns of a matrix.\n","example_call":"colWeightedVars(x, w = NULL, rows = NULL, cols = NULL, na.rm = FALSE,"},"matrixStats::weightedSd":{"description":"Computes a weighted variance / standard deviation of a numeric vector or\nacross rows or columns of a matrix.\n","example_call":"weightedSd(...)"},"matrixStats::varDiff":{"description":"Estimation of scale based on sequential-order differences, corresponding to\nthe scale estimates provided by var,\nsd, mad and\nIQR.\n","example_call":"varDiff(x, idxs = NULL, na.rm = FALSE, diff = 1L, trim = 0,"},"matrixStats::madDiff":{"description":"Estimation of scale based on sequential-order differences, corresponding to\nthe scale estimates provided by var,\nsd, mad and\nIQR.\n","example_call":"madDiff(x, idxs = NULL, na.rm = FALSE, diff = 1L, trim = 0,"},"matrixStats::colSums2":{"description":"Calculates the sum for each row (column) in a matrix.\n","example_call":"colSums2(x, rows = NULL, cols = NULL, na.rm = FALSE, dim. = dim(x),"},"matrixStats::colMins":{"description":"Gets the range of values in each row (column) of a matrix.\n","example_call":"colMins(x, rows = NULL, cols = NULL, na.rm = FALSE, dim. = dim(x),"},"matrixStats::colRanges":{"description":"Gets the range of values in each row (column) of a matrix.\n","example_call":"colRanges(x, rows = NULL, cols = NULL, na.rm = FALSE, dim. = dim(x),"},"matrixStats::anyMissing":{"description":"Checks if there are any missing values in an object or not.\nPlease use base::anyNA() instead of anyMissing(),\ncolAnyNAs() instead of colAnyMissings(), and\nrowAnyNAs() instead of rowAnyMissings().\n","example_call":"anyMissing(x, idxs = NULL, ...)"},"matrixStats::weightedMean":{"description":"Computes the weighted sample mean of a numeric vector.\n","example_call":"weightedMean(x, w = NULL, idxs = NULL, na.rm = FALSE, refine = FALSE,"},"matrixStats::mean2":{"description":"Computes the sample mean of all or a subset of values.\n","example_call":"mean2(x, idxs = NULL, na.rm = FALSE, refine = TRUE, ...)"},"matrixStats::rowWeightedMeans":{"description":"Calculates the weighted means for each row (column) in a matrix.\n","example_call":"rowWeightedMeans(x, w = NULL, rows = NULL, cols = NULL, na.rm = FALSE,"},"matrixStats::rowVars":{"description":"Variance estimates for each row (column) in a matrix.\n","example_call":"rowVars(x, rows = NULL, cols = NULL, na.rm = FALSE, refine = TRUE,"},"matrixStats::rowRanges":{"description":"Gets the range of values in each row (column) of a matrix.\n","example_call":"rowRanges(x, rows = NULL, cols = NULL, na.rm = FALSE, dim. = dim(x),"},"matrixStats::colCummaxs":{"description":"Cumulative sums, products, minima and maxima for each row (column) in a\nmatrix.\n","example_call":"colCummaxs(x, rows = NULL, cols = NULL, dim. = dim(x), ..., useNames = TRUE)"},"matrixStats::rowIQRDiffs":{"description":"Estimation of scale based on sequential-order differences, corresponding to\nthe scale estimates provided by var,\nsd, mad and\nIQR.\n","example_call":"rowIQRDiffs(x, rows = NULL, cols = NULL, na.rm = FALSE, diff = 1L,"},"matrixStats::weightedMad":{"description":"Computes a weighted MAD of a numeric vector.\n","example_call":"weightedMad(x, w = NULL, idxs = NULL, na.rm = FALSE, constant = 1.4826,"},"matrixStats::count":{"description":"The row- and column-wise functions take either a matrix or a vector as\ninput. If a vector, then argument dim. must be specified and fulfill\nprod(dim.) == length(x).  The result will be identical to the results\nobtained when passing matrix(x, nrow = dim.[1L], ncol = dim.[2L]),\nbut avoids having to temporarily create/allocate a matrix, if only such is\nneeded only for these calculations.\n","example_call":"count(x, idxs = NULL, value = TRUE, na.rm = FALSE, ...)"},"matrixStats::allocArray":{"description":"Allocates an empty vector, matrix or array faster than the corresponding\nfunction in R.\n","example_call":"allocArray(dim, value = 0, ...)"},"matrixStats::rowSdDiffs":{"description":"Estimation of scale based on sequential-order differences, corresponding to\nthe scale estimates provided by var,\nsd, mad and\nIQR.\n","example_call":"rowSdDiffs(x, rows = NULL, cols = NULL, na.rm = FALSE, diff = 1L,"},"matrixStats::colAnys":{"description":"Checks if a value exists / does not exist in each row (column) of a matrix.\n","example_call":"colAnys(x, rows = NULL, cols = NULL, value = TRUE, na.rm = FALSE,"},"matrixStats::colWeightedSds":{"description":"Computes a weighted variance / standard deviation of a numeric vector or\nacross rows or columns of a matrix.\n","example_call":"colWeightedSds(x, w = NULL, rows = NULL, cols = NULL, na.rm = FALSE,"},"matrixStats::colTabulates":{"description":"Tabulates the values in a matrix by row (column).\n","example_call":"colTabulates(x, rows = NULL, cols = NULL, values = NULL, ..., useNames = TRUE)"},"matrixStats::binCounts":{"description":"Counts the number of elements in non-overlapping bins\n","example_call":"binCounts(x, idxs = NULL, bx, right = FALSE, ...)"},"matrixStats::logSumExp":{"description":"Accurately computes the logarithm of the sum of exponentials, that is,\nlog(sum(exp(lx))).  If lx = log(x), then this is equivalently to\ncalculating log(sum(x)).\n","example_call":"logSumExp(lx, idxs = NULL, na.rm = FALSE, ...)"},"matrixStats::signTabulate":{"description":"Calculates the number of negative, zero, positive and missing values in a\nnumeric vector.  For double vectors,\nthe number of negative and positive infinite values are also counted.\n","example_call":"signTabulate(x, idxs = NULL, ...)"},"matrixStats::anyValue":{"description":"Checks if a value exists / does not exist in each row (column) of a matrix.\n","example_call":"anyValue(x, idxs = NULL, value = TRUE, na.rm = FALSE, ...)"},"matrixStats::colMadDiffs":{"description":"Estimation of scale based on sequential-order differences, corresponding to\nthe scale estimates provided by var,\nsd, mad and\nIQR.\n","example_call":"colMadDiffs(x, rows = NULL, cols = NULL, na.rm = FALSE, diff = 1L,"},"matrixStats::rowCollapse":{"description":"Extracts one cell per row (column) from a matrix.  The implementation is\noptimized for memory and speed.\n","example_call":"rowCollapse(x, idxs, rows = NULL, dim. = dim(x), ..., useNames = TRUE)"},"matrixStats::weightedMedian":{"description":"Computes a weighted median of a numeric vector.\n","example_call":"weightedMedian(x, w = NULL, idxs = NULL, na.rm = FALSE, interpolate = is.null(ties),"},"matrixStats::rowAlls":{"description":"Checks if a value exists / does not exist in each row (column) of a matrix.\n","example_call":"rowAlls(x, rows = NULL, cols = NULL, value = TRUE, na.rm = FALSE,"},"matrixStats::rowCounts":{"description":"The row- and column-wise functions take either a matrix or a vector as\ninput. If a vector, then argument dim. must be specified and fulfill\nprod(dim.) == length(x).  The result will be identical to the results\nobtained when passing matrix(x, nrow = dim.[1L], ncol = dim.[2L]),\nbut avoids having to temporarily create/allocate a matrix, if only such is\nneeded only for these calculations.\n","example_call":"rowCounts(x, rows = NULL, cols = NULL, value = TRUE, na.rm = FALSE,"},"matrixStats::colSdDiffs":{"description":"Estimation of scale based on sequential-order differences, corresponding to\nthe scale estimates provided by var,\nsd, mad and\nIQR.\n","example_call":"colSdDiffs(x, rows = NULL, cols = NULL, na.rm = FALSE, diff = 1L,"},"matrixStats::rowCumprods":{"description":"Cumulative sums, products, minima and maxima for each row (column) in a\nmatrix.\n","example_call":"rowCumprods(x, rows = NULL, cols = NULL, dim. = dim(x), ..., useNames = TRUE)"},"matrixStats::rowMads":{"description":"Standard deviation estimates for each row (column) in a matrix.\n","example_call":"rowMads(x, rows = NULL, cols = NULL, center = NULL, constant = 1.4826,"},"matrixStats::colAnyMissings":{"description":"Checks if there are any missing values in an object or not.\nPlease use base::anyNA() instead of anyMissing(),\ncolAnyNAs() instead of colAnyMissings(), and\nrowAnyNAs() instead of rowAnyMissings().\n","example_call":"colAnyMissings(x, rows = NULL, cols = NULL, ..., useNames = TRUE)"},"matrixStats::colWeightedMedians":{"description":"Calculates the weighted medians for each row (column) in a matrix.\n","example_call":"colWeightedMedians(x, w = NULL, rows = NULL, cols = NULL, na.rm = FALSE,"},"matrixStats::sum2":{"description":"Computes the sum of all or a subset of values.\n","example_call":"sum2(x, idxs = NULL, na.rm = FALSE, mode = typeof(x), ...)"},"matrixStats::allocVector":{"description":"Allocates an empty vector, matrix or array faster than the corresponding\nfunction in R.\n","example_call":"allocVector(length, value = 0, ...)"},"matrixStats::colMaxs":{"description":"Gets the range of values in each row (column) of a matrix.\n","example_call":"colMaxs(x, rows = NULL, cols = NULL, na.rm = FALSE, dim. = dim(x),"},"matrixStats::colRanks":{"description":"Gets the rank of the elements in each row (column) of a matrix.\n","example_call":"colRanks(x, rows = NULL, cols = NULL, ties.method = c(\"max\","},"matrixStats::rowCummaxs":{"description":"Cumulative sums, products, minima and maxima for each row (column) in a\nmatrix.\n","example_call":"rowCummaxs(x, rows = NULL, cols = NULL, dim. = dim(x), ..., useNames = TRUE)"},"matrixStats::colLogSumExps":{"description":"Accurately computes the logarithm of the sum of exponentials across rows or\ncolumns.\n","example_call":"colLogSumExps(lx, rows = NULL, cols = NULL, na.rm = FALSE, dim. = dim(lx),"},"matrixStats::product":{"description":"Calculates the product for each row (column) in a matrix.\n","example_call":"product(x, idxs = NULL, na.rm = FALSE, ...)"},"matrixStats::colCollapse":{"description":"Extracts one cell per row (column) from a matrix.  The implementation is\noptimized for memory and speed.\n","example_call":"colCollapse(x, idxs, cols = NULL, dim. = dim(x), ..., useNames = TRUE)"},"matrixStats::rowSds":{"description":"Standard deviation estimates for each row (column) in a matrix.\n","example_call":"rowSds(x, rows = NULL, cols = NULL, na.rm = FALSE, refine = TRUE,"},"matrixStats::colWeightedMeans":{"description":"Calculates the weighted means for each row (column) in a matrix.\n","example_call":"colWeightedMeans(x, w = NULL, rows = NULL, cols = NULL, na.rm = FALSE,"},"matrixStats::rowMadDiffs":{"description":"Estimation of scale based on sequential-order differences, corresponding to\nthe scale estimates provided by var,\nsd, mad and\nIQR.\n","example_call":"rowMadDiffs(x, rows = NULL, cols = NULL, na.rm = FALSE, diff = 1L,"},"matrixStats::colAnyNAs":{"description":"Checks if there are any missing values in an object or not.\nPlease use base::anyNA() instead of anyMissing(),\ncolAnyNAs() instead of colAnyMissings(), and\nrowAnyNAs() instead of rowAnyMissings().\n","example_call":"colAnyNAs(x, rows = NULL, cols = NULL, ..., useNames = TRUE)"},"matrixStats::colIQRs":{"description":"Estimates of the interquartile range for each row (column) in a matrix.\n","example_call":"colIQRs(x, rows = NULL, cols = NULL, na.rm = FALSE, ..., useNames = TRUE)"},"matrixStats::colProds":{"description":"Calculates the product for each row (column) in a matrix.\n","example_call":"colProds(x, rows = NULL, cols = NULL, na.rm = FALSE, method = c(\"direct\","},"matrixStats::colCumsums":{"description":"Cumulative sums, products, minima and maxima for each row (column) in a\nmatrix.\n","example_call":"colCumsums(x, rows = NULL, cols = NULL, dim. = dim(x), ..., useNames = TRUE)"},"matrixStats::rowMins":{"description":"Gets the range of values in each row (column) of a matrix.\n","example_call":"rowMins(x, rows = NULL, cols = NULL, na.rm = FALSE, dim. = dim(x),"},"matrixStats::allocMatrix":{"description":"Allocates an empty vector, matrix or array faster than the corresponding\nfunction in R.\n","example_call":"allocMatrix(nrow, ncol, value = 0, ...)"},"matrixStats::colCummins":{"description":"Cumulative sums, products, minima and maxima for each row (column) in a\nmatrix.\n","example_call":"colCummins(x, rows = NULL, cols = NULL, dim. = dim(x), ..., useNames = TRUE)"},"matrixStats::colMeans2":{"description":"Calculates the mean for each row (column) in a matrix.\n","example_call":"colMeans2(x, rows = NULL, cols = NULL, na.rm = FALSE, refine = TRUE,"},"matrixStats::colOrderStats":{"description":"Gets an order statistic for each row (column) in a matrix.\n","example_call":"colOrderStats(x, rows = NULL, cols = NULL, which, dim. = dim(x),"},"matrixStats::colCumprods":{"description":"Cumulative sums, products, minima and maxima for each row (column) in a\nmatrix.\n","example_call":"colCumprods(x, rows = NULL, cols = NULL, dim. = dim(x), ..., useNames = TRUE)"},"matrixStats::colVarDiffs":{"description":"Estimation of scale based on sequential-order differences, corresponding to\nthe scale estimates provided by var,\nsd, mad and\nIQR.\n","example_call":"colVarDiffs(x, rows = NULL, cols = NULL, na.rm = FALSE, diff = 1L,"},"matrixStats::colDiffs":{"description":"Calculates difference for each row (column) in a matrix.\n","example_call":"colDiffs(x, rows = NULL, cols = NULL, lag = 1L, differences = 1L,"},"matrixStats::rowSums2":{"description":"Calculates the sum for each row (column) in a matrix.\n","example_call":"rowSums2(x, rows = NULL, cols = NULL, na.rm = FALSE, dim. = dim(x),"},"matrixStats::rowAnyMissings":{"description":"Checks if there are any missing values in an object or not.\nPlease use base::anyNA() instead of anyMissing(),\ncolAnyNAs() instead of colAnyMissings(), and\nrowAnyNAs() instead of rowAnyMissings().\n","example_call":"rowAnyMissings(x, rows = NULL, cols = NULL, ..., useNames = TRUE)"},"matrixStats::colQuantiles":{"description":"Estimates quantiles for each row (column) in a matrix.\n","example_call":"colQuantiles(x, rows = NULL, cols = NULL, probs = seq(from = 0,"},"matrixStats::rowAvgsPerColSet":{"description":"Applies a row-by-row (column-by-column) averaging function to equally-sized\nsubsets of matrix columns (rows).  Each subset is averaged independently of\nthe others.\n","example_call":"rowAvgsPerColSet(X, W = NULL, rows = NULL, S, FUN = rowMeans, ..., na.rm = NA,"},"matrixStats::colVars":{"description":"Variance estimates for each row (column) in a matrix.\n","example_call":"colVars(x, rows = NULL, cols = NULL, na.rm = FALSE, refine = TRUE,"},"matrixStats::t_tx_OP_y":{"description":"Fast calculation of 'z <- x OP y' and 'z <- t(t(x) OP y)', where OP can be\n+, -, *, and /.  For + and *, na.rm = TRUE will drop missing values first.\n","example_call":"t_tx_OP_y(x, y, OP, xrows = NULL, xcols = NULL, yidxs = NULL,"},"matrixStats::sdDiff":{"description":"Estimation of scale based on sequential-order differences, corresponding to\nthe scale estimates provided by var,\nsd, mad and\nIQR.\n","example_call":"sdDiff(x, idxs = NULL, na.rm = FALSE, diff = 1L, trim = 0,"},"matrixStats::iqr":{"description":"Estimates of the interquartile range for each row (column) in a matrix.\n","example_call":"iqr(x, idxs = NULL, na.rm = FALSE, ...)"},"matrixStats::colMedians":{"description":"Calculates the median for each row (column) in a matrix.\n","example_call":"colMedians(x, rows = NULL, cols = NULL, na.rm = FALSE, dim. = dim(x),"},"methods::.ShortPrimitiveSkeletons":{"description":"Utility functions to support the definition and use of formal\nmethods.  Most of these functions will not normally be called directly\nby the user.\n","example_call":"NULL"},"methods::showExtends":{"description":"These are various functions to support the definition and use of\nformal classes.  Most of them are rarely suitable to be called\ndirectly.\n","example_call":"showExtends(ext, printTo = stdout())"},"methods::extends":{"description":"Functions to test inheritance relationships between an object and a\nclass or between two classes (extends).\n","example_call":"extends(class1, class2, maybe = TRUE, fullInfo = FALSE)"},"methods::addNextMethod":{"description":"Utility functions to support the definition and use of formal\nmethods.  Most of these functions will not normally be called directly\nby the user.\n","example_call":"addNextMethod(method, f = \"<unknown>\", mlist, optional = FALSE, envir)"},"methods::getGenerics":{"description":"The functions documented here manage collections of methods associated\nwith a generic function, as well as providing information about the\ngeneric functions themselves.\n","example_call":"getGenerics(where, searchForm = FALSE)"},"methods::makeExtends":{"description":"These are various functions to support the definition and use of\nformal classes.  Most of them are rarely suitable to be called\ndirectly.\n","example_call":"makeExtends(Class, coerce = NULL, test = NULL, replace = NULL,"},"methods::.EmptyPrimitiveSkeletons":{"description":"Utility functions to support the definition and use of formal\nmethods.  Most of these functions will not normally be called directly\nby the user.\n","example_call":"NULL"},"methods::showMlist":{"description":"These functions create and manipulate MethodsList objects, the\nobjects formerly used in R to store methods for dispatch.  Use of\nthese objects is deprecated since R 3.2.0, as it will rarely be a\ngood idea.  Where methods dispatch is\nto be studied, see selectMethod.  For computations\nthat iterate over methods or over method signatures, see\nfindMethods, which returns a linearized methods list\nto hold method definitions, usually more convenient for iteration\nthan the recursive MethodsList objects.\n","example_call":"showMlist(mlist, includeDefs = TRUE, inherited = TRUE, classes = NULL,"},"methods::setAs":{"description":"A call to setAs defines a method for coercing an object of\nclass from to class to.  The methods will then be used\nby calls to as for objects with class from,\nincluding calls that replace part of the object.\n","example_call":"setAs(from, to, def, replace = NULL, where = topenv(parent.frame()))"},"methods::resetClass":{"description":"Functions to find classes:  isClass tests for a class;\nfindClass returns the name(s) of packages containing the\nclass; getClasses returns the names of all the classes in an\nenvironment, typically a namespace.  To examine the definition of a class, use getClass.\n","example_call":"resetClass(Class, classDef, where)"},"methods::assignMethodsMetaData":{"description":"Utility functions to support the definition and use of formal\nmethods.  Most of these functions will not normally be called directly\nby the user.\n","example_call":"assignMethodsMetaData(f, value, fdef, where)"},"methods::getDataPart":{"description":"These are various functions to support the definition and use of\nformal classes.  Most of them are rarely suitable to be called\ndirectly.\n","example_call":"getDataPart(object, NULL.for.none = FALSE)"},"methods::findMethodSignatures":{"description":"The function findMethods converts the methods defined in a table for a generic\nfunction (as used for selection of methods) into a list, for study or\ndisplay.  The list is actually from the class listOfMethods\n(see the section describing the class, below).\n","example_call":"findMethodSignatures(..., target = TRUE, methods = findMethods(...))"},"methods::getGroupMembers":{"description":"Utility functions to support the definition and use of formal\nmethods.  Most of these functions will not normally be called directly\nby the user.\n","example_call":"getGroupMembers(group, recursive = FALSE, character = TRUE)"},"methods::signature":{"description":"The functions documented here manage collections of methods associated\nwith a generic function, as well as providing information about the\ngeneric functions themselves.\n","example_call":"signature(...)"},"methods::setReplaceMethod":{"description":"The functions documented here manage collections of methods associated\nwith a generic function, as well as providing information about the\ngeneric functions themselves.\n","example_call":"setReplaceMethod(f, ..., where = topenv(parent.frame()))"},"methods::removeClass":{"description":"Functions to find classes:  isClass tests for a class;\nfindClass returns the name(s) of packages containing the\nclass; getClasses returns the names of all the classes in an\nenvironment, typically a namespace.  To examine the definition of a class, use getClass.\n","example_call":"removeClass(Class, where = topenv(parent.frame()))"},"methods::implicitGeneric":{"description":"The implicit generic mechanism stores generic versions of\nfunctions\nin a table in a package. The package does not want the current\nversion of the function to be a generic, however, and retains the\nnon-generic version.\n","example_call":"implicitGeneric(name, where = topenv(parent.frame()), generic = getGeneric(name,"},"methods::.OldClassesList":{"description":"Register an old-style (a.k.a. <U+2018>S3<U+2019>) class as a formally defined\nclass. Simple usage will be of the form:\n","example_call":"NULL"},"methods::cacheMetaData":{"description":"Utility functions to support the definition and use of formal\nmethods.  Most of these functions will not normally be called directly\nby the user.\n","example_call":"cacheMetaData(where, attach = TRUE, searchWhere = as.environment(where),"},"methods::el":{"description":"These are internal utilities, currently in the methods\npackage, that either provide some functionality needed by the package\n(e.g., element matching by name), or add compatibility with S-Plus, or both.\n","example_call":"el(object, where)"},"methods::callGeneric":{"description":"A call to callGeneric can only appear inside a method\ndefinition.  It then results in a call to the current generic\nfunction.  The value of that call is the value of callGeneric.\nWhile it can be called from any method, it is useful and typically\nused in methods for group generic functions.\n","example_call":"callGeneric(...)"},"methods::showClass":{"description":"These are various functions to support the definition and use of\nformal classes.  Most of them are rarely suitable to be called\ndirectly.\n","example_call":"showClass(Class, complete = TRUE, propertiesAreCalled = \"Slots\")"},"methods::Complex":{"description":"Methods can be defined for group generic functions.  Each group\ngeneric function has a number of member generic functions\nassociated with it.\n","example_call":"Complex(z)"},"methods::evalSource":{"description":"Definitions of functions and/or methods from a source file are\ninserted into a package, using the trace mechanism.\nTypically, this allows testing or debugging modified versions of a few\nfunctions without reinstalling a large package.\n","example_call":"evalSource(source, package = \"\", lock = TRUE, cache = FALSE)"},"methods::coerce<-":{"description":"A call to setAs defines a method for coercing an object of\nclass from to class to.  The methods will then be used\nby calls to as for objects with class from,\nincluding calls that replace part of the object.\n","example_call":"coerce<-(from, to, value)"},"methods::resetGeneric":{"description":"These are internal support routines for computations on formal methods.\n","example_call":"resetGeneric(f, fdef = getGeneric(f, where = where), mlist = getMethodsForDispatch(fdef),"},"methods::possibleExtends":{"description":"These are various functions to support the definition and use of\nformal classes.  Most of them are rarely suitable to be called\ndirectly.\n","example_call":"possibleExtends(class1, class2, ClassDef1 = getClassDef(class1), ClassDef2 = getClassDef(class2,"},"methods::missingArg":{"description":"Utility functions to support the definition and use of formal\nmethods.  Most of these functions will not normally be called directly\nby the user.\n","example_call":"missingArg(symbol, envir = parent.frame(), eval = FALSE)"},"methods::Quote":{"description":"These are internal utilities, currently in the methods\npackage, that either provide some functionality needed by the package\n(e.g., element matching by name), or add compatibility with S-Plus, or both.\n","example_call":"Quote(expr)"},"methods::registerImplicitGenerics":{"description":"The implicit generic mechanism stores generic versions of\nfunctions\nin a table in a package. The package does not want the current\nversion of the function to be a generic, however, and retains the\nnon-generic version.\n","example_call":"registerImplicitGenerics(what = .ImplicitGenericsTable(where), where = topenv(parent.frame()))"},"methods::isClassDef":{"description":"These are various functions to support the definition and use of\nformal classes.  Most of them are rarely suitable to be called\ndirectly.\n","example_call":"isClassDef(object)"},"methods::initRefFields":{"description":"The software described here allows packages to define reference\nclasses that behave in the style of <U+201C>OOP<U+201D> languages such as Java and\nC++.\nThis model for OOP differs from the functional model implemented by S4\n(and S3) classes and methods, in which methods are defined for generic\nfunctions.\nMethods for reference classes are <U+201C>encapsulated<U+201D> in the class definition.\n","example_call":"initRefFields(.Object, classDef, selfEnv, args)"},"methods::insertMethod":{"description":"These functions create and manipulate MethodsList objects, the\nobjects formerly used in R to store methods for dispatch.  Use of\nthese objects is deprecated since R 3.2.0, as it will rarely be a\ngood idea.  Where methods dispatch is\nto be studied, see selectMethod.  For computations\nthat iterate over methods or over method signatures, see\nfindMethods, which returns a linearized methods list\nto hold method definitions, usually more convenient for iteration\nthan the recursive MethodsList objects.\n","example_call":"insertMethod(mlist, signature, args, def, cacheOnly = FALSE)"},"methods::findFunction":{"description":"The functions documented here manage collections of methods associated\nwith a generic function, as well as providing information about the\ngeneric functions themselves.\n","example_call":"findFunction(f, generic = TRUE, where = topenv(parent.frame()))"},"methods::externalRefMethod":{"description":"The software described here allows packages to define reference\nclasses that behave in the style of <U+201C>OOP<U+201D> languages such as Java and\nC++.\nThis model for OOP differs from the functional model implemented by S4\n(and S3) classes and methods, in which methods are defined for generic\nfunctions.\nMethods for reference classes are <U+201C>encapsulated<U+201D> in the class definition.\n","example_call":"externalRefMethod(...)"},"methods::fixPre1.8":{"description":"Beginning with R version 1.8.0, the class of an object contains the\nidentification of the package in which the class is defined.  The\nfunction fixPre1.8 fixes and re-assigns objects missing that information\n(typically because they were loaded from a file saved with a previous\nversion of R.)\n","example_call":"fixPre1.8(names, where = topenv(parent.frame()))"},"methods::checkAtAssignment":{"description":"These are various functions to support the definition and use of\nformal classes.  Most of them are rarely suitable to be called\ndirectly.\n","example_call":"checkAtAssignment(cl, name, valueClass)"},"methods::finalDefaultMethod":{"description":"These functions create and manipulate MethodsList objects, the\nobjects formerly used in R to store methods for dispatch.  Use of\nthese objects is deprecated since R 3.2.0, as it will rarely be a\ngood idea.  Where methods dispatch is\nto be studied, see selectMethod.  For computations\nthat iterate over methods or over method signatures, see\nfindMethods, which returns a linearized methods list\nto hold method definitions, usually more convenient for iteration\nthan the recursive MethodsList objects.\n","example_call":"finalDefaultMethod(method)"},"methods::isClass":{"description":"Functions to find classes:  isClass tests for a class;\nfindClass returns the name(s) of packages containing the\nclass; getClasses returns the names of all the classes in an\nenvironment, typically a namespace.  To examine the definition of a class, use getClass.\n","example_call":"isClass(Class, formal = TRUE, where = topenv(parent.frame()))"},"methods::completeClassDefinition":{"description":"These are various functions to support the definition and use of\nformal classes.  Most of them are rarely suitable to be called\ndirectly.\n","example_call":"completeClassDefinition(Class, ClassDef = getClassDef(Class), where, doExtends = TRUE)"},"methods::callNextMethod":{"description":"A call to callNextMethod can only appear inside a method\ndefinition.  It then results in a call to the first inherited method\nafter the current method, with the arguments to the current method\npassed down to the next method.  The value of that method call is the\nvalue of callNextMethod.\n","example_call":"callNextMethod(...)"},"methods::isVirtualClass":{"description":"These are various functions to support the definition and use of\nformal classes.  Most of them are rarely suitable to be called\ndirectly.\n","example_call":"isVirtualClass(Class, where = topenv(parent.frame()))"},"methods::slotNames":{"description":"These functions return or set information about the individual slots\nin an object.\n","example_call":"slotNames(x)"},"methods::getSlots":{"description":"These functions return or set information about the individual slots\nin an object.\n","example_call":"getSlots(x)"},"methods::selectSuperClasses":{"description":"Return superclasses of ClassDef, possibly only non-virtual or\ndirect or simple ones.\n","example_call":"selectSuperClasses(Class, dropVirtual = FALSE, namesOnly = TRUE, directOnly = TRUE,"},"methods::removeMethods":{"description":"The functions documented here manage collections of methods associated\nwith a generic function, as well as providing information about the\ngeneric functions themselves.\n","example_call":"removeMethods(f, where = topenv(parent.frame()), all = missing(where))"},"methods::.classEnv":{"description":"These are various functions to support the definition and use of\nformal classes.  Most of them are rarely suitable to be called\ndirectly.\n","example_call":".classEnv(Class, default = .requirePackage(\"methods\"), mustFind = TRUE)"},"methods::evalOnLoad":{"description":"These functions provide a mechanism for packages to specify\ncomputations to be done during the loading of a package namespace.\nSuch actions are a flexible way to provide information only available at\nload time (such as locations in a dynamically linked library).\n","example_call":"evalOnLoad(expr, where = topenv(parent.frame()), aname = \"\")"},"methods::cbind2":{"description":"Combine two matrix-like R objects by columns (cbind2)\nor rows (rbind2).  These are (S4) generic functions with default\nmethods.\n","example_call":"cbind2(x, y, ...)"},"methods::setClassUnion":{"description":"A class may be defined as the union of other classes; that\nis, as a virtual class defined as a superclass of several other\nclasses. Class unions are useful in method signatures or as slots in\nother classes, when we want to allow one of several classes to be supplied.\n","example_call":"setClassUnion(name, members = character(), where = topenv(parent.frame()))"},"methods::.hasSlot":{"description":"These functions return or set information about the individual slots\nin an object.\n","example_call":".hasSlot(object, name)"},"methods::initialize":{"description":"A call to  new returns a newly allocated object from the\nclass identified by the first argument.  This call in turn calls the\nmethod for the generic function initialize corresponding to\nthe specified class, passing the ... arguments to this\nmethod.\nIn the default method for initialize(), named arguments provide\nvalues for the corresponding slots and unnamed arguments must be\nobjects from superclasses of this class.\n","example_call":"initialize(.Object, ...)"},"methods::Summary":{"description":"Methods can be defined for group generic functions.  Each group\ngeneric function has a number of member generic functions\nassociated with it.\n","example_call":"Summary(x, ..., na.rm = FALSE)"},"methods::representation":{"description":"These are old utility functions  to construct, respectively\na list designed to represent the slots and superclasses and\na list of prototype specifications.  The representation()\nfunction is no longer useful, since the arguments slots and\ncontains to setClass are now recommended.\n","example_call":"representation(...)"},"methods::getClass":{"description":"Get the definition of a class.\n","example_call":"getClass(Class, .Force = FALSE, where = .classEnv(Class, topenv(parent.frame()),"},"methods::method.skeleton":{"description":"This function writes a source file containing a call to\nsetMethod to define a method for the generic function\nand signature supplied.  By default the method definition is in line\nin the call, but can be made an external (previously assigned) function.\n","example_call":"method.skeleton(generic, signature, file, external = FALSE, where = topenv(parent.frame()))"},"methods::setRefClass":{"description":"The software described here allows packages to define reference\nclasses that behave in the style of <U+201C>OOP<U+201D> languages such as Java and\nC++.\nThis model for OOP differs from the functional model implemented by S4\n(and S3) classes and methods, in which methods are defined for generic\nfunctions.\nMethods for reference classes are <U+201C>encapsulated<U+201D> in the class definition.\n","example_call":"setRefClass(Class, fields = character(), contains = character(),"},"methods::Math2":{"description":"Methods can be defined for group generic functions.  Each group\ngeneric function has a number of member generic functions\nassociated with it.\n","example_call":"Math2(x, digits)"},"methods::getMethods":{"description":"The function findMethods converts the methods defined in a table for a generic\nfunction (as used for selection of methods) into a list, for study or\ndisplay.  The list is actually from the class listOfMethods\n(see the section describing the class, below).\n","example_call":"getMethods(f, where = topenv(parent.frame()), table = FALSE)"},"methods::S3Part<-":{"description":"A regular (S4) class may contain an S3 class, if that class has been registered (by calling\nsetOldClass).  The functions described here provide\ninformation about contained S3 classes.  See the section <U+2018>Functions<U+2019>.\n","example_call":"S3Part<-(object, strictS3 = FALSE, needClass = .S3Class(object),"},"methods::Logic":{"description":"Methods can be defined for group generic functions.  Each group\ngeneric function has a number of member generic functions\nassociated with it.\n","example_call":"Logic(e1, e2)"},"methods::matchSignature":{"description":"Utility functions to support the definition and use of formal\nmethods.  Most of these functions will not normally be called directly\nby the user.\n","example_call":"matchSignature(signature, fun, where = baseenv())"},"methods::methodsPackageMetaName":{"description":"These are various functions to support the definition and use of\nformal classes.  Most of them are rarely suitable to be called\ndirectly.\n","example_call":"methodsPackageMetaName(prefix, name, package = \"\")"},"methods::defaultDumpName":{"description":"Utility functions to support the definition and use of formal\nmethods.  Most of these functions will not normally be called directly\nby the user.\n","example_call":"defaultDumpName(generic, signature)"},"methods::getGroup":{"description":"Utility functions to support the definition and use of formal\nmethods.  Most of these functions will not normally be called directly\nby the user.\n","example_call":"getGroup(fdef, recursive = FALSE, where = topenv(parent.frame()))"},"methods::substituteDirect":{"description":"Substitute for the variables named in the second argument the\ncorresponding objects, substituting into object.  The argument\nframe is a named list; if omitted, the environment of the\ncaller is used.\n","example_call":"substituteDirect(object, frame = parent.frame(), cleanFunction = TRUE)"},"methods::packageSlot":{"description":"The functions below produce the package associated with a particular\nenvironment or position on the search list, or of the package\ncontaining a particular function.  They are primarily used to support\ncomputations that need to differentiate objects on multiple packages.\n","example_call":"packageSlot(object)"},"methods::as<-":{"description":"Coerce an object to a given class.\n","example_call":"as<-(object, Class, value)"},"methods::removeMethod":{"description":"Remove the method for a given function and signature.  Obsolete for\nordinary applications: Method definitions in a package should never\nneed to remove methods and it's very bad practice to remove methods\nthat were defined in other packages.\n","example_call":"removeMethod(f, signature = character(), where = topenv(parent.frame()))"},"methods::MethodsListSelect":{"description":"These functions create and manipulate MethodsList objects, the\nobjects formerly used in R to store methods for dispatch.  Use of\nthese objects is deprecated since R 3.2.0, as it will rarely be a\ngood idea.  Where methods dispatch is\nto be studied, see selectMethod.  For computations\nthat iterate over methods or over method signatures, see\nfindMethods, which returns a linearized methods list\nto hold method definitions, usually more convenient for iteration\nthan the recursive MethodsList objects.\n","example_call":"MethodsListSelect(f, env, mlist = NULL, fEnv = if (is(fdef, \"genericFunction\")) environment(fdef) else baseenv(),"},"methods::S3Part":{"description":"A regular (S4) class may contain an S3 class, if that class has been registered (by calling\nsetOldClass).  The functions described here provide\ninformation about contained S3 classes.  See the section <U+2018>Functions<U+2019>.\n","example_call":"S3Part(object, strictS3 = FALSE, S3Class)"},"methods::is":{"description":"Functions to test inheritance relationships between an object and a\nclass or between two classes (extends).\n","example_call":"is(object, class2)"},"methods::checkSlotAssignment":{"description":"These are various functions to support the definition and use of\nformal classes.  Most of them are rarely suitable to be called\ndirectly.\n","example_call":"checkSlotAssignment(obj, name, value)"},"methods::classMetaName":{"description":"These are various functions to support the definition and use of\nformal classes.  Most of them are rarely suitable to be called\ndirectly.\n","example_call":"classMetaName(name)"},"methods::slotsFromS3":{"description":"A regular (S4) class may contain an S3 class, if that class has been registered (by calling\nsetOldClass).  The functions described here provide\ninformation about contained S3 classes.  See the section <U+2018>Functions<U+2019>.\n","example_call":"slotsFromS3(object)"},"methods::promptMethods":{"description":"Generates a shell of documentation for the methods of a generic\nfunction.\n","example_call":"promptMethods(f, filename = NULL, methods)"},"methods::insertClassMethods":{"description":"Utility functions to support the definition and use of formal\nmethods.  Most of these functions will not normally be called directly\nby the user.\n","example_call":"insertClassMethods(methods, Class, value, fieldNames, returnAll)"},"methods::isXS3Class":{"description":"A regular (S4) class may contain an S3 class, if that class has been registered (by calling\nsetOldClass).  The functions described here provide\ninformation about contained S3 classes.  See the section <U+2018>Functions<U+2019>.\n","example_call":"isXS3Class(classDef)"},"methods::packageSlot<-":{"description":"The functions below produce the package associated with a particular\nenvironment or position on the search list, or of the package\ncontaining a particular function.  They are primarily used to support\ncomputations that need to differentiate objects on multiple packages.\n","example_call":"packageSlot<-(object, value)"},"methods::isRematched":{"description":"Utility functions to support the definition and use of formal\nmethods.  Most of these functions will not normally be called directly\nby the user.\n","example_call":"isRematched(definition)"},"methods::.selectSuperClasses":{"description":"Return superclasses of ClassDef, possibly only non-virtual or\ndirect or simple ones.\n","example_call":".selectSuperClasses(ext, dropVirtual = FALSE, namesOnly = TRUE, directOnly = TRUE,"},"methods::languageEl<-":{"description":"Internal routines to support some operations on language objects.\n","example_call":"languageEl<-(object, which, value)"},"methods::emptyMethodsList":{"description":"These functions create and manipulate MethodsList objects, the\nobjects formerly used in R to store methods for dispatch.  Use of\nthese objects is deprecated since R 3.2.0, as it will rarely be a\ngood idea.  Where methods dispatch is\nto be studied, see selectMethod.  For computations\nthat iterate over methods or over method signatures, see\nfindMethods, which returns a linearized methods list\nto hold method definitions, usually more convenient for iteration\nthan the recursive MethodsList objects.\n","example_call":"emptyMethodsList(mlist, thisClass = \"ANY\", sublist = list())"},"methods::listFromMethods":{"description":"These are internal support routines for computations on formal methods.\n","example_call":"listFromMethods(generic, where, table)"},"methods::isGeneric":{"description":"The functions documented here manage collections of methods associated\nwith a generic function, as well as providing information about the\ngeneric functions themselves.\n","example_call":"isGeneric(f, where = topenv(parent.frame()), fdef = NULL, getName = FALSE)"},"methods::show":{"description":"Display the object, by printing, plotting or whatever suits its\nclass.  This function exists to be specialized by methods.  The\ndefault method calls showDefault.\n","example_call":"show(object)"},"methods::metaNameUndo":{"description":"These are various functions to support the definition and use of\nformal classes.  Most of them are rarely suitable to be called\ndirectly.\n","example_call":"metaNameUndo(strings, prefix, searchForm = FALSE)"},"methods::.untracedFunction":{"description":" The classes described  here are used by the R function\ntrace to create versions of functions and methods\nincluding browser calls, etc., and also to untrace the\nsame objects.","example_call":".untracedFunction(f)"},"methods::getMethodsForDispatch":{"description":"These are internal support routines for computations on formal methods.\n","example_call":"getMethodsForDispatch(fdef, inherited = FALSE)"},"methods::Math":{"description":"Methods can be defined for group generic functions.  Each group\ngeneric function has a number of member generic functions\nassociated with it.\n","example_call":"Math(x)"},"methods::makePrototypeFromClassDef":{"description":"These are various functions to support the definition and use of\nformal classes.  Most of them are rarely suitable to be called\ndirectly.\n","example_call":"makePrototypeFromClassDef(slots, ClassDef, extends, where)"},"methods::slot":{"description":"These functions return or set information about the individual slots\nin an object.\n","example_call":"slot(object, name)"},"methods::reconcilePropertiesAndPrototype":{"description":"These are various functions to support the definition and use of\nformal classes.  Most of them are rarely suitable to be called\ndirectly.\n","example_call":"reconcilePropertiesAndPrototype(name, properties, prototype, superClasses, where)"},"methods::doPrimitiveMethod":{"description":"Utility functions to support the definition and use of formal\nmethods.  Most of these functions will not normally be called directly\nby the user.\n","example_call":"doPrimitiveMethod(name, def, call = sys.call(sys.parent()), ev = sys.frame(sys.parent(2)))"},"methods::getValidity":{"description":"validObject() tests the validity of object related to\nits class definition; specifically, it checks that all slots\nspecified in the class definition are present and that the object in\nthe slot is from the required class or a subclass of that class.\n","example_call":"getValidity(ClassDef)"},"methods::SignatureMethod":{"description":"These functions create and manipulate MethodsList objects, the\nobjects formerly used in R to store methods for dispatch.  Use of\nthese objects is deprecated since R 3.2.0, as it will rarely be a\ngood idea.  Where methods dispatch is\nto be studied, see selectMethod.  For computations\nthat iterate over methods or over method signatures, see\nfindMethods, which returns a linearized methods list\nto hold method definitions, usually more convenient for iteration\nthan the recursive MethodsList objects.\n","example_call":"SignatureMethod(names, signature, definition)"},"methods::isSealedMethod":{"description":"These functions check for either a method or a class that has been\nsealed when it was defined, and which therefore cannot be\nre-defined.\n","example_call":"isSealedMethod(f, signature, fdef = getGeneric(f, FALSE, where = where),"},"methods::getPackageName":{"description":"The functions below produce the package associated with a particular\nenvironment or position on the search list, or of the package\ncontaining a particular function.  They are primarily used to support\ncomputations that need to differentiate objects on multiple packages.\n","example_call":"getPackageName(where = topenv(parent.frame()), create = TRUE)"},"methods::setIs":{"description":"setIs is an explicit alternative\nto the contains= argument to setClass.  It is\nonly needed to create relations with explicit test or coercion.\nThese have not proved to be of much practical value, so this\nfunction should not likely be needed in applications.\n","example_call":"setIs(class1, class2, test = NULL, coerce = NULL, replace = NULL,"},"methods::balanceMethodsList":{"description":"Utility functions to support the definition and use of formal\nmethods.  Most of these functions will not normally be called directly\nby the user.\n","example_call":"balanceMethodsList(mlist, args, check = TRUE)"},"methods::setLoadActions":{"description":"These functions provide a mechanism for packages to specify\ncomputations to be done during the loading of a package namespace.\nSuch actions are a flexible way to provide information only available at\nload time (such as locations in a dynamically linked library).\n","example_call":"setLoadActions(..., .where = topenv(parent.frame()))"},"methods::setDataPart":{"description":"These are various functions to support the definition and use of\nformal classes.  Most of them are rarely suitable to be called\ndirectly.\n","example_call":"setDataPart(object, value, check = TRUE)"},"methods::setGroupGeneric":{"description":"The setGroupGeneric function behaves like setGeneric\nexcept that it constructs a group generic function, differing in two\nways from an ordinary generic function.  First, this function cannot\nbe called directly, and the body of the function created will contain\na stop call with this information.  Second, the group generic function\ncontains information about the known members of the group, used to\nkeep the members up to date when the group definition changes, through\nchanges in the search list or direct specification of methods, etc.\n","example_call":"setGroupGeneric(name, def = NULL, group = list(), valueClass = character(),"},"methods::S3Class":{"description":"A regular (S4) class may contain an S3 class, if that class has been registered (by calling\nsetOldClass).  The functions described here provide\ninformation about contained S3 classes.  See the section <U+2018>Functions<U+2019>.\n","example_call":"S3Class(object)"},"methods::findUnique":{"description":"Utility functions to support the definition and use of formal\nmethods.  Most of these functions will not normally be called directly\nby the user.\n","example_call":"findUnique(what, message, where = topenv(parent.frame()))"},"methods::dumpMethods":{"description":"The functions documented here manage collections of methods associated\nwith a generic function, as well as providing information about the\ngeneric functions themselves.\n","example_call":"dumpMethods(f, file = \"\", signature = NULL, methods = findMethods(f,"},"methods::sigToEnv":{"description":"Utility functions to support the definition and use of formal\nmethods.  Most of these functions will not normally be called directly\nby the user.\n","example_call":"sigToEnv(signature, generic)"},"methods::setGenericImplicit":{"description":"The implicit generic mechanism stores generic versions of\nfunctions\nin a table in a package. The package does not want the current\nversion of the function to be a generic, however, and retains the\nnon-generic version.\n","example_call":"setGenericImplicit(name, where = topenv(parent.frame()), restore = TRUE)"},"methods::sealClass":{"description":"Functions to find classes:  isClass tests for a class;\nfindClass returns the name(s) of packages containing the\nclass; getClasses returns the names of all the classes in an\nenvironment, typically a namespace.  To examine the definition of a class, use getClass.\n","example_call":"sealClass(Class, where = topenv(parent.frame()))"},"methods::hasArg":{"description":"Returns TRUE if name corresponds to an argument in the\ncall, either a formal argument to the function, or a component of\n..., and FALSE otherwise.\n","example_call":"hasArg(name)"},"methods::makeStandardGeneric":{"description":"Utility functions to support the definition and use of formal\nmethods.  Most of these functions will not normally be called directly\nby the user.\n","example_call":"makeStandardGeneric(f, fdef)"},"methods::selectMethod":{"description":"The function selectMethod() returns the method that\nwould be selected for a call to function f if the arguments had\nclasses as specified by signature.  Failing to find a method\nis an error, unless argument optional = TRUE, in which case\nNULL is returned.\n","example_call":"selectMethod(f, signature, optional = FALSE, useInherited = TRUE,"},"methods::loadMethod":{"description":"These functions create and manipulate MethodsList objects, the\nobjects formerly used in R to store methods for dispatch.  Use of\nthese objects is deprecated since R 3.2.0, as it will rarely be a\ngood idea.  Where methods dispatch is\nto be studied, see selectMethod.  For computations\nthat iterate over methods or over method signatures, see\nfindMethods, which returns a linearized methods list\nto hold method definitions, usually more convenient for iteration\nthan the recursive MethodsList objects.\n","example_call":"loadMethod(method, fname, envir)"},"methods::getLoadActions":{"description":"These functions provide a mechanism for packages to specify\ncomputations to be done during the loading of a package namespace.\nSuch actions are a flexible way to provide information only available at\nload time (such as locations in a dynamically linked library).\n","example_call":"getLoadActions(where = topenv(parent.frame()))"},"methods::prohibitGeneric":{"description":"The implicit generic mechanism stores generic versions of\nfunctions\nin a table in a package. The package does not want the current\nversion of the function to be a generic, however, and retains the\nnon-generic version.\n","example_call":"prohibitGeneric(name, where = topenv(parent.frame()))"},"methods::substituteFunctionArgs":{"description":"Utility functions to support the definition and use of formal\nmethods.  Most of these functions will not normally be called directly\nby the user.\n","example_call":"substituteFunctionArgs(def, newArgs, args = formalArgs(def), silent = FALSE,"},"methods::completeExtends":{"description":"These are various functions to support the definition and use of\nformal classes.  Most of them are rarely suitable to be called\ndirectly.\n","example_call":"completeExtends(ClassDef, class2, extensionDef, where)"},"methods::assignClassDef":{"description":"These are various functions to support the definition and use of\nformal classes.  Most of them are rarely suitable to be called\ndirectly.\n","example_call":"assignClassDef(Class, def, where = .GlobalEnv, force = FALSE, doSubclasses = is(def,"},"methods::methodSignatureMatrix":{"description":"These are internal utilities, currently in the methods\npackage, that either provide some functionality needed by the package\n(e.g., element matching by name), or add compatibility with S-Plus, or both.\n","example_call":"methodSignatureMatrix(object, sigSlots = c(\"target\", \"defined\"))"},"methods::isGrammarSymbol":{"description":"Internal routines to support some operations on language objects.\n","example_call":"isGrammarSymbol(symbol)"},"methods::prototype":{"description":"These are old utility functions  to construct, respectively\na list designed to represent the slots and superclasses and\na list of prototype specifications.  The representation()\nfunction is no longer useful, since the arguments slots and\ncontains to setClass are now recommended.\n","example_call":"prototype(...)"},"methods::requireMethods":{"description":"These are various functions to support the definition and use of\nformal classes.  Most of them are rarely suitable to be called\ndirectly.\n","example_call":"requireMethods(functions, signature, message = \"\", where = topenv(parent.frame()))"},"methods::slot<-":{"description":"These functions return or set information about the individual slots\nin an object.\n","example_call":"slot<-(object, name, check = TRUE, value)"},"methods::setOldClass":{"description":"Register an old-style (a.k.a. <U+2018>S3<U+2019>) class as a formally defined\nclass. Simple usage will be of the form:\n","example_call":"setOldClass(Classes, prototype = NULL, where = topenv(parent.frame()),"},"methods::setPrimitiveMethods":{"description":"Utility functions to support the definition and use of formal\nmethods.  Most of these functions will not normally be called directly\nby the user.\n","example_call":"setPrimitiveMethods(f, fdef, code, generic, mlist = get(\".Methods\", envir = environment(generic)))"},"methods::isGroup":{"description":"The functions documented here manage collections of methods associated\nwith a generic function, as well as providing information about the\ngeneric functions themselves.\n","example_call":"isGroup(f, where = topenv(parent.frame()), fdef = getGeneric(f,"},"methods::getAllSuperClasses":{"description":"These are various functions to support the definition and use of\nformal classes.  Most of them are rarely suitable to be called\ndirectly.\n","example_call":"getAllSuperClasses(ClassDef, simpleOnly = TRUE)"},"methods::findMethods":{"description":"The function findMethods converts the methods defined in a table for a generic\nfunction (as used for selection of methods) into a list, for study or\ndisplay.  The list is actually from the class listOfMethods\n(see the section describing the class, below).\n","example_call":"findMethods(f, where, classes = character(), inherited = FALSE,"},"methods::rematchDefinition":{"description":"Utility functions to support the definition and use of formal\nmethods.  Most of these functions will not normally be called directly\nby the user.\n","example_call":"rematchDefinition(definition, generic, mnames, fnames, signature)"},"methods::MethodAddCoerce":{"description":"Utility functions to support the definition and use of formal\nmethods.  Most of these functions will not normally be called directly\nby the user.\n","example_call":"MethodAddCoerce(method, argName, thisClass, methodClass)"},"methods::hasMethod":{"description":"The function selectMethod() returns the method that\nwould be selected for a call to function f if the arguments had\nclasses as specified by signature.  Failing to find a method\nis an error, unless argument optional = TRUE, in which case\nNULL is returned.\n","example_call":"hasMethod(f, signature = character(), where = .genEnv(f, topenv(parent.frame())))"},"methods::evalqOnLoad":{"description":"These functions provide a mechanism for packages to specify\ncomputations to be done during the loading of a package namespace.\nSuch actions are a flexible way to provide information only available at\nload time (such as locations in a dynamically linked library).\n","example_call":"evalqOnLoad(expr, where = topenv(parent.frame()), aname = \"\")"},"methods::insertSource":{"description":"Definitions of functions and/or methods from a source file are\ninserted into a package, using the trace mechanism.\nTypically, this allows testing or debugging modified versions of a few\nfunctions without reinstalling a large package.\n","example_call":"insertSource(source, package = \"\", functions = allPlainObjects(),"},"methods::hasLoadAction":{"description":"These functions provide a mechanism for packages to specify\ncomputations to be done during the loading of a package namespace.\nSuch actions are a flexible way to provide information only available at\nload time (such as locations in a dynamically linked library).\n","example_call":"hasLoadAction(aname, where = topenv(parent.frame()))"},"methods::validSlotNames":{"description":"These are various functions to support the definition and use of\nformal classes.  Most of them are rarely suitable to be called\ndirectly.\n","example_call":"validSlotNames(names)"},"methods::multipleClasses":{"description":"The function className() generates a\nvalid references to a class, including the name of the package\ncontaining the class definition.  The object returned, from class \"className\", is the\nunambiguous way to refer to a class, for example when calling\nsetMethod, just in case multiple definitions of the\nclass exist.\n","example_call":"multipleClasses(details = FALSE)"},"methods::empty.dump":{"description":"These are various functions to support the definition and use of\nformal classes.  Most of them are rarely suitable to be called\ndirectly.\n","example_call":"empty.dump()"},"methods::setPackageName":{"description":"The functions below produce the package associated with a particular\nenvironment or position on the search list, or of the package\ncontaining a particular function.  They are primarily used to support\ncomputations that need to differentiate objects on multiple packages.\n","example_call":"setPackageName(pkg, env)"},"methods::el<-":{"description":"These are internal utilities, currently in the methods\npackage, that either provide some functionality needed by the package\n(e.g., element matching by name), or add compatibility with S-Plus, or both.\n","example_call":"NULL"},"methods::elNamed<-":{"description":"These are internal utilities, currently in the methods\npackage, that either provide some functionality needed by the package\n(e.g., element matching by name), or add compatibility with S-Plus, or both.\n","example_call":"elNamed<-(x, name, value)"},"methods::getClassDef":{"description":"Get the definition of a class.\n","example_call":"getClassDef(Class, where = topenv(parent.frame()), package = packageSlot(Class),"},"methods::newEmptyObject":{"description":"These are various functions to support the definition and use of\nformal classes.  Most of them are rarely suitable to be called\ndirectly.\n","example_call":"newEmptyObject()"},"methods::formalArgs":{"description":"These are internal utilities, currently in the methods\npackage, that either provide some functionality needed by the package\n(e.g., element matching by name), or add compatibility with S-Plus, or both.\n","example_call":"formalArgs(def)"},"methods::Arith":{"description":"Methods can be defined for group generic functions.  Each group\ngeneric function has a number of member generic functions\nassociated with it.\n","example_call":"Arith(e1, e2)"},"methods::mergeMethods":{"description":"These functions create and manipulate MethodsList objects, the\nobjects formerly used in R to store methods for dispatch.  Use of\nthese objects is deprecated since R 3.2.0, as it will rarely be a\ngood idea.  Where methods dispatch is\nto be studied, see selectMethod.  For computations\nthat iterate over methods or over method signatures, see\nfindMethods, which returns a linearized methods list\nto hold method definitions, usually more convenient for iteration\nthan the recursive MethodsList objects.\n","example_call":"mergeMethods(m1, m2, genericLabel = character())"},"methods::MethodsList":{"description":"These functions create and manipulate MethodsList objects, the\nobjects formerly used in R to store methods for dispatch.  Use of\nthese objects is deprecated since R 3.2.0, as it will rarely be a\ngood idea.  Where methods dispatch is\nto be studied, see selectMethod.  For computations\nthat iterate over methods or over method signatures, see\nfindMethods, which returns a linearized methods list\nto hold method definitions, usually more convenient for iteration\nthan the recursive MethodsList objects.\n","example_call":"MethodsList(.ArgName, ...)"},"methods::getRefClass":{"description":"The software described here allows packages to define reference\nclasses that behave in the style of <U+201C>OOP<U+201D> languages such as Java and\nC++.\nThis model for OOP differs from the functional model implemented by S4\n(and S3) classes and methods, in which methods are defined for generic\nfunctions.\nMethods for reference classes are <U+201C>encapsulated<U+201D> in the class definition.\n","example_call":"getRefClass(Class, where = topenv(parent.frame()))"},"methods::inheritedSlotNames":{"description":"For a class (or class definition, see getClass and\nthe description of class classRepresentation),\ngive the names which are inherited from <U+201C>above<U+201D>, i.e., super\nclasses, rather than by this class' definition itself.\n","example_call":"inheritedSlotNames(Class, where = topenv(parent.frame()))"},"methods::classesToAM":{"description":"Given a vector of class names or a list of class definitions, the\nfunction returns an adjacency matrix of the superclasses of these\nclasses; that is, a matrix with class names as the row and column\nnames and with element [i, j] being 1 if the class in column j is a\ndirect superclass of the class in row i, and 0 otherwise.\n","example_call":"classesToAM(classes, includeSubclasses = FALSE, abbreviate = 2)"},"methods::asMethodDefinition":{"description":"Utility functions to support the definition and use of formal\nmethods.  Most of these functions will not normally be called directly\nby the user.\n","example_call":"asMethodDefinition(def, signature = list(.anyClassName), sealed = FALSE,"},"methods::languageEl":{"description":"Internal routines to support some operations on language objects.\n","example_call":"languageEl(object, which)"},"methods::Ops":{"description":"Methods can be defined for group generic functions.  Each group\ngeneric function has a number of member generic functions\nassociated with it.\n","example_call":"Ops(e1, e2)"},"methods::getMethod":{"description":"The function selectMethod() returns the method that\nwould be selected for a call to function f if the arguments had\nclasses as specified by signature.  Failing to find a method\nis an error, unless argument optional = TRUE, in which case\nNULL is returned.\n","example_call":"getMethod(f, signature = character(), where = topenv(parent.frame()),"},"methods::listFromMlist":{"description":"These functions create and manipulate MethodsList objects, the\nobjects formerly used in R to store methods for dispatch.  Use of\nthese objects is deprecated since R 3.2.0, as it will rarely be a\ngood idea.  Where methods dispatch is\nto be studied, see selectMethod.  For computations\nthat iterate over methods or over method signatures, see\nfindMethods, which returns a linearized methods list\nto hold method definitions, usually more convenient for iteration\nthan the recursive MethodsList objects.\n","example_call":"listFromMlist(mlist, prefix = list(), sigs. = TRUE, methods. = TRUE)"},"methods::allNames":{"description":"These are internal utilities, currently in the methods\npackage, that either provide some functionality needed by the package\n(e.g., element matching by name), or add compatibility with S-Plus, or both.\n","example_call":"allNames(x)"},"methods::completeSubclasses":{"description":"These are various functions to support the definition and use of\nformal classes.  Most of them are rarely suitable to be called\ndirectly.\n","example_call":"completeSubclasses(classDef, class2, extensionDef, where, classDef2 = getClassDef(class2,"},"methods::cacheGenericsMetaData":{"description":"Utility functions to support the definition and use of formal\nmethods.  Most of these functions will not normally be called directly\nby the user.\n","example_call":"cacheGenericsMetaData(f, fdef, attach = TRUE, where = topenv(parent.frame()),"},"methods::tryNew":{"description":"These are various functions to support the definition and use of\nformal classes.  Most of them are rarely suitable to be called\ndirectly.\n","example_call":"tryNew(Class, where)"},"methods::findClass":{"description":"Functions to find classes:  isClass tests for a class;\nfindClass returns the name(s) of packages containing the\nclass; getClasses returns the names of all the classes in an\nenvironment, typically a namespace.  To examine the definition of a class, use getClass.\n","example_call":"findClass(Class, where = topenv(parent.frame()), unique = \"\")"},"methods::cacheMethod":{"description":"These are internal support routines for computations on formal methods.\n","example_call":"cacheMethod(f, sig, def, args = names(sig), fdef, inherited = FALSE)"},"methods::showDefault":{"description":"These are internal utilities, currently in the methods\npackage, that either provide some functionality needed by the package\n(e.g., element matching by name), or add compatibility with S-Plus, or both.\n","example_call":"showDefault(object, oldMethods = TRUE)"},"methods::Compare":{"description":"Methods can be defined for group generic functions.  Each group\ngeneric function has a number of member generic functions\nassociated with it.\n","example_call":"Compare(e1, e2)"},"methods::new":{"description":"A call to  new returns a newly allocated object from the\nclass identified by the first argument.  This call in turn calls the\nmethod for the generic function initialize corresponding to\nthe specified class, passing the ... arguments to this\nmethod.\nIn the default method for initialize(), named arguments provide\nvalues for the corresponding slots and unnamed arguments must be\nobjects from superclasses of this class.\n","example_call":"new(Class, ...)"},"methods::makeClassRepresentation":{"description":"Constructs an object of class classRepresentation\nto describe a particular class.  Mostly a utility function, but you can\ncall it to create a class definition without assigning it, as\nsetClass would do.\n","example_call":"makeClassRepresentation(name, slots = list(), superClasses = character(), prototype = NULL,"},"methods::promptClass":{"description":"Assembles all relevant slot and method information for a class, with\nminimal markup for Rd processing; no QC facilities at present.\n","example_call":"promptClass(clName, filename = NULL, type = \"class\", keywords = \"classes\","},"methods::newClassRepresentation":{"description":"These are various functions to support the definition and use of\nformal classes.  Most of them are rarely suitable to be called\ndirectly.\n","example_call":"newClassRepresentation(...)"},"methods::.S4methods":{"description":"Show a summary of the methods for one or more generic functions,\npossibly restricted to those involving specified classes.\n","example_call":".S4methods(generic.function, class)"},"methods::testVirtual":{"description":"These are various functions to support the definition and use of\nformal classes.  Most of them are rarely suitable to be called\ndirectly.\n","example_call":"testVirtual(properties, extends, prototype, where)"},"methods::linearizeMlist":{"description":"These functions create and manipulate MethodsList objects, the\nobjects formerly used in R to store methods for dispatch.  Use of\nthese objects is deprecated since R 3.2.0, as it will rarely be a\ngood idea.  Where methods dispatch is\nto be studied, see selectMethod.  For computations\nthat iterate over methods or over method signatures, see\nfindMethods, which returns a linearized methods list\nto hold method definitions, usually more convenient for iteration\nthan the recursive MethodsList objects.\n","example_call":"linearizeMlist(mlist, inherited = TRUE)"},"methods::removeGeneric":{"description":"The functions documented here manage collections of methods associated\nwith a generic function, as well as providing information about the\ngeneric functions themselves.\n","example_call":"removeGeneric(f, where = topenv(parent.frame()))"},"methods::canCoerce":{"description":"Test if an object can be coerced to a given S4 class.\nMaybe useful inside if() to ensure that calling\nas(object, Class) will find a method.\n","example_call":"canCoerce(object, Class)"},"methods::S3Class<-":{"description":"A regular (S4) class may contain an S3 class, if that class has been registered (by calling\nsetOldClass).  The functions described here provide\ninformation about contained S3 classes.  See the section <U+2018>Functions<U+2019>.\n","example_call":"S3Class<-(object, value)"},"methods::rbind2":{"description":"Combine two matrix-like R objects by columns (cbind2)\nor rows (rbind2).  These are (S4) generic functions with default\nmethods.\n","example_call":"rbind2(x, y, ...)"},"methods::setValidity":{"description":"validObject() tests the validity of object related to\nits class definition; specifically, it checks that all slots\nspecified in the class definition are present and that the object in\nthe slot is from the required class or a subclass of that class.\n","example_call":"setValidity(Class, method, where = topenv(parent.frame()))"},"methods::functionBody":{"description":"These are internal utilities, currently in the methods\npackage, that either provide some functionality needed by the package\n(e.g., element matching by name), or add compatibility with S-Plus, or both.\n","example_call":"functionBody(fun = sys.function(sys.parent()))"},"methods::getGeneric":{"description":"Utility functions to support the definition and use of formal\nmethods.  Most of these functions will not normally be called directly\nby the user.\n","example_call":"getGeneric(f, mustFind = FALSE, where, package = \"\")"},"methods::dumpMethod":{"description":"The functions documented here manage collections of methods associated\nwith a generic function, as well as providing information about the\ngeneric functions themselves.\n","example_call":"dumpMethod(f, signature = character(), file = defaultDumpName(f,"},"methods::elNamed":{"description":"These are internal utilities, currently in the methods\npackage, that either provide some functionality needed by the package\n(e.g., element matching by name), or add compatibility with S-Plus, or both.\n","example_call":"elNamed(x, name, mustFind = FALSE)"},"methods::.doTracePrint":{"description":" The classes described  here are used by the R function\ntrace to create versions of functions and methods\nincluding browser calls, etc., and also to untrace the\nsame objects.","example_call":".doTracePrint(msg = \"\")"},"methods::setClass":{"description":"Create  a class definition and return a generator function to create\nobjects from the class.  Typical usage will be\nof the style:\n","example_call":"setClass(Class, representation = list(), prototype = NULL, contains = character(),"},"methods::isSealedClass":{"description":"These functions check for either a method or a class that has been\nsealed when it was defined, and which therefore cannot be\nre-defined.\n","example_call":"isSealedClass(Class, where = topenv(parent.frame()))"},"methods::generic.skeleton":{"description":"Utility functions to support the definition and use of formal\nmethods.  Most of these functions will not normally be called directly\nby the user.\n","example_call":"generic.skeleton(name, fdef, fdefault)"},"methods::makeGeneric":{"description":"Utility functions to support the definition and use of formal\nmethods.  Most of these functions will not normally be called directly\nby the user.\n","example_call":"makeGeneric(f, fdef, fdefault = fdef, group = list(), valueClass = character(),"},"methods::setMethod":{"description":"Create a method for a generic function, corresponding to a signature of classes for the arguments. Standard usage will be of the form:\n","example_call":"setMethod(f, signature = character(), definition, where = topenv(parent.frame()),"},"methods::isClassUnion":{"description":"A class may be defined as the union of other classes; that\nis, as a virtual class defined as a superclass of several other\nclasses. Class unions are useful in method signatures or as slots in\nother classes, when we want to allow one of several classes to be supplied.\n","example_call":"isClassUnion(Class)"},"methods::coerce":{"description":"A call to setAs defines a method for coercing an object of\nclass from to class to.  The methods will then be used\nby calls to as for objects with class from,\nincluding calls that replace part of the object.\n","example_call":"coerce(from, to, strict = TRUE)"},"methods::initFieldArgs":{"description":"The software described here allows packages to define reference\nclasses that behave in the style of <U+201C>OOP<U+201D> languages such as Java and\nC++.\nThis model for OOP differs from the functional model implemented by S4\n(and S3) classes and methods, in which methods are defined for generic\nfunctions.\nMethods for reference classes are <U+201C>encapsulated<U+201D> in the class definition.\n","example_call":"initFieldArgs(.Object, classDef, selfEnv, ...)"},"methods::.valueClassTest":{"description":"Utility functions to support the definition and use of formal\nmethods.  Most of these functions will not normally be called directly\nby the user.\n","example_call":".valueClassTest(object, classes, fname)"},"methods::validObject":{"description":"validObject() tests the validity of object related to\nits class definition; specifically, it checks that all slots\nspecified in the class definition are present and that the object in\nthe slot is from the required class or a subclass of that class.\n","example_call":"validObject(object, test = FALSE, complete = FALSE)"},"methods::getClasses":{"description":"Functions to find classes:  isClass tests for a class;\nfindClass returns the name(s) of packages containing the\nclass; getClasses returns the names of all the classes in an\nenvironment, typically a namespace.  To examine the definition of a class, use getClass.\n","example_call":"getClasses(where = .externalCallerEnv(), inherits = missing(where))"},"methods::setGeneric":{"description":"Create a generic version of the named function so that methods may\nbe defined for it.  A call to setMethod will call\nsetGeneric automatically if applied to a non-generic\nfunction.\n","example_call":"setGeneric(name, def = NULL, group = list(), valueClass = character(),"},"methods::unRematchDefinition":{"description":"Utility functions to support the definition and use of formal\nmethods.  Most of these functions will not normally be called directly\nby the user.\n","example_call":"unRematchDefinition(definition)"},"methods::hasMethods":{"description":"The function findMethods converts the methods defined in a table for a generic\nfunction (as used for selection of methods) into a list, for study or\ndisplay.  The list is actually from the class listOfMethods\n(see the section describing the class, below).\n","example_call":"hasMethods(f, where, package = \"\")"},"methods::existsFunction":{"description":"These are internal utilities, currently in the methods\npackage, that either provide some functionality needed by the package\n(e.g., element matching by name), or add compatibility with S-Plus, or both.\n","example_call":"existsFunction(f, generic = TRUE, where = topenv(parent.frame()))"},"methods::classLabel":{"description":"These are various functions to support the definition and use of\nformal classes.  Most of them are rarely suitable to be called\ndirectly.\n","example_call":"classLabel(Class)"},"methods::defaultPrototype":{"description":"These are various functions to support the definition and use of\nformal classes.  Most of them are rarely suitable to be called\ndirectly.\n","example_call":"defaultPrototype()"},"methods::showMethods":{"description":"Show a summary of the methods for one or more generic functions,\npossibly restricted to those involving specified classes.\n","example_call":"showMethods(f = character(), where = topenv(parent.frame()), classes = NULL,"},"methods::findMethod":{"description":"The function selectMethod() returns the method that\nwould be selected for a call to function f if the arguments had\nclasses as specified by signature.  Failing to find a method\nis an error, unless argument optional = TRUE, in which case\nNULL is returned.\n","example_call":"findMethod(f, signature, where = topenv(parent.frame()))"},"methods::testInheritedMethods":{"description":"A set of distinct inherited signatures is generated to test\ninheritance for all the methods of a specified generic function.  If\nmethod selection is ambiguous for some of these, a summary of the\nambiguities is attached to the returned object.  This test should be\nperformed by package authors before releasing a package.\n","example_call":"testInheritedMethods(f, signatures, test = TRUE, virtual = FALSE, groupMethods = TRUE,"},"methods::as":{"description":"Coerce an object to a given class.\n","example_call":"as(object, Class, strict = TRUE, ext = possibleExtends(thisClass,"},"methods::conformMethod":{"description":"Utility functions to support the definition and use of formal\nmethods.  Most of these functions will not normally be called directly\nby the user.\n","example_call":"conformMethod(signature, mnames, fnames, f = \"<unspecified>\", fdef,"},"methods::makeMethodsList":{"description":"These functions create and manipulate MethodsList objects, the\nobjects formerly used in R to store methods for dispatch.  Use of\nthese objects is deprecated since R 3.2.0, as it will rarely be a\ngood idea.  Where methods dispatch is\nto be studied, see selectMethod.  For computations\nthat iterate over methods or over method signatures, see\nfindMethods, which returns a linearized methods list\nto hold method definitions, usually more convenient for iteration\nthan the recursive MethodsList objects.\n","example_call":"makeMethodsList(object, level = 1)"},"methods::newBasic":{"description":"These are various functions to support the definition and use of\nformal classes.  Most of them are rarely suitable to be called\ndirectly.\n","example_call":"newBasic(Class, ...)"},"methods::.slotNames":{"description":"These functions return or set information about the individual slots\nin an object.\n","example_call":".slotNames(x)"},"methods::className":{"description":"The function className() generates a\nvalid references to a class, including the name of the package\ncontaining the class definition.  The object returned, from class \"className\", is the\nunambiguous way to refer to a class, for example when calling\nsetMethod, just in case multiple definitions of the\nclass exist.\n","example_call":"className(class, package)"},"methods::functionBody<-":{"description":"These are internal utilities, currently in the methods\npackage, that either provide some functionality needed by the package\n(e.g., element matching by name), or add compatibility with S-Plus, or both.\n","example_call":"functionBody<-(fun, envir = environment(fun), value)"},"methods::setLoadAction":{"description":"These functions provide a mechanism for packages to specify\ncomputations to be done during the loading of a package namespace.\nSuch actions are a flexible way to provide information only available at\nload time (such as locations in a dynamically linked library).\n","example_call":"setLoadAction(action, aname = \"\", where = topenv(parent.frame()))"},"methods::superClassDepth":{"description":"These are various functions to support the definition and use of\nformal classes.  Most of them are rarely suitable to be called\ndirectly.\n","example_call":"superClassDepth(ClassDef, soFar = ClassDef@className, simpleOnly = TRUE)"},"methods::existsMethod":{"description":"The function selectMethod() returns the method that\nwould be selected for a call to function f if the arguments had\nclasses as specified by signature.  Failing to find a method\nis an error, unless argument optional = TRUE, in which case\nNULL is returned.\n","example_call":"existsMethod(f, signature = character(), where = topenv(parent.frame()))"},"methods::getFunction":{"description":"These are internal utilities, currently in the methods\npackage, that either provide some functionality needed by the package\n(e.g., element matching by name), or add compatibility with S-Plus, or both.\n","example_call":"getFunction(name, generic = TRUE, mustFind = TRUE, where = topenv(parent.frame()))"},"methods::getMethodsMetaData":{"description":"Utility functions to support the definition and use of formal\nmethods.  Most of these functions will not normally be called directly\nby the user.\n","example_call":"getMethodsMetaData(f, where = topenv(parent.frame()))"},"mgcv::rmvn":{"description":" Generates multivariate normal or t random deviates, and evaluates the corresponding log densities.\n","example_call":"rmvn(n, mu, V)"},"mgcv::notLog2":{"description":"notLog2 and notExp2 are alternatives to log\nand exp or notLog and notExp for\nre-parameterization of variance parameters. They are used by the\npdTens and pdIdnot classes which in turn implement\nsmooths for gamm.\n","example_call":"notLog2(x, d = .Options$mgcv.vc.logrange, b = 1/d)"},"mgcv::rTweedie":{"description":" Generates Tweedie random deviates, for powers between 1 and 2.\n","example_call":"rTweedie(mu, p = 1.5, phi = 1)"},"mgcv::gumbls":{"description":"The gumbls family implements Gumbel location scale additive models in which the location and scale parameters (see details) can depend on additive smooth predictors. Useable only with gam, the linear predictors are specified via a list of formulae.\n","example_call":"gumbls(link = list(\"identity\", \"log\"), b = -7)"},"mgcv::fix.family.qf":{"description":" Generalized Additive Model fitting by <U+2018>outer<U+2019> iteration,\nrequires extra derivatives of the variance and link functions to be \nadded to family objects. The first 3 functions add what is needed. Model checking can\nbe aided by adding quantile and random deviate generating functions to the family. \nThe final two functions do this.\n","example_call":"fix.family.qf(fam)"},"mgcv::gaulss":{"description":"The gaulss family implements Gaussian location scale additive models in which \nthe mean and the logb of the standard deviation (see details) can depend on additive smooth predictors. Useable \nonly with gam, the linear predictors are specified via a list of formulae.\n","example_call":"gaulss(link = list(\"identity\", \"logb\"), b = 0.01)"},"mgcv::Predict.matrix.sos.smooth":{"description":"gam can use isotropic smooths on the sphere, via terms like \ns(la,lo,bs=\"sos\",m=2,k=100). There must be exactly 2 arguments to such a smooth. \nThe first is taken to be latitude (in degrees) and the second longitude (in degrees). \nm (default 0) is an integer in the range -1 to 4 determining the order of the penalty used. \nFor m>0, (m+2)/2 is the penalty order, with m=2 equivalent to the usual second \nderivative penalty. m=0 signals to use the 2nd order spline on the sphere, computed by \nWendelberger's (1981) method. m = -1 results in a Duchon.spline being \nused (with m=2 and s=1/2), following an unpublished suggestion of Jean Duchon.\n","example_call":"Predict.matrix.sos.smooth(object, data)"},"mgcv::mini.roots":{"description":"INTERNAL function to obtain square roots, B[[i]], of the penalty matrices S[[i]]'s having as few\ncolumns as possible.\n","example_call":"mini.roots(S, off, np, rank = NULL)"},"mgcv::exclude.too.far":{"description":" Takes two arrays defining the nodes of a grid over a 2D covariate space and two arrays \ndefining the location of data in that space, and returns a logical vector with elements TRUE if \nthe corresponding node is too far from data and FALSE otherwise. Basically a service routine for \nvis.gam and plot.gam.\n","example_call":"exclude.too.far(g1, g2, d1, d2, dist)"},"mgcv::smooth.construct.tp.smooth.spec":{"description":"gam can use isotropic smooths of any number of variables, specified via terms like\ns(x,z,bs=\"tp\",m=3) (or just s(x,z) as this is the default basis). These terms are based on thin plate \nregression splines. m specifies the order of the derivatives in the thin plate spline penalty.\n","example_call":"smooth.construct.tp.smooth.spec(object, data, knots)"},"mgcv::new.name":{"description":"gamm works by transforming a GAMM into something \nthat can be estimated by lme, but this involves creating new \nvariables, the names of which should not clash with the names of other \nvariables on which the model depends. This simple service routine checks a \nsuggested name against a list of those in use, and if neccesary modifies it \nso that there is no clash.","example_call":"new.name(proposed, old.names)"},"mgcv::Predict.matrix":{"description":" Takes smooth objects produced by smooth.construct methods and obtains the matrix mapping \nthe parameters associated with such a smooth to the predicted values of the smooth at a set of new covariate values.\n","example_call":"Predict.matrix(object, data)"},"mgcv::smooth.construct.so.smooth.spec":{"description":" Sets up basis functions and wiggliness penalties for\nsoap film smoothers (Wood, Bravington and Hedley, 2008). Soap film smoothers are based on the idea of\nconstructing a 2-D smooth as a film of soap connecting a smoothly varying\nclosed boundary. Unless smoothing very heavily, the film is distorted towards\nthe data. The smooths are designed not to smooth across boundary features (peninsulas,\nfor example).\n","example_call":"smooth.construct.so.smooth.spec(object, data, knots)"},"mgcv::gam.reparam":{"description":"INTERNAL function for finding an orthogonal re-parameterization which avoids \"dominant machine zero leakage\" between\ncomponents of the square root penalty.\n","example_call":"gam.reparam(rS, lsp, deriv)"},"mgcv::pdTens":{"description":"This set of functions implements an nlme library pdMat class to allow\ntensor product smooths to be estimated by lme as called by gamm. Tensor product smooths\nhave a penalty matrix made up of a weighted sum of penalty matrices, where the weights are the smoothing \nparameters. In the mixed model formulation the penalty matrix is the inverse of the covariance matrix for \nthe random effects of a term, and the smoothing parameters (times a half) are variance parameters to be estimated. \nIt's not possible to transform the problem to make the required random effects covariance matrix look like one of the standard \npdMat classes: hence the need for the pdTens class. A notLog2 parameterization ensures that \nthe parameters are positive. \n","example_call":"pdTens(value = numeric(0), form = NULL, nam = NULL, data = sys.frame(sys.parent()))"},"mgcv::gamlss.etamu":{"description":"Mainly intended for internal use in specifying location scale models.\nLet g(mu) = lp, where lp is the linear predictor, and g is the link\nfunction. Assume that we have calculated the derivatives of the log-likelihood wrt mu.\nThis function uses the chain rule to calculate the derivatives of the log-likelihood wrt\nlp. See trind.generator for array packing conventions. \n","example_call":"gamlss.etamu(l1, l2, l3 = NULL, l4 = NULL, ig1, g2, g3 = NULL, g4 = NULL,"},"mgcv::notExp":{"description":" It is common practice in statistical optimization to use log-parameterizations when a \nparameter ought to be positive. i.e. if an optimization parameter a should be non-negative then \nwe use a=exp(b) and optimize with respect to the unconstrained parameter b. This often works \nwell, but it does imply a rather limited working range for b: using 8 byte doubles, for example, \nif b's magnitude gets much above 700 then a overflows or underflows. This can cause \nproblems for numerical optimization methods. \n","example_call":"notExp(x)"},"mgcv::Predict.matrix.gp.smooth":{"description":"Gaussian process/kriging models based on simple covariance functions can be written in a very similar form to thin plate and Duchon spline models (e.g. Handcock, Meier, Nychka, 1994), and low rank versions produced by the eigen approximation method of Wood (2003). Kammann and Wand (2003) suggest a particularly simple form of the Matern covariance function with only a single smoothing parameter to estimate, and this class implements this and other similar models.  \n","example_call":"Predict.matrix.gp.smooth(object, data)"},"mgcv::gam":{"description":" Fits a generalized additive model (GAM) to\ndata, the term <U+2018>GAM<U+2019> being taken to include any quadratically penalized GLM and a variety of \nother models estimated by a quadratically penalised likelihood type approach (see family.mgcv).  \nThe degree of smoothness of model terms is estimated as part of\nfitting. gam can also fit any GLM subject to multiple quadratic penalties (including \nestimation of degree of penalization). Confidence/credible intervals are readily\navailable for any quantity predicted using a fitted model.\n","example_call":"gam(formula, family = gaussian(), data = list(), weights = NULL,"},"mgcv::full.score":{"description":" Evaluates GCV/UBRE score for a GAM, given smoothing\nparameters. The routine calls gam.fit to fit the model, and is\nusually called by nlm to optimize the smoothing parameters. \n","example_call":"full.score(sp, G, family, control, gamma, ...)"},"mgcv::smooth.construct.ts.smooth.spec":{"description":"gam can use isotropic smooths of any number of variables, specified via terms like\ns(x,z,bs=\"tp\",m=3) (or just s(x,z) as this is the default basis). These terms are based on thin plate \nregression splines. m specifies the order of the derivatives in the thin plate spline penalty.\n","example_call":"smooth.construct.ts.smooth.spec(object, data, knots)"},"mgcv::Predict.matrix.ts.smooth":{"description":"The various built in smooth classes for use with gam have associate Predict.matrix \nmethod functions to enable prediction from the fitted model. ","example_call":"Predict.matrix.ts.smooth(object, data)"},"mgcv::smooth.construct.sf.smooth.spec":{"description":" Sets up basis functions and wiggliness penalties for\nsoap film smoothers (Wood, Bravington and Hedley, 2008). Soap film smoothers are based on the idea of\nconstructing a 2-D smooth as a film of soap connecting a smoothly varying\nclosed boundary. Unless smoothing very heavily, the film is distorted towards\nthe data. The smooths are designed not to smooth across boundary features (peninsulas,\nfor example).\n","example_call":"smooth.construct.sf.smooth.spec(object, data, knots)"},"mgcv::Predict.matrix.cyclic.smooth":{"description":"The various built in smooth classes for use with gam have associate Predict.matrix \nmethod functions to enable prediction from the fitted model. ","example_call":"Predict.matrix.cyclic.smooth(object, data)"},"mgcv::initial.sp":{"description":" Finds initial smoothing parameter guesses for multiple smoothing\nparameter estimation. The idea is to find values such that the estimated\ndegrees of freedom per penalized parameter should be well away from 0 and 1\nfor each penalized parameter, thus ensuring that the values are in a region of\nparameter space where the smoothing parameter estimation criterion is varying\nsubstantially with smoothing parameter value. \n","example_call":"initial.sp(X, S, off, expensive = FALSE, XX = FALSE)"},"mgcv::smooth.construct.bs.smooth.spec":{"description":"gam can use smoothing splines based on univariate B-spline bases\nwith derivative based penalties, specified via terms like s(x,bs=\"bs\",m=c(3,2)). m[1] controls the spline order, with m[1]=3 being a cubic spline, m[1]=2 being quadratic, and so on. The integrated square of the m[2]th derivative is used as the penalty. So m=c(3,2) is a conventional cubic spline. Any further elements of m, after the first 2, define the order of derivative in further penalties. If m is supplied as a single number, then it is taken to be m[1] and m[2]=m[1]-1, which is only a conventional smoothing spline in the m=3, cubic spline case. Notice that the definition of the spline order in terms of m[1] is intuitive, but differs to that used with the tprs and p.spline bases. See details for options for controlling the interval over which the penalty is evaluated (which can matter if it is necessary to extrapolate).\n","example_call":"smooth.construct.bs.smooth.spec(object, data, knots)"},"mgcv::smooth.construct.cc.smooth.spec":{"description":"gam can use univariate penalized cubic regression spline smooths, specified via terms like\ns(x,bs=\"cr\"). s(x,bs=\"cs\") specifies a penalized cubic regression spline which has had its penalty modified \nto shrink towards zero at high enough smoothing parameters (as the smoothing parameter goes to infinity a normal cubic spline tends to a \nstraight line.) s(x,bs=\"cc\") specifies a cyclic penalized cubic regression spline smooth.\n","example_call":"smooth.construct.cc.smooth.spec(object, data, knots)"},"mgcv::blas.thread.test":{"description":"Most BLAS implementations are thread safe, but some versions of OpenBLAS, for example, are not. This routine is a diagnostic helper function, which you will never need if you don't set nthreads>1, and even then are unlikely to need.   \n","example_call":"blas.thread.test(n = 1000, nt = 4)"},"mgcv::bam":{"description":" Fits a generalized additive model (GAM) to a very large\ndata set, the term <U+2018>GAM<U+2019> being taken to include any quadratically penalized GLM (the extended families\nlisted in family.mgcv can also be used).  \nThe degree of smoothness of model terms is estimated as part of\nfitting. In use the function is much like gam, except that the numerical methods\nare designed for datasets containing upwards of several tens of thousands of data (see Wood, Goude and Shaw, 2015). The advantage \nof bam is much lower memory footprint than gam, but it can also be much faster, \nfor large datasets. bam can also compute on a cluster set up by the parallel package.\n","example_call":"bam(formula, family = gaussian(), data = list(), weights = NULL,"},"mgcv::te":{"description":" Functions used for the definition of tensor product smooths and interactions within\ngam model formulae. te produces a full tensor product smooth, while ti \nproduces a tensor product interaction, appropriate when the main effects (and any lower \ninteractions) are also present.\n","example_call":"te(..., k = NA, bs = \"cr\", m = NA, d = NA, by = NA, fx = FALSE,"},"mgcv::sim2jam":{"description":"Facilities to auto-generate model specification code and associated data to simulate with GAMs in JAGS (or BUGS). This is useful for inference about models with complex random effects structure best coded in JAGS. It is a very innefficient approach to making inferences about standard GAMs. The idea is that jagam generates template JAGS code, and associated data, for the smooth part of the model. This template is then directly edited to include other stochastic components. After simulation with the resulting model, facilities are provided for plotting and prediction with the model smooth components. \n","example_call":"sim2jam(sam, pregam, edf.type = 2, burnin = 0)"},"mgcv::smooth.construct.cp.smooth.spec":{"description":"gam can use univariate P-splines as proposed by Eilers and Marx (1996), \nspecified via terms like s(x,bs=\"ps\"). These terms use B-spline bases \npenalized by discrete penalties applied directly to \nthe basis coefficients. Cyclic P-splines are specified by model terms like s(x,bs=\"cp\",...). \nThese bases can be used in tensor product smooths (see te).\n","example_call":"smooth.construct.cp.smooth.spec(object, data, knots)"},"mgcv::gamm":{"description":" Fits the specified  generalized additive mixed model (GAMM) to\ndata, by a call to lme in the normal errors identity link case, or by \na call to gammPQL (a modification of glmmPQL from the MASS library) otherwise. \nIn the latter case estimates are only approximately MLEs. The routine is typically \nslower than gam, and not quite as numerically robust. \n","example_call":"gamm(formula, random = NULL, correlation = NULL, family = gaussian(),"},"mgcv::ti":{"description":" Functions used for the definition of tensor product smooths and interactions within\ngam model formulae. te produces a full tensor product smooth, while ti \nproduces a tensor product interaction, appropriate when the main effects (and any lower \ninteractions) are also present.\n","example_call":"ti(..., k = NA, bs = \"cr\", m = NA, d = NA, by = NA, fx = FALSE,"},"mgcv::inSide":{"description":"Assesses whether points are inside a boundary. The boundary must enclose the\ndomain, but may include islands. \n","example_call":"inSide(bnd, x, y)"},"mgcv::smoothCon":{"description":" Wrapper functions for construction of and prediction from smooth\nterms in a GAM. The purpose of the wrappers is to allow user-transparant\nre-parameterization of smooth terms, in order to allow identifiability\nconstraints to be absorbed into the parameterization of each term, if required.\nThe routine also handles <U+2018>by<U+2019> variables and construction of identifiability constraints automatically, \nalthough this behaviour can be over-ridden.\n","example_call":"smoothCon(object, data, knots = NULL, absorb.cons = FALSE, scale.penalty = TRUE,"},"mgcv::influence.gam":{"description":" Extracts the leading diagonal of the influence matrix (hat\nmatrix) of a fitted gam object.\n","example_call":"influence.gam(model, ...)"},"mgcv::in.out":{"description":"Tests whether each of a set of points lie within a region defined by one or more \n(possibly nested) polygons. Points count as <U+2018>inside<U+2019> if they are interior to an odd number of polygons.\n","example_call":"in.out(bnd, x)"},"mgcv::bam.update":{"description":" Gaussian with identity link models fitted by bam can be efficiently updated as new data becomes available,\nby simply updating the QR decomposition on which estimation is based, and re-optimizing the smoothing parameters, starting\nfrom the previous estimates. This routine implements this.\n","example_call":"bam.update(b, data, chunk.size = 10000)"},"mgcv::smooth.construct.ad.smooth.spec":{"description":"gam can use adaptive smooths of one or two variables, specified \nvia terms like s(...,bs=\"ad\",...). (gamm can not use such terms <U+2014> check out \npackage AdaptFit if this is a problem.) The basis for such a term is a (tensor product of) \np-spline(s) or cubic regression spline(s). Discrete P-spline type penalties are applied directly to the coefficients \nof the basis, but the penalties themselves have a basis representation, allowing the strength of the\npenalty to vary with the covariates. The coefficients of the penalty basis are the smoothing parameters.\n","example_call":"smooth.construct.ad.smooth.spec(object, data, knots)"},"mgcv::smooth2random":{"description":"A generic function for converting mgcv smooth objects to forms suitable for estimation as random effects by e.g. lme. Exported mostly for use by other package developers. \n","example_call":"smooth2random(object, vnames, type = 1)"},"mgcv::smooth.construct.cs.smooth.spec":{"description":"gam can use univariate penalized cubic regression spline smooths, specified via terms like\ns(x,bs=\"cr\"). s(x,bs=\"cs\") specifies a penalized cubic regression spline which has had its penalty modified \nto shrink towards zero at high enough smoothing parameters (as the smoothing parameter goes to infinity a normal cubic spline tends to a \nstraight line.) s(x,bs=\"cc\") specifies a cyclic penalized cubic regression spline smooth.\n","example_call":"smooth.construct.cs.smooth.spec(object, data, knots)"},"mgcv::PredictMat":{"description":" Wrapper functions for construction of and prediction from smooth\nterms in a GAM. The purpose of the wrappers is to allow user-transparant\nre-parameterization of smooth terms, in order to allow identifiability\nconstraints to be absorbed into the parameterization of each term, if required.\nThe routine also handles <U+2018>by<U+2019> variables and construction of identifiability constraints automatically, \nalthough this behaviour can be over-ridden.\n","example_call":"PredictMat(object, data, n = nrow(data))"},"mgcv::pen.edf":{"description":"Finds the coefficients penalized by each penalty and adds up their effective degrees of freedom.\nVery useful for t2 terms, but hard to interpret for terms where the penalties penalize \noverlapping sets of parameters (e.g. te terms). \n","example_call":"pen.edf(x)"},"mgcv::gam.mh":{"description":"GAM coefficients can be simulated directly from the Gaussian approximation to the posterior for the coefficients, or using a simple Metropolis Hastings sampler. See also ginla.\n","example_call":"gam.mh(b, ns = 10000, burn = 1000, t.df = 40, rw.scale = 0.25,"},"mgcv::ziplss":{"description":"The ziplss family implements a zero inflated (hurdle) Poisson model in which one linear predictor \ncontrols the probability of presence  and the other controls the mean given presence.\nUseable only with gam, the linear predictors are specified via a list of formulae. \nShould be used with care: simply having a large number of zeroes is not an indication of zero inflation. \n","example_call":"ziplss(link = list(\"identity\", \"identity\"))"},"mgcv::mono.con":{"description":"Finds linear constraints sufficient for monotonicity (and\noptionally upper and/or lower boundedness) of a cubic regression\nspline. The basis representation assumed is that given by the\ngam, \"cr\" basis: that is the spline has a set of knots,\nwhich have fixed x values, but the y values of which constitute the\nparameters of the spline.\n","example_call":"mono.con(x, up = TRUE, lower = NA, upper = NA)"},"mgcv::gam.fit":{"description":" This is an internal function of package mgcv. It is a modification\nof the function glm.fit, designed to be called from gam when perfomance iteration is selected (not the default). The major\nmodification is that rather than solving a weighted least squares problem at each IRLS step, \na weighted, penalized least squares problem\nis solved at each IRLS step with smoothing parameters associated with each penalty chosen by GCV or UBRE,\nusing routine magic. \nFor further information on usage see code for gam. Some regularization of the \nIRLS weights is also permitted as a way of addressing identifiability related problems (see \ngam.control). Negative binomial parameter estimation is\nsupported.\n","example_call":"gam.fit(G, start = NULL, etastart = NULL, mustart = NULL, family = gaussian(),"},"mgcv::pcls":{"description":"Solves least squares problems with quadratic penalties subject to linear\nequality and inequality constraints using quadratic programming.\n","example_call":"pcls(M)"},"mgcv::Predict.matrix.cr.smooth":{"description":"The various built in smooth classes for use with gam have associate Predict.matrix \nmethod functions to enable prediction from the fitted model. ","example_call":"Predict.matrix.cr.smooth(object, data)"},"mgcv::notLog":{"description":" It is common practice in statistical optimization to use log-parameterizations when a \nparameter ought to be positive. i.e. if an optimization parameter a should be non-negative then \nwe use a=exp(b) and optimize with respect to the unconstrained parameter b. This often works \nwell, but it does imply a rather limited working range for b: using 8 byte doubles, for example, \nif b's magnitude gets much above 700 then a overflows or underflows. This can cause \nproblems for numerical optimization methods. \n","example_call":"notLog(x)"},"mgcv::tw":{"description":"Tweedie families, designed for use with gam from the mgcv library.\nRestricted to variance function powers between 1 and 2. A useful alternative to quasi when a\nfull likelihood is desirable. Tweedie is for use with fixed p. tw is for use when p\nis to be estimated during fitting. For fixed p between 1 and 2 the Tweedie is an exponential family \ndistribution with variance given by the mean to the power p.\n","example_call":"tw(theta = NULL, link = \"log\", a = 1.01, b = 1.99)"},"mgcv::trind.generator":{"description":"Generates index arrays for upper triangular storage up to order four. Useful when\nworking with higher order derivatives, which generate symmetric arrays. \nMainly intended for internal use.\n","example_call":"trind.generator(K = 2, ifunc = FALSE, reverse = !ifunc)"},"mgcv::bandchol":{"description":"Computes Choleski decomposition of a (symmetric positive definite) band-diagonal matrix, A. \n","example_call":"bandchol(B)"},"mgcv::psum.chisq":{"description":" Evaluates the c.d.f. of a weighted sum of chi-squared random variables\nby the method of Davies (1973, 1980). That is it computes ","example_call":"psum.chisq(q, lb, df = rep(1, length(lb)), nc = rep(0, length(lb)),"},"mgcv::Xbd":{"description":"Routines for computing with discretized model matrices as described in Wood et al. (2017) and Li and Wood (2019).\n","example_call":"Xbd(X, beta, k, ks, ts, dt, v, qc, drop = NULL, lt = NULL)"},"mgcv::extract.lme.cov2":{"description":" This is a service routine for gamm. Extracts \nthe estimated covariance matrix of the data from an lme object, allowing the \nuser control about which levels of random effects to include in this \ncalculation. extract.lme.cov forms the full matrix explicitly:\nextract.lme.cov2 tries to be more economical than this.\n","example_call":"extract.lme.cov2(b, data = NULL, start.level = 1)"},"mgcv::smooth.construct.ps.smooth.spec":{"description":"gam can use univariate P-splines as proposed by Eilers and Marx (1996), \nspecified via terms like s(x,bs=\"ps\"). These terms use B-spline bases \npenalized by discrete penalties applied directly to \nthe basis coefficients. Cyclic P-splines are specified by model terms like s(x,bs=\"cp\",...). \nThese bases can be used in tensor product smooths (see te).\n","example_call":"smooth.construct.ps.smooth.spec(object, data, knots)"},"mgcv::ldTweedie":{"description":"A function to evaluate the log of the Tweedie density for variance powers between 1 and 2, inclusive.\nAlso evaluates first and second derivatives of log density w.r.t. its scale parameter, phi, and p, \nor w.r.t. rho=log(phi) and theta where p = (a+b*exp(theta))/(1+exp(theta)).\n","example_call":"ldTweedie(y, mu = y, p = 1.5, phi = 1, rho = NA, theta = NA,"},"mgcv::dDeta":{"description":"INTERNAL function. Distribution families provide derivatives of the deviance and link w.r.t. mu = inv_link(eta).\nThis routine converts these to the required derivatives of the deviance w.r.t. eta, the linear predictor.\n","example_call":"dDeta(y, mu, wt, theta, fam, deriv = 0)"},"mgcv::ls.size":{"description":"Produces a named array giving the size, in bytes, of the elements of a list.\n","example_call":"ls.size(x)"},"mgcv::ginla":{"description":"Apply Integrated Nested Laplace Approximation (INLA, Rue et al. 2009) to models estimable by gam or bam, using the INLA variant described in Wood (2019). Produces marginal posterior densities for each coefficient, selected coefficients or linear transformations of the coefficient vector. \n","example_call":"ginla(G, A = NULL, nk = 16, nb = 100, J = 1, interactive = FALSE,"},"mgcv::fs.boundary":{"description":"Implements a finite area test function based on one proposed by Tim Ramsay (2002).\n","example_call":"fs.boundary(r0 = 0.1, r = 0.5, l = 3, n.theta = 20)"},"mgcv::gam.check":{"description":" Takes a fitted gam object produced by gam() and produces some diagnostic information\nabout the fitting procedure and results. The default is to produce 4 residual\nplots, some information about the convergence of the smoothness selection optimization, and to run \ndiagnostic tests of whether the basis dimension choises are adequate. Care should be taken in interpreting the results when applied to gam objects returned by gamm.\n","example_call":"gam.check(b, old.style = FALSE, type = c(\"deviance\", \"pearson\","},"mgcv::gam2objective":{"description":"Estimation of GAM smoothing parameters is most stable if\noptimization of the UBRE/AIC or GCV score is outer to the penalized iteratively\nre-weighted least squares scheme used to estimate the model given smoothing \nparameters. These functions evaluate the GCV/UBRE/AIC score of a GAM model, given\nsmoothing parameters, in a manner suitable for use by optim or nlm.\nNot normally called directly, but rather service routines for gam.outer.\n","example_call":"gam2objective(lsp, args, ...)"},"mgcv::Predict.matrix.t2.smooth":{"description":"The various built in smooth classes for use with gam have associate Predict.matrix \nmethod functions to enable prediction from the fitted model. ","example_call":"Predict.matrix.t2.smooth(object, data)"},"mgcv::smooth.construct.ds.smooth.spec":{"description":"Thin plate spline smoothers are a special case of the isotropic splines discussed in Duchon (1977). A subset of this more \ngeneral class can be invoked by terms like s(x,z,bs=\"ds\",m=c(1,.5) in a gam model formula.\nIn the notation of Duchon (1977) m is given by m[1] (default value 2), while s is given by m[2] (default value 0).\n","example_call":"smooth.construct.ds.smooth.spec(object, data, knots)"},"mgcv::extract.lme.cov":{"description":" This is a service routine for gamm. Extracts \nthe estimated covariance matrix of the data from an lme object, allowing the \nuser control about which levels of random effects to include in this \ncalculation. extract.lme.cov forms the full matrix explicitly:\nextract.lme.cov2 tries to be more economical than this.\n","example_call":"extract.lme.cov(b, data = NULL, start.level = 1)"},"mgcv::choldrop":{"description":"Given a Cholesky factor, R, of a matrix, A, choldrop finds the Cholesky factor of A[-k,-k],\nwhere k is an integer. cholup finds the factor of A + uu^T (update) or A - uu^T (downdate).\n","example_call":"choldrop(R, k)"},"mgcv::spasm.construct":{"description":"These are experimental sparse smoothing functions, and should \nbe left well alone!\n","example_call":"spasm.construct(object, data)"},"mgcv::print.anova.gam":{"description":" Performs hypothesis tests relating to one or more fitted\ngam objects. For a single fitted gam object, Wald tests of\nthe significance of each parametric and smooth term are performed, so interpretation \nis analogous to drop1 rather than anova.lm (i.e. it's like type III ANOVA, \nrather than a sequential type I ANOVA). Otherwise the fitted models are compared using an analysis of deviance table or GLRT test: this latter approach should not be use to test the significance of terms which can be penalized \nto zero. Models to be compared should be fitted to the same data using the same smoothing parameter selection method.\n","example_call":"print.anova.gam(x, digits = max(3, getOption(\"digits\") - 3), ...)"},"mgcv::rig":{"description":"Generates inverse Gaussian random deviates.\n","example_call":"rig(n, mean, scale)"},"mgcv::place.knots":{"description":"Given a univariate array of covariate values, places a set of knots for a regression spline evenly through the \ncovariate values.\n","example_call":"place.knots(x, nk)"},"mgcv::fix.family.link":{"description":" Generalized Additive Model fitting by <U+2018>outer<U+2019> iteration,\nrequires extra derivatives of the variance and link functions to be \nadded to family objects. The first 3 functions add what is needed. Model checking can\nbe aided by adding quantile and random deviate generating functions to the family. \nThe final two functions do this.\n","example_call":"fix.family.link(fam)"},"mgcv::cholup":{"description":"Given a Cholesky factor, R, of a matrix, A, choldrop finds the Cholesky factor of A[-k,-k],\nwhere k is an integer. cholup finds the factor of A + uu^T (update) or A - uu^T (downdate).\n","example_call":"cholup(R, u, up = TRUE)"},"mgcv::Predict.matrix.duchon.spline":{"description":"Thin plate spline smoothers are a special case of the isotropic splines discussed in Duchon (1977). A subset of this more \ngeneral class can be invoked by terms like s(x,z,bs=\"ds\",m=c(1,.5) in a gam model formula.\nIn the notation of Duchon (1977) m is given by m[1] (default value 2), while s is given by m[2] (default value 0).\n","example_call":"Predict.matrix.duchon.spline(object, data)"},"mgcv::fs.test":{"description":"Implements a finite area test function based on one proposed by Tim Ramsay (2002).\n","example_call":"fs.test(x, y, r0 = 0.1, r = 0.5, l = 3, b = 1, exclude = TRUE)"},"mgcv::negbin":{"description":"The gam modelling function is designed to be able to use \nthe negbin family (a modification of MASS library negative.binomial family \nby Venables and Ripley), or the nb function designed for integrated estimation of \nparameter theta. \\theta is the parameter such that var(y) = \\mu + \\mu^2/\\theta, where \\mu = E(y).\n","example_call":"negbin(theta = stop(\"'theta' must be specified\"), link = \"log\")"},"mgcv::sp.vcov":{"description":" Extracts the estimated covariance matrix for the log smoothing parameter\nestimates from a (RE)ML estimated gam object, provided the fit was with a method \nthat evaluated the required Hessian.\n","example_call":"sp.vcov(x, edge.correct = TRUE, reg = 0.001)"},"mgcv::diagXVXd":{"description":"Routines for computing with discretized model matrices as described in Wood et al. (2017) and Li and Wood (2019).\n","example_call":"diagXVXd(X, V, k, ks, ts, dt, v, qc, drop = NULL, nthreads = 1,"},"mgcv::r.mvt":{"description":" Generates multivariate normal or t random deviates, and evaluates the corresponding log densities.\n","example_call":"r.mvt(n, mu, V, df)"},"mgcv::smooth.construct.re.smooth.spec":{"description":"gam can deal with simple independent random effects, by exploiting the link \nbetween smooths and random effects to treat random effects as smooths. s(x,bs=\"re\") implements \nthis. Such terms can can have any number of predictors, which can be any mixture of numeric or factor \nvariables. The terms produce a parametric interaction of the predictors, and penalize the corresponding \ncoefficients with a multiple of the identity matrix, corresponding to an assumption of i.i.d. normality.\nSee details.\n","example_call":"smooth.construct.re.smooth.spec(object, data, knots)"},"mgcv::Predict.matrix.random.effect":{"description":"gam can deal with simple independent random effects, by exploiting the link \nbetween smooths and random effects to treat random effects as smooths. s(x,bs=\"re\") implements \nthis. Such terms can can have any number of predictors, which can be any mixture of numeric or factor \nvariables. The terms produce a parametric interaction of the predictors, and penalize the corresponding \ncoefficients with a multiple of the identity matrix, corresponding to an assumption of i.i.d. normality.\nSee details.\n","example_call":"Predict.matrix.random.effect(object, data)"},"mgcv::Tweedie":{"description":"Tweedie families, designed for use with gam from the mgcv library.\nRestricted to variance function powers between 1 and 2. A useful alternative to quasi when a\nfull likelihood is desirable. Tweedie is for use with fixed p. tw is for use when p\nis to be estimated during fitting. For fixed p between 1 and 2 the Tweedie is an exponential family \ndistribution with variance given by the mean to the power p.\n","example_call":"Tweedie(p = 1, link = power(0))"},"mgcv::plot.gam":{"description":" Takes a fitted gam object produced by gam() and plots the \ncomponent smooth functions that make it up, on the scale of the linear\npredictor. Optionally produces term plots for parametric model components\nas well.","example_call":"plot.gam(x, residuals = FALSE, rug = NULL, se = TRUE, pages = 0,"},"mgcv::summary.gam":{"description":" Takes a fitted gam object produced by gam() and produces various useful\nsummaries from it. (See sink to divert output to a file.)\n","example_call":"summary.gam(object, dispersion = NULL, freq = FALSE, re.test = TRUE,"},"mgcv::totalPenaltySpace":{"description":"INTERNAL function to obtain (orthogonal) basis for the null space and\nrange space of the penalty, and obtain actual null space dimension\ncomponents are roughly rescaled to avoid any dominating.\n","example_call":"totalPenaltySpace(S, H, off, p)"},"mgcv::print.summary.gam":{"description":" Takes a fitted gam object produced by gam() and produces various useful\nsummaries from it. (See sink to divert output to a file.)\n","example_call":"print.summary.gam(x, digits = max(3, getOption(\"digits\") - 3), signif.stars = getOption(\"show.signif.stars\"),"},"mgcv::formXtViX":{"description":" This is a service routine for gamm. Given,\nV, an estimated covariance matrix obtained using extract.lme.cov2 this\nroutine forms a matrix square root of  X^TV^{-1}X as efficiently as possible, given\nthe structure of V (usually sparse).\n","example_call":"formXtViX(V, X)"},"mgcv::scat":{"description":"Family for use with gam or bam, implementing regression for the heavy tailed response\nvariables, y, using a scaled t model. The idea is that (y-\\mu)/\\sigma \\sim t_\\nu  where \nmu is determined by a linear predictor, while \\sigma and \\nu are parameters \nto be estimated alongside the smoothing parameters.\n","example_call":"scat(theta = NULL, link = \"identity\", min.df = 3)"},"mgcv::fix.family.rd":{"description":" Generalized Additive Model fitting by <U+2018>outer<U+2019> iteration,\nrequires extra derivatives of the variance and link functions to be \nadded to family objects. The first 3 functions add what is needed. Model checking can\nbe aided by adding quantile and random deviate generating functions to the family. \nThe final two functions do this.\n","example_call":"fix.family.rd(fam)"},"mgcv::model.matrix.gam":{"description":"Obtains the model matrix from a fitted gam object.\n","example_call":"model.matrix.gam(object, ...)"},"mgcv::trichol":{"description":"Computes Choleski decomposition of a (symmetric positive definite) tri-diagonal matrix stored as a leading diagonal and sub/super diagonal.\n","example_call":"trichol(ld, sd)"},"mgcv::smooth.construct.mrf.smooth.spec":{"description":"For data observed over discrete spatial units, a simple Markov random field \nsmoother is sometimes appropriate. These functions provide such a smoother class for mgcv. \nSee details for how to deal with regions with missing data.\n","example_call":"smooth.construct.mrf.smooth.spec(object, data, knots)"},"mgcv::XWXd":{"description":"Routines for computing with discretized model matrices as described in Wood et al. (2017) and Li and Wood (2019).\n","example_call":"XWXd(X, w, k, ks, ts, dt, v, qc, nthreads = 1, drop = NULL,"},"mgcv::polys.plot":{"description":" Produces plots of geographic regions defined by polygons, optionally filling the \npolygons with a color or grey shade dependent on a covariate.\n","example_call":"polys.plot(pc, z = NULL, scheme = \"heat\", lab = \"\", ...)"},"mgcv::Predict.matrix.Bspline.smooth":{"description":"gam can use smoothing splines based on univariate B-spline bases\nwith derivative based penalties, specified via terms like s(x,bs=\"bs\",m=c(3,2)). m[1] controls the spline order, with m[1]=3 being a cubic spline, m[1]=2 being quadratic, and so on. The integrated square of the m[2]th derivative is used as the penalty. So m=c(3,2) is a conventional cubic spline. Any further elements of m, after the first 2, define the order of derivative in further penalties. If m is supplied as a single number, then it is taken to be m[1] and m[2]=m[1]-1, which is only a conventional smoothing spline in the m=3, cubic spline case. Notice that the definition of the spline order in terms of m[1] is intuitive, but differs to that used with the tprs and p.spline bases. See details for options for controlling the interval over which the penalty is evaluated (which can matter if it is necessary to extrapolate).\n","example_call":"Predict.matrix.Bspline.smooth(object, data)"},"mgcv::FFdes":{"description":"Computes level 5 fractional factorial designs for up to 120 factors\nusing the agorithm of Sanchez and Sanchez (2005), and optionally central composite designs.\n","example_call":"FFdes(size = 5, ccd = FALSE)"},"mgcv::nb":{"description":"The gam modelling function is designed to be able to use \nthe negbin family (a modification of MASS library negative.binomial family \nby Venables and Ripley), or the nb function designed for integrated estimation of \nparameter theta. \\theta is the parameter such that var(y) = \\mu + \\mu^2/\\theta, where \\mu = E(y).\n","example_call":"nb(theta = NULL, link = \"log\")"},"mgcv::sdiag<-":{"description":" Extracts or modifies sub- or super- diagonals of a matrix.\n","example_call":"sdiag<-(A, k = 0, value)"},"mgcv::Predict.matrix.sw":{"description":" Creates a prediction matrix for a soap film smooth object,\nmapping the coefficients of the smooth to the linear predictor component for\nthe smooth.  This is the Predict.matrix method function required by gam.\n","example_call":"Predict.matrix.sw(object, data)"},"mgcv::cnorm":{"description":"Family for use with gam or bam, implementing regression for censored\nnormal data. If y is the response with mean \\mu and standard deviation w^{-1/2}\\exp(\\theta),\nthen w^{1/2}(y-\\mu)\\exp(-\\theta) follows an N(0,1) distribution. That is\n","example_call":"cnorm(theta = NULL, link = \"identity\")"},"mgcv::smooth.construct.gp.smooth.spec":{"description":"Gaussian process/kriging models based on simple covariance functions can be written in a very similar form to thin plate and Duchon spline models (e.g. Handcock, Meier, Nychka, 1994), and low rank versions produced by the eigen approximation method of Wood (2003). Kammann and Wand (2003) suggest a particularly simple form of the Matern covariance function with only a single smoothing parameter to estimate, and this class implements this and other similar models.  \n","example_call":"smooth.construct.gp.smooth.spec(object, data, knots)"},"mgcv::print.gam":{"description":" The default print method for a gam object. \n","example_call":"print.gam(x, ...)"},"mgcv::multinom":{"description":"Family for use with gam, implementing regression for categorical response data. Categories must be coded 0 to K, where K is a positive integer. gam should be called with a list of K formulae, one for each category except category zero (extra formulae for shared terms may also be supplied: see formula.gam). The first formula also specifies the response variable.      \n","example_call":"multinom(K = 1)"},"mgcv::smooth.construct.tensor.smooth.spec":{"description":"A special smooth.construct method function for creating tensor product smooths from any\ncombination of single penalty marginal smooths.\n","example_call":"smooth.construct.tensor.smooth.spec(object, data, knots)"},"mgcv::gam2derivative":{"description":"Estimation of GAM smoothing parameters is most stable if\noptimization of the UBRE/AIC or GCV score is outer to the penalized iteratively\nre-weighted least squares scheme used to estimate the model given smoothing \nparameters. These functions evaluate the GCV/UBRE/AIC score of a GAM model, given\nsmoothing parameters, in a manner suitable for use by optim or nlm.\nNot normally called directly, but rather service routines for gam.outer.\n","example_call":"gam2derivative(lsp, args, ...)"},"mgcv::Predict.matrix.tprs.smooth":{"description":"The various built in smooth classes for use with gam have associate Predict.matrix \nmethod functions to enable prediction from the fitted model. ","example_call":"Predict.matrix.tprs.smooth(object, data)"},"mgcv::cox.ph":{"description":"The cox.ph family implements the Cox Proportional Hazards model with Peto's \ncorrection for ties, optional stratification, and estimation by penalized partial likelihood maximization, for use with \ngam. In the model formula, event time is the response. Under stratification the response has two columns: time\nand a numeric index for stratum.  The weights vector provides \nthe censoring information (0 for censoring, 1 for event). cox.ph deals with the case in which each subject has\none event/censoring time and one row of covariate values. When each subject has several time dependent\ncovariates see cox.pht. \n","example_call":"cox.ph(link = \"identity\")"},"mgcv::fix.family.ls":{"description":" Generalized Additive Model fitting by <U+2018>outer<U+2019> iteration,\nrequires extra derivatives of the variance and link functions to be \nadded to family objects. The first 3 functions add what is needed. Model checking can\nbe aided by adding quantile and random deviate generating functions to the family. \nThe final two functions do this.\n","example_call":"fix.family.ls(fam)"},"mgcv::cSplineDes":{"description":" Uses splineDesign to set up the model matrix for a cyclic B-spline basis.\n","example_call":"cSplineDes(x, knots, ord = 4, derivs = 0)"},"mgcv::shash":{"description":"The shash family implements the four-parameter sinh-arcsinh (shash) distribution of \nJones and Pewsey (2009). The location, scale, skewness and kurtosis of the density can depend \non additive smooth predictors. Useable only with gam, the linear predictors are specified \nvia a list of formulae. It is worth carefully considering whether the data are sufficient to support\nestimation of such a flexible model before using it.\n","example_call":"shash(link = list(\"identity\", \"logeb\", \"identity\", \"identity\"),"},"mgcv::predict.gam":{"description":" Takes a fitted gam object produced by gam() \nand produces predictions given a new set of values for the model covariates \nor the original values used for the model fit. Predictions can be accompanied\nby standard errors, based on the posterior distribution of the model\ncoefficients. The routine can optionally return the matrix by which the model\ncoefficients must be pre-multiplied in order to yield the values of the linear predictor at\nthe supplied covariate values: this is useful for obtaining credible regions\nfor quantities derived from the model (e.g. derivatives of smooths), and for lookup table prediction outside\nR (see example code below).","example_call":"predict.gam(object, newdata, type = \"link\", se.fit = FALSE, terms = NULL,"},"mgcv::Predict.matrix.mrf.smooth":{"description":"For data observed over discrete spatial units, a simple Markov random field \nsmoother is sometimes appropriate. These functions provide such a smoother class for mgcv. \nSee details for how to deal with regions with missing data.\n","example_call":"Predict.matrix.mrf.smooth(object, data)"},"mgcv::residuals.gam":{"description":"Returns residuals for a fitted gam model\nobject. Pearson, deviance, working and response residuals are\navailable. \n","example_call":"residuals.gam(object, type = \"deviance\", ...)"},"mgcv::zipll":{"description":"The ziplss family implements a zero inflated (hurdle) Poisson model in which one linear predictor \ncontrols the probability of presence  and the other controls the mean given presence.\nUseable only with gam, the linear predictors are specified via a list of formulae. \nShould be used with care: simply having a large number of zeroes is not an indication of zero inflation. \n","example_call":"zipll(y, g, eta, deriv = 0)"},"mgcv::mroot":{"description":" Find a square root of a positive semi-definite matrix, \nhaving as few columns as possible. Uses either pivoted choleski \ndecomposition or singular value decomposition to do this.  \n","example_call":"mroot(A, rank = NULL, method = \"chol\")"},"mgcv::fixDependence":{"description":"Identifies columns of a matrix X2 which are linearly\ndependent on columns of a matrix X1. Primarily of use in setting up \nidentifiability constraints for nested GAMs. \n","example_call":"fixDependence(X1, X2, tol = .Machine$double.eps^0.5, rank.def = 0,"},"mgcv::logLik.gam":{"description":" Function to extract the log-likelihood for a fitted gam\nmodel (note that the models are usually fitted by penalized likelihood maximization). \nUsed by AIC. See details for more information on AIC computation.  \n","example_call":"logLik.gam(object, ...)"},"mgcv::%.%":{"description":"Produce model matrices or penalty matrices for a tensor product smooth from the model matrices or\npenalty matrices for the marginal bases of the smooth (marginals and results can be sparse). The model matrix construction uses row Kronecker products.\n","example_call":"%.%(a, b)"},"mgcv::d.mvt":{"description":" Generates multivariate normal or t random deviates, and evaluates the corresponding log densities.\n","example_call":"d.mvt(x, mu, V, df, R = NULL)"},"mgcv::tensor.prod.model.matrix":{"description":"Produce model matrices or penalty matrices for a tensor product smooth from the model matrices or\npenalty matrices for the marginal bases of the smooth (marginals and results can be sparse). The model matrix construction uses row Kronecker products.\n","example_call":"tensor.prod.model.matrix(X)"},"mgcv::k.check":{"description":" Takes a fitted gam object produced by gam() and runs \ndiagnostic tests of whether the basis dimension choises are adequate. \n","example_call":"k.check(b, subsample = 5000, n.rep = 400)"},"mgcv::smooth.construct":{"description":"Smooth terms in a GAM formula are turned into smooth specification objects of \nclass xx.smooth.spec during processing of the formula. Each of these objects is\nconverted to a smooth object using an appropriate smooth.construct function. New smooth classes \ncan be added by writing a new smooth.construct method function and a corresponding \nPredict.matrix method function (see example code below).\n","example_call":"smooth.construct(object, data, knots)"},"mgcv::gevlss":{"description":"The gevlss family implements Generalized Extreme Value location scale additive models in which the location, scale and shape parameters depend on additive smooth predictors. Usable \nonly with gam, the linear predictors are specified via a list of formulae.\n","example_call":"gevlss(link = list(\"identity\", \"identity\", \"logit\"))"},"mgcv::Sl.setup":{"description":"INTERNAL function for setting up a list representing a block diagonal penalty matrix\nfrom the object produced by gam.setup.\n","example_call":"Sl.setup(G, cholesky = FALSE, no.repara = FALSE, sparse = FALSE)"},"mgcv::Predict.matrix.tensor.smooth":{"description":"The various built in smooth classes for use with gam have associate Predict.matrix \nmethod functions to enable prediction from the fitted model. ","example_call":"Predict.matrix.tensor.smooth(object, data)"},"mgcv::Rrank":{"description":"Finds rank of upper triangular matrix R, by estimating condition\nnumber of upper rank by rank block, and reducing rank \nuntil this is acceptably low. Assumes R has been computed by a method that uses \npivoting, usually pivoted QR or Choleski.\n","example_call":"Rrank(R, tol = .Machine$double.eps^0.9)"},"mgcv::magic":{"description":"Function to efficiently estimate smoothing parameters in generalized\nridge regression problems with multiple (quadratic) penalties, by GCV \nor UBRE. The function uses Newton's method in multi-dimensions, backed up by \nsteepest descent to iteratively adjust the smoothing parameters for each penalty \n(one penalty may have a smoothing parameter fixed at 1). \n","example_call":"magic(y, X, sp, S, off, L = NULL, lsp0 = NULL, rank = NULL,"},"mgcv::gamSim":{"description":" Function used to simulate data sets to illustrate the use of \ngam and gamm. Mostly used in help files to keep down \nthe length of the example code sections.\n","example_call":"gamSim(eg = 1, n = 400, dist = \"normal\", scale = 2, verbose = TRUE)"},"mgcv::gam.vcomp":{"description":"GAMs can be viewed as mixed models, where the smoothing parameters are related to variance \ncomponents. This routine extracts the estimated variance components associated with each smooth term, and if possible returns confidence intervals on the standard deviation scale.\n","example_call":"gam.vcomp(x, rescale = TRUE, conf.lev = 0.95)"},"mgcv::Sl.initial.repara":{"description":"INTERNAL routine to apply initial Sl re-parameterization to model matrix X,\nor, if inverse==TRUE, to apply inverse re-parametrization to parameter vector \nor covariance matrix.\n","example_call":"Sl.initial.repara(Sl, X, inverse = FALSE, both.sides = TRUE, cov = TRUE,"},"mgcv::s":{"description":" Function used in definition of smooth terms within\ngam model formulae. The function does not evaluate a (spline)\nsmooth - it exists purely to help set up a model using spline based smooths.\n","example_call":"s(..., k = -1, fx = FALSE, bs = \"tp\", m = NA, by = NA,"},"mgcv::dpnorm":{"description":"Evaluates the difference between two N(0,1) cumulative distribution functions avoiding cancellation error.  \n","example_call":"dpnorm(x0, x1)"},"mgcv::ocat":{"description":"Family for use with gam or bam, implementing regression for ordered categorical data.\nA linear predictor provides the expected value of a latent variable following a logistic distribution. The \nprobability of this latent variable lying between certain cut-points provides the probability of the ordered \ncategorical variable being of the corresponding category. The cut-points are estimated along side the model \nsmoothing parameters (using the same criterion). The observed categories are coded 1, 2, 3, ... up to the \nnumber of categories. \n","example_call":"ocat(theta = NULL, link = \"identity\", R = NULL)"},"mgcv::mvn":{"description":"Family for use with gam implementing smooth multivariate Gaussian regression. \nThe means for each dimension are given by a separate linear predictor, which may contain smooth components. Extra linear predictors may also be specified giving terms which are shared between components (see formula.gam). The Choleski factor of the response precision matrix is estimated as part of fitting.\n","example_call":"mvn(d = 2)"},"mgcv::smooth.construct2":{"description":"Smooth terms in a GAM formula are turned into smooth specification objects of \nclass xx.smooth.spec during processing of the formula. Each of these objects is\nconverted to a smooth object using an appropriate smooth.construct function. New smooth classes \ncan be added by writing a new smooth.construct method function and a corresponding \nPredict.matrix method function (see example code below).\n","example_call":"smooth.construct2(object, data, knots)"},"mgcv::Predict.matrix.soap.film":{"description":" Creates a prediction matrix for a soap film smooth object,\nmapping the coefficients of the smooth to the linear predictor component for\nthe smooth.  This is the Predict.matrix method function required by gam.\n","example_call":"Predict.matrix.soap.film(object, data)"},"mgcv::smooth.construct.sos.smooth.spec":{"description":"gam can use isotropic smooths on the sphere, via terms like \ns(la,lo,bs=\"sos\",m=2,k=100). There must be exactly 2 arguments to such a smooth. \nThe first is taken to be latitude (in degrees) and the second longitude (in degrees). \nm (default 0) is an integer in the range -1 to 4 determining the order of the penalty used. \nFor m>0, (m+2)/2 is the penalty order, with m=2 equivalent to the usual second \nderivative penalty. m=0 signals to use the 2nd order spline on the sphere, computed by \nWendelberger's (1981) method. m = -1 results in a Duchon.spline being \nused (with m=2 and s=1/2), following an unpublished suggestion of Jean Duchon.\n","example_call":"smooth.construct.sos.smooth.spec(object, data, knots)"},"mgcv::gam.outer":{"description":"Estimation of GAM smoothing parameters is most stable if\noptimization of the smoothness selection score (GCV, GACV, UBRE/AIC, REML, ML etc) \nis outer to the penalized iteratively\nre-weighted least squares scheme used to estimate the model given smoothing \nparameters.\n","example_call":"gam.outer(lsp, fscale, family, control, method, optimizer, criterion,"},"mgcv::magic.post.proc":{"description":"Obtains Bayesian parameter covariance matrix, frequentist\nparameter estimator covariance matrix, estimated degrees of \nfreedom for each parameter and leading diagonal of influence/hat matrix, \nfor a penalized regression estimated by magic.\n","example_call":"magic.post.proc(X, object, w = NULL)"},"mgcv::spasm.sp":{"description":"These are experimental sparse smoothing functions, and should \nbe left well alone!\n","example_call":"spasm.sp(object, sp, w = rep(1, object$nobs), get.trH = TRUE,"},"mgcv::smooth.construct.sw.smooth.spec":{"description":" Sets up basis functions and wiggliness penalties for\nsoap film smoothers (Wood, Bravington and Hedley, 2008). Soap film smoothers are based on the idea of\nconstructing a 2-D smooth as a film of soap connecting a smoothly varying\nclosed boundary. Unless smoothing very heavily, the film is distorted towards\nthe data. The smooths are designed not to smooth across boundary features (peninsulas,\nfor example).\n","example_call":"smooth.construct.sw.smooth.spec(object, data, knots)"},"mgcv::qq.gam":{"description":"Takes a fitted gam object produced by gam() and produces\nQQ plots of its residuals (conditional on the fitted model\ncoefficients and scale parameter). If the model distributional\nassumptions are met then usually these plots should be close to a\nstraight line (although discrete data can yield marked random\ndepartures from this line). \n","example_call":"qq.gam(object, rep = 0, level = 0.9, s.rep = 10, type = c(\"deviance\","},"mgcv::formula.gam":{"description":" Description of gam formula (see Details), and how to extract it from a fitted gam object.\n","example_call":"formula.gam(x, ...)"},"mgcv::sdiag":{"description":" Extracts or modifies sub- or super- diagonals of a matrix.\n","example_call":"sdiag(A, k = 0)"},"mgcv::null.space.dimension":{"description":" The thin plate spline penalties give zero penalty to some\nfunctions. The space of these functions is spanned by a set of\npolynomial terms. null.space.dimension finds the dimension of this space, M, given\nthe number of covariates that the smoother is a function of, d,\nand the order of the smoothing penalty, m. If m does not\nsatisfy 2m>d then the smallest possible dimension\nfor the null space is found given d and the requirement that\nthe smooth should be visually smooth.  \n","example_call":"null.space.dimension(d, m)"},"mgcv::gam.side":{"description":" GAM formulae with repeated variables may only correspond to\nidentifiable models given some side conditions. This routine works \nout appropriate side conditions, based on zeroing redundant parameters.\nIt is called from mgcv:::gam.setup and is not intended to be called by users. \n","example_call":"gam.side(sm, Xp, tol = .Machine$double.eps^0.5, with.pen = FALSE)"},"mgcv::ldetS":{"description":"INTERNAL function calculating the log generalized determinant of penalty matrix S stored blockwise in an Sl list\n(which is the output of Sl.setup).\n","example_call":"ldetS(Sl, rho, fixed, np, root = FALSE, repara = TRUE, nt = 1,"},"mgcv::smooth.construct.cr.smooth.spec":{"description":"gam can use univariate penalized cubic regression spline smooths, specified via terms like\ns(x,bs=\"cr\"). s(x,bs=\"cs\") specifies a penalized cubic regression spline which has had its penalty modified \nto shrink towards zero at high enough smoothing parameters (as the smoothing parameter goes to infinity a normal cubic spline tends to a \nstraight line.) s(x,bs=\"cc\") specifies a cyclic penalized cubic regression spline smooth.\n","example_call":"smooth.construct.cr.smooth.spec(object, data, knots)"},"mgcv::pdIdnot":{"description":" This set of functions is a modification of the  pdMat class pdIdent\nfrom library nlme. The modification is to replace the log parameterization used in pdMat\nwith a notLog2 parameterization, since the latter avoids\nindefiniteness in the likelihood and associated convergence problems: the\nparameters also relate to variances rather than standard deviations, for\nconsistency with the pdTens class. The functions are particularly useful for\nworking with Generalized Additive Mixed Models where variance parameters/smoothing parameters can\nbe very large or very small, so that overflow or underflow can be a problem.\n","example_call":"pdIdnot(value = numeric(0), form = NULL, nam = NULL, data = sys.frame(sys.parent()))"},"mgcv::slanczos":{"description":" Uses Lanczos iteration to find the truncated eigen-decomposition of a symmetric matrix. \n","example_call":"slanczos(A, k = 10, kl = -1, tol = .Machine$double.eps^0.5,"},"mgcv::XWyd":{"description":"Routines for computing with discretized model matrices as described in Wood et al. (2017) and Li and Wood (2019).\n","example_call":"XWyd(X, w, y, k, ks, ts, dt, v, qc, drop = NULL, ar.stop = -1,"},"mgcv::jagam":{"description":"Facilities to auto-generate model specification code and associated data to simulate with GAMs in JAGS (or BUGS). This is useful for inference about models with complex random effects structure best coded in JAGS. It is a very innefficient approach to making inferences about standard GAMs. The idea is that jagam generates template JAGS code, and associated data, for the smooth part of the model. This template is then directly edited to include other stochastic components. After simulation with the resulting model, facilities are provided for plotting and prediction with the model smooth components. \n","example_call":"jagam(formula, family = gaussian, data = list(), file, weights = NULL,"},"mgcv::vcov.gam":{"description":" Extracts the Bayesian posterior covariance matrix of the\nparameters or frequentist covariance matrix of the parameter estimators \nfrom a fitted gam object.\n","example_call":"vcov.gam(object, sandwich = FALSE, freq = FALSE, dispersion = NULL,"},"mgcv::uniquecombs":{"description":"This routine returns a matrix or data frame containing all the unique rows of the\nmatrix or data frame supplied as its argument. That is, all the duplicate rows are\nstripped out. Note that the ordering of the rows on exit need not be the same\nas on entry. It also returns an index attribute for relating the result back \nto the original matrix. \n","example_call":"uniquecombs(x, ordered = FALSE)"},"mgcv::betar":{"description":"Family for use with gam or bam, implementing regression for beta distributed data on (0,1).\nA linear predictor controls the mean, \\mu of the beta distribution, while the variance is then\n\\mu(1-\\mu)/(1+\\phi), with parameter \\phi being estimated during \nfitting, alongside the smoothing parameters.\n","example_call":"betar(theta = NULL, link = \"logit\", eps = .Machine$double.eps *"},"mgcv::Predict.matrix2":{"description":" Takes smooth objects produced by smooth.construct methods and obtains the matrix mapping \nthe parameters associated with such a smooth to the predicted values of the smooth at a set of new covariate values.\n","example_call":"Predict.matrix2(object, data)"},"mgcv::dmvn":{"description":" Generates multivariate normal or t random deviates, and evaluates the corresponding log densities.\n","example_call":"dmvn(x, mu, V, R = NULL)"},"mgcv::twlss":{"description":"Tweedie family in which the mean, power and scale parameters can all depend on smooth linear predictors. Restricted to estimation via the extended Fellner Schall method of Wood and Fasiolo (2017). Only usable with gam. Tweedie distributions are exponential family with variance given by \\phi \\mu^p where \\phi is a scale parameter, p a parameter (here between 1 and 2) and \\mu is the mean. \n","example_call":"twlss(link = list(\"log\", \"identity\", \"identity\"), a = 1.01,"},"mgcv::spasm.smooth":{"description":"These are experimental sparse smoothing functions, and should \nbe left well alone!\n","example_call":"spasm.smooth(object, X, residual = FALSE, block = 0)"},"mgcv::predict.bam":{"description":" In most cases essentially a wrapper for predict.gam for prediction from a \nmodel fitted by bam. Can compute on a parallel cluster. For models fitted using discrete\nmethods with discrete=TRUE then discrete prediction methods are used instead. \n","example_call":"predict.bam(object, newdata, type = \"link\", se.fit = FALSE, terms = NULL,"},"mgcv::t2":{"description":" Alternative to te for defining tensor product smooths\nin a gam formula. Results in a construction in which the penalties are \nnon-overlapping multiples of identity matrices (with some rows and columns zeroed). \nThe construction, which is due to Fabian Scheipl (mgcv implementation, 2010), is analogous to Smoothing Spline ANOVA \n(Gu, 2002), but using low rank penalized regression spline marginals. The main advantage of this construction \nis that it is useable with gamm4 from package gamm4.\n","example_call":"t2(..., k = NA, bs = \"cr\", m = NA, d = NA, by = NA, xt = NULL,"},"mgcv::Predict.matrix.sf":{"description":" Creates a prediction matrix for a soap film smooth object,\nmapping the coefficients of the smooth to the linear predictor component for\nthe smooth.  This is the Predict.matrix method function required by gam.\n","example_call":"Predict.matrix.sf(object, data)"},"mgcv::smooth.construct.t2.smooth.spec":{"description":"A special smooth.construct method function for creating tensor product smooths from any\ncombination of single penalty marginal smooths, using the construction of Wood, Scheipl and Faraway (2013). \n","example_call":"smooth.construct.t2.smooth.spec(object, data, knots)"},"mgcv::concurvity":{"description":"Produces summary measures of concurvity between gam components.\n","example_call":"concurvity(b, full = TRUE)"},"mgcv::get.var":{"description":" This routine takes a text string and a data frame or list. It first sees if the \nstring is the name of a variable in the data frame/ list. If it is then the value of this variable is returned. \nOtherwise the routine tries to evaluate the expression within the data.frame/list (but nowhere else) and if \nsuccessful returns the result. If neither step works then NULL is returned. The routine is useful for\nprocessing gam formulae. If the variable is a matrix then it is coerced to a numeric vector, by default.","example_call":"get.var(txt, data, vecMat = TRUE)"},"mgcv::Predict.matrix.pspline.smooth":{"description":"The various built in smooth classes for use with gam have associate Predict.matrix \nmethod functions to enable prediction from the fitted model. ","example_call":"Predict.matrix.pspline.smooth(object, data)"},"mgcv::vis.gam":{"description":" Produces perspective or contour plot views of gam model\npredictions, fixing all but the values in view to the  values supplied in cond. \n","example_call":"vis.gam(x, view = NULL, cond = list(), n.grid = 30, too.far = 0,"},"mgcv::gam.fit5.post.proc":{"description":"INTERNAL function for post-processing the output of gam.fit5.\n","example_call":"gam.fit5.post.proc(object, Sl, L, lsp0, S, off, gamma)"},"mgcv::gamlss.gH":{"description":" Mainly intended for internal use with location scale model families.\nGiven the derivatives of the log-likelihood wrt the linear predictor, this function obtains\nthe derivatives and Hessian wrt the regression coefficients and derivatives of\nthe Hessian w.r.t. the smoothing parameters. For input derivative array packing conventions see trind.generator.\n","example_call":"gamlss.gH(X, jj, l1, l2, i2, l3 = 0, i3 = 0, l4 = 0, i4 = 0,"},"mgcv::ziP":{"description":"Family for use with gam or bam, implementing regression for zero inflated Poisson data\nwhen the complimentary log log of the zero probability is linearly dependent on the log of the Poisson parameter. Use with great care, noting that simply having many zero response observations is not an indication of zero inflation: the question is whether you have too many zeroes given the specified model.\n","example_call":"ziP(theta = NULL, link = \"identity\", b = 0)"},"mgcv::notExp2":{"description":"notLog2 and notExp2 are alternatives to log\nand exp or notLog and notExp for\nre-parameterization of variance parameters. They are used by the\npdTens and pdIdnot classes which in turn implement\nsmooths for gamm.\n","example_call":"notExp2(x, d = .Options$mgcv.vc.logrange, b = 1/d)"},"mgcv::gfam":{"description":"Family for use with gam or bam allowing a univariate response vector to be made up of variables from several different distributions. The response variable is supplied as a 2 column matrix, where the first column contains the response observations and the second column indexes the distribution (family) from which it comes. gfam takes a list of families as its single argument.\n","example_call":"gfam(fl)"},"mgcv::interpret.gam":{"description":" This is an internal function of package mgcv. It is a service routine for\ngam which splits off the strictly parametric part of the model formula, returning \nit as a formula, and interprets the smooth parts of the model formula. \n","example_call":"interpret.gam(gf, extra.special = NULL)"},"mgcv::Sl.inirep":{"description":"INTERNAL routine to apply initial Sl re-parameterization to model matrix X,\nor, if inverse==TRUE, to apply inverse re-parametrization to parameter vector \nor covariance matrix.\n","example_call":"Sl.inirep(Sl, X, l = 0, r = 0, nt = 1)"},"mgcv::anova.gam":{"description":" Performs hypothesis tests relating to one or more fitted\ngam objects. For a single fitted gam object, Wald tests of\nthe significance of each parametric and smooth term are performed, so interpretation \nis analogous to drop1 rather than anova.lm (i.e. it's like type III ANOVA, \nrather than a sequential type I ANOVA). Otherwise the fitted models are compared using an analysis of deviance table or GLRT test: this latter approach should not be use to test the significance of terms which can be penalized \nto zero. Models to be compared should be fitted to the same data using the same smoothing parameter selection method.\n","example_call":"anova.gam(object, ..., dispersion = NULL, test = NULL, freq = FALSE)"},"mgcv::gam.control":{"description":" This is an internal function of package mgcv which allows \ncontrol of the numerical options for fitting a GAM. \nTypically users will want to modify the defaults if model fitting fails to\nconverge, or if the warnings are generated which suggest a \nloss of numerical stability during fitting.  To change the default\nchoise of fitting method, see gam arguments method and optimizer.\n","example_call":"gam.control(nthreads = 1, ncv.threads = 1, irls.reg = 0, epsilon = 1e-07,"},"mgcv::Predict.matrix.cs.smooth":{"description":"The various built in smooth classes for use with gam have associate Predict.matrix \nmethod functions to enable prediction from the fitted model. ","example_call":"Predict.matrix.cs.smooth(object, data)"},"mgcv::tensor.prod.penalties":{"description":"Produce model matrices or penalty matrices for a tensor product smooth from the model matrices or\npenalty matrices for the marginal bases of the smooth (marginals and results can be sparse). The model matrix construction uses row Kronecker products.\n","example_call":"tensor.prod.penalties(S)"},"mgcv::smooth.info":{"description":"Takes a smooth specification object and adds extra basis specific information to it before smooth constructor called. Default method returns supplied object unmodified.\n","example_call":"smooth.info(object)"},"mgcv::gammals":{"description":"The gammals family implements gamma location scale additive models in which \nthe log of the mean and the log of the scale parameter (see details) can depend on additive smooth predictors. Useable only with gam, the linear predictors are specified via a list of formulae.\n","example_call":"gammals(link = list(\"identity\", \"log\"), b = -7)"},"mgcv::fix.family.var":{"description":" Generalized Additive Model fitting by <U+2018>outer<U+2019> iteration,\nrequires extra derivatives of the variance and link functions to be \nadded to family objects. The first 3 functions add what is needed. Model checking can\nbe aided by adding quantile and random deviate generating functions to the family. \nThe final two functions do this.\n","example_call":"fix.family.var(fam)"},"mgcv::Sl.repara":{"description":"INTERNAL routine to apply re-parameterization from log-determinant of penalty matrix, ldetS to\nmodel matrix, X, blockwise.\n","example_call":"Sl.repara(rp, X, inverse = FALSE, both.sides = TRUE)"},"mgcv::gam.fit3":{"description":"Estimation of GAM smoothing parameters is most stable if\noptimization of the UBRE/AIC, GCV, GACV, REML or ML score is outer to the penalized iteratively\nre-weighted least squares scheme used to estimate the model given smoothing \nparameters.\n","example_call":"gam.fit3(x, y, sp, Eb, UrS = list(), weights = rep(1, nobs),"},"munsell::darker":{"description":"Decreases the value of the Munsell colour by 1.\n","example_call":"darker(col, steps = 1)"},"munsell::desaturate":{"description":"Decreases the chroma of the Munsell colour by one step steps (multiples of 2).\n","example_call":"desaturate(col, steps = 1)"},"munsell::text_colour":{"description":"Get the appropriate text colour for writing on a munsell colour.\n","example_call":"text_colour(cols)"},"munsell::mnsl2hvc":{"description":"Takes a text specification of a Munsell colour and returns\nthe hue, chroma and value triplet.\n","example_call":"mnsl2hvc(col, ...)"},"munsell::mnsl":{"description":"Take a character string representation of a Munsell colour and returns the \nhex specification of that colour\n","example_call":"mnsl(col, ...)"},"munsell::mnsl_hues":{"description":"Returns a character vector of the Munsell hues in hue order starting at 2.5R and excluding grey (\"N\").\n","example_call":"mnsl_hues()"},"munsell::lighter":{"description":"Increases the value of the Munsell colour.\n","example_call":"lighter(col, steps = 1)"},"munsell::fix_mnsl":{"description":"Takes correctly specified but undefined colours and outputs something\nsensible.  Normally this happens when the chroma is too high.  So,  here\nsensible means the colour with the same hue and value and maximum defined\nchroma.\n","example_call":"fix_mnsl(col)"},"munsell::seq_mnsl":{"description":"Generates a sequence of Munsell colours.  The sequence is generated by \nfinding the closest munsell colours to a equidistant sequence of colours in  #' LUV space.\n","example_call":"seq_mnsl(from, to, n, fix = FALSE)"},"munsell::in_gamut":{"description":"Not all possible correctly formatted Munsell colours result in a colour\nrepresentable in RGB space.  This function checks if the colour is\nrepresentable.\n","example_call":"in_gamut(col, fix = FALSE)"},"munsell::complement":{"description":"Finds the munsell colour with the same chroma and value but on the opposite\nside of the hue circle. The complement is not defined \nfor greys (hue == \"N\"), and the function returns the grey untransformed.\n","example_call":"complement(col, ...)"},"munsell::check_mnsl":{"description":"Checks user supplied munsell specification for validity.  \nI.e. colour is of form \"h v/c\" and h,  v and c take valid values.\n","example_call":"check_mnsl(col)"},"munsell::hvc2mnsl":{"description":"Takes separate specifications of hue, value and chroma and returns the \ntext specification of that colour.\n","example_call":"hvc2mnsl(hue, value = NULL, chroma = NULL, ...)"},"munsell::value_slice":{"description":"Plots slices of the Munsell colour system where value is constant.\n","example_call":"value_slice(value.name = 1:10, back.col = \"white\")"},"munsell::rgb2mnsl":{"description":"Finds the closest Munsell colour (in LUV space) to the specified sRGB colour\n","example_call":"rgb2mnsl(R, G = NULL, B = NULL)"},"munsell::saturate":{"description":"Increases the chroma of the Munsell colour by step steps (multiples of 2).\n","example_call":"saturate(col, steps = 1)"},"munsell::plot_mnsl":{"description":"Takes munsell text specifications and plots colour squares of them.\n","example_call":"plot_mnsl(cols, back.col = \"white\", ...)"},"munsell::mnsl2hex":{"description":"Take a character string representation of a Munsell colour and returns the \nhex specification of that colour\n","example_call":"mnsl2hex(col, ...)"},"munsell::complement_slice":{"description":"Plot a hue and its complement at all values and chromas\n","example_call":"complement_slice(hue.name, back.col = \"white\")"},"munsell::plot_hex":{"description":"Quick way to look at a set of hex colours.\n","example_call":"plot_hex(hex.colour, back.col = \"white\")"},"munsell::chroma_slice":{"description":"Plots slices of the Munsell colour system where chroma is constant.\n","example_call":"chroma_slice(chroma.name = seq(0, 26, by = 2), back.col = \"white\")"},"munsell::plot_closest":{"description":"Take an sRGB colour and plots it along with the closest Munsell colour (using rgb2mnsl to find it)\n","example_call":"plot_closest(R, G = NULL, B = NULL, back.col = \"white\")"},"munsell::rygbp":{"description":"Moves the hue of a munsell colour in the direction red->yellow->green->blue->purple->red\n","example_call":"rygbp(col, steps = 1)"},"munsell::hue_slice":{"description":"Plots slices of the Munsell colour system where hue is constant.\n","example_call":"hue_slice(hue.name = \"all\", back.col = \"white\")"},"munsell::pbgyr":{"description":"Moves the hue of a munsell colour in the direction purple->blue->green->yellow->red->purple\n","example_call":"pbgyr(col, steps = 1)"},"nlme::pdIdent":{"description":"This function is a constructor for the pdIdent class,\nrepresenting a multiple of the identity positive-definite matrix. \nThe matrix associated with object is represented by 1\nunrestricted parameter, given by the logarithm of the square-root of\nthe diagonal value. When value is \nnumeric(0), an uninitialized pdMat object, a one-sided\nformula, or a vector of character strings, object is returned\nas an uninitialized pdIdent object (with just some of its\nattributes and its class defined) and needs to have its coefficients\nassigned later, generally using the coef or matrix replacement\nfunctions. If value is an initialized pdMat object,\nobject will be constructed from\nas.matrix(value). Finally, if value is a numeric value,\nit is assumed to represent the unrestricted coefficient of the\nunderlying positive-definite  matrix.  \n","example_call":"pdIdent(value = numeric(0), form = NULL, nam = NULL, data = parent.frame())"},"nlme::varExp":{"description":"This function is a constructor for the varExp class,\nrepresenting an exponential variance function structure. Letting\nv denote the variance covariate and \\sigma^2(v)\ndenote the variance function evaluated at v, the exponential\nvariance function is defined as \\sigma^2(v) = \\exp(2\\theta\n    v), where \\theta is the variance\nfunction coefficient. When a grouping factor is present, a different\n\\theta is used for each factor level.\n","example_call":"varExp(value = numeric(0), form = ~fitted(.), fixed = NULL)"},"nlme::plot.lme":{"description":"Diagnostic plots for the linear mixed-effects fit are obtained. The\nform argument gives considerable flexibility in the type of\nplot specification. A conditioning expression (on the right side of a\n| operator) always implies that different panels are used for\neach level of the conditioning factor, according to a Trellis\ndisplay. If form is a one-sided formula, histograms of the\nvariable on the right hand side of the formula, before a |\noperator, are displayed (the Trellis function histogram is\nused). If form is two-sided and both its left and\nright hand side variables are numeric, scatter plots are displayed\n(the Trellis function xyplot is used). Finally, if form\nis two-sided and its left had side variable is a factor, box-plots of\nthe right hand side variable by the levels of the left hand side\nvariable are displayed (the Trellis function  bwplot is used). \n","example_call":"plot.lme(x, form = resid(., type = \"pearson\") ~ fitted(.), abline,"},"nlme::getCovariate":{"description":"This function is generic; method functions can be written to handle\nspecific classes of objects. Classes which already have methods for\nthis function include corStruct, corSpatial,\ndata.frame, and varFunc.\n","example_call":"getCovariate(object, form = formula(object), data)"},"nlme::coef<-":{"description":"This function is generic; method functions can be written to handle\nspecific classes of objects. Classes which already have methods for\nthis function include all \"pdMat\",\n\"corStruct\" and \"varFunc\" classes,\n\"reStruct\", and \"modelStruct\".\n","example_call":"coef<-(object, ..., value)"},"nlme::corSymm":{"description":"This function is a constructor for the corSymm class,\nrepresenting a general correlation structure. The internal\nrepresentation of this structure, in terms of unconstrained\nparameters, uses the spherical parametrization defined in Pinheiro and\nBates (1996).  Objects created using this constructor must later be\ninitialized using the  appropriate Initialize method. \n","example_call":"corSymm(value = numeric(0), form = ~1, fixed = FALSE)"},"nlme::ranef":{"description":"This function is generic; method functions can be written to handle\nspecific classes of objects. Classes which already have methods for\nthis function include lmList and lme.\n","example_call":"ranef(object, ...)"},"nlme::corMatrix":{"description":"This function is generic; method functions can be written to handle\nspecific classes of objects. Classes which already have methods for\nthis function include all corStruct classes.\n","example_call":"corMatrix(object, ...)"},"nlme::quinModel":{"description":"A model function for a model used with the Quinidine data.\nThis function calls compiled C code.\n","example_call":"quinModel(Subject, time, conc, dose, interval, lV, lKa, lCl)"},"nlme::lmList":{"description":"Data is partitioned according to the levels of the grouping\nfactor g and individual lm fits are obtained for each\ndata partition, using the model defined in object.\n","example_call":"lmList(object, data, level, subset, na.action = na.fail, pool = TRUE,"},"nlme::lmeStruct":{"description":"A linear mixed-effects structure is a list of model components\nrepresenting different sets of parameters in the linear mixed-effects\nmodel. An lmeStruct list must contain at least a\nreStruct object, but may also contain corStruct and\nvarFunc objects. NULL arguments are not included in the\nlmeStruct list. \n","example_call":"lmeStruct(reStruct, corStruct = NULL, varStruct = NULL)"},"nlme::isInitialized":{"description":"Checks if object has been initialized (generally through a call\nto Initialize), by searching for components and attributes\nwhich are modified during initialization.\n","example_call":"isInitialized(object)"},"nlme::pooledSD":{"description":"The pooled estimated standard deviation is obtained by adding together\nthe residual sum of squares for each non-null element of\nobject, dividing by the sum of the corresponding residual\ndegrees-of-freedom, and taking the square-root.\n","example_call":"pooledSD(object)"},"nlme::getGroups":{"description":"This function is generic; method functions can be written to handle\nspecific classes of objects. Classes which already have methods for\nthis function include corStruct, data.frame,\ngls, lme, lmList, and varFunc.\n","example_call":"getGroups(object, form = formula(object), level, data, sep = \"/\")"},"nlme::lme.lmList":{"description":"If the random effects names defined in random are a subset of\nthe lmList object coefficient names, initial estimates for the\ncovariance matrix of the random effects are obtained (overwriting any\nvalues given in random). formula(fixed) and the\ndata argument in the calling sequence used to obtain\nfixed are passed as the fixed and data arguments\nto lme.formula, together with any other additional arguments in\nthe function call. See the documentation on lme.formula for a\ndescription of that function. \n","example_call":"lme.lmList(fixed, data = sys.frame(sys.parent()), random, correlation = NULL,"},"nlme::corExp":{"description":"This function is a constructor for the \"corExp\" class,\nrepresenting an exponential spatial correlation structure. Letting\nd denote the range and n denote the nugget\neffect, the correlation between two observations a distance\nr apart is \\exp(-r/d) when no nugget effect\nis present and (1-n) \\exp(-r/d) when a nugget\neffect is assumed. Objects created using this constructor must later be\ninitialized using the appropriate Initialize method.\n","example_call":"corExp(value = numeric(0), form = ~1, nugget = FALSE, metric = c(\"euclidean\","},"nlme::lme.formula":{"description":"This generic function fits a linear mixed-effects model in the\nformulation described in Laird and Ware (1982) but allowing for nested\nrandom effects. The within-group errors are allowed to be correlated\nand/or have unequal variances.\n","example_call":"lme.formula(fixed, data = sys.frame(sys.parent()), random = pdSymm(eval(as.call(fixed[-2]))),"},"nlme::gapply":{"description":"Applies the function to the distinct sets of rows of the data frame\ndefined by groups.\n","example_call":"gapply(object, which, FUN, form = formula(object), level,"},"nlme::corSpher":{"description":"This function is a constructor for the corSpher class,\nrepresenting a spherical spatial correlation structure. Letting\nd denote the range and n denote the nugget\neffect, the correlation between two observations a distance\nr < d apart is 1-1.5(r/d)+0.5(r/d)^3 when no\nnugget effect is present and (1-n)\n    (1-1.5(r/d)+0.5(r/d)^3)  \nwhen a nugget effect is assumed. If r \\geq d the\ncorrelation is zero. Objects created using this constructor must later\nbe initialized using the appropriate Initialize method. \n","example_call":"corSpher(value = numeric(0), form = ~1, nugget = FALSE, metric = c(\"euclidean\","},"nlme::VarCorr":{"description":"This function calculates the estimated variances, standard\ndeviations, and correlations between the random-effects terms in a\nlinear mixed-effects model, of class \"lme\", or a nonlinear\nmixed-effects model, of class \"nlme\".  The within-group error\nvariance and standard deviation are also calculated.\n","example_call":"VarCorr(x, sigma = 1, ...)"},"nlme::glsStruct":{"description":"A generalized least squares structure is a list of model components\nrepresenting different sets of parameters in the linear \nmodel. A glsStruct  may contain corStruct and\nvarFunc objects. NULL arguments are not included in the\nglsStruct list. \n","example_call":"glsStruct(corStruct = NULL, varStruct = NULL)"},"nlme::collapse":{"description":"This function is generic; method functions can be written to handle\nspecific classes of objects. Currently, only a groupedData\nmethod is available. \n","example_call":"collapse(object, ...)"},"nlme::balancedGrouped":{"description":"Create a groupedData object from a data matrix.  This function\ncan be used only with balanced data.  The opposite conversion, from a\ngroupedData object to a matrix, is done with asTable.\n","example_call":"balancedGrouped(form, data, labels = NULL, units = NULL)"},"nlme::nlme.formula":{"description":"This generic function fits a nonlinear mixed-effects model in the\nformulation described in Lindstrom and Bates (1990) but allowing for nested\nrandom effects. The within-group errors are allowed to be correlated\nand/or have unequal variances.\n","example_call":"nlme.formula(model, data = sys.frame(sys.parent()), fixed, random,"},"nlme::pdSymm":{"description":"This function is a constructor for the pdSymm class,\nrepresenting a general positive-definite matrix. If the matrix\nassociated with object is of dimension n, it is\nrepresented by n(n+1)/2 unrestricted parameters,\nusing the matrix-logarithm parametrization described in Pinheiro and\nBates (1996). When value is numeric(0), an uninitialized\npdMat object, a one-sided\nformula, or a vector of character strings, object is returned\nas an uninitialized pdSymm object (with just some of its\nattributes and its class defined) and needs to have its coefficients\nassigned later, generally using the coef or matrix replacement\nfunctions. If value is an initialized pdMat object,\nobject will be constructed from\nas.matrix(value). Finally, if value is a numeric vector,\nit is assumed to represent the unrestricted coefficients of the\nmatrix-logarithm parametrization of the underlying positive-definite\nmatrix.  \n","example_call":"pdSymm(value = numeric(0), form = NULL, nam = NULL, data = parent.frame())"},"nlme::asOneFormula":{"description":"The names of all variables used in the formulas extracted from the\nobjects defined in ... are converted into a single linear\nformula, with the variables names separated by +. \n","example_call":"asOneFormula(..., omit = c(\".\", \"pi\"))"},"nlme::nlme.nlsList":{"description":"If the random effects names defined in random are a subset of\nthe lmList object coefficient names, initial estimates for the\ncovariance matrix of the random effects are obtained (overwriting any\nvalues given in random). formula(fixed) and the\ndata argument in the calling sequence used to obtain\nfixed are passed as the fixed and data arguments\nto nlme.formula, together with any other additional arguments in\nthe function call. See the documentation on nlme.formula for a\ndescription of that function. \n","example_call":"nlme.nlsList(model, data = sys.frame(sys.parent()), fixed, random = fixed,"},"nlme::phenoModel":{"description":"A model function for a model used with the Phenobarb data.\nThis function uses compiled C code to improve execution speed.\n","example_call":"phenoModel(Subject, time, dose, lCl, lV)"},"nlme::pdMatrix":{"description":"The positive-definite matrix represented by object, or a\nsquare-root factor of it is obtained. Letting \\Sigma denote a\npositive-definite matrix, a square-root factor of \\Sigma is\nany square matrix L such that \\Sigma = L'L. This function extracts \\Sigma or L.\n","example_call":"pdMatrix(object, factor = FALSE)"},"nlme::groupedData":{"description":"An object of the groupedData class is constructed from the\nformula and data by attaching the formula as an\nattribute of the data, along with any of outer, inner,\nlabels, and units that are given.  If\norder.groups is TRUE the grouping factor is converted to\nan ordered factor with the ordering determined by\nFUN. Depending on the number of grouping levels and the type of\nprimary covariate, the returned object will be of one of three\nclasses: nfnGroupedData - numeric covariate, single level of\nnesting; nffGroupedData - factor covariate, single level of\nnesting; and nmGroupedData - multiple levels of\nnesting. Several modeling and plotting functions can use the formula\nstored with a groupedData object to construct default plots and\nmodels. \n","example_call":"groupedData(formula, data = NULL, order.groups = TRUE, FUN = function(x) max(x,"},"nlme::nlsList.formula":{"description":"Data is partitioned according to the levels of the grouping\nfactor defined in model and individual nls fits are\nobtained for each data partition, using the model defined in\nmodel.\n","example_call":"nlsList.formula(model, data, start = NULL, control, level, subset,"},"nlme::Initialize":{"description":"This function is generic; method functions can be written to handle\nspecific classes of objects. Classes which already have methods for\nthis function include: corStruct, lmeStruct,\nreStruct, and varFunc.\n","example_call":"Initialize(object, data, ...)"},"nlme::ACF":{"description":"This function is generic; method functions can be written to handle\nspecific classes of objects. Classes which already have methods for\nthis function include: gls and  lme.\n","example_call":"ACF(object, maxLag, ...)"},"nlme::fdHess":{"description":"Evaluate an approximate Hessian and gradient of a scalar function\nusing finite differences.\n","example_call":"fdHess(pars, fun, ..., .relStep = .Machine$double.eps^(1/3),"},"nlme::lmeControl":{"description":"The values supplied in the lmeControl() call replace the\ndefaults, and a list with all settings (i.e., values for\nall possible arguments) is returned.  The returned list is\nused as the control argument to the lme function.\n","example_call":"lmeControl(maxIter = 50, msMaxIter = 50, tolerance = 1e-06, niterEM = 25,"},"nlme::getResponse":{"description":"This function is generic; method functions can be written to handle\nspecific classes of objects. Classes which already have methods for\nthis function include data.frame, gls, lme,\nand lmList.\n","example_call":"getResponse(object, form = formula(object))"},"nlme::pdLogChol":{"description":"This function is a constructor for the pdLogChol class,\nrepresenting a general positive-definite matrix.  If the matrix\nassociated with object is of dimension n, it is\nrepresented by n(n+1)/2 unrestricted parameters,\nusing the log-Cholesky parametrization described in Pinheiro and\nBates (1996).\n","example_call":"pdLogChol(value = numeric(0), form = NULL, nam = NULL, data = parent.frame())"},"nlme::glsControl":{"description":"The values supplied in the function call replace the defaults and a\nlist with all possible arguments is returned. The returned list is\nused as the control argument to the gls function.\n","example_call":"glsControl(maxIter = 50L, msMaxIter = 200L, tolerance = 1e-06,"},"nlme::glsApVar":{"description":"These are functions used by gls to call its compiled C\ncode. They are exported to allow experimentation with modified versions.\n","example_call":"glsApVar(glsSt, sigma, conLin = attr(glsSt, \"conLin\"), .relStep = .Machine$double.eps^(1/3),"},"nlme::nlmeStruct":{"description":"A nonlinear mixed-effects structure is a list of model components\nrepresenting different sets of parameters in the nonlinear mixed-effects\nmodel. An nlmeStruct list must contain at least a\nreStruct object, but may also contain corStruct and\nvarFunc objects. NULL arguments are not included in the\nnlmeStruct list. \n","example_call":"nlmeStruct(reStruct, corStruct = NULL, varStruct = NULL)"},"nlme::reStruct":{"description":"This function is a constructor for the reStruct class,\nrepresenting a random effects structure and consisting of a list of\npdMat objects, plus a settings attribute containing\ninformation for the optimization algorithm used to fit the associated\nmixed-effects model.\n","example_call":"reStruct(object, pdClass = \"pdLogChol\", REML = FALSE, data = sys.frame(sys.parent()))"},"nlme::getGroupsFormula":{"description":"The conditioning expression associated with formula(object)\n(i.e. the expression after the | operator) is returned either as\na named list of one-sided formulas, or a single one-sided formula,\ndepending on the value of asList. The components of the\nreturned list are ordered from outermost to innermost level and are\nnamed after the grouping factor expression.\n","example_call":"getGroupsFormula(object, asList = FALSE, sep = \"/\")"},"nlme::needUpdate":{"description":"This function is generic; method functions can be written to handle\nspecific classes of objects. By default, it tries to extract a\nneedUpdate attribute of object. If this is NULL\nor FALSE it returns FALSE; else it returns TRUE.\nUpdating of objects usually takes place in iterative algorithms in\nwhich auxiliary quantities associated with the object, and not being\noptimized over, may change.\n","example_call":"needUpdate(object)"},"nlme::corCompSymm":{"description":"This function is a constructor for the corCompSymm class,\nrepresenting a compound symmetry structure corresponding to uniform\ncorrelation. Objects created using this constructor must later be\ninitialized using the appropriate Initialize method. \n","example_call":"corCompSymm(value = 0, form = ~1, fixed = FALSE)"},"nlme::intervals":{"description":"Confidence intervals on the parameters associated with the model\nrepresented by object are obtained. This function is generic;\nmethod functions can be written to handle specific classes of\nobjects. Classes which already have methods for this function include:\ngls, lme, and lmList. \n","example_call":"intervals(object, level = 0.95, ...)"},"nlme::logDet":{"description":"This function is generic; method functions can be written to handle\nspecific classes of objects. Classes which already have methods for\nthis function include: corStruct, several pdMat classes,\nand reStruct. \n","example_call":"logDet(object, ...)"},"nlme::corNatural":{"description":"This function is a constructor for the corNatural class,\nrepresenting a general correlation structure in the <U+201C>natural<U+201D>\nparameterization, which is described under pdNatural.\nObjects created using this constructor must later be\ninitialized using the  appropriate Initialize method. \n","example_call":"corNatural(value = numeric(0), form = ~1, fixed = FALSE)"},"nlme::isBalanced":{"description":"Check the design of the experiment or study for balance.\n","example_call":"isBalanced(object, countOnly = FALSE, level)"},"nlme::gsummary":{"description":"Provide a summary of the variables in a data frame by groups of rows.\nThis is most useful with a groupedData object to examine the\nvariables by group.\n","example_call":"gsummary(object, FUN = function(x) mean(x, na.rm = TRUE), omitGroupingFactor = FALSE,"},"nlme::nfGroupedData":{"description":"These functions are provided for compatibility with older versions of\nnlme only, and may be defunct as soon as the next release.\n","example_call":"nfGroupedData(formula, data = NULL, order.groups = TRUE, FUN = function(x) max(x,"},"nlme::pdCompSymm":{"description":"This function is a constructor for the pdCompSymm class,\nrepresenting a positive-definite matrix with compound symmetry\nstructure (constant diagonal and constant off-diagonal elements). The\nunderlying matrix is represented by 2 unrestricted parameters.\nWhen value is numeric(0), an uninitialized pdMat\nobject, a one-sided formula, or a vector of character strings,\nobject is returned  as an uninitialized pdCompSymm\nobject (with just some of its  attributes and its class defined) and\nneeds to have its coefficients assigned later, generally using the\ncoef or matrix replacement functions. If value is\nan initialized\npdMat object, object will be constructed from \nas.matrix(value). Finally, if value is a numeric vector\nof length 2, it is assumed to represent the unrestricted coefficients\nof the underlying positive-definite matrix.  \n","example_call":"pdCompSymm(value = numeric(0), form = NULL, nam = NULL, data = parent.frame())"},"nlme::compareFits":{"description":"The columns in object1 and object2 are put together in\nmatrices which allow direct comparison of the individual elements for\neach object. Missing columns in either object are replaced by\nNAs.\n","example_call":"compareFits(object1, object2, which = 1:ncol(object1))"},"nlme::comparePred":{"description":"Predicted values are obtained at the specified values of\nprimary for each object. If either object1 or\nobject2 have a grouping structure\n(i.e. getGroups(object) is not NULL), predicted values\nare obtained for each group. When both objects determine groups, the\ngroup levels must be the same. If other covariates besides\nprimary are used in the prediction model, their group-wise averages\n(numeric covariates) or most frequent values (categorical covariates)\nare used to obtain the predicted values. The original observations are\nalso included in the returned object. \n","example_call":"comparePred(object1, object2, primary = NULL, minimum = min(primary),"},"nlme::matrix<-":{"description":"This function is generic; method functions can be written to handle\nspecific classes of objects.  Classes which already have methods for\nthis function include pdMat, pdBlocked, and\nreStruct.\n","example_call":"matrix<-(object, value)"},"nlme::allCoef":{"description":"The extractor function is applied to each object in ..., with\nthe result being converted to a vector. A map attribute is\nincluded to indicate which pieces of the returned vector correspond to\nthe original objects in dots.\n","example_call":"allCoef(..., extract = coef)"},"nlme::varConstPower":{"description":"This function is a constructor for the varConstPower class,\nrepresenting a constant plus power variance function\nstructure. Letting v denote the variance covariate and\n\\sigma^2(v) denote the variance function evaluated at\nv, the constant plus power variance function is defined as\n\\sigma^2(v) = (\\theta_1 + |v|^\\theta_2)^2, where \\theta_1,\\theta_2 are the variance  \nfunction coefficients. When a grouping factor is present, different\n\\theta_1,\\theta_2 are used for each factor level.\n","example_call":"varConstPower(const = numeric(0), power = numeric(0), form = ~fitted(.),"},"nlme::fixed.effects":{"description":"This function is generic; method functions can be written to handle\nspecific classes of objects. Classes which already have methods for\nthis function include lmList and lme.\n","example_call":"fixed.effects(object, ...)"},"nlme::pdConstruct":{"description":"This function is an alternative constructor for the pdMat\nclass associated with object and is mostly used internally in other\nfunctions. See the documentation on the principal constructor\nfunction, generally with the same name as the pdMat class of\nobject. \n","example_call":"pdConstruct(object, value, form, nam, data, ...)"},"nlme::pdMat":{"description":"This function gives an alternative way of constructing an object\ninheriting from the pdMat class named in pdClass, or\nfrom data.class(object) if object inherits from\npdMat,  and is mostly used internally in other functions. See\nthe documentation on the principal constructor function, generally\nwith the same name as the pdMat class of object.\n","example_call":"pdMat(value = numeric(0), form = NULL, nam = NULL, data = parent.frame(),"},"nlme::corFactor":{"description":"This function is generic; method functions can be written to handle\nspecific classes of objects. Classes which already have methods for\nthis function include all corStruct classes.\n","example_call":"corFactor(object, ...)"},"nlme::nlsList":{"description":"Data is partitioned according to the levels of the grouping\nfactor defined in model and individual nls fits are\nobtained for each data partition, using the model defined in\nmodel.\n","example_call":"nlsList(model, data, start, control, level, subset, na.action = na.fail,"},"nlme::varFixed":{"description":"This function is a constructor for the varFixed class,\nrepresenting a variance function with fixed variances. Letting v\ndenote the variance covariate defined in value, the variance\nfunction \\sigma^2(v) for this class is\n\\sigma^2(v)=|v|. The variance covariate v is\nevaluated once at initialization and remains fixed thereafter. No\ncoefficients are required to represent this variance function.\n","example_call":"varFixed(value = ~1)"},"nlme::lme":{"description":"This generic function fits a linear mixed-effects model in the\nformulation described in Laird and Ware (1982) but allowing for nested\nrandom effects. The within-group errors are allowed to be correlated\nand/or have unequal variances.\n","example_call":"lme(fixed, data = sys.frame(sys.parent()), random, correlation = NULL,"},"nlme::nmGroupedData":{"description":"These functions are provided for compatibility with older versions of\nnlme only, and may be defunct as soon as the next release.\n","example_call":"nmGroupedData(formula, data = NULL, order.groups = TRUE, FUN = function(x) max(x,"},"nlme::corRatio":{"description":"This function is a constructor for the corRatio class,\nrepresenting a rational quadratic spatial correlation structure. Letting\nd denote the range and n denote the nugget\neffect, the correlation between two observations a distance\nr apart is 1/(1+(r/d)^2) when no nugget effect\nis present and (1-n)/(1+(r/d)^2) when a\nnugget effect is  assumed. Objects created using this constructor need\nto be later initialized using the appropriate Initialize\nmethod. \n","example_call":"corRatio(value = numeric(0), form = ~1, nugget = FALSE, metric = c(\"euclidean\","},"nlme::lmList.formula":{"description":"Data is partitioned according to the levels of the grouping\nfactor g and individual lm fits are obtained for each\ndata partition, using the model defined in object.\n","example_call":"lmList.formula(object, data, level, subset, na.action = na.fail, pool = TRUE,"},"nlme::gls":{"description":"This function fits a linear model using generalized least\nsquares. The errors are allowed to be correlated and/or have unequal\nvariances.  \n","example_call":"gls(model, data = sys.frame(sys.parent()), correlation = NULL,"},"nlme::Dim":{"description":"This function is generic; method functions can be written to handle\nspecific classes of objects. Classes which already have methods for\nthis function include: \"corSpatial\", \"corStruct\",\n\"pdCompSymm\", \"pdDiag\", \"pdIdent\", \"pdMat\",\nand \"pdSymm\".\n","example_call":"Dim(object, ...)"},"nlme::splitFormula":{"description":"Splits the right hand side of form into a list of subformulas\naccording to the presence of sep. The left hand side of\nform, if present, will be ignored. The length of the returned\nlist will be equal to the number of occurrences of sep in\nform plus one. \n","example_call":"splitFormula(form, sep = \"/\")"},"nlme::getVarCov":{"description":"Extract the variance-covariance matrix from a fitted model, such as a\nmixed-effects model.\n","example_call":"getVarCov(obj, ...)"},"nlme::varWeights":{"description":"The inverse of the standard deviations corresponding to the variance\nfunction structure represented by object are returned.\n","example_call":"varWeights(object)"},"nlme::gnlsControl":{"description":"The values supplied in the function call replace the defaults and a\nlist with all possible arguments is returned. The returned list is\nused as the control argument to the gnls function.\n","example_call":"gnlsControl(maxIter = 50, nlsMaxIter = 7, msMaxIter = 50, minScale = 0.001,"},"nlme::LDEsysMat":{"description":"Generate the system matrix for the linear differential equations\ndetermined by a compartment model.\n","example_call":"LDEsysMat(pars, incidence)"},"nlme::corIdent":{"description":"These functions are provided for compatibility with older versions of\nnlme only, and may be defunct as soon as the next release.\n","example_call":"corIdent(form = NULL)"},"nlme::varConstProp":{"description":"This function is a constructor for the varConstProp class,\nrepresenting a variance function structure corresponding to\na two-component error model (additive and proportional error). Letting\nv denote the variance covariate and \\sigma^2(v)\ndenote the variance function evaluated at v, the two-component variance\nfunction is defined as\n\\sigma^2(v) = a^2 + b^2 * v^{2}, where a is\nthe additive component and b is the relative error component.  In order\nto avoid overparameterisation of the model, it is recommended to use\nthe possibility to fix sigma, preferably to a value of 1 (see examples).\n","example_call":"varConstProp(const = numeric(0), prop = numeric(0), form = ~fitted(.),"},"nlme::pdBlocked":{"description":"This function is a constructor for the pdBlocked class,\nrepresenting a positive-definite block-diagonal matrix. Each\nblock-diagonal element of the underlying  matrix is itself a\npositive-definite matrix and is represented internally as an\nindividual pdMat object. When value is\nnumeric(0), a list of uninitialized pdMat objects, a\nlist of one-sided formulas, or a list of vectors \nof character strings,  object is returned\nas an uninitialized pdBlocked object (with just some of its\nattributes and its class defined) and needs to have its coefficients\nassigned later, generally using the coef or matrix replacement\nfunctions. If value is a list of  initialized pdMat\nobjects, object will be constructed from the list obtained by\napplying as.matrix to each of the pdMat elements of\nvalue. Finally, if value is a list of numeric vectors,\nthey are assumed to represent the unrestricted coefficients\nof the block-diagonal elements of the  underlying positive-definite\nmatrix.  \n","example_call":"pdBlocked(value = numeric(0), form = NULL, nam = NULL, data = parent.frame(),"},"nlme::getData":{"description":"This function is generic; method functions can be written to handle\nspecific classes of objects. Classes which already have methods for\nthis function include gls, lme,\nand lmList.\n","example_call":"getData(object)"},"nlme::covariate<-":{"description":"This function is generic; method functions can be written to handle\nspecific classes of objects. Classes which already have methods for\nthis function include all \"varFunc\" classes.\n","example_call":"covariate<-(object, value)"},"nlme::corAR1":{"description":"This function is a constructor for the corAR1 class,\nrepresenting an autocorrelation structure of order 1. Objects\ncreated using this constructor must later be initialized using the\nappropriate Initialize method. \n","example_call":"corAR1(value = 0, form = ~1, fixed = FALSE)"},"nlme::getCovariateFormula":{"description":"The right hand side of formula(object), without any\nconditioning expressions (i.e. any expressions after a |\noperator) is returned as a one-sided formula.\n","example_call":"getCovariateFormula(object)"},"nlme::anova.lme":{"description":"When only one fitted model object is present, a data frame with the\nnumerator degrees of freedom, denominator degrees of\nfreedom, F-values, and P-values for Wald tests for the terms in the\nmodel (when Terms and L are NULL), a combination\nof model terms (when Terms in not NULL), or linear\ncombinations of the model coefficients (when L is not\nNULL).  Otherwise, when multiple fitted objects are being\ncompared, a data frame with the degrees of freedom, the (restricted)\nlog-likelihood, the Akaike Information Criterion (AIC), and the\nBayesian Information Criterion (BIC) of each object is returned.  If\ntest=TRUE, whenever two consecutive  objects have different\nnumber of degrees of freedom, a likelihood ratio statistic with the\nassociated p-value is included in the returned data frame.\n","example_call":"anova.lme(object, ..., test = TRUE, type = c(\"sequential\", \"marginal\"),"},"nlme::varPower":{"description":"This function is a constructor for the varPower class,\nrepresenting a power variance function structure. Letting\nv denote the variance covariate and \\sigma^2(v)\ndenote the variance function evaluated at v, the power\nvariance function is defined as \\sigma^2(v) = |v|^{2\\theta}, where \\theta is the variance \nfunction coefficient. When a grouping factor is present, a different\n\\theta is used for each factor level.\n","example_call":"varPower(value = numeric(0), form = ~fitted(.), fixed = NULL)"},"nlme::pdDiag":{"description":"This function is a constructor for the pdDiag class,\nrepresenting a diagonal positive-definite matrix. If the matrix\nassociated with object is of dimension n, it is\nrepresented by n unrestricted parameters, given by the logarithm\nof the square-root of the diagonal values. When value is\nnumeric(0), an uninitialized pdMat object, a one-sided\nformula, or a vector of character strings, object is returned\nas an uninitialized pdDiag object (with just some of its\nattributes and its class defined) and needs to have its coefficients\nassigned later, generally using the coef or matrix replacement\nfunctions. If value is an initialized pdMat object,\nobject will be constructed from\nas.matrix(value). Finally, if value is a numeric vector,\nit is assumed to represent the unrestricted coefficients of the\nunderlying positive-definite\nmatrix.  \n","example_call":"pdDiag(value = numeric(0), form = NULL, nam = NULL, data = parent.frame())"},"nlme::corGaus":{"description":"This function is a constructor for the corGaus class,\nrepresenting a Gaussian spatial correlation structure. Letting\nd denote the range and n denote the nugget\neffect, the correlation between two observations a distance\nr apart is \\exp(-(r/d)^2) when no nugget\neffect is present and (1-n) \\exp(-(r/d)^2)\nwhen a nugget effect is assumed. Objects created using this\nconstructor must later be initialized using the appropriate\n'  Initialize method. \n","example_call":"corGaus(value = numeric(0), form = ~1, nugget = FALSE, metric = c(\"euclidean\","},"nlme::gnlsStruct":{"description":"A generalized nonlinear least squares structure is a list of model\ncomponents representing different sets of parameters in the nonlinear \nmodel. A gnlsStruct  may contain corStruct and\nvarFunc objects. NULL arguments are not included in the\ngnlsStruct list. \n","example_call":"gnlsStruct(corStruct = NULL, varStruct = NULL)"},"nlme::glsEstimate":{"description":"These are functions used by gls to call its compiled C\ncode. They are exported to allow experimentation with modified versions.\n","example_call":"glsEstimate(object, conLin = attr(object, \"conLin\"), control = list(singular.ok = FALSE))"},"nlme::Variogram":{"description":"This function is generic; method functions can be written to handle\nspecific classes of objects. Classes which already have methods for\nthis function include default, gls and lme. See\nthe appropriate method documentation for a description of the\narguments. \n","example_call":"Variogram(object, distance, ...)"},"nlme::Names<-":{"description":"This function is generic; method functions can be written to handle\nspecific classes of objects. Classes which already have methods for\nthis function include: formula, modelStruct,\npdBlocked, pdMat, and reStruct.\n","example_call":"Names<-(object, ..., value)"},"nlme::corARMA":{"description":"This function is a constructor for the corARMA class,\nrepresenting an autocorrelation-moving average correlation structure\nof order (p, q). Objects created using this constructor must later\nbe initialized using the appropriate Initialize method. \n","example_call":"corARMA(value = double(p + q), form = ~1, p = 0, q = 0, fixed = FALSE)"},"nlme::getResponseFormula":{"description":"The left hand side of formula{object} is returned as a\none-sided formula. \n","example_call":"getResponseFormula(object)"},"nlme::pdFactor":{"description":"A square-root factor of the positive-definite matrix represented by\nobject is obtained. Letting \\Sigma denote a\npositive-definite matrix, a square-root factor of \\Sigma is\nany square matrix L such that \\Sigma = L'L. This function extracts L.\n","example_call":"pdFactor(object)"},"nlme::varComb":{"description":"This function is a constructor for the varComb class,\nrepresenting a combination of variance functions. The corresponding\nvariance function is equal to the product of the variance functions of\nthe varFunc objects listed in ....\n","example_call":"varComb(...)"},"nlme::pdNatural":{"description":"This function is a constructor for the pdNatural class,\nrepresenting a general positive-definite matrix, using a natural\nparametrization . If the matrix associated with object is of\ndimension n, it is represented by n(n+1)/2\nparameters. Letting \\sigma_{ij} denote the ij-th\nelement of the underlying positive definite matrix and\n\\rho_{ij}=\\sigma_{i}/\\sqrt{\\sigma_{ii}\\sigma_{jj}},\\;i\\neq j denote the associated\n\"correlations\", the \"natural\" parameters are given by\n\\sqrt{\\sigma_{ii}}, \\;i=1,\\ldots,n and\n\\log((1+\\rho_{ij})/(1-\\rho_{ij})),\\; i \\neq\n    j. Note that all\nnatural parameters are individually unrestricted, but not jointly\nunrestricted (meaning that not all unrestricted vectors would give\npositive-definite matrices). Therefore, this parametrization should\nNOT be used for optimization. It is mostly used for deriving\napproximate confidence intervals on parameters following the\noptimization of an objective function. When value is\nnumeric(0), an uninitialized pdMat object, a one-sided\nformula, or a vector of character strings, object is returned\nas an uninitialized pdSymm object (with just some of its\nattributes and its class defined) and needs to have its coefficients\nassigned later, generally using the coef or matrix replacement\nfunctions. If value is an initialized pdMat object,\nobject will be constructed from\nas.matrix(value). Finally, if value is a numeric \nvector, it is assumed to represent the natural parameters of the\nunderlying positive-definite matrix.  \n","example_call":"pdNatural(value = numeric(0), form = NULL, nam = NULL, data = parent.frame())"},"nlme::asTable":{"description":"Create a tabular representation of the response in a balanced\ngroupedData object.\n","example_call":"asTable(object)"},"nlme::corCAR1":{"description":"This function is a constructor for the corCAR1 class,\nrepresenting an autocorrelation structure of order 1, with a\ncontinuous time covariate. Objects created using this constructor must\nbe later initialized using the appropriate Initialize\nmethod.  \n","example_call":"corCAR1(value = 0.2, form = ~1, fixed = FALSE)"},"nlme::fixef":{"description":"This function is generic; method functions can be written to handle\nspecific classes of objects. Classes which already have methods for\nthis function include lmList and lme.\n","example_call":"fixef(object, ...)"},"nlme::gnls":{"description":"This function fits a nonlinear model using generalized least\nsquares. The errors are allowed to be correlated and/or have unequal\nvariances.  \n","example_call":"gnls(model, data = sys.frame(sys.parent()), params, start,"},"nlme::Names":{"description":"This function is generic; method functions can be written to handle\nspecific classes of objects. Classes which already have methods for\nthis function include: formula, modelStruct,\npdBlocked, pdMat, and reStruct.\n","example_call":"Names(object, ...)"},"nlme::varFunc":{"description":"If object is a one-sided formula, it is used as the argument to\nvarFixed and the resulting object is returned. Else, if\nobject inherits from class varFunc, it is returned\nunchanged. \n","example_call":"varFunc(object)"},"nlme::corSpatial":{"description":"This function is a constructor for the corSpatial class,\nrepresenting a spatial correlation structure. This class is \"virtual\",\nhaving four \"real\" classes, corresponding to specific spatial\ncorrelation structures, associated with it: corExp,\ncorGaus, corLin, corRatio, and\ncorSpher. The returned object will inherit from one of these\n\"real\" classes, determined by the type argument, and from the\n\"virtual\" corSpatial class. Objects created using this\nconstructor must later be initialized using the appropriate\nInitialize method. \n","example_call":"corSpatial(value = numeric(0), form = ~1, nugget = FALSE, type = c(\"spherical\","},"nlme::nlmeControl":{"description":"The values supplied in the function call replace the defaults and a\nlist with all possible arguments is returned.  The returned list is\nused as the control argument to the nlme function.\n","example_call":"nlmeControl(maxIter = 50, pnlsMaxIter = 7, msMaxIter = 50, minScale = 0.001,"},"nlme::simulate.lme":{"description":"The model object is fit to the data.  Using\nthe fitted values of the parameters, nsim new data vectors from\nthis model are simulated.  Both object and m2 are fit by\nmaximum likelihood (ML) and/or by restricted maximum likelihood (REML)\nto each of the simulated data vectors.\n","example_call":"simulate.lme(object, nsim = 1, seed = as.integer(runif(1, 0, .Machine$integer.max)),"},"nlme::coefficients<-":{"description":"This function is generic; method functions can be written to handle\nspecific classes of objects. Classes which already have methods for\nthis function include all \"pdMat\",\n\"corStruct\" and \"varFunc\" classes,\n\"reStruct\", and \"modelStruct\".\n","example_call":"coefficients<-(object, ..., value)"},"nlme::varIdent":{"description":"This function is a constructor for the varIdent class,\nrepresenting a constant variance function structure. If no grouping\nfactor is present in form, the variance function is constant\nand equal to one, and no coefficients required to represent it. When\nform includes a grouping factor with M > 1 levels, the\nvariance function allows M different variances, one  for each level of\nthe factor. For identifiability reasons, the coefficients of the\nvariance function represent the ratios between the variances and a\nreference variance (corresponding to a reference group\nlevel). Therefore, only M-1 coefficients are needed to represent\nthe variance function. By default, if the elements in value are\nunnamed, the first group level is taken as the reference level.\n","example_call":"varIdent(value = numeric(0), form = ~1, fixed = NULL)"},"nlme::augPred":{"description":"Predicted values are obtained at the specified values of\nprimary.  If object has a grouping structure\n(i.e. getGroups(object) is not NULL), predicted values\nare obtained for each group.  If level has more than one\nelement, predictions are obtained for each level of the\nmax(level) grouping factor.  If other covariates besides\nprimary are used in the prediction model, their average\n(numeric covariates) or most frequent value (categorical covariates)\nare used to obtain the predicted values.  The original observations\nare also included in the returned object.\n","example_call":"augPred(object, primary = NULL, minimum = min(primary), maximum = max(primary),"},"nlme::nlme":{"description":"This generic function fits a nonlinear mixed-effects model in the\nformulation described in Lindstrom and Bates (1990) but allowing for nested\nrandom effects. The within-group errors are allowed to be correlated\nand/or have unequal variances.\n","example_call":"nlme(model, data = sys.frame(sys.parent()), fixed, random = fixed,"},"nlme::corLin":{"description":"This function is a constructor for the corLin class,\nrepresenting a linear spatial correlation structure. Letting\nd denote the range and n denote the nugget\neffect, the correlation between two observations a distance\nr < d apart is 1-(r/d) when no nugget effect\nis present and (1-n) (1 -(r/d)) when a nugget\neffect is assumed. If r \\geq d the correlation is\nzero. Objects created using this constructor must later be\ninitialized using the appropriate Initialize method. \n","example_call":"corLin(value = numeric(0), form = ~1, nugget = FALSE, metric = c(\"euclidean\","},"nlme::random.effects":{"description":"This function is generic; method functions can be written to handle\nspecific classes of objects. Classes which already have methods for\nthis function include lmList and lme.\n","example_call":"random.effects(object, ...)"},"nlme::recalc":{"description":"This function is generic; method functions can be written to handle\nspecific classes of objects. Classes which already have methods for\nthis function include: corStruct, modelStruct,\nreStruct, and varFunc.\n","example_call":"recalc(object, conLin, ...)"},"openxlsx::getBaseFont":{"description":"Return the workbook default font\n","example_call":"getBaseFont(wb)"},"openxlsx::sheetVisible":{"description":"DEPRECATED - Use function 'sheetVisibility()\n","example_call":"sheetVisible(wb)"},"openxlsx::insertPlot":{"description":"The current plot is saved to a temporary image file using dev.copy.\nThis file is then written to the workbook using insertImage.\n","example_call":"insertPlot(wb, sheet, width = 6, height = 4, xy = NULL, startRow = 1,"},"openxlsx::temp_xlsx":{"description":"helper function to create tempory directory for testing purpose\n","example_call":"temp_xlsx(name = \"temp_xlsx\")"},"openxlsx::getDateOrigin":{"description":"Return the date origin used internally by an xlsx or xlsm file\n","example_call":"getDateOrigin(xlsxFile)"},"openxlsx::getTables":{"description":"List Excel tables in a workbook\n","example_call":"getTables(wb, sheet)"},"openxlsx::read.xlsx":{"description":"Read data from an Excel file or Workbook object into a data.frame\n","example_call":"read.xlsx(xlsxFile, sheet, startRow = 1, colNames = TRUE, rowNames = FALSE,"},"openxlsx::getWindowSize":{"description":"Set and Get Window Size for xlsx file\n","example_call":"getWindowSize(wb)"},"openxlsx::setWindowSize":{"description":"Set and Get Window Size for xlsx file\n","example_call":"setWindowSize(wb, xWindow = NULL, yWindow = NULL, windowWidth = NULL,"},"openxlsx::deleteNamedRegion":{"description":"Create / delete a named region\n","example_call":"deleteNamedRegion(wb, name)"},"openxlsx::groupColumns":{"description":"Group a selection of columns\n","example_call":"groupColumns(wb, sheet, cols, hidden = FALSE, level = -1)"},"openxlsx::groupRows":{"description":"Group a selection of rows\n","example_call":"groupRows(wb, sheet, rows, hidden = FALSE, level = -1)"},"openxlsx::getNamedRegions":{"description":"Return a vector of named regions in a xlsx file or\nWorkbook object\n","example_call":"getNamedRegions(x)"},"openxlsx::showGridLines":{"description":"Set worksheet gridlines to show or hide.\n","example_call":"showGridLines(wb, sheet, showGridLines = FALSE)"},"openxlsx::pageSetup":{"description":"Set page margins, orientation and print scaling\n","example_call":"pageSetup(wb, sheet, orientation = NULL, scale = 100, left = 0.7,"},"openxlsx::setLastModifiedBy":{"description":"Just a wrapper of wb$changeLastModifiedBy()\n","example_call":"setLastModifiedBy(wb, LastModifiedBy)"},"openxlsx::get_worksheet_entries":{"description":"Get all entries from workbook worksheet without xml tags\n","example_call":"get_worksheet_entries(wb, sheet)"},"openxlsx::removeTable":{"description":"List Excel tables in a workbook\n","example_call":"removeTable(wb, sheet, table)"},"openxlsx::activeSheet<-":{"description":"Get and set active sheet of the workbook\n","example_call":"activeSheet<-(wb, value)"},"openxlsx::createNamedRegion":{"description":"Create / delete a named region\n","example_call":"createNamedRegion(wb, sheet, cols, rows, name, overwrite = FALSE)"},"openxlsx::removeColWidths":{"description":"Remove column widths from a worksheet\n","example_call":"removeColWidths(wb, sheet, cols)"},"openxlsx::writeDataTable":{"description":"Write to a worksheet and format as an Excel table\n","example_call":"writeDataTable(wb, sheet, x, startCol = 1, startRow = 1, xy = NULL,"},"openxlsx::createComment":{"description":"Create a cell Comment object to pass to writeComment()\n","example_call":"createComment(comment, author = Sys.getenv(\"USERNAME\"), style = NULL,"},"openxlsx::writeFormula":{"description":"Write a a character vector containing Excel formula to a worksheet.\n","example_call":"writeFormula(wb, sheet, x, startCol = 1, startRow = 1, array = FALSE,"},"openxlsx::sheetVisibility<-":{"description":"Get and set worksheet visible state\n","example_call":"sheetVisibility<-(wb, value)"},"openxlsx::removeFilter":{"description":"Removes filters from addFilter() and writeData()\n","example_call":"removeFilter(wb, sheet)"},"openxlsx::sheets":{"description":"DEPRECATED. Use names().\n","example_call":"sheets(wb)"},"openxlsx::removeComment":{"description":"Remove a cell comment from a worksheet\n","example_call":"removeComment(wb, sheet, cols, rows, gridExpand = TRUE)"},"openxlsx::removeWorksheet":{"description":"Remove a worksheet from a Workbook object\n","example_call":"removeWorksheet(wb, sheet)"},"openxlsx::activeSheet":{"description":"Get and set active sheet of the workbook\n","example_call":"activeSheet(wb)"},"openxlsx::worksheetOrder":{"description":"Get/set order of worksheets in a Workbook object\n","example_call":"worksheetOrder(wb)"},"openxlsx::buildWorkbook":{"description":"Build a workbook from a data.frame or named list\n","example_call":"buildWorkbook(x, asTable = FALSE, ...)"},"openxlsx::worksheetOrder<-":{"description":"Get/set order of worksheets in a Workbook object\n","example_call":"worksheetOrder<-(wb, value)"},"openxlsx::setHeader":{"description":"DEPRECATED\n","example_call":"setHeader(wb, text, position = \"center\")"},"openxlsx::saveWorkbook":{"description":"save a Workbook object to file\n","example_call":"saveWorkbook(wb, file, overwrite = FALSE, returnValue = FALSE)"},"openxlsx::createStyle":{"description":"Create a new style to apply to worksheet cells\n","example_call":"createStyle(fontName = NULL, fontSize = NULL, fontColour = NULL,"},"openxlsx::addStyle":{"description":"Function adds a style to a specified set of cells.\n","example_call":"addStyle(wb, sheet, style, rows, cols, gridExpand = FALSE, stack = FALSE)"},"openxlsx::removeCellMerge":{"description":"Unmerges any merged cells that intersect\nwith the region specified by, min(cols):max(cols) X min(rows):max(rows)\n","example_call":"removeCellMerge(wb, sheet, cols, rows)"},"openxlsx::auto_heights":{"description":"Compute optimal row heights for cell with fixed with and\nenabled automatic row heights parameter\n","example_call":"auto_heights(wb, sheet, selected, fontsize = NULL, factor = 1, base_height = 15,"},"openxlsx::ungroupColumns":{"description":"Ungroup a selection of columns\n","example_call":"ungroupColumns(wb, sheet, cols)"},"openxlsx::writeComment":{"description":"Write a Comment object to a worksheet\n","example_call":"writeComment(wb, sheet, col, row, comment, xy = NULL)"},"openxlsx::modifyBaseFont":{"description":"Modify the default font for this workbook\n","example_call":"modifyBaseFont(wb, fontSize = 11, fontColour = \"black\", fontName = \"Calibri\")"},"openxlsx::renameWorksheet":{"description":"Rename a worksheet\n","example_call":"renameWorksheet(wb, sheet, newName)"},"openxlsx::sheetVisible<-":{"description":"DEPRECATED - Use function 'sheetVisibility()\n","example_call":"sheetVisible<-(wb, value)"},"openxlsx::convertToDateTime":{"description":"Convert from excel time number to R POSIXct type.\n","example_call":"convertToDateTime(x, origin = \"1900-01-01\", ...)"},"openxlsx::addFilter":{"description":"Add excel column filters to a worksheet\n","example_call":"addFilter(wb, sheet, rows, cols)"},"openxlsx::addCreator":{"description":"Just a wrapper of wb$addCreator()\n","example_call":"addCreator(wb, Creator)"},"openxlsx::getSheetNames":{"description":"Returns the worksheet names within an xlsx file\n","example_call":"getSheetNames(file)"},"openxlsx::makeHyperlinkString":{"description":"Wrapper to create internal hyperlink string to pass to writeFormula(). Either link to external urls or local files or straight to cells of local Excel sheets.\n","example_call":"makeHyperlinkString(sheet, row = 1, col = 1, text = NULL, file = NULL)"},"openxlsx::getCreators":{"description":"Just a wrapper of wb$getCreators()\nGet the names of the\n","example_call":"getCreators(wb)"},"openxlsx::conditionalFormat":{"description":"DEPRECATED! USE conditionalFormatting()\n","example_call":"conditionalFormat(wb, sheet, cols, rows, rule = NULL, style = NULL, type = \"expression\")"},"openxlsx::openXL":{"description":"This function tries to open a Microsoft Excel\n(xls/xlsx) file or an openxlsx Workbook with the proper\napplication, in a portable manner.\n","example_call":"openXL(file = NULL)"},"openxlsx::deleteDataColumn":{"description":"Deletes the whole column from a workbook, shifting the remaining columns to the left\n","example_call":"deleteDataColumn(wb, sheet, col)"},"openxlsx::readWorkbook":{"description":"Read data from an Excel file or Workbook object into a data.frame\n","example_call":"readWorkbook(xlsxFile, sheet = 1, startRow = 1, colNames = TRUE,"},"openxlsx::freezePane":{"description":"Freeze a worksheet pane\n","example_call":"freezePane(wb, sheet, firstActiveRow = NULL, firstActiveCol = NULL,"},"openxlsx::dataValidation":{"description":"Add Excel data validation to cells\n","example_call":"dataValidation(wb, sheet, cols, rows, type, operator, value, allowBlank = TRUE,"},"openxlsx::setFooter":{"description":"DEPRECATED\n","example_call":"setFooter(wb, text, position = \"center\")"},"openxlsx::conditionalFormatting":{"description":"Add conditional formatting to cells\n","example_call":"conditionalFormatting(wb, sheet, cols, rows, rule = NULL, style = NULL, type = \"expression\","},"openxlsx::getCellRefs":{"description":"Return excel cell coordinates from (x,y) coordinates\n","example_call":"getCellRefs(cellCoords)"},"openxlsx::protectWorksheet":{"description":"Protect or unprotect a worksheet from modifications by the user in the graphical user interface. Replaces an existing protection.\n","example_call":"protectWorksheet(wb, sheet, protect = TRUE, password = NULL, lockSelectingLockedCells = NULL,"},"openxlsx::setColWidths":{"description":"Set worksheet column widths to specific width or \"auto\".\n","example_call":"setColWidths(wb, sheet, cols, widths = 8.43, hidden = rep(FALSE,"},"openxlsx::setRowHeights":{"description":"Set worksheet row heights\n","example_call":"setRowHeights(wb, sheet, rows, heights, fontsize = NULL, factor = 1,"},"openxlsx::int2col":{"description":"Converts an integer to an Excel column label.\n","example_call":"int2col(x)"},"openxlsx::col2int":{"description":"Converts an Excel column label to an integer.\n","example_call":"col2int(x)"},"openxlsx::insertImage":{"description":"Insert an image into a worksheet\n","example_call":"insertImage(wb, sheet, file, width = 6, height = 3, startRow = 1,"},"openxlsx::convertToDate":{"description":"Convert from excel date number to R Date type\n","example_call":"convertToDate(x, origin = \"1900-01-01\", ...)"},"openxlsx::loadWorkbook":{"description":"loadWorkbook returns a workbook object conserving styles and\nformatting of the original .xlsx file.\n","example_call":"loadWorkbook(file, xlsxFile = NULL, isUnzipped = FALSE, na.convert = TRUE)"},"openxlsx::createWorkbook":{"description":"Create a new Workbook object\n","example_call":"createWorkbook(creator = ifelse(.Platform$OS.type == \"windows\", Sys.getenv(\"USERNAME\"),"},"openxlsx::writeData":{"description":"Write an object to worksheet with optional styling.\n","example_call":"writeData(wb, sheet, x, startCol = 1, startRow = 1, array = FALSE,"},"openxlsx::setHeaderFooter":{"description":"Set document headers and footers\n","example_call":"setHeaderFooter(wb, sheet, header = NULL, footer = NULL, evenHeader = NULL,"},"openxlsx::protectWorkbook":{"description":"Protect or unprotect a workbook from modifications by the user in the graphical user interface. Replaces an existing protection.\n","example_call":"protectWorkbook(wb, protect = TRUE, password = NULL, lockStructure = FALSE,"},"openxlsx::write.xlsx":{"description":"write a data.frame or list of data.frames to an xlsx file\n","example_call":"write.xlsx(x, file, asTable = FALSE, overwrite = TRUE, ...)"},"openxlsx::op.openxlsx":{"description":"See and get the openxlsx options\n","example_call":"NULL"},"openxlsx::openxlsx_setOp":{"description":"See and get the openxlsx options\n","example_call":"openxlsx_setOp(x, value)"},"openxlsx::convertFromExcelRef":{"description":"Convert excel column name to integer index e.g. \"J\" to 10\n","example_call":"convertFromExcelRef(col)"},"openxlsx::getStyles":{"description":"Returns list of style objects in the workbook\n","example_call":"getStyles(wb)"},"openxlsx::openxlsx_getOp":{"description":"See and get the openxlsx options\n","example_call":"openxlsx_getOp(x, default = NULL)"},"openxlsx::addWorksheet":{"description":"Add a worksheet to a Workbook object\n","example_call":"addWorksheet(wb, sheetName, gridLines = openxlsx_getOp(\"gridLines\","},"openxlsx::mergeCells":{"description":"Merge cells within a worksheet\n","example_call":"mergeCells(wb, sheet, cols, rows)"},"openxlsx::pageBreak":{"description":"insert page breaks into a worksheet\n","example_call":"pageBreak(wb, sheet, i, type = \"row\")"},"openxlsx::copyWorkbook":{"description":"Just a wrapper of wb$copy()\n","example_call":"copyWorkbook(wb)"},"openxlsx::ungroupRows":{"description":"Ungroup a selection of rows\n","example_call":"ungroupRows(wb, sheet, rows)"},"openxlsx::removeRowHeights":{"description":"Remove row heights from a worksheet\n","example_call":"removeRowHeights(wb, sheet, rows)"},"openxlsx::cloneWorksheet":{"description":"Clone a worksheet to a Workbook object\n","example_call":"cloneWorksheet(wb, sheetName, clonedSheet)"},"openxlsx::deleteData":{"description":"Delete contents and styling from a cell.\n","example_call":"deleteData(wb, sheet, cols, rows, gridExpand = FALSE)"},"openxlsx::sheetVisibility":{"description":"Get and set worksheet visible state\n","example_call":"sheetVisibility(wb)"},"openxlsx::replaceStyle":{"description":"Replace an existing cell style\n","example_call":"replaceStyle(wb, index, newStyle)"},"pillar::squeeze":{"description":"\n","example_call":"squeeze(x, width = NULL, ...)"},"pillar::expect_known_display":{"description":"\n","example_call":"expect_known_display(object, file, ..., width = 80L, crayon = TRUE)"},"pillar::tbl_format_body":{"description":"\n","example_call":"tbl_format_body(x, setup, ...)"},"pillar::set_char_opts":{"description":"These functions are reexported as tibble::char() and tibble::set_char_opts().\n","example_call":"set_char_opts(x, ..., min_chars = NULL, shorten = c(\"back\", \"front\","},"pillar::pillar_shaft":{"description":"Internal class for formatting the data for a column.\npillar_shaft() is a coercion method that must be implemented\nfor your data type to display it in a tibble.\n","example_call":"pillar_shaft(x, ...)"},"pillar::ctl_new_rowid_pillar":{"description":"\n","example_call":"ctl_new_rowid_pillar(controller, x, width, ..., title = NULL, type = NULL)"},"pillar::char":{"description":"These functions are reexported as tibble::char() and tibble::set_char_opts().\n","example_call":"char(x, ..., min_chars = NULL, shorten = c(\"back\", \"front\","},"pillar::glimpse":{"description":"glimpse() is like a transposed version of print():\ncolumns run down the page, and data runs across.\nThis makes it possible to see every column in a data frame.\nIt's a little like str() applied to a data frame\nbut it tries to show you as much data as possible.\n(And it always shows the underlying data, even when applied\nto a remote data source.)\n","example_call":"glimpse(x, width = NULL, ...)"},"pillar::scale_x_num":{"description":"\n","example_call":"scale_x_num(..., position = \"bottom\", guide = ggplot2::waiver(),"},"pillar::extra_cols":{"description":"\n","example_call":"extra_cols(x, ...)"},"pillar::new_pillar_title":{"description":"Call format() on the result to render column titles.\n","example_call":"new_pillar_title(x, ...)"},"pillar::is_vector_s3":{"description":"\n","example_call":"is_vector_s3(x)"},"pillar::obj_sum":{"description":"type_sum() gives a brief summary of object type. Objects that commonly\noccur in a data frame should return a string with four or less characters.\nFor most inputs, the argument is forwarded to vctrs::vec_ptype_abbr().\n","example_call":"obj_sum(x)"},"pillar::tbl_format_header":{"description":"\n","example_call":"tbl_format_header(x, setup, ...)"},"pillar::style_bold":{"description":"Functions that allow implementers of formatters for custom data types to\nmaintain a consistent style with the default data types.\n","example_call":"style_bold(x)"},"pillar::style_subtle_num":{"description":"Functions that allow implementers of formatters for custom data types to\nmaintain a consistent style with the default data types.\n","example_call":"style_subtle_num(x, negative)"},"pillar::colonnade":{"description":"\n","example_call":"colonnade(x, has_row_id = TRUE, width = NULL, ...)"},"pillar::new_pillar_component":{"description":"\n","example_call":"new_pillar_component(x, ..., width, min_width = NULL)"},"pillar::size_sum":{"description":"type_sum() gives a brief summary of object type. Objects that commonly\noccur in a data frame should return a string with four or less characters.\nFor most inputs, the argument is forwarded to vctrs::vec_ptype_abbr().\n","example_call":"size_sum(x)"},"pillar::tbl_format_footer":{"description":"\n","example_call":"tbl_format_footer(x, setup, ...)"},"pillar::ctl_new_pillar":{"description":"\n","example_call":"ctl_new_pillar(controller, x, width, ..., title = NULL)"},"pillar::tbl_sum":{"description":"tbl_sum() gives a brief textual description of a table-like object,\nwhich should include the dimensions and the data source in the first element,\nand additional information in the other elements (such as grouping for dplyr).\nThe default implementation forwards to obj_sum().\n","example_call":"tbl_sum(x)"},"pillar::scale_y_num":{"description":"\n","example_call":"scale_y_num(..., guide = ggplot2::waiver(), rescaler = NULL, super = NULL)"},"pillar::new_pillar_shaft":{"description":"The new_pillar_shaft() constructor creates objects of the \"pillar_shaft\"\nclass.\nThis is a virtual or abstract class, you must specify the class\nargument.\nBy convention, this should be a string that starts with \"pillar_shaft_\".\nSee vignette(\"extending\", package = \"tibble\") for usage examples.\n","example_call":"new_pillar_shaft(x, ..., width = NULL, min_width = width, type_sum = NULL,"},"pillar::new_pillar_type":{"description":"Calls type_sum() to format the type.\nCall format() on the result to render column types.\n","example_call":"new_pillar_type(x, ...)"},"pillar::ctl_new_pillar_list":{"description":"\n","example_call":"ctl_new_pillar_list(controller, x, width, ..., title = NULL, first_pillar = NULL)"},"pillar::align":{"description":"Facilitates easy alignment of strings within a character vector. Designed to\nhelp implementers of formatters for custom data types.\n","example_call":"align(x, width = NULL, align = c(\"left\", \"right\"), space = \" \")"},"pillar::set_num_opts":{"description":"These functions are reexported as tibble::num() and tibble::set_num_opts().\n","example_call":"set_num_opts(x, ..., sigfig = NULL, digits = NULL, label = NULL,"},"pillar::get_max_extent":{"description":"get_extent() calculates the display width for each string in a character\nvector.\n","example_call":"get_max_extent(x)"},"pillar::new_pillar":{"description":"\n","example_call":"new_pillar(components, ..., width = NULL, class = NULL, extra = deprecated())"},"pillar::tbl_format_setup":{"description":"tbl_format_setup() is called by format.tbl().\nThis method collects information that is common to the header, body,\nand footer parts of a tibble.\nExamples:\n","example_call":"tbl_format_setup(x, width = NULL, ..., n = NULL, max_extra_cols = NULL,"},"pillar::type_sum":{"description":"type_sum() gives a brief summary of object type. Objects that commonly\noccur in a data frame should return a string with four or less characters.\nFor most inputs, the argument is forwarded to vctrs::vec_ptype_abbr().\n","example_call":"type_sum(x)"},"pillar::format_type_sum":{"description":"Called on values returned from type_sum() for defining the description\nin the capital.\n","example_call":"format_type_sum(x, width, ...)"},"pillar::pillar":{"description":"pillar() creates an object that formats a vector.\nThe output uses one row for a title (if given), one row for the type,\nand vec_size(x) rows for the data.\n","example_call":"pillar(x, title = NULL, width = NULL, ...)"},"pillar::style_subtle":{"description":"Functions that allow implementers of formatters for custom data types to\nmaintain a consistent style with the default data types.\n","example_call":"style_subtle(x)"},"pillar::format_glimpse":{"description":"\n","example_call":"format_glimpse(x, ...)"},"pillar::dim_desc":{"description":"Multi-dimensional objects are formatted as <U+2060>a x b x ...<U+2060>, for vectors the\nlength is returned.\n","example_call":"dim_desc(x)"},"pillar::style_na":{"description":"Functions that allow implementers of formatters for custom data types to\nmaintain a consistent style with the default data types.\n","example_call":"style_na(x)"},"pillar::get_extent":{"description":"get_extent() calculates the display width for each string in a character\nvector.\n","example_call":"get_extent(x)"},"pillar::new_pillar_shaft_simple":{"description":"The new_pillar_shaft() constructor creates objects of the \"pillar_shaft\"\nclass.\nThis is a virtual or abstract class, you must specify the class\nargument.\nBy convention, this should be a string that starts with \"pillar_shaft_\".\nSee vignette(\"extending\", package = \"tibble\") for usage examples.\n","example_call":"new_pillar_shaft_simple(formatted, ..., width = NULL, align = \"left\", min_width = NULL,"},"pillar::style_neg":{"description":"Functions that allow implementers of formatters for custom data types to\nmaintain a consistent style with the default data types.\n","example_call":"style_neg(x)"},"pillar::new_ornament":{"description":"This function is useful if your data renders differently depending on the\navailable width. In this case, implement the pillar_shaft() method for your\nclass to return a subclass of \"pillar_shaft\" and have the format() method\nfor this subclass call new_ornament(). See the implementation of\npillar_shaft.numeric() and format.pillar_shaft_decimal() for an example.\n","example_call":"new_ornament(x, width = NULL, align = NULL)"},"pillar::num":{"description":"These functions are reexported as tibble::num() and tibble::set_num_opts().\n","example_call":"num(x, ..., sigfig = NULL, digits = NULL, label = NULL,"},"pillar::pillar_component":{"description":"\n","example_call":"pillar_component(x)"},"pillar::style_num":{"description":"Functions that allow implementers of formatters for custom data types to\nmaintain a consistent style with the default data types.\n","example_call":"style_num(x, negative, significant = rep_along(x, TRUE))"},"prettyunits::pretty_ms":{"description":"Pretty formatting of milliseconds\n","example_call":"pretty_ms(ms, compact = FALSE)"},"prettyunits::pretty_signif":{"description":"Round a value to a defined number of significant digits printing out trailing\nzeros, if applicable\n","example_call":"pretty_signif(x, digits = 6, sci_range = 6, sci_sep = \"e\")"},"prettyunits::pretty_colour":{"description":"Color definition (like RGB) to a name\n","example_call":"pretty_colour(color)"},"prettyunits::pretty_color":{"description":"Color definition (like RGB) to a name\n","example_call":"pretty_color(color)"},"prettyunits::pretty_round":{"description":"Round a value to a defined number of digits printing out trailing zeros, if\napplicable\n","example_call":"pretty_round(x, digits = 0, sci_range = Inf, sci_sep = \"e\")"},"prettyunits::pretty_dt":{"description":"Pretty formatting of time intervals (difftime objects)\n","example_call":"pretty_dt(dt, compact = FALSE)"},"prettyunits::compute_num":{"description":"Use pretty_num() to format numbers compute_num() is the underlying\nengine that may be useful for custom formatting.\n","example_call":"compute_num(number, smallest_prefix = \"y\")"},"prettyunits::vague_dt":{"description":"Human readable format of a time interval\n","example_call":"vague_dt(dt, format = c(\"default\", \"short\", \"terse\"))"},"prettyunits::pretty_num":{"description":"Use pretty_num() to format numbers compute_num() is the underlying\nengine that may be useful for custom formatting.\n","example_call":"pretty_num(number, style = c(\"default\", \"nopad\", \"6\"))"},"prettyunits::time_ago":{"description":"It calls vague_dt to do the actual formatting.\n","example_call":"time_ago(date, format = c(\"default\", \"short\", \"terse\"))"},"prettyunits::pretty_p_value":{"description":"p-values in a human-readable string\n","example_call":"pretty_p_value(x, minval = 1e-04)"},"prettyunits::pretty_bytes":{"description":"Use pretty_bytes() to format bytes. compute_bytes() is the underlying\nengine that may be useful for custom formatting.\n","example_call":"pretty_bytes(bytes, style = c(\"default\", \"nopad\", \"6\"))"},"prettyunits::compute_bytes":{"description":"Use pretty_bytes() to format bytes. compute_bytes() is the underlying\nengine that may be useful for custom formatting.\n","example_call":"compute_bytes(bytes, smallest_unit = \"B\")"},"prettyunits::pretty_sec":{"description":"Pretty formatting of seconds\n","example_call":"pretty_sec(sec, compact = FALSE)"},"purrr::map2_dfc":{"description":"\n","example_call":"map2_dfc(.x, .y, .f, ...)"},"purrr::invoke_map_lgl":{"description":"\n","example_call":"invoke_map_lgl(.f, .x = list(NULL), ..., .env = NULL)"},"purrr::list_rbind":{"description":null,"example_call":"list_rbind(x, ..., names_to = rlang::zap(), ptype = NULL)"},"purrr::discard":{"description":"keep() selects all elements where .p evaluates to TRUE;\ndiscard() selects all elements where .p evaluates to FALSE.\ncompact() discards elements where .p evaluates to an empty vector.\n","example_call":"discard(.x, .p, ...)"},"purrr::rbernoulli":{"description":"\n","example_call":"rbernoulli(n, p = 0.5)"},"purrr::pmap":{"description":"These functions are variants of map() that iterate over multiple arguments\nsimultaneously. They are parallel in the sense that each input is processed\nin parallel with the others, not in the sense of multicore computing, i.e.\nthey share the same notion of \"parallel\" as base::pmax() and base::pmin().\n","example_call":"pmap(.l, .f, ..., .progress = FALSE)"},"purrr::prepend":{"description":"\n","example_call":"prepend(x, values, before = NULL)"},"purrr::map2_df":{"description":"\n","example_call":"map2_df(.x, .y, .f, ..., .id = NULL)"},"purrr::invoke_map_df":{"description":"\n","example_call":"invoke_map_df(.f, .x = list(NULL), ..., .env = NULL)"},"purrr::list_cbind":{"description":null,"example_call":"list_cbind(x, ..., name_repair = c(\"unique\", \"universal\", \"check_unique\"),"},"purrr::pmap_lgl":{"description":"These functions are variants of map() that iterate over multiple arguments\nsimultaneously. They are parallel in the sense that each input is processed\nin parallel with the others, not in the sense of multicore computing, i.e.\nthey share the same notion of \"parallel\" as base::pmax() and base::pmin().\n","example_call":"pmap_lgl(.l, .f, ..., .progress = FALSE)"},"purrr::map_dbl":{"description":"The map functions transform their input by applying a function to\neach element of a list or atomic vector and returning an object of\nthe same length as the input.\n","example_call":"map_dbl(.x, .f, ..., .progress = FALSE)"},"purrr::walk2":{"description":"These functions are variants of map() that iterate over two arguments at\na time.\n","example_call":"walk2(.x, .y, .f, ..., .progress = FALSE)"},"purrr::pluck_exists":{"description":"pluck() implements a generalised form of [[ that allow you to index\ndeeply and flexibly into data structures. It always succeeds, returning\n.default if the index you are trying to access does not exist or is NULL.\n","example_call":"pluck_exists(.x, ...)"},"purrr::flatten_dbl":{"description":"\n","example_call":"flatten_dbl(.x)"},"purrr::walk":{"description":"The map functions transform their input by applying a function to\neach element of a list or atomic vector and returning an object of\nthe same length as the input.\n","example_call":"walk(.x, .f, ..., .progress = FALSE)"},"purrr::rdunif":{"description":"\n","example_call":"rdunif(n, b, a = 1)"},"purrr::flatten_df":{"description":"\n","example_call":"flatten_df(.x, .id = NULL)"},"purrr::discard_at":{"description":"Keep/discard elements based on their name/position\n","example_call":"discard_at(x, at)"},"purrr::array_tree":{"description":"array_branch() and array_tree() enable arrays to be\nused with purrr's functionals by turning them into lists. The\ndetails of the coercion are controlled by the margin\nargument. array_tree() creates an hierarchical list (a tree)\nthat has as many levels as dimensions specified in margin,\nwhile array_branch() creates a flat list (by analogy, a\nbranch) along all mentioned dimensions.\n","example_call":"array_tree(array, margin = NULL)"},"purrr::detect_index":{"description":"Find the value or position of the first match\n","example_call":"detect_index(.x, .f, ..., .dir = c(\"forward\", \"backward\"), .right = NULL)"},"purrr::lift_lv":{"description":"\n","example_call":"lift_lv(..f, ...)"},"purrr::invoke_map_dbl":{"description":"\n","example_call":"invoke_map_dbl(.f, .x = list(NULL), ..., .env = NULL)"},"purrr::pmap_int":{"description":"These functions are variants of map() that iterate over multiple arguments\nsimultaneously. They are parallel in the sense that each input is processed\nin parallel with the others, not in the sense of multicore computing, i.e.\nthey share the same notion of \"parallel\" as base::pmax() and base::pmin().\n","example_call":"pmap_int(.l, .f, ..., .progress = FALSE)"},"purrr::splice":{"description":"\n","example_call":"splice(...)"},"purrr::imodify":{"description":"Unlike map() and its variants which always return a fixed object\ntype (list for map(), integer vector for map_int(), etc), the\nmodify() family always returns the same type as the input object.\n","example_call":"imodify(.x, .f, ...)"},"purrr::imap_dbl":{"description":"imap(x, ...), an indexed map, is short hand for\nmap2(x, names(x), ...) if x has names, or map2(x, seq_along(x), ...)\nif it does not. This is useful if you need to compute on both the value\nand the position of an element.\n","example_call":"imap_dbl(.x, .f, ...)"},"purrr::list_assign":{"description":"list_modify() is inspired by utils::modifyList().\n","example_call":"list_assign(.x, ..., .is_node = NULL)"},"purrr::lmap_at":{"description":"lmap(), lmap_at() and lmap_if() are similar to map(), map_at() and\nmap_if(), except instead of mapping over .x[[i]], they instead map over\n.x[i].\n","example_call":"lmap_at(.x, .at, .f, ...)"},"purrr::transpose":{"description":"\n","example_call":"transpose(.l, .names = NULL)"},"purrr::reduce2_right":{"description":"\n","example_call":"reduce2_right(.x, .y, .f, ..., .init)"},"purrr::as_mapper":{"description":"as_mapper is the powerhouse behind the varied function\nspecifications that most purrr functions allow. It is an S3\ngeneric. The default method forwards its arguments to\nrlang::as_function().\n","example_call":"as_mapper(.f, ...)"},"purrr::reduce":{"description":"reduce() is an operation that combines the elements of a vector\ninto a single value. The combination is driven by .f, a binary\nfunction that takes two values and returns a single value: reducing\nf over 1:3 computes the value f(f(1, 2), 3).\n","example_call":"reduce(.x, .f, ..., .init, .dir = c(\"forward\", \"backward\"))"},"purrr::invoke_map":{"description":"\n","example_call":"invoke_map(.f, .x = list(NULL), ..., .env = NULL)"},"purrr::pmap_df":{"description":"\n","example_call":"pmap_df(.l, .f, ..., .id = NULL)"},"purrr::lift_ld":{"description":"\n","example_call":"lift_ld(..f, ...)"},"purrr::map2_raw":{"description":"\n","example_call":"map2_raw(.x, .y, .f, ...)"},"purrr::tail_while":{"description":"Find head/tail that all satisfies a predicate.\n","example_call":"tail_while(.x, .p, ...)"},"purrr::at_depth":{"description":"This function is defunct and has been replaced by map_depth().\nSee also modify_depth() for a version that preserves the types of\nthe elements of the tree.\n","example_call":"at_depth(.x, .depth, .f, ...)"},"purrr::lmap":{"description":"lmap(), lmap_at() and lmap_if() are similar to map(), map_at() and\nmap_if(), except instead of mapping over .x[[i]], they instead map over\n.x[i].\n","example_call":"lmap(.x, .f, ...)"},"purrr::modify_if":{"description":"Unlike map() and its variants which always return a fixed object\ntype (list for map(), integer vector for map_int(), etc), the\nmodify() family always returns the same type as the input object.\n","example_call":"modify_if(.x, .p, .f, ..., .else = NULL)"},"purrr::has_element":{"description":"Does a list contain an object?\n","example_call":"has_element(.x, .y)"},"purrr::map2_chr":{"description":"These functions are variants of map() that iterate over two arguments at\na time.\n","example_call":"map2_chr(.x, .y, .f, ..., .progress = FALSE)"},"purrr::map_int":{"description":"The map functions transform their input by applying a function to\neach element of a list or atomic vector and returning an object of\nthe same length as the input.\n","example_call":"map_int(.x, .f, ..., .progress = FALSE)"},"purrr::accumulate_right":{"description":"\n","example_call":"accumulate_right(.x, .f, ..., .init)"},"purrr::pmap_dfr":{"description":"\n","example_call":"pmap_dfr(.l, .f, ..., .id = NULL)"},"purrr::vec_depth":{"description":"The depth of a vector is how many levels that you can index/pluck into it.\npluck_depth() was previously called vec_depth().\n","example_call":"vec_depth(x)"},"purrr::map_lgl":{"description":"The map functions transform their input by applying a function to\neach element of a list or atomic vector and returning an object of\nthe same length as the input.\n","example_call":"map_lgl(.x, .f, ..., .progress = FALSE)"},"purrr::simplify":{"description":"\n","example_call":"simplify(.x, .type = NULL)"},"purrr::map_raw":{"description":"\n","example_call":"map_raw(.x, .f, ...)"},"purrr::modify_in":{"description":"pluck()\n","example_call":"modify_in(.x, .where, .f, ...)"},"purrr::safely":{"description":"Creates a modified version of .f that always succeeds. It returns a list\nwith components result and error. If the function succeeds, result\ncontains the returned value and error is NULL. If an error occurred,\nerror is an error object and result is either NULL or otherwise.\n","example_call":"safely(.f, otherwise = NULL, quiet = TRUE)"},"purrr::flatten_dfr":{"description":"\n","example_call":"flatten_dfr(.x, .id = NULL)"},"purrr::insistently":{"description":"insistently() takes a function and modifies it to retry after given\namount of time whenever it errors.\n","example_call":"insistently(f, rate = rate_backoff(), quiet = TRUE)"},"purrr::lift_dv":{"description":"\n","example_call":"lift_dv(..f, ..., .unnamed = FALSE)"},"purrr::map_depth":{"description":"map_depth() calls map(.y, .f) on all .y at the specified .depth in\n.x. modify_depth() calls modify(.y, .f) on .y at the specified\n.depth in .x.\n","example_call":"map_depth(.x, .depth, .f, ..., .ragged = .depth < 0, .is_node = NULL)"},"purrr::every":{"description":"A logical vector of length 1.\n","example_call":"every(.x, .p, ...)"},"purrr::invoke_map_chr":{"description":"\n","example_call":"invoke_map_chr(.f, .x = list(NULL), ..., .env = NULL)"},"purrr::map_vec":{"description":"The map functions transform their input by applying a function to\neach element of a list or atomic vector and returning an object of\nthe same length as the input.\n","example_call":"map_vec(.x, .f, ..., .ptype = NULL, .progress = FALSE)"},"purrr::pwalk":{"description":"These functions are variants of map() that iterate over multiple arguments\nsimultaneously. They are parallel in the sense that each input is processed\nin parallel with the others, not in the sense of multicore computing, i.e.\nthey share the same notion of \"parallel\" as base::pmax() and base::pmin().\n","example_call":"pwalk(.l, .f, ..., .progress = FALSE)"},"purrr::imap_lgl":{"description":"imap(x, ...), an indexed map, is short hand for\nmap2(x, names(x), ...) if x has names, or map2(x, seq_along(x), ...)\nif it does not. This is useful if you need to compute on both the value\nand the position of an element.\n","example_call":"imap_lgl(.x, .f, ...)"},"purrr::imap_chr":{"description":"imap(x, ...), an indexed map, is short hand for\nmap2(x, names(x), ...) if x has names, or map2(x, seq_along(x), ...)\nif it does not. This is useful if you need to compute on both the value\nand the position of an element.\n","example_call":"imap_chr(.x, .f, ...)"},"purrr::rate_sleep":{"description":"If the rate's internal counter exceeds the maximum number of times\nit is allowed to sleep, rate_sleep() throws an error of class\npurrr_error_rate_excess.\n","example_call":"rate_sleep(rate, quiet = TRUE)"},"purrr::quietly":{"description":"Create a modified version of .f that captures side-effects along with\nthe return value of the function and returns a list containing\nthe result, output, messages and warnings.\n","example_call":"quietly(.f)"},"purrr::detect":{"description":"Find the value or position of the first match\n","example_call":"detect(.x, .f, ..., .dir = c(\"forward\", \"backward\"), .right = NULL,"},"purrr::flatten":{"description":"\n","example_call":"flatten(.x)"},"purrr::pmap_dfc":{"description":"\n","example_call":"pmap_dfc(.l, .f, ...)"},"purrr::%@%":{"description":"\n","example_call":"%@%(x, name)"},"purrr::pluck":{"description":"pluck() implements a generalised form of [[ that allow you to index\ndeeply and flexibly into data structures. It always succeeds, returning\n.default if the index you are trying to access does not exist or is NULL.\n","example_call":"pluck(.x, ..., .default = NULL)"},"purrr::map_if":{"description":"The functions map_if() and map_at() take .x as input, apply\nthe function .f to some of the elements of .x, and return a\nlist of the same length as the input.\n","example_call":"map_if(.x, .p, .f, ..., .else = NULL)"},"purrr::lift":{"description":"\n","example_call":"lift(..f, ..., .unnamed = FALSE)"},"purrr::cross":{"description":"\n","example_call":"cross(.l, .filter = NULL)"},"purrr::flatten_dfc":{"description":"\n","example_call":"flatten_dfc(.x)"},"purrr::pmap_raw":{"description":"\n","example_call":"pmap_raw(.l, .f, ...)"},"purrr::imap_int":{"description":"imap(x, ...), an indexed map, is short hand for\nmap2(x, names(x), ...) if x has names, or map2(x, seq_along(x), ...)\nif it does not. This is useful if you need to compute on both the value\nand the position of an element.\n","example_call":"imap_int(.x, .f, ...)"},"purrr::cross2":{"description":"\n","example_call":"cross2(.x, .y, .filter = NULL)"},"purrr::list_transpose":{"description":"list_transpose() turns a list-of-lists \"inside-out\". For instance it turns a pair of\nlists into a list of pairs, or a list of pairs into a pair of lists. For\nexample, if you had a list of length n where each component had values a\nand b, list_transpose() would make a list with elements a and\nb that contained lists of length n.\n","example_call":"list_transpose(x, ..., template = NULL, simplify = NA, ptype = NULL,"},"purrr::cross3":{"description":"\n","example_call":"cross3(.x, .y, .z, .filter = NULL)"},"purrr::rerun":{"description":"\n","example_call":"rerun(.n, ...)"},"purrr::lift_dl":{"description":"\n","example_call":"lift_dl(..f, ..., .unnamed = FALSE)"},"purrr::lmap_if":{"description":"lmap(), lmap_at() and lmap_if() are similar to map(), map_at() and\nmap_if(), except instead of mapping over .x[[i]], they instead map over\n.x[i].\n","example_call":"lmap_if(.x, .p, .f, ..., .else = NULL)"},"purrr::list_along":{"description":"\n","example_call":"list_along(x)"},"purrr::cross_df":{"description":"\n","example_call":"cross_df(.l, .filter = NULL)"},"purrr::imap_dfc":{"description":"\n","example_call":"imap_dfc(.x, .f, ...)"},"purrr::update_list":{"description":"\n","example_call":"update_list(.x, ...)"},"purrr::keep":{"description":"keep() selects all elements where .p evaluates to TRUE;\ndiscard() selects all elements where .p evaluates to FALSE.\ncompact() discards elements where .p evaluates to an empty vector.\n","example_call":"keep(.x, .p, ...)"},"purrr::rate_delay":{"description":"These helpers create rate settings that you can pass to insistently() and\nslowly(). You can also use them in your own functions with rate_sleep().\n","example_call":"rate_delay(pause = 1, max_times = Inf)"},"purrr::cross_d":{"description":"\n","example_call":"cross_d(...)"},"purrr::map_dfr":{"description":"\n","example_call":"map_dfr(.x, .f, ..., .id = NULL)"},"purrr::list_simplify":{"description":"Simplification maintains a one-to-one correspondence between the input\nand output, implying that each element of x must contain a one element\nvector or a one-row data frame. If you don't want to maintain this\ncorrespondence, then you probably want either list_c()/list_rbind() or\nlist_flatten().\n","example_call":"list_simplify(x, ..., strict = TRUE, ptype = NULL)"},"purrr::slowly":{"description":"slowly() takes a function and modifies it to wait a given\namount of time between each call.\n","example_call":"slowly(f, rate = rate_delay(), quiet = TRUE)"},"purrr::flatten_chr":{"description":"\n","example_call":"flatten_chr(.x)"},"purrr::when":{"description":"\n","example_call":"when(., ...)"},"purrr::map2_vec":{"description":"These functions are variants of map() that iterate over two arguments at\na time.\n","example_call":"map2_vec(.x, .y, .f, ..., .ptype = NULL, .progress = FALSE)"},"purrr::none":{"description":"A logical vector of length 1.\n","example_call":"none(.x, .p, ...)"},"purrr::flatten_lgl":{"description":"\n","example_call":"flatten_lgl(.x)"},"purrr::head_while":{"description":"Find head/tail that all satisfies a predicate.\n","example_call":"head_while(.x, .p, ...)"},"purrr::modify_at":{"description":"Unlike map() and its variants which always return a fixed object\ntype (list for map(), integer vector for map_int(), etc), the\nmodify() family always returns the same type as the input object.\n","example_call":"modify_at(.x, .at, .f, ...)"},"purrr::pluck_depth":{"description":"The depth of a vector is how many levels that you can index/pluck into it.\npluck_depth() was previously called vec_depth().\n","example_call":"pluck_depth(x, is_node = NULL)"},"purrr::flatten_raw":{"description":"\n","example_call":"flatten_raw(.x)"},"purrr::cross_n":{"description":"\n","example_call":"cross_n(...)"},"purrr::rate_reset":{"description":"If the rate's internal counter exceeds the maximum number of times\nit is allowed to sleep, rate_sleep() throws an error of class\npurrr_error_rate_excess.\n","example_call":"rate_reset(rate)"},"purrr::imap_dfr":{"description":"\n","example_call":"imap_dfr(.x, .f, ..., .id = NULL)"},"purrr::reduce2":{"description":"reduce() is an operation that combines the elements of a vector\ninto a single value. The combination is driven by .f, a binary\nfunction that takes two values and returns a single value: reducing\nf over 1:3 computes the value f(f(1, 2), 3).\n","example_call":"reduce2(.x, .y, .f, ..., .init)"},"purrr::auto_browse":{"description":"A function wrapped with auto_browse() will automatically enter an\ninteractive debugger using browser() when ever it encounters an error.\n","example_call":"auto_browse(.f)"},"purrr::attr_getter":{"description":"attr_getter() generates an attribute accessor function; i.e., it\ngenerates a function for extracting an attribute with a given\nname. Unlike the base R attr() function with default options, it\ndoesn't use partial matching.\n","example_call":"attr_getter(attr)"},"purrr::invoke_map_raw":{"description":"\n","example_call":"invoke_map_raw(.f, .x = list(NULL), ..., .env = NULL)"},"purrr::modify":{"description":"Unlike map() and its variants which always return a fixed object\ntype (list for map(), integer vector for map_int(), etc), the\nmodify() family always returns the same type as the input object.\n","example_call":"modify(.x, .f, ...)"},"purrr::map_dfc":{"description":"\n","example_call":"map_dfc(.x, .f, ...)"},"purrr::map":{"description":"The map functions transform their input by applying a function to\neach element of a list or atomic vector and returning an object of\nthe same length as the input.\n","example_call":"map(.x, .f, ..., .progress = FALSE)"},"purrr::map2_dbl":{"description":"These functions are variants of map() that iterate over two arguments at\na time.\n","example_call":"map2_dbl(.x, .y, .f, ..., .progress = FALSE)"},"purrr::modify2":{"description":"Unlike map() and its variants which always return a fixed object\ntype (list for map(), integer vector for map_int(), etc), the\nmodify() family always returns the same type as the input object.\n","example_call":"modify2(.x, .y, .f, ...)"},"purrr::array_branch":{"description":"array_branch() and array_tree() enable arrays to be\nused with purrr's functionals by turning them into lists. The\ndetails of the coercion are controlled by the margin\nargument. array_tree() creates an hierarchical list (a tree)\nthat has as many levels as dimensions specified in margin,\nwhile array_branch() creates a flat list (by analogy, a\nbranch) along all mentioned dimensions.\n","example_call":"array_branch(array, margin = NULL)"},"purrr::some":{"description":"A logical vector of length 1.\n","example_call":"some(.x, .p, ...)"},"purrr::rate_backoff":{"description":"These helpers create rate settings that you can pass to insistently() and\nslowly(). You can also use them in your own functions with rate_sleep().\n","example_call":"rate_backoff(pause_base = 1, pause_cap = 60, pause_min = 1, max_times = 3,"},"purrr::map2_lgl":{"description":"These functions are variants of map() that iterate over two arguments at\na time.\n","example_call":"map2_lgl(.x, .y, .f, ..., .progress = FALSE)"},"purrr::pluck<-":{"description":"pluck() implements a generalised form of [[ that allow you to index\ndeeply and flexibly into data structures. It always succeeds, returning\n.default if the index you are trying to access does not exist or is NULL.\n","example_call":"pluck<-(.x, ..., value)"},"purrr::list_c":{"description":null,"example_call":"list_c(x, ..., ptype = NULL)"},"purrr::simplify_all":{"description":"\n","example_call":"simplify_all(.x, .type = NULL)"},"purrr::flatten_int":{"description":"\n","example_call":"flatten_int(.x)"},"purrr::compact":{"description":"keep() selects all elements where .p evaluates to TRUE;\ndiscard() selects all elements where .p evaluates to FALSE.\ncompact() discards elements where .p evaluates to an empty vector.\n","example_call":"compact(.x, .p = identity)"},"purrr::pmap_chr":{"description":"These functions are variants of map() that iterate over multiple arguments\nsimultaneously. They are parallel in the sense that each input is processed\nin parallel with the others, not in the sense of multicore computing, i.e.\nthey share the same notion of \"parallel\" as base::pmax() and base::pmin().\n","example_call":"pmap_chr(.l, .f, ..., .progress = FALSE)"},"purrr::invoke_map_dfc":{"description":"\n","example_call":"invoke_map_dfc(.f, .x = list(NULL), ..., .env = NULL)"},"purrr::map_at":{"description":"The functions map_if() and map_at() take .x as input, apply\nthe function .f to some of the elements of .x, and return a\nlist of the same length as the input.\n","example_call":"map_at(.x, .at, .f, ..., .progress = FALSE)"},"purrr::map2":{"description":"These functions are variants of map() that iterate over two arguments at\na time.\n","example_call":"map2(.x, .y, .f, ..., .progress = FALSE)"},"purrr::map_chr":{"description":"The map functions transform their input by applying a function to\neach element of a list or atomic vector and returning an object of\nthe same length as the input.\n","example_call":"map_chr(.x, .f, ..., .progress = FALSE)"},"purrr::map2_int":{"description":"These functions are variants of map() that iterate over two arguments at\na time.\n","example_call":"map2_int(.x, .y, .f, ..., .progress = FALSE)"},"purrr::imap_raw":{"description":"\n","example_call":"imap_raw(.x, .f, ...)"},"purrr::list_merge":{"description":"list_modify() is inspired by utils::modifyList().\n","example_call":"list_merge(.x, ..., .is_node = NULL)"},"purrr::pmap_vec":{"description":"These functions are variants of map() that iterate over multiple arguments\nsimultaneously. They are parallel in the sense that each input is processed\nin parallel with the others, not in the sense of multicore computing, i.e.\nthey share the same notion of \"parallel\" as base::pmax() and base::pmin().\n","example_call":"pmap_vec(.l, .f, ..., .ptype = NULL, .progress = FALSE)"},"purrr::as_vector":{"description":"\n","example_call":"as_vector(.x, .type = NULL)"},"purrr::list_modify":{"description":"list_modify() is inspired by utils::modifyList().\n","example_call":"list_modify(.x, ..., .is_node = NULL)"},"purrr::invoke_map_dfr":{"description":"\n","example_call":"invoke_map_dfr(.f, .x = list(NULL), ..., .env = NULL)"},"purrr::possibly":{"description":"Create a modified version of .f that return a default value (otherwise)\nwhenever an error occurs.\n","example_call":"possibly(.f, otherwise = NULL, quiet = TRUE)"},"purrr::invoke_map_int":{"description":"\n","example_call":"invoke_map_int(.f, .x = list(NULL), ..., .env = NULL)"},"purrr::lift_vd":{"description":"\n","example_call":"lift_vd(..f, ..., .type)"},"purrr::compose":{"description":"Create a new function that is the composition of multiple functions,\ni.e. compose(f, g) is equivalent to function(...) f(g(...)).\n","example_call":"compose(..., .dir = c(\"backward\", \"forward\"))"},"purrr::negate":{"description":"Negating a function changes TRUE to FALSE and FALSE to TRUE.\n","example_call":"negate(.p)"},"purrr::partial":{"description":"Partial function application allows you to modify a function by pre-filling\nsome of the arguments. It is particularly useful in conjunction with\nfunctionals and other function operators.\n","example_call":"partial(.f, ..., .env = deprecated(), .lazy = deprecated(),"},"purrr::invoke":{"description":"\n","example_call":"invoke(.f, .x = NULL, ..., .env = NULL)"},"purrr::pmap_dbl":{"description":"These functions are variants of map() that iterate over multiple arguments\nsimultaneously. They are parallel in the sense that each input is processed\nin parallel with the others, not in the sense of multicore computing, i.e.\nthey share the same notion of \"parallel\" as base::pmax() and base::pmin().\n","example_call":"pmap_dbl(.l, .f, ..., .progress = FALSE)"},"purrr::modify_tree":{"description":"modify_tree() allows you to recursively modify a list, supplying functions\nthat either modify each leaf or each node (or both).\n","example_call":"modify_tree(x, ..., leaf = identity, is_node = NULL, pre = identity,"},"purrr::lift_vl":{"description":"\n","example_call":"lift_vl(..f, ..., .type)"},"purrr::assign_in":{"description":"pluck()\n","example_call":"assign_in(x, where, value)"},"purrr::accumulate2":{"description":"accumulate() sequentially applies a 2-argument function to elements of a\nvector. Each application of the function uses the initial value or result\nof the previous application as the first argument. The second argument is\nthe next value of the vector. The results of each application are\nreturned in a list. The accumulation can optionally terminate before\nprocessing the whole vector in response to a done() signal returned by\nthe accumulation function.\n","example_call":"accumulate2(.x, .y, .f, ..., .init, .simplify = NA, .ptype = NULL)"},"purrr::map2_dfr":{"description":"\n","example_call":"map2_dfr(.x, .y, .f, ..., .id = NULL)"},"purrr::accumulate":{"description":"accumulate() sequentially applies a 2-argument function to elements of a\nvector. Each application of the function uses the initial value or result\nof the previous application as the first argument. The second argument is\nthe next value of the vector. The results of each application are\nreturned in a list. The accumulation can optionally terminate before\nprocessing the whole vector in response to a done() signal returned by\nthe accumulation function.\n","example_call":"accumulate(.x, .f, ..., .init, .dir = c(\"forward\", \"backward\"),"},"purrr::keep_at":{"description":"Keep/discard elements based on their name/position\n","example_call":"keep_at(x, at)"},"purrr::map_df":{"description":"\n","example_call":"map_df(.x, .f, ..., .id = NULL)"},"purrr::chuck":{"description":"chuck() implements a generalised form of [[ that allow you to index\ndeeply and flexibly into data structures. If the index you are trying to\naccess does not exist (or is NULL), it will throw (i.e. chuck) an error.\n","example_call":"chuck(.x, ...)"},"purrr::modify_depth":{"description":"map_depth() calls map(.y, .f) on all .y at the specified .depth in\n.x. modify_depth() calls modify(.y, .f) on .y at the specified\n.depth in .x.\n","example_call":"modify_depth(.x, .depth, .f, ..., .ragged = .depth < 0, .is_node = NULL)"},"purrr::is_rate":{"description":"These helpers create rate settings that you can pass to insistently() and\nslowly(). You can also use them in your own functions with rate_sleep().\n","example_call":"is_rate(x)"},"purrr::imap":{"description":"imap(x, ...), an indexed map, is short hand for\nmap2(x, names(x), ...) if x has names, or map2(x, seq_along(x), ...)\nif it does not. This is useful if you need to compute on both the value\nand the position of an element.\n","example_call":"imap(.x, .f, ...)"},"purrr::reduce_right":{"description":"\n","example_call":"reduce_right(.x, .f, ..., .init)"},"purrr::iwalk":{"description":"imap(x, ...), an indexed map, is short hand for\nmap2(x, names(x), ...) if x has names, or map2(x, seq_along(x), ...)\nif it does not. This is useful if you need to compute on both the value\nand the position of an element.\n","example_call":"iwalk(.x, .f, ...)"},"purrr::list_flatten":{"description":"Flattening a list removes a single layer of internal hierarchy,\ni.e. it inlines elements that are lists leaving non-lists alone.\n","example_call":"list_flatten(x, ..., name_spec = \"{outer}_{inner}\", name_repair = c(\"minimal\","},"R6::is.R6Class":{"description":"Checks for R6 class generators and R6 objects.\n","example_call":"is.R6Class(x)"},"R6::is.R6":{"description":"Checks for R6 class generators and R6 objects.\n","example_call":"is.R6(x)"},"R6::R6Class":{"description":"R6 objects are essentially environments, structured in a way that makes them\nlook like an object in a more typical object-oriented language than R. They\nsupport public and private members, as well as inheritance across different\npackages.\n","example_call":"R6Class(classname = NULL, public = list(), private = NULL,"},"RColorBrewer::brewer.pal.info":{"description":"Creates nice looking color palettes especially for thematic maps","example_call":"NULL"},"RColorBrewer::brewer.pal":{"description":"Creates nice looking color palettes especially for thematic maps","example_call":"brewer.pal(n, name)"},"RColorBrewer::display.brewer.all":{"description":"Creates nice looking color palettes especially for thematic maps","example_call":"display.brewer.all(n = NULL, type = \"all\", select = NULL, exact.n = TRUE,"},"RColorBrewer::display.brewer.pal":{"description":"Creates nice looking color palettes especially for thematic maps","example_call":"display.brewer.pal(n, name)"},"Rcpp::loadRcppModules":{"description":"Note: As of release 0.12.5, this function is deprecated;\nloadModule should be used instead.\n","example_call":"loadRcppModules(direct = TRUE)"},"Rcpp::LdFlags":{"description":"In Rcpp versions prior to release 0.10.1 of November 2013,\nLdFlags and RcppLdFlags were used to return the required\nflags and options for the system linker to link to the Rcpp user\nlibrary. Since we no longer build or ship a user library, these\nfunctions now return an empty string. As of Rcpp release 0.12.19,\nthese functions are now deprecated.\n","example_call":"LdFlags()"},"Rcpp::Rcpp.package.skeleton":{"description":"Rcpp.package.skeleton automates the creation of \na new source package that intends to use features of Rcpp. \n","example_call":"Rcpp.package.skeleton(name = \"anRpackage\", list = character(), environment = .GlobalEnv,"},"Rcpp::sizeof":{"description":"demangle gives the demangled type, sizeof its size (in bytes). \n","example_call":"sizeof(type = \"int\", ...)"},"Rcpp::registerPlugin":{"description":"Register an inline plugin for use with \nsourceCpp or cppFunction. Inline plugins are functions\nthat return a list with additional includes, environment variables, and\nother compilation context. \n","example_call":"registerPlugin(name, plugin)"},"Rcpp::compileAttributes":{"description":"Scan the source files within a package for attributes and generate code as required. Generates the bindings required to call C++ functions from R for functions adorned with the Rcpp::export attribute.\n","example_call":"compileAttributes(pkgdir = \".\", verbose = getOption(\"verbose\"))"},"Rcpp::cpp_object_initializer":{"description":"The Rcpp utilizes several internal functions which\nneed to visible within its namespace, yet are not user-facing. This\npage provides basic documentation for them.\n","example_call":"cpp_object_initializer(.self, .refClassDef, ..., .object_pointer)"},"Rcpp::populate":{"description":"Populates a namespace or an environment with the content of a module\n","example_call":"populate(module, env)"},"Rcpp::evalCpp":{"description":"Evaluates a C++ expression. This creates a C++ function using \ncppFunction and calls it to get the result. \n","example_call":"evalCpp(code, depends = character(), plugins = character(),"},"Rcpp::exposeClass":{"description":"The arguments specify a C++ class and some combination of\nconstructors, fields and methods to be shared with R by creating a\ncorresponding reference class in R.\nThe information needed in the call to exposeClass() is the\nsimplest possible in order to create a C++ module for the class; for\nexample, fields and methods in this class need only be identified by\ntheir name.\nInherited fields and methods can also be included, but more\ninformation is needed.\nThe function writes a C++ source file,\ncontaining a module definition to expose the class to\nR, plus one line of R source to create the corresponding reference\nclass.\n","example_call":"exposeClass(class, constructors, fields, methods, file = paste0(CppClass,"},"Rcpp::sourceCpp":{"description":"sourceCpp parses the specified C++ file or source code and looks for functions marked with the Rcpp::export attribute\nand RCPP_MODULE declarations. A shared library is then built and its exported functions and Rcpp modules are made available in the specified environment.\n","example_call":"sourceCpp(file = \"\", code = NULL, env = globalenv(), embeddedR = TRUE,"},"Rcpp::demangle":{"description":"demangle gives the demangled type, sizeof its size (in bytes). \n","example_call":"demangle(type = \"int\", ...)"},"Rcpp::Module":{"description":"Retrieves an Rcpp module from a dynamic library, usually associated with a \npackage.\n","example_call":"Module(module, PACKAGE = methods::getPackageName(where), where = topenv(parent.frame()),"},"Rcpp::loadRcppClass":{"description":"These routines create a class definition in R for an exposed C++\nclass, setting up and executing a load action to incorporate the C++\npointer information.\nNeither function should normally need to be called directly; for most applications,\na call to\nexposeClass() will create both C++ and R code files to\nexpose the C++ class.\n","example_call":"loadRcppClass(Class, CppClass = Class, module = paste0(\"class_\","},"Rcpp::RcppLdFlags":{"description":"In Rcpp versions prior to release 0.10.1 of November 2013,\nLdFlags and RcppLdFlags were used to return the required\nflags and options for the system linker to link to the Rcpp user\nlibrary. Since we no longer build or ship a user library, these\nfunctions now return an empty string. As of Rcpp release 0.12.19,\nthese functions are now deprecated.\n","example_call":"RcppLdFlags()"},"Rcpp::cpp_object_dummy":{"description":"The Rcpp utilizes several internal functions which\nneed to visible within its namespace, yet are not user-facing. This\npage provides basic documentation for them.\n","example_call":"cpp_object_dummy(.self, .refClassDef)"},"Rcpp::getRcppVersion":{"description":"Helper function to report the package version of the R installation.\n","example_call":"getRcppVersion(devel = FALSE)"},"Rcpp::loadModule":{"description":"One or more calls to loadModule will be included in the source\ncode for a package to load modules and optionally expose objects from\nthem.  The actual extraction of the module takes place at load time.\n","example_call":"loadModule(module, what = character(), loadNow, env = topenv(parent.frame()))"},"Rcpp::setRcppClass":{"description":"These routines create a class definition in R for an exposed C++\nclass, setting up and executing a load action to incorporate the C++\npointer information.\nNeither function should normally need to be called directly; for most applications,\na call to\nexposeClass() will create both C++ and R code files to\nexpose the C++ class.\n","example_call":"setRcppClass(Class, CppClass, module, fields = list(), contains = character(),"},"Rcpp::Rcpp.plugin.maker":{"description":"This function helps packages making inline plugins. \n","example_call":"Rcpp.plugin.maker(include.before = \"\", include.after = \"\", LinkingTo = unique(c(package,"},"Rcpp::cppFunction":{"description":"Dynamically define an R function with C++ source code. Compiles and links a shared library with bindings to the C++ function then defines an R function that uses .Call to invoke the library.\n","example_call":"cppFunction(code, depends = character(), plugins = character(),"},"readr::parse_logical":{"description":"Use <U+2060>parse_*()<U+2060> if you have a character vector you want to parse. Use\n<U+2060>col_*()<U+2060> in conjunction with a <U+2060>read_*()<U+2060> function to parse the\nvalues as they're read in.\n","example_call":"parse_logical(x, na = c(\"\", \"NA\"), locale = default_locale(), trim_ws = TRUE)"},"readr::date_names_lang":{"description":"When parsing dates, you often need to know how weekdays of the week and\nmonths are represented as text. This pair of functions allows you to either\ncreate your own, or retrieve from a standard list. The standard list is\nderived from ICU (<U+2060>http://site.icu-project.org<U+2060>) via the stringi package.\n","example_call":"date_names_lang(language)"},"readr::read_rds":{"description":"Consistent wrapper around saveRDS() and readRDS().\nwrite_rds() does not compress by default as space is generally cheaper\nthan time.\n","example_call":"read_rds(file, refhook = NULL)"},"readr::col_factor":{"description":"parse_factor() is similar to factor(), but generates a warning if\nlevels have been specified and some elements of x are not found in those\nlevels.\n","example_call":"col_factor(levels = NULL, ordered = FALSE, include_na = FALSE)"},"readr::format_delim":{"description":"These functions are equivalent to write_csv() etc., but instead\nof writing to disk, they return a string.\n","example_call":"format_delim(x, delim, na = \"NA\", append = FALSE, col_names = !append,"},"readr::fwf_empty":{"description":"A fixed width file can be a very compact representation of numeric data.\nIt's also very fast to parse, because every field is in the same place in\nevery line. Unfortunately, it's painful to parse because you need to\ndescribe the length of every field. Readr aims to make it as easy as possible\nby providing a number of different ways to describe the field structure.\n","example_call":"fwf_empty(file, skip = 0, skip_empty_rows = FALSE, col_names = NULL,"},"readr::parse_integer":{"description":"Use <U+2060>parse_*()<U+2060> if you have a character vector you want to parse. Use\n<U+2060>col_*()<U+2060> in conjunction with a <U+2060>read_*()<U+2060> function to parse the\nvalues as they're read in.\n","example_call":"parse_integer(x, na = c(\"\", \"NA\"), locale = default_locale(), trim_ws = TRUE)"},"readr::read_lines_raw_chunked":{"description":"Read lines from a file or string by chunk.\n","example_call":"read_lines_raw_chunked(file, callback, chunk_size = 10000, skip = 0, progress = show_progress())"},"readr::write_delim":{"description":"The <U+2060>write_*()<U+2060> family of functions are an improvement to analogous function such\nas write.csv() because they are approximately twice as fast. Unlike write.csv(),\nthese functions do not include row names as a column in the written file.\nA generic function, output_column(), is applied to each variable\nto coerce columns to suitable output.\n","example_call":"write_delim(x, file, delim = \" \", na = \"NA\", append = FALSE, col_names = !append,"},"readr::spec_delim":{"description":"When printed, only the first 20 columns are printed by default. To override,\nset options(readr.num_columns) can be used to modify this (a value of 0\nturns off printing).\n","example_call":"spec_delim(file, delim = NULL, quote = \"\\\"\", escape_backslash = FALSE,"},"readr::read_delim":{"description":"read_csv() and read_tsv() are special cases of the more general\nread_delim(). They're useful for reading the most common types of\nflat file data, comma separated values and tab separated values,\nrespectively. read_csv2() uses <U+2060>;<U+2060> for the field separator and <U+2060>,<U+2060> for the\ndecimal point. This format is common in some European countries.\n","example_call":"read_delim(file, delim = NULL, quote = \"\\\"\", escape_backslash = FALSE,"},"readr::readr_example":{"description":"readr comes bundled with a number of sample files in its inst/extdata\ndirectory. This function make them easy to access\n","example_call":"readr_example(file = NULL)"},"readr::fwf_cols":{"description":"A fixed width file can be a very compact representation of numeric data.\nIt's also very fast to parse, because every field is in the same place in\nevery line. Unfortunately, it's painful to parse because you need to\ndescribe the length of every field. Readr aims to make it as easy as possible\nby providing a number of different ways to describe the field structure.\n","example_call":"fwf_cols(...)"},"readr::col_character":{"description":"Use <U+2060>parse_*()<U+2060> if you have a character vector you want to parse. Use\n<U+2060>col_*()<U+2060> in conjunction with a <U+2060>read_*()<U+2060> function to parse the\nvalues as they're read in.\n","example_call":"col_character()"},"readr::read_csv_chunked":{"description":"Read a delimited file by chunks\n","example_call":"read_csv_chunked(file, callback, chunk_size = 10000, col_names = TRUE,"},"readr::parse_number":{"description":"This parses the first number it finds, dropping any non-numeric characters\nbefore the first number and all characters after the first number. The\ngrouping mark specified by the locale is ignored inside the number.\n","example_call":"parse_number(x, na = c(\"\", \"NA\"), locale = default_locale(), trim_ws = TRUE)"},"readr::DataFrameCallback":{"description":"These classes are used to define callback behaviors.\n","example_call":"NULL"},"readr::read_lines":{"description":"read_lines() reads up to n_max lines from a file. New lines are\nnot included in the output. read_lines_raw() produces a list of raw\nvectors, and is useful for handling data with unknown encoding.\nwrite_lines() takes a character vector or list of raw vectors, appending a\nnew line after each entry.\n","example_call":"read_lines(file, skip = 0, skip_empty_rows = FALSE, n_max = Inf,"},"readr::output_column":{"description":"This is a generic function that applied to each column before it is saved\nto disk. It provides a hook for S3 classes that need special handling.\n","example_call":"output_column(x, name)"},"readr::col_skip":{"description":"Use this function to ignore a column when reading in a file.\nTo skip all columns not otherwise specified, use cols_only().\n","example_call":"col_skip()"},"readr::col_date":{"description":"Parse date/times\n","example_call":"col_date(format = \"\")"},"readr::write_excel_csv2":{"description":"The <U+2060>write_*()<U+2060> family of functions are an improvement to analogous function such\nas write.csv() because they are approximately twice as fast. Unlike write.csv(),\nthese functions do not include row names as a column in the written file.\nA generic function, output_column(), is applied to each variable\nto coerce columns to suitable output.\n","example_call":"write_excel_csv2(x, file, na = \"NA\", append = FALSE, col_names = !append,"},"readr::read_delim_chunked":{"description":"Read a delimited file by chunks\n","example_call":"read_delim_chunked(file, callback, delim = NULL, chunk_size = 10000, quote = \"\\\"\","},"readr::melt_csv2_chunked":{"description":"For certain non-rectangular data formats, it can be useful to parse the data\ninto a melted format where each row represents a single token.\n","example_call":"melt_csv2_chunked(file, callback, chunk_size = 10000, locale = default_locale(),"},"readr::tokenizer_csv":{"description":"Explicitly create tokenizer objects. Usually you will not call these\nfunction, but will instead use one of the use friendly wrappers like\nread_csv().\n","example_call":"tokenizer_csv(na = \"NA\", quoted_na = TRUE, quote = \"\\\"\", comment = \"\","},"readr::parse_guess":{"description":"parse_guess() returns the parser vector; guess_parser()\nreturns the name of the parser. These functions use a number of heuristics\nto determine which type of vector is \"best\". Generally they try to err of\nthe side of safety, as it's straightforward to override the parsing choice\nif needed.\n","example_call":"parse_guess(x, na = c(\"\", \"NA\"), locale = default_locale(), trim_ws = TRUE,"},"readr::write_lines":{"description":"read_lines() reads up to n_max lines from a file. New lines are\nnot included in the output. read_lines_raw() produces a list of raw\nvectors, and is useful for handling data with unknown encoding.\nwrite_lines() takes a character vector or list of raw vectors, appending a\nnew line after each entry.\n","example_call":"write_lines(x, file, sep = \"\\n\", na = \"NA\", append = FALSE, num_threads = readr_threads(),"},"readr::count_fields":{"description":"This is useful for diagnosing problems with functions that fail\nto parse correctly.\n","example_call":"count_fields(file, tokenizer, skip = 0, n_max = -1L)"},"readr::write_excel_csv":{"description":"The <U+2060>write_*()<U+2060> family of functions are an improvement to analogous function such\nas write.csv() because they are approximately twice as fast. Unlike write.csv(),\nthese functions do not include row names as a column in the written file.\nA generic function, output_column(), is applied to each variable\nto coerce columns to suitable output.\n","example_call":"write_excel_csv(x, file, na = \"NA\", append = FALSE, col_names = !append,"},"readr::format_csv2":{"description":"These functions are equivalent to write_csv() etc., but instead\nof writing to disk, they return a string.\n","example_call":"format_csv2(x, na = \"NA\", append = FALSE, col_names = !append,"},"readr::format_csv":{"description":"These functions are equivalent to write_csv() etc., but instead\nof writing to disk, they return a string.\n","example_call":"format_csv(x, na = \"NA\", append = FALSE, col_names = !append,"},"readr::format_tsv":{"description":"These functions are equivalent to write_csv() etc., but instead\nof writing to disk, they return a string.\n","example_call":"format_tsv(x, na = \"NA\", append = FALSE, col_names = !append,"},"readr::col_datetime":{"description":"Parse date/times\n","example_call":"col_datetime(format = \"\")"},"readr::spec_tsv":{"description":"When printed, only the first 20 columns are printed by default. To override,\nset options(readr.num_columns) can be used to modify this (a value of 0\nturns off printing).\n","example_call":"spec_tsv(file, col_names = TRUE, col_types = list(), col_select = NULL,"},"readr::parse_datetime":{"description":"Parse date/times\n","example_call":"parse_datetime(x, format = \"\", na = c(\"\", \"NA\"), locale = default_locale(),"},"readr::spec":{"description":"cols_condense() takes a spec object and condenses its definition by setting\nthe default column type to the most frequent type and only listing columns\nwith a different type.\n","example_call":"spec(x)"},"readr::write_csv":{"description":"The <U+2060>write_*()<U+2060> family of functions are an improvement to analogous function such\nas write.csv() because they are approximately twice as fast. Unlike write.csv(),\nthese functions do not include row names as a column in the written file.\nA generic function, output_column(), is applied to each variable\nto coerce columns to suitable output.\n","example_call":"write_csv(x, file, na = \"NA\", append = FALSE, col_names = !append,"},"readr::read_csv":{"description":"read_csv() and read_tsv() are special cases of the more general\nread_delim(). They're useful for reading the most common types of\nflat file data, comma separated values and tab separated values,\nrespectively. read_csv2() uses <U+2060>;<U+2060> for the field separator and <U+2060>,<U+2060> for the\ndecimal point. This format is common in some European countries.\n","example_call":"read_csv(file, col_names = TRUE, col_types = NULL, col_select = NULL,"},"readr::guess_encoding":{"description":"Uses stringi::stri_enc_detect(): see the documentation there\nfor caveats.\n","example_call":"guess_encoding(file, n_max = 10000, threshold = 0.2)"},"readr::melt_table":{"description":"\nThis function has been superseded in readr and moved to the meltr package.\n","example_call":"melt_table(file, locale = default_locale(), na = \"NA\", skip = 0,"},"readr::read_table2":{"description":"\n","example_call":"read_table2(file, col_names = TRUE, col_types = NULL, locale = default_locale(),"},"readr::read_builtin":{"description":"Consistent wrapper around data() that forces the promise. This is also a\nstronger parallel to loading data from a file.\n","example_call":"read_builtin(x, package = NULL)"},"readr::read_csv2_chunked":{"description":"Read a delimited file by chunks\n","example_call":"read_csv2_chunked(file, callback, chunk_size = 10000, col_names = TRUE,"},"readr::tokenizer_line":{"description":"Explicitly create tokenizer objects. Usually you will not call these\nfunction, but will instead use one of the use friendly wrappers like\nread_csv().\n","example_call":"tokenizer_line(na = character(), skip_empty_rows = TRUE)"},"readr::cols_only":{"description":"cols() includes all columns in the input data, guessing the column types\nas the default. cols_only() includes only the columns you explicitly\nspecify, skipping the rest. In general you can substitute list() for\ncols() without changing the behavior.\n","example_call":"cols_only(...)"},"readr::col_guess":{"description":"parse_guess() returns the parser vector; guess_parser()\nreturns the name of the parser. These functions use a number of heuristics\nto determine which type of vector is \"best\". Generally they try to err of\nthe side of safety, as it's straightforward to override the parsing choice\nif needed.\n","example_call":"col_guess()"},"readr::clipboard":{"description":"This is useful in the read_delim() functions to read from the clipboard.\n","example_call":"clipboard()"},"readr::guess_parser":{"description":"parse_guess() returns the parser vector; guess_parser()\nreturns the name of the parser. These functions use a number of heuristics\nto determine which type of vector is \"best\". Generally they try to err of\nthe side of safety, as it's straightforward to override the parsing choice\nif needed.\n","example_call":"guess_parser(x, locale = default_locale(), guess_integer = FALSE,"},"readr::parse_vector":{"description":"Parse a character vector.\n","example_call":"parse_vector(x, collector, na = c(\"\", \"NA\"), locale = default_locale(),"},"readr::fwf_widths":{"description":"A fixed width file can be a very compact representation of numeric data.\nIt's also very fast to parse, because every field is in the same place in\nevery line. Unfortunately, it's painful to parse because you need to\ndescribe the length of every field. Readr aims to make it as easy as possible\nby providing a number of different ways to describe the field structure.\n","example_call":"fwf_widths(widths, col_names = NULL)"},"readr::date_names":{"description":"When parsing dates, you often need to know how weekdays of the week and\nmonths are represented as text. This pair of functions allows you to either\ncreate your own, or retrieve from a standard list. The standard list is\nderived from ICU (<U+2060>http://site.icu-project.org<U+2060>) via the stringi package.\n","example_call":"date_names(mon, mon_ab = mon, day, day_ab = day, am_pm = c(\"AM\","},"readr::read_file_raw":{"description":"read_file() reads a complete file into a single object: either a\ncharacter vector of length one, or a raw vector. write_file() takes a\nsingle string, or a raw vector, and writes it exactly as is.  Raw vectors\nare useful when dealing with binary data, or if you have text data with\nunknown encoding.\n","example_call":"read_file_raw(file)"},"readr::locale":{"description":"A locale object tries to capture all the defaults that can vary between\ncountries. You set the locale in once, and the details are automatically\npassed on down to the columns parsers. The defaults have been chosen to\nmatch R (i.e. US English) as closely as possible. See\nvignette(\"locales\") for more details.\n","example_call":"locale(date_names = \"en\", date_format = \"%AD\", time_format = \"%AT\","},"readr::write_csv2":{"description":"The <U+2060>write_*()<U+2060> family of functions are an improvement to analogous function such\nas write.csv() because they are approximately twice as fast. Unlike write.csv(),\nthese functions do not include row names as a column in the written file.\nA generic function, output_column(), is applied to each variable\nto coerce columns to suitable output.\n","example_call":"write_csv2(x, file, na = \"NA\", append = FALSE, col_names = !append,"},"readr::melt_table2":{"description":"\nThis function has been superseded in readr and moved to the meltr package.\n","example_call":"melt_table2(file, locale = default_locale(), na = \"NA\", skip = 0,"},"readr::parse_factor":{"description":"parse_factor() is similar to factor(), but generates a warning if\nlevels have been specified and some elements of x are not found in those\nlevels.\n","example_call":"parse_factor(x, levels = NULL, ordered = FALSE, na = c(\"\", \"NA\"),"},"readr::default_locale":{"description":"A locale object tries to capture all the defaults that can vary between\ncountries. You set the locale in once, and the details are automatically\npassed on down to the columns parsers. The defaults have been chosen to\nmatch R (i.e. US English) as closely as possible. See\nvignette(\"locales\") for more details.\n","example_call":"default_locale()"},"readr::tokenizer_fwf":{"description":"Explicitly create tokenizer objects. Usually you will not call these\nfunction, but will instead use one of the use friendly wrappers like\nread_csv().\n","example_call":"tokenizer_fwf(begin, end, na = \"NA\", comment = \"\", trim_ws = TRUE,"},"readr::melt_tsv_chunked":{"description":"For certain non-rectangular data formats, it can be useful to parse the data\ninto a melted format where each row represents a single token.\n","example_call":"melt_tsv_chunked(file, callback, chunk_size = 10000, locale = default_locale(),"},"readr::should_read_lazy":{"description":"This function consults the option readr.read_lazy to figure out whether to\ndo lazy reading or not. If the option is unset, the default is FALSE,\nmeaning readr will read files eagerly, not lazily. If you want to use this\noption to express a preference for lazy reading, do this:\n","example_call":"should_read_lazy()"},"readr::melt_tsv":{"description":"\nThis function has been superseded in readr and moved to the meltr package.\n","example_call":"melt_tsv(file, locale = default_locale(), na = c(\"\", \"NA\"),"},"readr::read_table":{"description":"read_table() is designed to read the type of textual\ndata where each column is separated by one (or more) columns of space.\n","example_call":"read_table(file, col_names = TRUE, col_types = NULL, locale = default_locale(),"},"readr::read_lines_raw":{"description":"read_lines() reads up to n_max lines from a file. New lines are\nnot included in the output. read_lines_raw() produces a list of raw\nvectors, and is useful for handling data with unknown encoding.\nwrite_lines() takes a character vector or list of raw vectors, appending a\nnew line after each entry.\n","example_call":"read_lines_raw(file, skip = 0, n_max = -1L, num_threads = readr_threads(),"},"readr::tokenizer_log":{"description":"Explicitly create tokenizer objects. Usually you will not call these\nfunction, but will instead use one of the use friendly wrappers like\nread_csv().\n","example_call":"tokenizer_log(trim_ws)"},"readr::spec_csv2":{"description":"When printed, only the first 20 columns are printed by default. To override,\nset options(readr.num_columns) can be used to modify this (a value of 0\nturns off printing).\n","example_call":"spec_csv2(file, col_names = TRUE, col_types = list(), col_select = NULL,"},"readr::spec_table":{"description":"When printed, only the first 20 columns are printed by default. To override,\nset options(readr.num_columns) can be used to modify this (a value of 0\nturns off printing).\n","example_call":"spec_table(file, col_names = TRUE, col_types = list(), locale = default_locale(),"},"readr::read_csv2":{"description":"read_csv() and read_tsv() are special cases of the more general\nread_delim(). They're useful for reading the most common types of\nflat file data, comma separated values and tab separated values,\nrespectively. read_csv2() uses <U+2060>;<U+2060> for the field separator and <U+2060>,<U+2060> for the\ndecimal point. This format is common in some European countries.\n","example_call":"read_csv2(file, col_names = TRUE, col_types = NULL, col_select = NULL,"},"readr::type_convert":{"description":"This is useful if you need to do some manual munging - you can read the\ncolumns in as character, clean it up with (e.g.) regular expressions and\nthen let readr take another stab at parsing it. The name is a homage to\nthe base utils::type.convert().\n","example_call":"type_convert(df, col_types = NULL, na = c(\"\", \"NA\"), trim_ws = TRUE,"},"readr::AccumulateCallback":{"description":"These classes are used to define callback behaviors.\n","example_call":"NULL"},"readr::col_integer":{"description":"Use <U+2060>parse_*()<U+2060> if you have a character vector you want to parse. Use\n<U+2060>col_*()<U+2060> in conjunction with a <U+2060>read_*()<U+2060> function to parse the\nvalues as they're read in.\n","example_call":"col_integer()"},"readr::date_names_langs":{"description":"When parsing dates, you often need to know how weekdays of the week and\nmonths are represented as text. This pair of functions allows you to either\ncreate your own, or retrieve from a standard list. The standard list is\nderived from ICU (<U+2060>http://site.icu-project.org<U+2060>) via the stringi package.\n","example_call":"date_names_langs()"},"readr::melt_delim":{"description":"\nThis function has been superseded in readr and moved to the meltr package.\n","example_call":"melt_delim(file, delim, quote = \"\\\"\", escape_backslash = FALSE,"},"readr::col_time":{"description":"Parse date/times\n","example_call":"col_time(format = \"\")"},"readr::read_file":{"description":"read_file() reads a complete file into a single object: either a\ncharacter vector of length one, or a raw vector. write_file() takes a\nsingle string, or a raw vector, and writes it exactly as is.  Raw vectors\nare useful when dealing with binary data, or if you have text data with\nunknown encoding.\n","example_call":"read_file(file, locale = default_locale())"},"readr::melt_delim_chunked":{"description":"For certain non-rectangular data formats, it can be useful to parse the data\ninto a melted format where each row represents a single token.\n","example_call":"melt_delim_chunked(file, callback, chunk_size = 10000, delim, quote = \"\\\"\","},"readr::tokenizer_delim":{"description":"Explicitly create tokenizer objects. Usually you will not call these\nfunction, but will instead use one of the use friendly wrappers like\nread_csv().\n","example_call":"tokenizer_delim(delim, quote = \"\\\"\", na = \"NA\", quoted_na = TRUE, comment = \"\","},"readr::tokenize":{"description":"Turns input into a character vector. Usually the tokenization is done purely\nin C++, and never exposed to R (because that requires a copy). This function\nis useful for testing, or when a file doesn't parse correctly and you want\nto see the underlying tokens.\n","example_call":"tokenize(file, tokenizer = tokenizer_csv(), skip = 0, n_max = -1L)"},"readr::read_log":{"description":"This is a fairly standard format for log files - it uses both quotes\nand square brackets for quoting, and there may be literal quotes embedded\nin a quoted string. The dash, \"-\", is used for missing values.\n","example_call":"read_log(file, col_names = FALSE, col_types = NULL, trim_ws = TRUE,"},"readr::spec_csv":{"description":"When printed, only the first 20 columns are printed by default. To override,\nset options(readr.num_columns) can be used to modify this (a value of 0\nturns off printing).\n","example_call":"spec_csv(file, col_names = TRUE, col_types = list(), col_select = NULL,"},"readr::melt_csv_chunked":{"description":"For certain non-rectangular data formats, it can be useful to parse the data\ninto a melted format where each row represents a single token.\n","example_call":"melt_csv_chunked(file, callback, chunk_size = 10000, locale = default_locale(),"},"readr::melt_fwf":{"description":"\nThis function has been superseded in readr and moved to the meltr package.\n","example_call":"melt_fwf(file, col_positions, locale = default_locale(), na = c(\"\","},"readr::local_edition":{"description":"with_edition() allows you to change the active edition of readr for a given\nblock of code. local_edition() allows you to change the active edition of\nreadr until the end of the current function or file.\n","example_call":"local_edition(edition, env = parent.frame())"},"readr::write_tsv":{"description":"The <U+2060>write_*()<U+2060> family of functions are an improvement to analogous function such\nas write.csv() because they are approximately twice as fast. Unlike write.csv(),\nthese functions do not include row names as a column in the written file.\nA generic function, output_column(), is applied to each variable\nto coerce columns to suitable output.\n","example_call":"write_tsv(x, file, na = \"NA\", append = FALSE, col_names = !append,"},"readr::read_lines_chunked":{"description":"Read lines from a file or string by chunk.\n","example_call":"read_lines_chunked(file, callback, chunk_size = 10000, skip = 0, locale = default_locale(),"},"readr::tokenizer_ws":{"description":"Explicitly create tokenizer objects. Usually you will not call these\nfunction, but will instead use one of the use friendly wrappers like\nread_csv().\n","example_call":"tokenizer_ws(na = \"NA\", comment = \"\", skip_empty_rows = TRUE)"},"readr::col_logical":{"description":"Use <U+2060>parse_*()<U+2060> if you have a character vector you want to parse. Use\n<U+2060>col_*()<U+2060> in conjunction with a <U+2060>read_*()<U+2060> function to parse the\nvalues as they're read in.\n","example_call":"col_logical()"},"readr::cols":{"description":"cols() includes all columns in the input data, guessing the column types\nas the default. cols_only() includes only the columns you explicitly\nspecify, skipping the rest. In general you can substitute list() for\ncols() without changing the behavior.\n","example_call":"cols(..., .default = col_guess())"},"readr::cols_condense":{"description":"cols_condense() takes a spec object and condenses its definition by setting\nthe default column type to the most frequent type and only listing columns\nwith a different type.\n","example_call":"cols_condense(x)"},"readr::fwf_positions":{"description":"A fixed width file can be a very compact representation of numeric data.\nIt's also very fast to parse, because every field is in the same place in\nevery line. Unfortunately, it's painful to parse because you need to\ndescribe the length of every field. Readr aims to make it as easy as possible\nby providing a number of different ways to describe the field structure.\n","example_call":"fwf_positions(start, end = NULL, col_names = NULL)"},"readr::show_progress":{"description":"By default, readr shows progress bars. However, progress reporting is\nsuppressed if any of the following conditions hold:\n","example_call":"show_progress()"},"readr::tokenizer_tsv":{"description":"Explicitly create tokenizer objects. Usually you will not call these\nfunction, but will instead use one of the use friendly wrappers like\nread_csv().\n","example_call":"tokenizer_tsv(na = \"NA\", quoted_na = TRUE, quote = \"\\\"\", comment = \"\","},"readr::ListCallback":{"description":"These classes are used to define callback behaviors.\n","example_call":"NULL"},"readr::melt_csv2":{"description":"\nThis function has been superseded in readr and moved to the meltr package.\n","example_call":"melt_csv2(file, locale = default_locale(), na = c(\"\", \"NA\"),"},"readr::parse_date":{"description":"Parse date/times\n","example_call":"parse_date(x, format = \"\", na = c(\"\", \"NA\"), locale = default_locale(),"},"readr::parse_character":{"description":"Use <U+2060>parse_*()<U+2060> if you have a character vector you want to parse. Use\n<U+2060>col_*()<U+2060> in conjunction with a <U+2060>read_*()<U+2060> function to parse the\nvalues as they're read in.\n","example_call":"parse_character(x, na = c(\"\", \"NA\"), locale = default_locale(), trim_ws = TRUE)"},"readr::read_fwf":{"description":"A fixed width file can be a very compact representation of numeric data.\nIt's also very fast to parse, because every field is in the same place in\nevery line. Unfortunately, it's painful to parse because you need to\ndescribe the length of every field. Readr aims to make it as easy as possible\nby providing a number of different ways to describe the field structure.\n","example_call":"read_fwf(file, col_positions = fwf_empty(file, skip, n = guess_max),"},"readr::edition_get":{"description":"Retrieve the currently active edition\n","example_call":"edition_get()"},"readr::read_tsv_chunked":{"description":"Read a delimited file by chunks\n","example_call":"read_tsv_chunked(file, callback, chunk_size = 10000, col_names = TRUE,"},"readr::datasource":{"description":"Create a source object.\n","example_call":"datasource(file, skip = 0, skip_empty_rows = FALSE, comment = \"\","},"readr::parse_time":{"description":"Parse date/times\n","example_call":"parse_time(x, format = \"\", na = c(\"\", \"NA\"), locale = default_locale(),"},"readr::write_rds":{"description":"Consistent wrapper around saveRDS() and readRDS().\nwrite_rds() does not compress by default as space is generally cheaper\nthan time.\n","example_call":"write_rds(x, file, compress = c(\"none\", \"gz\", \"bz2\", \"xz\"), version = 2,"},"readr::ChunkCallback":{"description":"These classes are used to define callback behaviors.\n","example_call":"NULL"},"readr::col_double":{"description":"Use <U+2060>parse_*()<U+2060> if you have a character vector you want to parse. Use\n<U+2060>col_*()<U+2060> in conjunction with a <U+2060>read_*()<U+2060> function to parse the\nvalues as they're read in.\n","example_call":"col_double()"},"readr::col_number":{"description":"This parses the first number it finds, dropping any non-numeric characters\nbefore the first number and all characters after the first number. The\ngrouping mark specified by the locale is ignored inside the number.\n","example_call":"col_number()"},"readr::parse_double":{"description":"Use <U+2060>parse_*()<U+2060> if you have a character vector you want to parse. Use\n<U+2060>col_*()<U+2060> in conjunction with a <U+2060>read_*()<U+2060> function to parse the\nvalues as they're read in.\n","example_call":"parse_double(x, na = c(\"\", \"NA\"), locale = default_locale(), trim_ws = TRUE)"},"readr::problems":{"description":"Readr functions will only throw an error if parsing fails in an unrecoverable\nway. However, there are lots of potential problems that you might want to\nknow about - these are stored in the problems attribute of the\noutput, which you can easily access with this function.\nstop_for_problems() will throw an error if there are any parsing\nproblems: this is useful for automated scripts where you want to throw\nan error as soon as you encounter a problem.\n","example_call":"problems(x = .Last.value)"},"readr::write_file":{"description":"read_file() reads a complete file into a single object: either a\ncharacter vector of length one, or a raw vector. write_file() takes a\nsingle string, or a raw vector, and writes it exactly as is.  Raw vectors\nare useful when dealing with binary data, or if you have text data with\nunknown encoding.\n","example_call":"write_file(x, file, append = FALSE, path = deprecated())"},"readr::stop_for_problems":{"description":"Readr functions will only throw an error if parsing fails in an unrecoverable\nway. However, there are lots of potential problems that you might want to\nknow about - these are stored in the problems attribute of the\noutput, which you can easily access with this function.\nstop_for_problems() will throw an error if there are any parsing\nproblems: this is useful for automated scripts where you want to throw\nan error as soon as you encounter a problem.\n","example_call":"stop_for_problems(x)"},"readr::melt_csv":{"description":"\nThis function has been superseded in readr and moved to the meltr package.\n","example_call":"melt_csv(file, locale = default_locale(), na = c(\"\", \"NA\"),"},"readr::read_tsv":{"description":"read_csv() and read_tsv() are special cases of the more general\nread_delim(). They're useful for reading the most common types of\nflat file data, comma separated values and tab separated values,\nrespectively. read_csv2() uses <U+2060>;<U+2060> for the field separator and <U+2060>,<U+2060> for the\ndecimal point. This format is common in some European countries.\n","example_call":"read_tsv(file, col_names = TRUE, col_types = NULL, col_select = NULL,"},"readr::with_edition":{"description":"with_edition() allows you to change the active edition of readr for a given\nblock of code. local_edition() allows you to change the active edition of\nreadr until the end of the current function or file.\n","example_call":"with_edition(edition, code)"},"readr::as.col_spec":{"description":"This is most useful for generating a specification using the short form\n","example_call":"as.col_spec(x)"},"readr::SideEffectChunkCallback":{"description":"These classes are used to define callback behaviors.\n","example_call":"NULL"},"readr::readr_threads":{"description":"The number of threads returned can be set by\n","example_call":"readr_threads()"},"readr::should_show_types":{"description":"Wrapper around getOption(\"readr.show_col_types\") that implements some fall\nback logic if the option is unset. This returns:\n","example_call":"should_show_types()"},"readxl::format_from_signature":{"description":"Determine if files are xls or xlsx (or from the xlsx family).\n","example_call":"format_from_signature(path)"},"readxl::format_from_ext":{"description":"Determine if files are xls or xlsx (or from the xlsx family).\n","example_call":"format_from_ext(path)"},"readxl::readxl_progress":{"description":"By default, readxl displays a progress spinner unless\none of the following is TRUE:\n","example_call":"readxl_progress()"},"readxl::read_xlsx":{"description":"Read xls and xlsx files\n","example_call":"read_xlsx(path, sheet = NULL, range = NULL, col_names = TRUE,"},"readxl::excel_format":{"description":"Determine if files are xls or xlsx (or from the xlsx family).\n","example_call":"excel_format(path, guess = TRUE)"},"readxl::read_excel":{"description":"Read xls and xlsx files\n","example_call":"read_excel(path, sheet = NULL, range = NULL, col_names = TRUE,"},"readxl::excel_sheets":{"description":"The list of sheet names is especially useful when you want to iterate over\nall of the sheets in a workbook. The vignette(\"readxl-workflows\") article\nprovides several worked examples of this, showing how to combine readxl with\nother packages in the tidyverse, such as purrr, or with base R functions like\nlapply().\n","example_call":"excel_sheets(path)"},"readxl::read_xls":{"description":"Read xls and xlsx files\n","example_call":"read_xls(path, sheet = NULL, range = NULL, col_names = TRUE,"},"readxl::readxl_example":{"description":"readxl comes bundled with some example files in its inst/extdata\ndirectory. This function make them easy to access.\n","example_call":"readxl_example(path = NULL)"},"rematch::re_match":{"description":"This function is a small wrapper on the regexpr\nbase R function, to provide an API that is easier to use.\n","example_call":"re_match(pattern, text, ...)"},"rematch::re_match_all":{"description":"This function is a thin wrapper on the gregexpr\nbase R function, to provide an API that is easier to use. It is\nsimilar to re_match, but extracts all matches, including\npotentially named capture groups.\n","example_call":"re_match_all(pattern, text, ...)"},"rematch2::re_exec_all":{"description":"Match a regular expression to a string, and return matches, match positions,\nand capture groups.  This function is like its\nmatch counterpart, except it returns\nmatch/capture group start and end positions in addition to the matched\nvalues.\n","example_call":"re_exec_all(text, pattern, perl = TRUE, ...)"},"rematch2::bind_re_match":{"description":"Taking a data frame and a column name as input, this function will run\nre_match and bind the results as new columns to the original\ntable., returning a tibble. This makes it friendly for\npipe-oriented programming with magrittr.\n","example_call":"bind_re_match(df, from, ..., keep_match = FALSE)"},"rematch2::$.rematch_records":{"description":"Match a regular expression to a string, and return matches, match positions,\nand capture groups.  This function is like its\nmatch counterpart, except it returns match/capture\ngroup start and end positions in addition to the matched values.\n","example_call":"$.rematch_records(x, name)"},"rematch2::$.rematch_allrecords":{"description":"Match a regular expression to a string, and return matches, match positions,\nand capture groups.  This function is like its\nmatch counterpart, except it returns match/capture\ngroup start and end positions in addition to the matched values.\n","example_call":"$.rematch_allrecords(x, name)"},"rematch2::re_match":{"description":"re_match wraps regexpr and returns the\nmatch results in a convenient data frame. The data frame has one\ncolumn for each capture group if perl=TRUE, and one final columns\ncalled .match for the matching (sub)string. The columns of the capture\ngroups are named if the groups themselves are named.\n","example_call":"re_match(text, pattern, perl = TRUE, ...)"},"rematch2::re_match_all":{"description":"This function is a thin wrapper on the gregexpr\nbase R function, to extract the matching (sub)strings as a data frame.\nIt extracts all matches, and potentially their capture groups as well.\n","example_call":"re_match_all(text, pattern, perl = TRUE, ...)"},"rematch2::bind_re_match_":{"description":"Taking a data frame and a column name as input, this function will run\nre_match and bind the results as new columns to the original\ntable., returning a tibble. This makes it friendly for\npipe-oriented programming with magrittr.\n","example_call":"bind_re_match_(df, from, ..., keep_match = FALSE)"},"rematch2::re_exec":{"description":"Match a regular expression to a string, and return matches, match positions,\nand capture groups.  This function is like its\nmatch counterpart, except it returns match/capture\ngroup start and end positions in addition to the matched values.\n","example_call":"re_exec(text, pattern, perl = TRUE, ...)"},"rlang::get_expr":{"description":"These helpers are useful to make your function work generically\nwith quosures and raw expressions. First call get_expr() to\nextract an expression. Once you're done processing the expression,\ncall set_expr() on the original object to update the expression.\nYou can return the result of set_expr(), either a formula or an\nexpression depending on the input type. Note that set_expr() does\nnot change its input, it creates a new object.\n","example_call":"get_expr(x, default = x)"},"rlang::is_raw":{"description":"These type predicates aim to make type testing in R more\nconsistent. They are wrappers around base::typeof(), so operate\nat a level beneath S3/S4 etc.\n","example_call":"is_raw(x, n = NULL)"},"rlang::check_dots_used":{"description":"When ... arguments are passed to methods, it is assumed there\nmethod will match and use these arguments. If this isn't the case,\nthis often indicates a programming error. Call check_dots_used()\nto fail with an error when unused arguments are detected.\n","example_call":"check_dots_used(env = caller_env(), call = caller_env(), error = NULL,"},"rlang::set_attrs":{"description":"\n","example_call":"set_attrs(.x, ...)"},"rlang::search_env":{"description":"The search path is a chain of environments containing exported\nfunctions of attached packages.\n","example_call":"search_env(name)"},"rlang::is_logical":{"description":"These type predicates aim to make type testing in R more\nconsistent. They are wrappers around base::typeof(), so operate\nat a level beneath S3/S4 etc.\n","example_call":"is_logical(x, n = NULL)"},"rlang::int":{"description":"\n","example_call":"int(...)"},"rlang::env_print":{"description":"This prints:\n","example_call":"env_print(env = caller_env())"},"rlang::is_syntactic_literal":{"description":"In rlang, an expression is the return type of parse_expr(), the\nset of objects that can be obtained from parsing R code. Under this\ndefinition expressions include numbers, strings, NULL, symbols,\nand function calls. These objects can be classified as:\n","example_call":"is_syntactic_literal(x)"},"rlang::env_binding_are_locked":{"description":"\n","example_call":"env_binding_are_locked(env, nms = NULL)"},"rlang::%@%":{"description":"This operator extracts or sets attributes for regular objects and\nS4 fields for S4 objects.\n","example_call":"%@%(x, name)"},"rlang::entrace":{"description":"entrace() is a low level function. See global_entrace() for a\nuser-friendly way of enriching errors and other conditions from\nyour RProfile.\n","example_call":"entrace(cnd, ..., top = NULL, bottom = NULL)"},"rlang::has_length":{"description":"This is a function for the common task of testing the length of an\nobject. It checks the length of an object in a non-generic way:\nbase::length() methods are ignored.\n","example_call":"has_length(x, n = NULL)"},"rlang::is_lang":{"description":"\nThese functions are deprecated, please use is_call() and its n\nargument instead.\n","example_call":"is_lang(x, name = NULL, n = NULL, ns = NULL)"},"rlang::env_label":{"description":"Special environments like the global environment have their own\nnames. env_name() returns:\n","example_call":"env_label(env)"},"rlang::is_true":{"description":"These functions bypass R's automatic conversion rules and check\nthat x is literally TRUE or FALSE.\n","example_call":"is_true(x)"},"rlang::inject":{"description":"inject() evaluates an expression with injection\nsupport. There are three main usages:\n","example_call":"inject(expr, env = caller_env())"},"rlang::is_call_simple":{"description":"call_name() and call_ns() extract the function name or\nnamespace of simple calls as a string. They return NULL for\ncomplex calls.\n","example_call":"is_call_simple(x, ns = NULL)"},"rlang::is_false":{"description":"These functions bypass R's automatic conversion rules and check\nthat x is literally TRUE or FALSE.\n","example_call":"is_false(x)"},"rlang::wref_key":{"description":"Get key/value from a weak reference object\n","example_call":"wref_key(x)"},"rlang::warning_cnd":{"description":"These constructors create subclassed conditions, the objects that\npower the error, warning, and message system in R.\n","example_call":"warning_cnd(class = NULL, ..., message = \"\", call = NULL, use_cli_format = NULL)"},"rlang::as_data_pronoun":{"description":"A data mask is an environment (or possibly\nmultiple environments forming an ancestry) containing user-supplied\nobjects. Objects in the mask have precedence over objects in the\nenvironment (i.e. they mask those objects). Many R functions\nevaluate quoted expressions in a data mask so these expressions can\nrefer to objects within the user data.\n","example_call":"as_data_pronoun(data)"},"rlang::ffi_standalone_check_number_1.0.7":{"description":"Internal API for standalone-types-check\n","example_call":"NULL"},"rlang::chr_unserialise_unicode":{"description":"\n","example_call":"chr_unserialise_unicode(chr)"},"rlang::env_coalesce":{"description":"Both these functions preserve active bindings and promises (the\nlatter are only preserved on R >= 4.0.0).\n","example_call":"env_coalesce(env, from)"},"rlang::expr":{"description":"expr() defuses an R expression with\ninjection support.\n","example_call":"expr(expr)"},"rlang::fn_body":{"description":"fn_body() is a simple wrapper around base::body(). It always\nreturns a <U+2060>\\{<U+2060> expression and throws an error when the input is a\nprimitive function (whereas body() returns NULL). The setter\nversion preserves attributes, unlike <U+2060>body<-<U+2060>.\n","example_call":"fn_body(fn = caller_fn())"},"rlang::env_bind_active":{"description":"These functions create bindings in an environment. The bindings are\nsupplied through ... as pairs of names and values or expressions.\nenv_bind() is equivalent to evaluating a <U+2060><-<U+2060> expression within\nthe given environment. This function should take care of the\nmajority of use cases but the other variants can be useful for\nspecific problems.\n","example_call":"env_bind_active(.env, ...)"},"rlang::current_call":{"description":"These accessors retrieve properties of frames on the call stack.\nThe prefix indicates for which frame a property should be accessed:\n","example_call":"current_call()"},"rlang::ns_imports_env":{"description":"Namespaces are the environment where all the functions of a package\nlive. The parent environments of namespaces are the imports\nenvironments, which contain all the functions imported from other\npackages.\n","example_call":"ns_imports_env(x = caller_env())"},"rlang::is_scalar_integer":{"description":"These predicates check for a given type and whether the vector is\n\"scalar\", that is, of length 1.\n","example_call":"is_scalar_integer(x)"},"rlang::is_zap":{"description":"zap() creates a sentinel object that indicates that an object\nshould be removed. For instance, named zaps instruct env_bind()\nand call_modify() to remove those objects from the environment or\nthe call.\n","example_call":"is_zap(x)"},"rlang::call_modify":{"description":"If you are working with a user-supplied call, make sure the\narguments are standardised with call_match() before\nmodifying the call.\n","example_call":"call_modify(.call, ..., .homonyms = c(\"keep\", \"first\", \"last\","},"rlang::is_lgl_na":{"description":"\n","example_call":"is_lgl_na(x)"},"rlang::global_entrace":{"description":"global_entrace() enriches base errors, warnings, and messages\nwith rlang features.\n","example_call":"global_entrace(enable = TRUE, class = c(\"error\", \"warning\", \"message\"))"},"rlang::is_bare_vector":{"description":"These predicates check for a given type but only return TRUE for\nbare R objects. Bare objects have no class attributes. For example,\na data frame is a list, but not a bare list.\n","example_call":"is_bare_vector(x, n = NULL)"},"rlang::pkg_env_name":{"description":"The search path is a chain of environments containing exported\nfunctions of attached packages.\n","example_call":"pkg_env_name(pkg)"},"rlang::return_from":{"description":"\n","example_call":"return_from(frame, value = NULL)"},"rlang::env_length":{"description":"env_names() returns object names from an enviroment env as a\ncharacter vector. All names are returned, even those starting with\na dot. env_length() returns the number of bindings.\n","example_call":"env_length(env)"},"rlang::is_missing":{"description":"These functions help using the missing argument as a regular R\nobject.\n","example_call":"is_missing(x)"},"rlang::dots_list":{"description":"list2(...) is equivalent to list(...) with a few additional\nfeatures, collectively called dynamic dots. While\nlist2() hard-code these features, dots_list() is a lower-level\nversion that offers more control.\n","example_call":"dots_list(..., .named = FALSE, .ignore_empty = c(\"trailing\","},"rlang::on_load":{"description":"on_load() is for your own package and runs expressions when the\nnamespace is not sealed yet. This means you can modify existing\nbinding or create new ones. This is not the case with\non_package_load() which runs expressions after a foreign package\nhas finished loading, at which point its namespace is sealed.\n","example_call":"on_load(expr, env = parent.frame(), ns = topenv(env))"},"rlang::flatten_lgl":{"description":"\n","example_call":"flatten_lgl(x)"},"rlang::env_get":{"description":"env_get() extracts an object from an enviroment env. By\ndefault, it does not look in the parent environments.\nenv_get_list() extracts multiple objects from an environment into\na named list.\n","example_call":"env_get(env = caller_env(), nm, default, inherit = FALSE, last = empty_env())"},"rlang::peek_option":{"description":"For local_options() and push_options(), the old option\nvalues. peek_option() returns the current value of an option\nwhile the plural peek_options() returns a list of current\noption values.\n","example_call":"peek_option(name)"},"rlang::is_scalar_double":{"description":"These predicates check for a given type and whether the vector is\n\"scalar\", that is, of length 1.\n","example_call":"is_scalar_double(x)"},"rlang::raw_deparse_str":{"description":"\n","example_call":"raw_deparse_str(x, prefix = NULL, suffix = NULL)"},"rlang::frame_fn":{"description":"These accessors retrieve properties of frames on the call stack.\nThe prefix indicates for which frame a property should be accessed:\n","example_call":"frame_fn(frame = caller_env())"},"rlang::is_call":{"description":"This function tests if x is a call. This is a\npattern-matching predicate that returns FALSE if name and n\nare supplied and the call does not match these properties.\n","example_call":"is_call(x, name = NULL, n = NULL, ns = NULL)"},"rlang::is_formula":{"description":"is_formula() tests whether x is a call to ~. is_bare_formula()\ntests in addition that x does not inherit from anything else than\n\"formula\".\n","example_call":"is_formula(x, scoped = NULL, lhs = NULL)"},"rlang::na_lgl":{"description":"\n","example_call":"NULL"},"rlang::.data":{"description":"The .data and .env pronouns make it explicit where to find\nobjects when programming with data-masked\nfunctions.\n","example_call":"NULL"},"rlang::is_spliced_bare":{"description":"The splicing operator <U+2060>!!!<U+2060> operates both in values contexts like\nlist2() and dots_list(), and in metaprogramming contexts like\nexpr(), enquos(), or inject(). While the end result looks the\nsame, the implementation is different and much more efficient in\nthe value cases. This difference in implementation may cause\nperformance issues for instance when going from:\n","example_call":"is_spliced_bare(x)"},"rlang::enquos":{"description":"enquo() and enquos() defuse function arguments.\nA defused expression can be examined, modified, and injected into\nother expressions.\n","example_call":"enquos(..., .named = FALSE, .ignore_empty = c(\"trailing\","},"rlang::is_spliced":{"description":"The splicing operator <U+2060>!!!<U+2060> operates both in values contexts like\nlist2() and dots_list(), and in metaprogramming contexts like\nexpr(), enquos(), or inject(). While the end result looks the\nsame, the implementation is different and much more efficient in\nthe value cases. This difference in implementation may cause\nperformance issues for instance when going from:\n","example_call":"is_spliced(x)"},"rlang::flatten_if":{"description":"\n","example_call":"flatten_if(x, predicate = is_spliced)"},"rlang::format_error_bullets":{"description":"format_error_bullets() takes a character vector and returns a single\nstring (or an empty vector if the input is empty). The elements of\nthe input vector are assembled as a list of bullets, depending on\ntheir names:\n","example_call":"format_error_bullets(x)"},"rlang::new_quosures":{"description":"This small S3 class provides methods for [ and c() and ensures\nthe following invariants:\n","example_call":"new_quosures(x)"},"rlang::is_character":{"description":"These type predicates aim to make type testing in R more\nconsistent. They are wrappers around base::typeof(), so operate\nat a level beneath S3/S4 etc.\n","example_call":"is_character(x, n = NULL)"},"rlang::as_name":{"description":"as_name() converts symbols to character strings. The\nconversion is deterministic. That is, the roundtrip symbol -> name -> symbol always gives the same result.\n","example_call":"as_name(x)"},"rlang::arg_match0":{"description":"This is equivalent to base::match.arg() with a few differences:\n","example_call":"arg_match0(arg, values, arg_nm = caller_arg(arg), error_call = caller_env())"},"rlang::done":{"description":"A value boxed with done() signals to its caller that it\nshould stop iterating. Use it to shortcircuit a loop.\n","example_call":"done(x)"},"rlang::is_closure":{"description":"The R language defines two different types of functions: primitive\nfunctions, which are low-level, and closures, which are the regular\nkind of functions.\n","example_call":"is_closure(x)"},"rlang::global_frame":{"description":"\nDeprecated as of rlang 0.3.0.\n","example_call":"global_frame()"},"rlang::pairlist2":{"description":"This pairlist constructor uses dynamic dots. Use\nit to manually create argument lists for calls or parameter lists\nfor functions.\n","example_call":"pairlist2(...)"},"rlang::new_logical":{"description":"\n","example_call":"new_logical(n, names = NULL)"},"rlang::is_empty":{"description":"Is object an empty vector or NULL?\n","example_call":"is_empty(x)"},"rlang::empty_env":{"description":"The empty environment is the only one that does not have a parent.\nIt is always used as the tail of an environment chain such as the\nsearch path (see search_envs()).\n","example_call":"empty_env()"},"rlang::is_bare_double":{"description":"These predicates check for a given type but only return TRUE for\nbare R objects. Bare objects have no class attributes. For example,\na data frame is a list, but not a bare list.\n","example_call":"is_bare_double(x, n = NULL)"},"rlang::as_function":{"description":"as_function() transforms a one-sided formula into a function.\nThis powers the lambda syntax in packages like purrr.\n","example_call":"as_function(x, env = global_env(), ..., arg = caller_arg(x), call = caller_env())"},"rlang::UQS":{"description":"\nThese operators are deprecated in favour of\n!! and !!!.\n","example_call":"UQS(x)"},"rlang::rep_along":{"description":"These functions take the idea of seq_along() and apply it to\nrepeating values.\n","example_call":"rep_along(along, x)"},"rlang::quo_set_env":{"description":"These tools inspect and modify quosures, a type of\ndefused expression that includes a reference to the\ncontext where it was created. A quosure is guaranteed to evaluate\nin its original environment and can refer to local objects safely.\n","example_call":"quo_set_env(quo, env)"},"rlang::splice":{"description":"The splicing operator <U+2060>!!!<U+2060> operates both in values contexts like\nlist2() and dots_list(), and in metaprogramming contexts like\nexpr(), enquos(), or inject(). While the end result looks the\nsame, the implementation is different and much more efficient in\nthe value cases. This difference in implementation may cause\nperformance issues for instance when going from:\n","example_call":"splice(x)"},"rlang::syms":{"description":"Symbols are a kind of defused expression that\nrepresent objects in environments.\n","example_call":"syms(x)"},"rlang::is_primitive_lazy":{"description":"The R language defines two different types of functions: primitive\nfunctions, which are low-level, and closures, which are the regular\nkind of functions.\n","example_call":"is_primitive_lazy(x)"},"rlang::caller_env":{"description":"These accessors retrieve properties of frames on the call stack.\nThe prefix indicates for which frame a property should be accessed:\n","example_call":"caller_env(n = 1)"},"rlang::is_scalar_character":{"description":"These predicates check for a given type and whether the vector is\n\"scalar\", that is, of length 1.\n","example_call":"is_scalar_character(x)"},"rlang::new_environment":{"description":"These functions create new environments.\n","example_call":"new_environment(data = list(), parent = empty_env())"},"rlang::env_cache":{"description":"env_cache() is a wrapper around env_get() and env_poke()\ndesigned to retrieve a cached value from env.\n","example_call":"env_cache(env, nm, default)"},"rlang::is_named2":{"description":"is_named() always returns TRUE for empty vectors because\n","example_call":"is_named2(x)"},"rlang::flatten_chr":{"description":"\n","example_call":"flatten_chr(x)"},"rlang::flatten_raw":{"description":"\n","example_call":"flatten_raw(x)"},"rlang::cnd":{"description":"These constructors create subclassed conditions, the objects that\npower the error, warning, and message system in R.\n","example_call":"cnd(class, ..., message = \"\", call = NULL, use_cli_format = NULL)"},"rlang::exprs_auto_name":{"description":"This gives default names to unnamed elements of a list of\nexpressions (or expression wrappers such as formulas or\nquosures), deparsed with as_label().\n","example_call":"exprs_auto_name(exprs, ..., repair_auto = c(\"minimal\", \"unique\"), repair_quiet = FALSE)"},"rlang::lang":{"description":"\nThese functions are deprecated, please use call2() and\nnew_call() instead.\n","example_call":"lang(.fn, ..., .ns = NULL)"},"rlang::flatten_cpl":{"description":"\n","example_call":"flatten_cpl(x)"},"rlang::quo_expr":{"description":"\nThis function is deprecated, please use quo_squash() instead.\n","example_call":"quo_expr(quo, warn = FALSE)"},"rlang::is_integer":{"description":"These type predicates aim to make type testing in R more\nconsistent. They are wrappers around base::typeof(), so operate\nat a level beneath S3/S4 etc.\n","example_call":"is_integer(x, n = NULL)"},"rlang::f_label":{"description":"Equivalent of expr_text() and expr_label() for formulas.\n","example_call":"f_label(x)"},"rlang::exiting":{"description":"\n","example_call":"exiting(handler)"},"rlang::env_clone":{"description":"Both these functions preserve active bindings and promises (the\nlatter are only preserved on R >= 4.0.0).\n","example_call":"env_clone(env, parent = env_parent(env))"},"rlang::%<~%":{"description":"These functions create bindings in an environment. The bindings are\nsupplied through ... as pairs of names and values or expressions.\nenv_bind() is equivalent to evaluating a <U+2060><-<U+2060> expression within\nthe given environment. This function should take care of the\nmajority of use cases but the other variants can be useful for\nspecific problems.\n","example_call":"%<~%(lhs, rhs)"},"rlang::as_utf8_character":{"description":"\n","example_call":"as_utf8_character(x)"},"rlang::is_scoped":{"description":"\n","example_call":"is_scoped(nm)"},"rlang::search_envs":{"description":"The search path is a chain of environments containing exported\nfunctions of attached packages.\n","example_call":"search_envs()"},"rlang::is_atomic":{"description":"These type predicates aim to make type testing in R more\nconsistent. They are wrappers around base::typeof(), so operate\nat a level beneath S3/S4 etc.\n","example_call":"is_atomic(x, n = NULL)"},"rlang::names2<-":{"description":"names2() always returns a character vector, even when an\nobject does not have a names attribute. In this case, it returns\na vector of empty names \"\". It also standardises missing names to\n\"\".\n","example_call":"names2<-(x, value)"},"rlang::cnd_type":{"description":"Use cnd_type() to check what type a condition is.\n","example_call":"cnd_type(cnd)"},"rlang::scoped_env":{"description":"\n","example_call":"scoped_env(nm)"},"rlang::is_bare_string":{"description":"These predicates check for a given type but only return TRUE for\nbare R objects. Bare objects have no class attributes. For example,\na data frame is a list, but not a bare list.\n","example_call":"is_bare_string(x, n = NULL)"},"rlang::as_list":{"description":"\n","example_call":"as_list(x)"},"rlang::is_namespace":{"description":"Is an object a namespace environment?\n","example_call":"is_namespace(x)"},"rlang::is_bare_character":{"description":"These predicates check for a given type but only return TRUE for\nbare R objects. Bare objects have no class attributes. For example,\na data frame is a list, but not a bare list.\n","example_call":"is_bare_character(x, n = NULL)"},"rlang::zap":{"description":"zap() creates a sentinel object that indicates that an object\nshould be removed. For instance, named zaps instruct env_bind()\nand call_modify() to remove those objects from the environment or\nthe call.\n","example_call":"zap()"},"rlang::ns_registry_env":{"description":"Note that the namespace registry does not behave like a normal\nenvironment because the parent is NULL instead of the empty\nenvironment. This is exported for expert usage in development tools\nonly.\n","example_call":"ns_registry_env()"},"rlang::is_scalar_logical":{"description":"These predicates check for a given type and whether the vector is\n\"scalar\", that is, of length 1.\n","example_call":"is_scalar_logical(x)"},"rlang::call_ns":{"description":"call_name() and call_ns() extract the function name or\nnamespace of simple calls as a string. They return NULL for\ncomplex calls.\n","example_call":"call_ns(call)"},"rlang::new_formula":{"description":"Create a formula\n","example_call":"new_formula(lhs, rhs, env = caller_env())"},"rlang::!!!":{"description":"The splice operator <U+2060>!!!<U+2060> implemented in dynamic dots\ninjects a list of arguments into a function call. It belongs to the\nfamily of injection operators and provides the same\nfunctionality as do.call().\n","example_call":"!!!(x)"},"rlang::wref_value":{"description":"Get key/value from a weak reference object\n","example_call":"wref_value(x)"},"rlang::quo_set_expr":{"description":"These tools inspect and modify quosures, a type of\ndefused expression that includes a reference to the\ncontext where it was created. A quosure is guaranteed to evaluate\nin its original environment and can refer to local objects safely.\n","example_call":"quo_set_expr(quo, expr)"},"rlang::expr_print":{"description":"expr_print(), powered by expr_deparse(), is an alternative\nprinter for R expressions with a few improvements over the base R\nprinter.\n","example_call":"expr_print(x, ...)"},"rlang::new_double":{"description":"\n","example_call":"new_double(n, names = NULL)"},"rlang::last_trace":{"description":null,"example_call":"last_trace(drop = NULL)"},"rlang::dots_n":{"description":"This returns the number of arguments currently forwarded in ...\nas an integer.\n","example_call":"dots_n(...)"},"rlang::cpl":{"description":"\n","example_call":"cpl(...)"},"rlang::env_name":{"description":"Special environments like the global environment have their own\nnames. env_name() returns:\n","example_call":"env_name(env)"},"rlang::is_attached":{"description":"The search path is a chain of environments containing exported\nfunctions of attached packages.\n","example_call":"is_attached(x)"},"rlang::as_character":{"description":"\n","example_call":"as_character(x, encoding = NULL)"},"rlang::is_scalar_atomic":{"description":"These predicates check for a given type and whether the vector is\n\"scalar\", that is, of length 1.\n","example_call":"is_scalar_atomic(x)"},"rlang::check_dots_empty":{"description":"... can be inserted in a function signature to force users to\nfully name the details arguments. In this case, supplying data in\n... is almost always a programming error. This function checks\nthat ... is empty and fails otherwise.\n","example_call":"check_dots_empty(env = caller_env(), error = NULL, call = caller_env(),"},"rlang::is_bytes":{"description":"These type predicates aim to make type testing in R more\nconsistent. They are wrappers around base::typeof(), so operate\nat a level beneath S3/S4 etc.\n","example_call":"is_bytes(x, n = NULL)"},"rlang::is_complex":{"description":"These type predicates aim to make type testing in R more\nconsistent. They are wrappers around base::typeof(), so operate\nat a level beneath S3/S4 etc.\n","example_call":"is_complex(x, n = NULL, finite = NULL)"},"rlang::as_string":{"description":"as_string() converts symbols to character strings.\n","example_call":"as_string(x)"},"rlang::is_vector":{"description":"These type predicates aim to make type testing in R more\nconsistent. They are wrappers around base::typeof(), so operate\nat a level beneath S3/S4 etc.\n","example_call":"is_vector(x, n = NULL)"},"rlang::fn_env<-":{"description":"Closure environments define the scope of functions (see env()).\nWhen a function call is evaluated, R creates an evaluation frame\nthat inherits from the closure environment. This makes all objects\ndefined in the closure environment and all its parents available to\ncode executed within the function.\n","example_call":"fn_env<-(x, value)"},"rlang::check_dots_unnamed":{"description":"In functions like paste(), named arguments in ... are often a\nsign of misspelled argument names. Call check_dots_unnamed() to\nfail with an error when named arguments are detected.\n","example_call":"check_dots_unnamed(env = caller_env(), error = NULL, call = caller_env(),"},"rlang::get_env":{"description":"These functions dispatch internally with methods for functions,\nformulas and frames. If called with a missing argument, the\nenvironment of the current evaluation frame is returned. If you\ncall get_env() with an environment, it acts as the identity\nfunction and the environment is simply returned (this helps\nsimplifying code when writing generic functions for environments).\n","example_call":"get_env(env, default = NULL)"},"rlang::new_quosure":{"description":null,"example_call":"new_quosure(expr, env = caller_env())"},"rlang::obj_address":{"description":"Address of an R object\n","example_call":"obj_address(x)"},"rlang::is_integerish":{"description":"These predicates check whether R considers a number vector to be\ninteger-like, according to its own tolerance check (which is in\nfact delegated to the C library). This function is not adapted to\ndata analysis, see the help for base::is.integer() for examples\nof how to check for whole numbers.\n","example_call":"is_integerish(x, n = NULL, finite = NULL)"},"rlang::is_done_box":{"description":"A value boxed with done() signals to its caller that it\nshould stop iterating. Use it to shortcircuit a loop.\n","example_call":"is_done_box(x, empty = NULL)"},"rlang::is_bare_bytes":{"description":"These predicates check for a given type but only return TRUE for\nbare R objects. Bare objects have no class attributes. For example,\na data frame is a list, but not a bare list.\n","example_call":"is_bare_bytes(x, n = NULL)"},"rlang::fn_fmls_names<-":{"description":"fn_fmls() returns a named list of formal arguments.\nfn_fmls_names() returns the names of the arguments.\nfn_fmls_syms() returns formals as a named list of symbols. This\nis especially useful for forwarding arguments in constructed calls.\n","example_call":"fn_fmls_names<-(fn, value)"},"rlang::quo":{"description":"These advanced operators defuse R expressions.\nexpr(), enquo(), and enquos() are sufficient for most\npurposes but rlang provides these other operations, either for\ncompleteness or because they are useful to experts.\n","example_call":"quo(expr)"},"rlang::data_syms":{"description":"Symbols are a kind of defused expression that\nrepresent objects in environments.\n","example_call":"data_syms(x)"},"rlang::is_scalar_list":{"description":"These predicates check for a given type and whether the vector is\n\"scalar\", that is, of length 1.\n","example_call":"is_scalar_list(x)"},"rlang::eval_bare":{"description":"eval_bare() is a lower-level version of function base::eval().\nTechnically, it is a simple wrapper around the C function\nRf_eval(). You generally don't need to use eval_bare() instead\nof eval(). Its main advantage is that it handles stack-sensitive\ncalls (such as return(), on.exit() or parent.frame()) more\nconsistently when you pass an enviroment of a frame on the call\nstack.\n","example_call":"eval_bare(expr, env = parent.frame())"},"rlang::is_pairlist":{"description":"These functions are experimental. We are still figuring out a good\nnaming convention to refer to the different lisp-like lists in R.\n","example_call":"is_pairlist(x)"},"rlang::as_bytes":{"description":"Construct, manipulate and display vectors of byte sizes. These are numeric\nvectors, so you can compare them numerically, but they can also be compared\nto human readable values such as '10MB'.\n","example_call":"as_bytes(x)"},"rlang::reset_message_verbosity":{"description":"These functions are equivalent to base functions base::stop(),\nbase::warning(), and base::message(). They signal a condition\n(an error, warning, or message respectively) and make it easy to\nsupply condition metadata:\n","example_call":"reset_message_verbosity(id)"},"rlang::fn_fmls<-":{"description":"fn_fmls() returns a named list of formal arguments.\nfn_fmls_names() returns the names of the arguments.\nfn_fmls_syms() returns formals as a named list of symbols. This\nis especially useful for forwarding arguments in constructed calls.\n","example_call":"fn_fmls<-(fn, value)"},"rlang::inherits_all":{"description":null,"example_call":"inherits_all(x, class)"},"rlang::is_installed":{"description":"These functions check that packages are installed with minimal side\neffects. If installed, the packages will be loaded but not\nattached.\n","example_call":"is_installed(pkg, ..., version = NULL, compare = NULL)"},"rlang::check_installed":{"description":"These functions check that packages are installed with minimal side\neffects. If installed, the packages will be loaded but not\nattached.\n","example_call":"check_installed(pkg, reason = NULL, ..., version = NULL, compare = NULL,"},"rlang::dbl":{"description":"\n","example_call":"dbl(...)"},"rlang::is_dbl_na":{"description":"\n","example_call":"is_dbl_na(x)"},"rlang::is_bare_integer":{"description":"These predicates check for a given type but only return TRUE for\nbare R objects. Bare objects have no class attributes. For example,\na data frame is a list, but not a bare list.\n","example_call":"is_bare_integer(x, n = NULL)"},"rlang::fn_fmls_names":{"description":"fn_fmls() returns a named list of formal arguments.\nfn_fmls_names() returns the names of the arguments.\nfn_fmls_syms() returns formals as a named list of symbols. This\nis especially useful for forwarding arguments in constructed calls.\n","example_call":"fn_fmls_names(fn = caller_fn())"},"rlang::quo_text":{"description":"\n","example_call":"quo_text(quo, width = 60L, nlines = Inf)"},"rlang::quo_is_null":{"description":"These tools inspect and modify quosures, a type of\ndefused expression that includes a reference to the\ncontext where it was created. A quosure is guaranteed to evaluate\nin its original environment and can refer to local objects safely.\n","example_call":"quo_is_null(quo)"},"rlang::set_env":{"description":"These functions dispatch internally with methods for functions,\nformulas and frames. If called with a missing argument, the\nenvironment of the current evaluation frame is returned. If you\ncall get_env() with an environment, it acts as the identity\nfunction and the environment is simply returned (this helps\nsimplifying code when writing generic functions for environments).\n","example_call":"set_env(env, new_env = caller_env())"},"rlang::abort":{"description":"These functions are equivalent to base functions base::stop(),\nbase::warning(), and base::message(). They signal a condition\n(an error, warning, or message respectively) and make it easy to\nsupply condition metadata:\n","example_call":"abort(message = NULL, class = NULL, ..., call, body = NULL,"},"rlang::enquo":{"description":"enquo() and enquos() defuse function arguments.\nA defused expression can be examined, modified, and injected into\nother expressions.\n","example_call":"enquo(arg)"},"rlang::is_double":{"description":"These type predicates aim to make type testing in R more\nconsistent. They are wrappers around base::typeof(), so operate\nat a level beneath S3/S4 etc.\n","example_call":"is_double(x, n = NULL, finite = NULL)"},"rlang::env_browse":{"description":"env_browse() returns the previous value of\nenv_is_browsed() (a logical), invisibly.\n","example_call":"env_browse(env, value = TRUE)"},"rlang::inherits_any":{"description":null,"example_call":"inherits_any(x, class)"},"rlang::as_complex":{"description":"\n","example_call":"as_complex(x)"},"rlang::is_copyable":{"description":"When an object is modified, R generally copies it (sometimes\nlazily) to enforce value semantics.\nHowever, some internal types are uncopyable. If you try to copy\nthem, either with <U+2060><-<U+2060> or by argument passing, you actually create\nreferences to the original object rather than actual\ncopies. Modifying these references can thus have far reaching side\neffects.\n","example_call":"is_copyable(x)"},"rlang::%@%<-":{"description":"This operator extracts or sets attributes for regular objects and\nS4 fields for S4 objects.\n","example_call":"%@%<-(x, name, value)"},"rlang::%|%":{"description":"Note: This operator is now out of scope for rlang. It will be\nreplaced by a vctrs-powered operator (probably in the funs package) at which point the\nrlang version of <U+2060>%|%<U+2060> will be deprecated.\n","example_call":"%|%(x, y)"},"rlang::call_args":{"description":"Extract arguments from a call\n","example_call":"call_args(call)"},"rlang::!!":{"description":"The injection operator <U+2060>!!<U+2060> injects a value or\nexpression inside another expression. In other words, it modifies a\npiece of code before R evaluates it.\n","example_call":"!!(x)"},"rlang::new_weakref":{"description":"A weak reference is a special R object which makes it possible to keep a\nreference to an object without preventing garbage collection of that object.\nIt can also be used to keep data about an object without preventing GC of the\nobject, similar to WeakMaps in JavaScript.\n","example_call":"new_weakref(key, value = NULL, finalizer = NULL, on_quit = FALSE)"},"rlang::cnd_header":{"description":"cnd_message() assembles an error message from three generics:\n","example_call":"cnd_header(cnd, ...)"},"rlang::is_primitive_eager":{"description":"The R language defines two different types of functions: primitive\nfunctions, which are low-level, and closures, which are the regular\nkind of functions.\n","example_call":"is_primitive_eager(x)"},"rlang::expr_name":{"description":"\n","example_call":"expr_name(expr)"},"rlang::scoped_interactive":{"description":"\n","example_call":"scoped_interactive(value = TRUE, frame = caller_env())"},"rlang::as_closure":{"description":"as_closure() is like as_function() but also wraps primitive\nfunctions inside closures. Some special control flow primitives\nlike if, for, or break can't be wrapped and will cause an\nerror.\n","example_call":"as_closure(x, env = caller_env())"},"rlang::is_dictionaryish":{"description":"Like is_named() but also checks that names are unique.\n","example_call":"is_dictionaryish(x)"},"rlang::is_quosure":{"description":null,"example_call":"is_quosure(x)"},"rlang::locally":{"description":"\n","example_call":"locally(expr)"},"rlang::parse_quos":{"description":"These functions parse and transform text into R expressions. This\nis the first step to interpret or evaluate a piece of R code\nwritten by a programmer.\n","example_call":"parse_quos(x, env)"},"rlang::env_lock":{"description":"\n","example_call":"env_lock(env)"},"rlang::call_standardise":{"description":"\n","example_call":"call_standardise(call, env = caller_env())"},"rlang::coerce_class":{"description":"\n\n","example_call":"coerce_class(.x, .to, ...)"},"rlang::eval_tidy":{"description":"eval_tidy() is a variant of base::eval() that powers the tidy\nevaluation framework. Like eval() it accepts user data as\nargument. Whereas eval() simply transforms the data to an\nenvironment, eval_tidy() transforms it to a data mask with as_data_mask(). Evaluating in a data\nmask enables the following features:\n","example_call":"eval_tidy(expr, data = NULL, env = caller_env())"},"rlang::set_names":{"description":"This is equivalent to stats::setNames(), with more features and\nstricter argument checking.\n","example_call":"set_names(x, nm = x, ...)"},"rlang::base_env":{"description":"The search path is a chain of environments containing exported\nfunctions of attached packages.\n","example_call":"base_env()"},"rlang::scoped_options":{"description":"\n","example_call":"scoped_options(..., .frame = caller_env())"},"rlang::as_double":{"description":"\n","example_call":"as_double(x)"},"rlang::with_handlers":{"description":"\n","example_call":"with_handlers(.expr, ...)"},"rlang::rep_named":{"description":"These functions take the idea of seq_along() and apply it to\nrepeating values.\n","example_call":"rep_named(names, x)"},"rlang::bytes":{"description":"\n","example_call":"bytes(...)"},"rlang::fn_body<-":{"description":"fn_body() is a simple wrapper around base::body(). It always\nreturns a <U+2060>\\{<U+2060> expression and throws an error when the input is a\nprimitive function (whereas body() returns NULL). The setter\nversion preserves attributes, unlike <U+2060>body<-<U+2060>.\n","example_call":"fn_body<-(fn, value)"},"rlang::have_name":{"description":"is_named() always returns TRUE for empty vectors because\n","example_call":"have_name(x)"},"rlang::inherits_only":{"description":null,"example_call":"inherits_only(x, class)"},"rlang::is_scalar_complex":{"description":"These predicates check for a given type and whether the vector is\n\"scalar\", that is, of length 1.\n","example_call":"is_scalar_complex(x)"},"rlang::with_env":{"description":"\n","example_call":"with_env(env, expr)"},"rlang:::=":{"description":"The base ... syntax supports:\n","example_call":":=(x, y)"},"rlang::is_box":{"description":"new_box() is similar to base::I() but it protects a value by\nwrapping it in a scalar list rather than by adding an attribute.\nunbox() retrieves the boxed value. is_box() tests whether an\nobject is boxed with optional class. as_box() ensures that a\nvalue is wrapped in a box. as_box_if() does the same but only if\nthe value matches a predicate.\n","example_call":"is_box(x, class = NULL)"},"rlang::is_int_na":{"description":"\n","example_call":"is_int_na(x)"},"rlang::parse_exprs":{"description":"These functions parse and transform text into R expressions. This\nis the first step to interpret or evaluate a piece of R code\nwritten by a programmer.\n","example_call":"parse_exprs(x)"},"rlang::is_string":{"description":"These predicates check for a given type and whether the vector is\n\"scalar\", that is, of length 1.\n","example_call":"is_string(x, string = NULL)"},"rlang::is_list":{"description":"These type predicates aim to make type testing in R more\nconsistent. They are wrappers around base::typeof(), so operate\nat a level beneath S3/S4 etc.\n","example_call":"is_list(x, n = NULL)"},"rlang::trace_length":{"description":"A backtrace captures the sequence of calls that lead to the current\nfunction (sometimes called the call stack). Because of lazy\nevaluation, the call stack in R is actually a tree, which the\nprint() method for this object will reveal.\n","example_call":"trace_length(trace)"},"rlang::quos":{"description":"These advanced operators defuse R expressions.\nexpr(), enquo(), and enquos() are sufficient for most\npurposes but rlang provides these other operations, either for\ncompleteness or because they are useful to experts.\n","example_call":"quos(..., .named = FALSE, .ignore_empty = c(\"trailing\","},"rlang::as_integer":{"description":"\n","example_call":"as_integer(x)"},"rlang::inform":{"description":"These functions are equivalent to base functions base::stop(),\nbase::warning(), and base::message(). They signal a condition\n(an error, warning, or message respectively) and make it easy to\nsupply condition metadata:\n","example_call":"inform(message = NULL, class = NULL, ..., body = NULL, footer = NULL,"},"rlang::try_fetch":{"description":"\n","example_call":"try_fetch(expr, ...)"},"rlang::squash_if":{"description":"\n","example_call":"squash_if(x, predicate = is_spliced)"},"rlang::expr_text":{"description":"\n","example_call":"expr_text(expr, width = 60L, nlines = Inf)"},"rlang::englue":{"description":"englue() creates a string with the glue operators <U+2060>{<U+2060> and <U+2060>{{<U+2060>. These operators are\nnormally used to inject names within dynamic dots.\nenglue() makes them available anywhere within a function.\n","example_call":"englue(x, env = caller_env(), error_call = current_env(),"},"rlang::is_reference":{"description":"There are typically two situations where two symbols may refer to\nthe same object.\n","example_call":"is_reference(x, y)"},"rlang::with_options":{"description":"For local_options() and push_options(), the old option\nvalues. peek_option() returns the current value of an option\nwhile the plural peek_options() returns a list of current\noption values.\n","example_call":"with_options(.expr, ...)"},"rlang::env":{"description":"These functions create new environments.\n","example_call":"env(...)"},"rlang::as_data_mask":{"description":"A data mask is an environment (or possibly\nmultiple environments forming an ancestry) containing user-supplied\nobjects. Objects in the mask have precedence over objects in the\nenvironment (i.e. they mask those objects). Many R functions\nevaluate quoted expressions in a data mask so these expressions can\nrefer to objects within the user data.\n","example_call":"as_data_mask(data)"},"rlang::is_bare_atomic":{"description":"These predicates check for a given type but only return TRUE for\nbare R objects. Bare objects have no class attributes. For example,\na data frame is a list, but not a bare list.\n","example_call":"is_bare_atomic(x, n = NULL)"},"rlang::is_bare_integerish":{"description":"These predicates check whether R considers a number vector to be\ninteger-like, according to its own tolerance check (which is in\nfact delegated to the C library). This function is not adapted to\ndata analysis, see the help for base::is.integer() for examples\nof how to check for whole numbers.\n","example_call":"is_bare_integerish(x, n = NULL, finite = NULL)"},"rlang::na_int":{"description":"\n","example_call":"NULL"},"rlang::seq2":{"description":"These helpers take two endpoints and return the sequence of all\nintegers within that interval. For seq2_along(), the upper\nendpoint is taken from the length of a vector. Unlike\nbase::seq(), they return an empty vector if the starting point is\na larger integer than the end point.\n","example_call":"seq2(from, to)"},"rlang::ffi_standalone_is_bool_1.0.7":{"description":"Internal API for standalone-types-check\n","example_call":"NULL"},"rlang::maybe_missing":{"description":"These functions help using the missing argument as a regular R\nobject.\n","example_call":"maybe_missing(x, default = missing_arg())"},"rlang::f_env<-":{"description":"f_rhs extracts the righthand side, f_lhs extracts the lefthand\nside, and f_env extracts the environment. All functions throw an\nerror if f is not a formula.\n","example_call":"f_env<-(x, value)"},"rlang::is_chr_na":{"description":"\n","example_call":"is_chr_na(x)"},"rlang::f_text":{"description":"Equivalent of expr_text() and expr_label() for formulas.\n","example_call":"f_text(x, width = 60L, nlines = Inf)"},"rlang::env_names":{"description":"env_names() returns object names from an enviroment env as a\ncharacter vector. All names are returned, even those starting with\na dot. env_length() returns the number of bindings.\n","example_call":"env_names(env)"},"rlang::quo_is_call":{"description":"These tools inspect and modify quosures, a type of\ndefused expression that includes a reference to the\ncontext where it was created. A quosure is guaranteed to evaluate\nin its original environment and can refer to local objects safely.\n","example_call":"quo_is_call(quo, name = NULL, n = NULL, ns = NULL)"},"rlang::last_messages":{"description":"last_warnings() and last_messages() return a list of all\nwarnings and messages that occurred during the last R command.\n","example_call":"last_messages(n = NULL)"},"rlang::is_na":{"description":"\n","example_call":"is_na(x)"},"rlang::dots_values":{"description":"This is a tool for advanced users. It captures dots, processes\nunquoting and splicing operators, and evaluates them. Unlike\ndots_list(), it does not flatten spliced objects, instead they\nare attributed a spliced class (see splice()). You can process\nspliced objects manually, perhaps with a custom predicate (see\nflatten_if()).\n","example_call":"dots_values(..., .ignore_empty = c(\"trailing\", \"none\", \"all\"),"},"rlang::missing_arg":{"description":"These functions help using the missing argument as a regular R\nobject.\n","example_call":"missing_arg()"},"rlang::prim_name":{"description":"Name of a primitive function\n","example_call":"prim_name(prim)"},"rlang::quo_name":{"description":"\n","example_call":"quo_name(quo)"},"rlang::quos_auto_name":{"description":"This gives default names to unnamed elements of a list of\nexpressions (or expression wrappers such as formulas or\nquosures), deparsed with as_label().\n","example_call":"quos_auto_name(quos)"},"rlang::is_condition":{"description":"Is object a condition?\n","example_call":"is_condition(x)"},"rlang::pkg_env":{"description":"The search path is a chain of environments containing exported\nfunctions of attached packages.\n","example_call":"pkg_env(pkg)"},"rlang::is_interactive":{"description":"Like base::interactive(), is_interactive() returns TRUE when\nthe function runs interactively and FALSE when it runs in batch\nmode. It also checks, in this order:\n","example_call":"is_interactive()"},"rlang::fn_fmls":{"description":"fn_fmls() returns a named list of formal arguments.\nfn_fmls_names() returns the names of the arguments.\nfn_fmls_syms() returns formals as a named list of symbols. This\nis especially useful for forwarding arguments in constructed calls.\n","example_call":"fn_fmls(fn = caller_fn())"},"rlang::quo_label":{"description":"\n","example_call":"quo_label(quo)"},"rlang::calling":{"description":"\n","example_call":"calling(handler)"},"rlang::string":{"description":"\n","example_call":"string(x, encoding = NULL)"},"rlang::set_expr":{"description":"These helpers are useful to make your function work generically\nwith quosures and raw expressions. First call get_expr() to\nextract an expression. Once you're done processing the expression,\ncall set_expr() on the original object to update the expression.\nYou can return the result of set_expr(), either a formula or an\nexpression depending on the input type. Note that set_expr() does\nnot change its input, it creates a new object.\n","example_call":"set_expr(x, value)"},"rlang::is_quosures":{"description":"This small S3 class provides methods for [ and c() and ensures\nthe following invariants:\n","example_call":"is_quosures(x)"},"rlang::ll":{"description":"list2(...) is equivalent to list(...) with a few additional\nfeatures, collectively called dynamic dots. While\nlist2() hard-code these features, dots_list() is a lower-level\nversion that offers more control.\n","example_call":"ll(...)"},"rlang::is_message":{"description":"Is object a condition?\n","example_call":"is_message(x)"},"rlang::node_poke_cdar":{"description":"Important: These functions are for expert R programmers only.\nYou should only use them if you feel comfortable manipulating low\nlevel R data structures at the C level. We export them at the R level\nin order to make it easy to prototype C code. They don't perform\nany type checking and can crash R very easily (try to take the CAR\nof an integer vector <U+2014> save any important objects beforehand!).\n","example_call":"node_poke_cdar(x, newcdr)"},"rlang::f_rhs<-":{"description":"f_rhs extracts the righthand side, f_lhs extracts the lefthand\nside, and f_env extracts the environment. All functions throw an\nerror if f is not a formula.\n","example_call":"f_rhs<-(x, value)"},"rlang::enexprs":{"description":"These advanced operators defuse R expressions.\nexpr(), enquo(), and enquos() are sufficient for most\npurposes but rlang provides these other operations, either for\ncompleteness or because they are useful to experts.\n","example_call":"enexprs(..., .named = FALSE, .ignore_empty = c(\"trailing\","},"rlang::current_fn":{"description":"These accessors retrieve properties of frames on the call stack.\nThe prefix indicates for which frame a property should be accessed:\n","example_call":"current_fn()"},"rlang::as_box_if":{"description":null,"example_call":"as_box_if(.x, .p, .class = NULL, ...)"},"rlang::node_caar":{"description":"Important: These functions are for expert R programmers only.\nYou should only use them if you feel comfortable manipulating low\nlevel R data structures at the C level. We export them at the R level\nin order to make it easy to prototype C code. They don't perform\nany type checking and can crash R very easily (try to take the CAR\nof an integer vector <U+2014> save any important objects beforehand!).\n","example_call":"node_caar(x)"},"rlang::ctxt_frame":{"description":"\nDeprecated as of rlang 0.3.0.\n","example_call":"ctxt_frame(n = 1)"},"rlang::env_is_browsed":{"description":"env_browse() returns the previous value of\nenv_is_browsed() (a logical), invisibly.\n","example_call":"env_is_browsed(env)"},"rlang::env_parent":{"description":"See the section on inheritance in env()'s documentation.\n","example_call":"env_parent(env = caller_env(), n = 1)"},"rlang::new_data_mask":{"description":"A data mask is an environment (or possibly\nmultiple environments forming an ancestry) containing user-supplied\nobjects. Objects in the mask have precedence over objects in the\nenvironment (i.e. they mask those objects). Many R functions\nevaluate quoted expressions in a data mask so these expressions can\nrefer to objects within the user data.\n","example_call":"new_data_mask(bottom, top = bottom)"},"rlang::exec":{"description":"This function constructs and evaluates a call to .fn.\nIt has two primary uses:\n","example_call":"exec(.fn, ..., .env = caller_env())"},"rlang::UQ":{"description":"\nThese operators are deprecated in favour of\n!! and !!!.\n","example_call":"UQ(x)"},"rlang::squash":{"description":"\n","example_call":"squash(x)"},"rlang::is_bare_logical":{"description":"These predicates check for a given type but only return TRUE for\nbare R objects. Bare objects have no class attributes. For example,\na data frame is a list, but not a bare list.\n","example_call":"is_bare_logical(x, n = NULL)"},"rlang::%||%":{"description":"This infix function makes it easy to replace NULLs with a default\nvalue. It's inspired by the way that Ruby's or operation (||)\nworks.\n","example_call":"%||%(x, y)"},"rlang::is_bare_formula":{"description":"is_formula() tests whether x is a call to ~. is_bare_formula()\ntests in addition that x does not inherit from anything else than\n\"formula\".\n","example_call":"is_bare_formula(x, scoped = TRUE, lhs = NULL)"},"rlang::node_poke_cddr":{"description":"Important: These functions are for expert R programmers only.\nYou should only use them if you feel comfortable manipulating low\nlevel R data structures at the C level. We export them at the R level\nin order to make it easy to prototype C code. They don't perform\nany type checking and can crash R very easily (try to take the CAR\nof an integer vector <U+2014> save any important objects beforehand!).\n","example_call":"node_poke_cddr(x, newcdr)"},"rlang::cnd_message":{"description":"cnd_message() assembles an error message from three generics:\n","example_call":"cnd_message(cnd, ..., inherit = TRUE, prefix = FALSE)"},"rlang::new_complex":{"description":"\n","example_call":"new_complex(n, names = NULL)"},"rlang::is_scalar_vector":{"description":"These predicates check for a given type and whether the vector is\n\"scalar\", that is, of length 1.\n","example_call":"is_scalar_vector(x)"},"rlang::vec_poke_n":{"description":"\n","example_call":"vec_poke_n(x, start, y, from = 1L, n = length(y))"},"rlang::message_cnd":{"description":"These constructors create subclassed conditions, the objects that\npower the error, warning, and message system in R.\n","example_call":"message_cnd(class = NULL, ..., message = \"\", call = NULL, use_cli_format = NULL)"},"rlang::is_warning":{"description":"Is object a condition?\n","example_call":"is_warning(x)"},"rlang::global_handle":{"description":"global_handle() sets up a default configuration for error,\nwarning, and message handling. It calls:\n","example_call":"global_handle(entrace = TRUE, prompt_install = TRUE)"},"rlang::names2":{"description":"names2() always returns a character vector, even when an\nobject does not have a names attribute. In this case, it returns\na vector of empty names \"\". It also standardises missing names to\n\"\".\n","example_call":"names2(x)"},"rlang::call2":{"description":"Quoted function calls are one of the two types of\nsymbolic objects in R. They represent the action of\ncalling a function, possibly with arguments. There are two ways of\ncreating a quoted call:\n","example_call":"call2(.fn, ..., .ns = NULL)"},"rlang::format_error_call":{"description":"Either a string formatted as code or NULL if a simple\ncall could not be generated.\n","example_call":"format_error_call(call)"},"rlang::node_cadr":{"description":"Important: These functions are for expert R programmers only.\nYou should only use them if you feel comfortable manipulating low\nlevel R data structures at the C level. We export them at the R level\nin order to make it easy to prototype C code. They don't perform\nany type checking and can crash R very easily (try to take the CAR\nof an integer vector <U+2014> save any important objects beforehand!).\n","example_call":"node_cadr(x)"},"rlang::vec_poke_range":{"description":"\n","example_call":"vec_poke_range(x, start, y, from = 1L, to = length(y) - from + 1L)"},"rlang::list2":{"description":"list2(...) is equivalent to list(...) with a few additional\nfeatures, collectively called dynamic dots. While\nlist2() hard-code these features, dots_list() is a lower-level\nversion that offers more control.\n","example_call":"list2(...)"},"rlang::is_error":{"description":"Is object a condition?\n","example_call":"is_error(x)"},"rlang::squash_dbl":{"description":"\n","example_call":"squash_dbl(x)"},"rlang::env_parents":{"description":"See the section on inheritance in env()'s documentation.\n","example_call":"env_parents(env = caller_env(), last = global_env())"},"rlang::lgl":{"description":"\n","example_call":"lgl(...)"},"rlang::warn":{"description":"These functions are equivalent to base functions base::stop(),\nbase::warning(), and base::message(). They signal a condition\n(an error, warning, or message respectively) and make it easy to\nsupply condition metadata:\n","example_call":"warn(message = NULL, class = NULL, ..., body = NULL, footer = NULL,"},"rlang::f_rhs":{"description":"f_rhs extracts the righthand side, f_lhs extracts the lefthand\nside, and f_env extracts the environment. All functions throw an\nerror if f is not a formula.\n","example_call":"f_rhs(f)"},"rlang::parse_expr":{"description":"These functions parse and transform text into R expressions. This\nis the first step to interpret or evaluate a piece of R code\nwritten by a programmer.\n","example_call":"parse_expr(x)"},"rlang::is_bare_numeric":{"description":"These predicates check for a given type but only return TRUE for\nbare R objects. Bare objects have no class attributes. For example,\na data frame is a list, but not a bare list.\n","example_call":"is_bare_numeric(x, n = NULL)"},"rlang::local_error_call":{"description":"local_error_call() is an alternative to explicitly passing a\ncall argument to abort(). It sets the call (or a value that\nindicates where to find the call, see below) in a local binding\nthat is automatically picked up by abort().\n","example_call":"local_error_call(call, frame = caller_env())"},"rlang::node_poke_tag":{"description":"Important: These functions are for expert R programmers only.\nYou should only use them if you feel comfortable manipulating low\nlevel R data structures at the C level. We export them at the R level\nin order to make it easy to prototype C code. They don't perform\nany type checking and can crash R very easily (try to take the CAR\nof an integer vector <U+2014> save any important objects beforehand!).\n","example_call":"node_poke_tag(x, newtag)"},"rlang::is_named":{"description":"is_named() always returns TRUE for empty vectors because\n","example_call":"is_named(x)"},"rlang::f_env":{"description":"f_rhs extracts the righthand side, f_lhs extracts the lefthand\nside, and f_env extracts the environment. All functions throw an\nerror if f is not a formula.\n","example_call":"f_env(f)"},"rlang::env_binding_unlock":{"description":"\n","example_call":"env_binding_unlock(env, nms = NULL)"},"rlang::f_lhs<-":{"description":"f_rhs extracts the righthand side, f_lhs extracts the lefthand\nside, and f_env extracts the environment. All functions throw an\nerror if f is not a formula.\n","example_call":"f_lhs<-(x, value)"},"rlang::env_unbind":{"description":"env_unbind() is the complement of env_bind(). Like env_has(),\nit ignores the parent environments of env by default. Set\ninherit to TRUE to track down bindings in parent environments.\n","example_call":"env_unbind(env = caller_env(), nms, inherit = FALSE)"},"rlang::has_name":{"description":"This function returns a logical value that indicates if a data\nframe or another named object contains an element with a specific\nname. Note that has_name() only works with vectors. For instance,\nenvironments need the specialised function env_has().\n","example_call":"has_name(x, name)"},"rlang::push_options":{"description":"For local_options() and push_options(), the old option\nvalues. peek_option() returns the current value of an option\nwhile the plural peek_options() returns a list of current\noption values.\n","example_call":"push_options(...)"},"rlang::names_inform_repair":{"description":"Inform about name repair\n","example_call":"names_inform_repair(old, new)"},"rlang::caller_fn":{"description":"These accessors retrieve properties of frames on the call stack.\nThe prefix indicates for which frame a property should be accessed:\n","example_call":"caller_fn(n = 1)"},"rlang::current_env":{"description":"These accessors retrieve properties of frames on the call stack.\nThe prefix indicates for which frame a property should be accessed:\n","example_call":"current_env()"},"rlang::node_poke_caar":{"description":"Important: These functions are for expert R programmers only.\nYou should only use them if you feel comfortable manipulating low\nlevel R data structures at the C level. We export them at the R level\nin order to make it easy to prototype C code. They don't perform\nany type checking and can crash R very easily (try to take the CAR\nof an integer vector <U+2014> save any important objects beforehand!).\n","example_call":"node_poke_caar(x, newcar)"},"rlang::is_bare_complex":{"description":"These predicates check for a given type but only return TRUE for\nbare R objects. Bare objects have no class attributes. For example,\na data frame is a list, but not a bare list.\n","example_call":"is_bare_complex(x, n = NULL)"},"rlang::env_unlock":{"description":"This function should only be used in development tools or\ninteractively.\n","example_call":"env_unlock(env)"},"rlang::quo_is_symbolic":{"description":"These tools inspect and modify quosures, a type of\ndefused expression that includes a reference to the\ncontext where it was created. A quosure is guaranteed to evaluate\nin its original environment and can refer to local objects safely.\n","example_call":"quo_is_symbolic(quo)"},"rlang::call_inspect":{"description":"This function is a wrapper around base::match.call(). It returns\nits own function call.\n","example_call":"call_inspect(...)"},"rlang::with_bindings":{"description":"local_bindings() returns the values of old bindings\ninvisibly; with_bindings() returns the value of expr.\n","example_call":"with_bindings(.expr, ..., .env = caller_env())"},"rlang::enexpr":{"description":"These advanced operators defuse R expressions.\nexpr(), enquo(), and enquos() are sufficient for most\npurposes but rlang provides these other operations, either for\ncompleteness or because they are useful to experts.\n","example_call":"enexpr(arg)"},"rlang::quo_is_missing":{"description":"These tools inspect and modify quosures, a type of\ndefused expression that includes a reference to the\ncontext where it was created. A quosure is guaranteed to evaluate\nin its original environment and can refer to local objects safely.\n","example_call":"quo_is_missing(quo)"},"rlang::as_quosure":{"description":null,"example_call":"as_quosure(x, env = NULL)"},"rlang::is_lambda":{"description":"as_function() transforms a one-sided formula into a function.\nThis powers the lambda syntax in packages like purrr.\n","example_call":"is_lambda(x)"},"rlang::env_get_list":{"description":"env_get() extracts an object from an enviroment env. By\ndefault, it does not look in the parent environments.\nenv_get_list() extracts multiple objects from an environment into\na named list.\n","example_call":"env_get_list(env = caller_env(), nms, default, inherit = FALSE,"},"rlang::error_cnd":{"description":"These constructors create subclassed conditions, the objects that\npower the error, warning, and message system in R.\n","example_call":"error_cnd(class = NULL, ..., message = \"\", call = NULL, trace = NULL,"},"rlang::ns_env":{"description":"Namespaces are the environment where all the functions of a package\nlive. The parent environments of namespaces are the imports\nenvironments, which contain all the functions imported from other\npackages.\n","example_call":"ns_env(x = caller_env())"},"rlang::coerce_type":{"description":"\n\n","example_call":"coerce_type(.x, .to, ...)"},"rlang::node_poke_cadr":{"description":"Important: These functions are for expert R programmers only.\nYou should only use them if you feel comfortable manipulating low\nlevel R data structures at the C level. We export them at the R level\nin order to make it easy to prototype C code. They don't perform\nany type checking and can crash R very easily (try to take the CAR\nof an integer vector <U+2014> save any important objects beforehand!).\n","example_call":"node_poke_cadr(x, newcar)"},"rlang::env_bind":{"description":"These functions create bindings in an environment. The bindings are\nsupplied through ... as pairs of names and values or expressions.\nenv_bind() is equivalent to evaluating a <U+2060><-<U+2060> expression within\nthe given environment. This function should take care of the\nmajority of use cases but the other variants can be useful for\nspecific problems.\n","example_call":"env_bind(.env, ...)"},"rlang::local_bindings":{"description":"local_bindings() returns the values of old bindings\ninvisibly; with_bindings() returns the value of expr.\n","example_call":"local_bindings(..., .env = .frame, .frame = caller_env())"},"rlang::env_bury":{"description":"\n","example_call":"env_bury(.env, ...)"},"rlang::is_bool":{"description":"These predicates check for a given type and whether the vector is\n\"scalar\", that is, of length 1.\n","example_call":"is_bool(x)"},"rlang::seq2_along":{"description":"These helpers take two endpoints and return the sequence of all\nintegers within that interval. For seq2_along(), the upper\nendpoint is taken from the length of a vector. Unlike\nbase::seq(), they return an empty vector if the starting point is\na larger integer than the end point.\n","example_call":"seq2_along(from, x)"},"rlang::new_call":{"description":"Create a new call from components\n","example_call":"new_call(car, cdr = NULL)"},"rlang::are_na":{"description":"\n","example_call":"are_na(x)"},"rlang::global_prompt_install":{"description":"When enabled, packageNotFoundError thrown by loadNamespace()\ncause a user prompt to install the missing package and continue\nwithout interrupting the current program.\n","example_call":"global_prompt_install(enable = TRUE)"},"rlang::expr_label":{"description":"\n","example_call":"expr_label(expr)"},"rlang::dots_splice":{"description":"\n","example_call":"dots_splice(..., .ignore_empty = c(\"trailing\", \"none\", \"all\"),"},"rlang::.env":{"description":"The .data and .env pronouns make it explicit where to find\nobjects when programming with data-masked\nfunctions.\n","example_call":"NULL"},"rlang::parse_bytes":{"description":"Construct, manipulate and display vectors of byte sizes. These are numeric\nvectors, so you can compare them numerically, but they can also be compared\nto human readable values such as '10MB'.\n","example_call":"parse_bytes(x)"},"rlang::quo_is_symbol":{"description":"These tools inspect and modify quosures, a type of\ndefused expression that includes a reference to the\ncontext where it was created. A quosure is guaranteed to evaluate\nin its original environment and can refer to local objects safely.\n","example_call":"quo_is_symbol(quo, name = NULL)"},"rlang::is_cpl_na":{"description":"\n","example_call":"is_cpl_na(x)"},"rlang::is_node_list":{"description":"These functions are experimental. We are still figuring out a good\nnaming convention to refer to the different lisp-like lists in R.\n","example_call":"is_node_list(x)"},"rlang::as_environment":{"description":"as_environment() coerces named vectors (including lists) to an\nenvironment. The names must be unique. If supplied an unnamed\nstring, it returns the corresponding package environment (see\npkg_env()).\n","example_call":"as_environment(x, parent = NULL)"},"rlang::env_binding_are_lazy":{"description":"\n","example_call":"env_binding_are_lazy(env, nms = NULL)"},"rlang::quo_get_expr":{"description":"These tools inspect and modify quosures, a type of\ndefused expression that includes a reference to the\ncontext where it was created. A quosure is guaranteed to evaluate\nin its original environment and can refer to local objects safely.\n","example_call":"quo_get_expr(quo)"},"rlang::cnd_body":{"description":"cnd_message() assembles an error message from three generics:\n","example_call":"cnd_body(cnd, ...)"},"rlang::flatten":{"description":"\n","example_call":"flatten(x)"},"rlang::type_of":{"description":"\n\n","example_call":"type_of(x)"},"rlang::quo_squash":{"description":"quo_squash() flattens all nested quosures within an expression.\nFor example it transforms <U+2060>^foo(^bar(), ^baz)<U+2060> to the bare\nexpression foo(bar(), baz).\n","example_call":"quo_squash(quo, warn = FALSE)"},"rlang::run_on_load":{"description":"on_load() is for your own package and runs expressions when the\nnamespace is not sealed yet. This means you can modify existing\nbinding or create new ones. This is not the case with\non_package_load() which runs expressions after a foreign package\nhas finished loading, at which point its namespace is sealed.\n","example_call":"run_on_load(ns = topenv(parent.frame()))"},"rlang::sym":{"description":"Symbols are a kind of defused expression that\nrepresent objects in environments.\n","example_call":"sym(x)"},"rlang::unbox":{"description":"new_box() is similar to base::I() but it protects a value by\nwrapping it in a scalar list rather than by adding an attribute.\nunbox() retrieves the boxed value. is_box() tests whether an\nobject is boxed with optional class. as_box() ensures that a\nvalue is wrapped in a box. as_box_if() does the same but only if\nthe value matches a predicate.\n","example_call":"unbox(box)"},"rlang::is_function":{"description":"The R language defines two different types of functions: primitive\nfunctions, which are low-level, and closures, which are the regular\nkind of functions.\n","example_call":"is_function(x)"},"rlang::arg_match":{"description":"This is equivalent to base::match.arg() with a few differences:\n","example_call":"arg_match(arg, values = NULL, ..., multiple = FALSE, error_arg = caller_arg(arg),"},"rlang::is_primitive":{"description":"The R language defines two different types of functions: primitive\nfunctions, which are low-level, and closures, which are the regular\nkind of functions.\n","example_call":"is_primitive(x)"},"rlang::na_cpl":{"description":"\n","example_call":"NULL"},"rlang::new_box":{"description":"new_box() is similar to base::I() but it protects a value by\nwrapping it in a scalar list rather than by adding an attribute.\nunbox() retrieves the boxed value. is_box() tests whether an\nobject is boxed with optional class. as_box() ensures that a\nvalue is wrapped in a box. as_box_if() does the same but only if\nthe value matches a predicate.\n","example_call":"new_box(.x, class = NULL, ...)"},"rlang::exprs":{"description":"These advanced operators defuse R expressions.\nexpr(), enquo(), and enquos() are sufficient for most\npurposes but rlang provides these other operations, either for\ncompleteness or because they are useful to experts.\n","example_call":"exprs(..., .named = FALSE, .ignore_empty = c(\"trailing\","},"rlang::local_use_cli":{"description":"\n","example_call":"local_use_cli(..., format = TRUE, inline = FALSE, frame = caller_env())"},"rlang::env_inherits":{"description":"This returns TRUE if x has ancestor among its parents.\n","example_call":"env_inherits(env, ancestor)"},"rlang::node_cdar":{"description":"Important: These functions are for expert R programmers only.\nYou should only use them if you feel comfortable manipulating low\nlevel R data structures at the C level. We export them at the R level\nin order to make it easy to prototype C code. They don't perform\nany type checking and can crash R very easily (try to take the CAR\nof an integer vector <U+2014> save any important objects beforehand!).\n","example_call":"node_cdar(x)"},"rlang::ensyms":{"description":"These advanced operators defuse R expressions.\nexpr(), enquo(), and enquos() are sufficient for most\npurposes but rlang provides these other operations, either for\ncompleteness or because they are useful to experts.\n","example_call":"ensyms(..., .named = FALSE, .ignore_empty = c(\"trailing\","},"rlang::enquos0":{"description":"These advanced operators defuse R expressions.\nexpr(), enquo(), and enquos() are sufficient for most\npurposes but rlang provides these other operations, either for\ncompleteness or because they are useful to experts.\n","example_call":"enquos0(...)"},"rlang::switch_class":{"description":"\n\n","example_call":"switch_class(.x, ...)"},"rlang::zap_srcref":{"description":"There are a number of situations where R creates source references:\n","example_call":"zap_srcref(x)"},"rlang::is_callable":{"description":"A callable object is an object that can appear in the function\nposition of a call (as opposed to argument position). This includes\nsymbolic objects that evaluate to a function or\nliteral functions embedded in the call.\n","example_call":"is_callable(x)"},"rlang::data_sym":{"description":"Symbols are a kind of defused expression that\nrepresent objects in environments.\n","example_call":"data_sym(x)"},"rlang::ensym":{"description":"These advanced operators defuse R expressions.\nexpr(), enquo(), and enquos() are sufficient for most\npurposes but rlang provides these other operations, either for\ncompleteness or because they are useful to experts.\n","example_call":"ensym(arg)"},"rlang::node_poke_cdr":{"description":"Important: These functions are for expert R programmers only.\nYou should only use them if you feel comfortable manipulating low\nlevel R data structures at the C level. We export them at the R level\nin order to make it easy to prototype C code. They don't perform\nany type checking and can crash R very easily (try to take the CAR\nof an integer vector <U+2014> save any important objects beforehand!).\n","example_call":"node_poke_cdr(x, newcdr)"},"rlang::interrupt":{"description":"interrupt() simulates a user interrupt of the kind that is\nsignalled with Ctrl-C. It is currently not possible to create\ncustom interrupt condition objects.\n","example_call":"interrupt()"},"rlang::flatten_dbl":{"description":"\n","example_call":"flatten_dbl(x)"},"rlang::call_match":{"description":"call_match() is like match.call() with these differences:\n","example_call":"call_match(call = NULL, fn = NULL, ..., defaults = FALSE, dots_env = NULL,"},"rlang::new_raw":{"description":"\n","example_call":"new_raw(n, names = NULL)"},"rlang::new_integer":{"description":"\n","example_call":"new_integer(n, names = NULL)"},"rlang::env_binding_lock":{"description":"\n","example_call":"env_binding_lock(env, nms = NULL)"},"rlang::env_is_user_facing":{"description":"Detects if env is user-facing, that is, whether it's an environment\nthat inherits from:\n","example_call":"env_is_user_facing(env)"},"rlang::env_poke":{"description":"env_poke() will assign or reassign a binding in env if create\nis TRUE. If create is FALSE and a binding does not already\nexists, an error is issued.\n","example_call":"env_poke(env = caller_env(), nm, value, inherit = FALSE, create = !inherit)"},"rlang::qq_show":{"description":"qq_show() helps examining injected expressions\ninside a function. This is useful for learning about injection and\nfor debugging injection code.\n","example_call":"qq_show(expr)"},"rlang::squash_int":{"description":"\n","example_call":"squash_int(x)"},"rlang::is_scalar_integerish":{"description":"These predicates check whether R considers a number vector to be\ninteger-like, according to its own tolerance check (which is in\nfact delegated to the C library). This function is not adapted to\ndata analysis, see the help for base::is.integer() for examples\nof how to check for whole numbers.\n","example_call":"is_scalar_integerish(x, finite = NULL)"},"rlang::expr_interp":{"description":"\nexpr_interp() is deprecated, please use inject() instead.\n","example_call":"expr_interp(x, env = NULL)"},"rlang::node_cddr":{"description":"Important: These functions are for expert R programmers only.\nYou should only use them if you feel comfortable manipulating low\nlevel R data structures at the C level. We export them at the R level\nin order to make it easy to prototype C code. They don't perform\nany type checking and can crash R very easily (try to take the CAR\nof an integer vector <U+2014> save any important objects beforehand!).\n","example_call":"node_cddr(x)"},"rlang::cnd_entrace":{"description":"entrace() is a low level function. See global_entrace() for a\nuser-friendly way of enriching errors and other conditions from\nyour RProfile.\n","example_call":"cnd_entrace(cnd, ..., top = NULL, bottom = NULL)"},"rlang::f_name":{"description":"Equivalent of expr_text() and expr_label() for formulas.\n","example_call":"f_name(x)"},"rlang::f_lhs":{"description":"f_rhs extracts the righthand side, f_lhs extracts the lefthand\nside, and f_env extracts the environment. All functions throw an\nerror if f is not a formula.\n","example_call":"f_lhs(f)"},"rlang::node_car":{"description":"Important: These functions are for expert R programmers only.\nYou should only use them if you feel comfortable manipulating low\nlevel R data structures at the C level. We export them at the R level\nin order to make it easy to prototype C code. They don't perform\nany type checking and can crash R very easily (try to take the CAR\nof an integer vector <U+2014> save any important objects beforehand!).\n","example_call":"node_car(x)"},"rlang::caller_arg":{"description":"caller_arg() is a variant of substitute() or ensym() for\narguments that reference other arguments. Unlike substitute()\nwhich returns an expression, caller_arg() formats the expression\nas a single line string which can be included in error messages.\n","example_call":"caller_arg(arg)"},"rlang::parse_quo":{"description":"These functions parse and transform text into R expressions. This\nis the first step to interpret or evaluate a piece of R code\nwritten by a programmer.\n","example_call":"parse_quo(x, env)"},"rlang::node_poke_car":{"description":"Important: These functions are for expert R programmers only.\nYou should only use them if you feel comfortable manipulating low\nlevel R data structures at the C level. We export them at the R level\nin order to make it easy to prototype C code. They don't perform\nany type checking and can crash R very easily (try to take the CAR\nof an integer vector <U+2014> save any important objects beforehand!).\n","example_call":"node_poke_car(x, newcar)"},"rlang::fn_fmls_syms":{"description":"fn_fmls() returns a named list of formal arguments.\nfn_fmls_names() returns the names of the arguments.\nfn_fmls_syms() returns formals as a named list of symbols. This\nis especially useful for forwarding arguments in constructed calls.\n","example_call":"fn_fmls_syms(fn = caller_fn())"},"rlang::local_interactive":{"description":"Like base::interactive(), is_interactive() returns TRUE when\nthe function runs interactively and FALSE when it runs in batch\nmode. It also checks, in this order:\n","example_call":"local_interactive(value = TRUE, frame = caller_env())"},"rlang::is_environment":{"description":"is_bare_environment() tests whether x is an environment without a s3 or\ns4 class.\n","example_call":"is_environment(x)"},"rlang::as_box":{"description":null,"example_call":"as_box(x, class = NULL)"},"rlang::env_is_locked":{"description":"\n","example_call":"env_is_locked(env)"},"rlang::is_symbolic":{"description":"In rlang, an expression is the return type of parse_expr(), the\nset of objects that can be obtained from parsing R code. Under this\ndefinition expressions include numbers, strings, NULL, symbols,\nand function calls. These objects can be classified as:\n","example_call":"is_symbolic(x)"},"rlang::na_dbl":{"description":"\n","example_call":"NULL"},"rlang::catch_cnd":{"description":"This is a small wrapper around tryCatch() that captures any\ncondition signalled while evaluating its argument. It is useful for\nsituations where you expect a specific condition to be signalled,\nfor debugging, and for unit testing.\n","example_call":"catch_cnd(expr, classes = \"condition\")"},"rlang::duplicate":{"description":"duplicate() is an interface to the C-level duplicate() and\nshallow_duplicate() functions. It is mostly meant for users of\nthe C API of R, e.g. for debugging, experimenting, or prototyping C\ncode in R.\n","example_call":"duplicate(x, shallow = FALSE)"},"rlang::check_dots_empty0":{"description":"check_dots_empty0() is a more efficient version of\ncheck_dots_empty() with a slightly different interface. Instead\nof inspecting the current environment for dots, it directly takes\n.... It is only meant for very low level functions where a\ncouple microseconds make a difference.\n","example_call":"check_dots_empty0(..., call = caller_env())"},"rlang::is_symbol":{"description":"Is object a symbol?\n","example_call":"is_symbol(x, name = NULL)"},"rlang::switch_type":{"description":"\n\n","example_call":"switch_type(.x, ...)"},"rlang::cnd_footer":{"description":"cnd_message() assembles an error message from three generics:\n","example_call":"cnd_footer(cnd, ...)"},"rlang::cnd_signal":{"description":"cnd_signal() takes a condition as argument and emits the\ncorresponding signal. The type of signal depends on the class of\nthe condition:\n","example_call":"cnd_signal(cnd, ...)"},"rlang::is_node":{"description":"These functions are experimental. We are still figuring out a good\nnaming convention to refer to the different lisp-like lists in R.\n","example_call":"is_node(x)"},"rlang::env_bind_lazy":{"description":"These functions create bindings in an environment. The bindings are\nsupplied through ... as pairs of names and values or expressions.\nenv_bind() is equivalent to evaluating a <U+2060><-<U+2060> expression within\nthe given environment. This function should take care of the\nmajority of use cases but the other variants can be useful for\nspecific problems.\n","example_call":"env_bind_lazy(.env, ..., .eval_env = caller_env())"},"rlang::reset_warning_verbosity":{"description":"These functions are equivalent to base functions base::stop(),\nbase::warning(), and base::message(). They signal a condition\n(an error, warning, or message respectively) and make it easy to\nsupply condition metadata:\n","example_call":"reset_warning_verbosity(id)"},"rlang::node_cdr":{"description":"Important: These functions are for expert R programmers only.\nYou should only use them if you feel comfortable manipulating low\nlevel R data structures at the C level. We export them at the R level\nin order to make it easy to prototype C code. They don't perform\nany type checking and can crash R very easily (try to take the CAR\nof an integer vector <U+2014> save any important objects beforehand!).\n","example_call":"node_cdr(x)"},"rlang::peek_options":{"description":"For local_options() and push_options(), the old option\nvalues. peek_option() returns the current value of an option\nwhile the plural peek_options() returns a list of current\noption values.\n","example_call":"peek_options(...)"},"rlang::env_tail":{"description":"See the section on inheritance in env()'s documentation.\n","example_call":"env_tail(env = caller_env(), last = global_env())"},"rlang::env_has":{"description":"env_has() is a vectorised predicate that queries whether an\nenvironment owns bindings personally (with inherit set to\nFALSE, the default), or sees them in its own environment or in\nany of its parents (with inherit = TRUE).\n","example_call":"env_has(env = caller_env(), nms, inherit = FALSE)"},"rlang::env_poke_parent":{"description":"These functions dispatch internally with methods for functions,\nformulas and frames. If called with a missing argument, the\nenvironment of the current evaluation frame is returned. If you\ncall get_env() with an environment, it acts as the identity\nfunction and the environment is simply returned (this helps\nsimplifying code when writing generic functions for environments).\n","example_call":"env_poke_parent(env, new_env)"},"rlang::scoped_bindings":{"description":"\n","example_call":"scoped_bindings(..., .env = .frame, .frame = caller_env())"},"rlang::cnd_inherits":{"description":"Like any R objects, errors captured with catchers like tryCatch()\nhave a class() which you can test with inherits().  However,\nwith chained errors, the class of a captured error might be\ndifferent than the error that was originally signalled. Use\ncnd_inherits() to detect whether an error or any of its parent\ninherits from a class.\n","example_call":"cnd_inherits(cnd, class)"},"rlang::is_scalar_raw":{"description":"These predicates check for a given type and whether the vector is\n\"scalar\", that is, of length 1.\n","example_call":"is_scalar_raw(x)"},"rlang::is_expression":{"description":"In rlang, an expression is the return type of parse_expr(), the\nset of objects that can be obtained from parsing R code. Under this\ndefinition expressions include numbers, strings, NULL, symbols,\nand function calls. These objects can be classified as:\n","example_call":"is_expression(x)"},"rlang::node_tag":{"description":"Important: These functions are for expert R programmers only.\nYou should only use them if you feel comfortable manipulating low\nlevel R data structures at the C level. We export them at the R level\nin order to make it easy to prototype C code. They don't perform\nany type checking and can crash R very easily (try to take the CAR\nof an integer vector <U+2014> save any important objects beforehand!).\n","example_call":"node_tag(x)"},"rlang::expr_deparse":{"description":"expr_print(), powered by expr_deparse(), is an alternative\nprinter for R expressions with a few improvements over the base R\nprinter.\n","example_call":"expr_deparse(x, ..., width = peek_option(\"width\"))"},"rlang::is_bare_raw":{"description":"These predicates check for a given type but only return TRUE for\nbare R objects. Bare objects have no class attributes. For example,\na data frame is a list, but not a bare list.\n","example_call":"is_bare_raw(x, n = NULL)"},"rlang::last_warnings":{"description":"last_warnings() and last_messages() return a list of all\nwarnings and messages that occurred during the last R command.\n","example_call":"last_warnings(n = NULL)"},"rlang::is_scalar_bytes":{"description":"These predicates check for a given type and whether the vector is\n\"scalar\", that is, of length 1.\n","example_call":"is_scalar_bytes(x)"},"rlang::squash_lgl":{"description":"\n","example_call":"squash_lgl(x)"},"rlang::check_exclusive":{"description":"check_exclusive() checks that only one argument is supplied out of\na set of mutually exclusive arguments. An informative error is\nthrown if multiple arguments are supplied.\n","example_call":"check_exclusive(..., .require = TRUE, .frame = caller_env(), .call = .frame)"},"rlang::call_name":{"description":"call_name() and call_ns() extract the function name or\nnamespace of simple calls as a string. They return NULL for\ncomplex calls.\n","example_call":"call_name(call)"},"rlang::check_required":{"description":"Throws an error if x is missing.\n","example_call":"check_required(x, arg = caller_arg(x), call = caller_env())"},"rlang::is_bare_list":{"description":"These predicates check for a given type but only return TRUE for\nbare R objects. Bare objects have no class attributes. For example,\na data frame is a list, but not a bare list.\n","example_call":"is_bare_list(x, n = NULL)"},"rlang::global_env":{"description":"The search path is a chain of environments containing exported\nfunctions of attached packages.\n","example_call":"global_env()"},"rlang::trace_back":{"description":"A backtrace captures the sequence of calls that lead to the current\nfunction (sometimes called the call stack). Because of lazy\nevaluation, the call stack in R is actually a tree, which the\nprint() method for this object will reveal.\n","example_call":"trace_back(top = NULL, bottom = NULL)"},"rlang::call_fn":{"description":"\nDeprecated in rlang 0.4.11.\n","example_call":"call_fn(call, env = caller_env())"},"rlang::with_interactive":{"description":"Like base::interactive(), is_interactive() returns TRUE when\nthe function runs interactively and FALSE when it runs in batch\nmode. It also checks, in this order:\n","example_call":"with_interactive(expr, value = TRUE)"},"rlang::as_label":{"description":"as_label() transforms R objects into a short, human-readable\ndescription. You can use labels to:\n","example_call":"as_label(x)"},"rlang::as_logical":{"description":"\n","example_call":"as_logical(x)"},"rlang::as_quosures":{"description":"This small S3 class provides methods for [ and c() and ensures\nthe following invariants:\n","example_call":"as_quosures(x, env, named = FALSE)"},"rlang::ns_env_name":{"description":"Namespaces are the environment where all the functions of a package\nlive. The parent environments of namespaces are the imports\nenvironments, which contain all the functions imported from other\npackages.\n","example_call":"ns_env_name(x = caller_env())"},"rlang::quo_get_env":{"description":"These tools inspect and modify quosures, a type of\ndefused expression that includes a reference to the\ncontext where it was created. A quosure is guaranteed to evaluate\nin its original environment and can refer to local objects safely.\n","example_call":"quo_get_env(quo)"},"rlang::friendly_type":{"description":"\n","example_call":"friendly_type(type)"},"rlang::new_function":{"description":"This constructs a new function given its three components:\nlist of arguments, body code and parent environment.\n","example_call":"new_function(args, body, env = caller_env())"},"rlang::new_list":{"description":"\n","example_call":"new_list(n, names = NULL)"},"rlang::enquo0":{"description":"These advanced operators defuse R expressions.\nexpr(), enquo(), and enquos() are sufficient for most\npurposes but rlang provides these other operations, either for\ncompleteness or because they are useful to experts.\n","example_call":"enquo0(arg)"},"rlang::hash":{"description":"The generated hash is guaranteed to be reproducible across platforms that\nhave the same endianness and are using the same R version.\n","example_call":"hash(x)"},"rlang::error_call":{"description":"Either a string formatted as code or NULL if a simple\ncall could not be generated.\n","example_call":"error_call(call)"},"rlang::call_args_names":{"description":"Extract arguments from a call\n","example_call":"call_args_names(call)"},"rlang::local_options":{"description":"For local_options() and push_options(), the old option\nvalues. peek_option() returns the current value of an option\nwhile the plural peek_options() returns a list of current\noption values.\n","example_call":"local_options(..., .frame = caller_env())"},"rlang::on_package_load":{"description":"on_load() is for your own package and runs expressions when the\nnamespace is not sealed yet. This means you can modify existing\nbinding or create new ones. This is not the case with\non_package_load() which runs expressions after a foreign package\nhas finished loading, at which point its namespace is sealed.\n","example_call":"on_package_load(pkg, expr, env = parent.frame())"},"rlang::env_binding_are_active":{"description":"\n","example_call":"env_binding_are_active(env, nms = NULL)"},"rlang::signal":{"description":"These functions are equivalent to base functions base::stop(),\nbase::warning(), and base::message(). They signal a condition\n(an error, warning, or message respectively) and make it easy to\nsupply condition metadata:\n","example_call":"signal(message = \"\", class, ..., .subclass = deprecated())"},"rlang::is_bare_environment":{"description":"is_bare_environment() tests whether x is an environment without a s3 or\ns4 class.\n","example_call":"is_bare_environment(x)"},"rlang::env_depth":{"description":"This function returns the number of environments between env and\nthe empty environment, including env. The depth of\nenv is also the number of parents of env (since the empty\nenvironment counts as a parent).\n","example_call":"env_depth(env)"},"rlang::caller_call":{"description":"These accessors retrieve properties of frames on the call stack.\nThe prefix indicates for which frame a property should be accessed:\n","example_call":"caller_call(n = 1)"},"rlang::frame_call":{"description":"These accessors retrieve properties of frames on the call stack.\nThe prefix indicates for which frame a property should be accessed:\n","example_call":"frame_call(frame = caller_env())"},"rlang::is_weakref":{"description":"Is object a weak reference?\n","example_call":"is_weakref(x)"},"rlang::chr":{"description":"\n","example_call":"chr(...)"},"rlang::child_env":{"description":"\n","example_call":"child_env(.parent, ...)"},"rlang::is_null":{"description":"These type predicates aim to make type testing in R more\nconsistent. They are wrappers around base::typeof(), so operate\nat a level beneath S3/S4 etc.\n","example_call":"is_null(x)"},"rlang::squash_raw":{"description":"\n","example_call":"squash_raw(x)"},"rlang::squash_chr":{"description":"\n","example_call":"squash_chr(x)"},"rlang::new_character":{"description":"\n","example_call":"new_character(n, names = NULL)"},"rlang::fn_env":{"description":"Closure environments define the scope of functions (see env()).\nWhen a function call is evaluated, R creates an evaluation frame\nthat inherits from the closure environment. This makes all objects\ndefined in the closure environment and all its parents available to\ncode executed within the function.\n","example_call":"fn_env(fn)"},"rlang::cnd_muffle":{"description":"Unlike exiting() handlers, calling() handlers must be explicit\nthat they have handled a condition to stop it from propagating to\nother handlers. Use cnd_muffle() within a calling handler (or as\na calling handler, see examples) to prevent any other handlers from\nbeing called for that condition.\n","example_call":"cnd_muffle(cnd)"},"rlang::last_error":{"description":null,"example_call":"last_error()"},"rlang::invoke":{"description":"\nDeprecated in rlang 0.4.0 in favour of exec().\n","example_call":"invoke(.fn, .args = list(), ..., .env = caller_env(), .bury = c(\".fn\","},"rlang::squash_cpl":{"description":"\n","example_call":"squash_cpl(x)"},"rlang::hash_file":{"description":"The generated hash is guaranteed to be reproducible across platforms that\nhave the same endianness and are using the same R version.\n","example_call":"hash_file(path)"},"rlang::new_node":{"description":"Important: These functions are for expert R programmers only.\nYou should only use them if you feel comfortable manipulating low\nlevel R data structures at the C level. We export them at the R level\nin order to make it easy to prototype C code. They don't perform\nany type checking and can crash R very easily (try to take the CAR\nof an integer vector <U+2014> save any important objects beforehand!).\n","example_call":"new_node(car, cdr = NULL)"},"rlang::flatten_int":{"description":"\n","example_call":"flatten_int(x)"},"scales::col2hcl":{"description":"Transforms rgb to hcl, sets non-missing arguments and then backtransforms\nto rgb.\n","example_call":"col2hcl(colour, h = NULL, c = NULL, l = NULL, alpha = NULL)"},"scales::oob_censor":{"description":"This set of functions modify data values outside a given range.\nThe <U+2060>oob_*()<U+2060> functions are designed to be passed as the oob argument of\nggplot2 continuous and binned scales, with oob_discard being an exception.\n","example_call":"oob_censor(x, range = c(0, 1), only.finite = TRUE)"},"scales::rescale_max":{"description":"Rescale numeric vector to have specified maximum\n","example_call":"rescale_max(x, to = c(0, 1), from = range(x, na.rm = TRUE))"},"scales::transform_probit":{"description":"Probability transformation\n","example_call":"transform_probit()"},"scales::grey_pal":{"description":"Grey scale palette (discrete)\n","example_call":"grey_pal(start = 0.2, end = 0.8)"},"scales::breaks_pretty":{"description":"Uses default R break algorithm as implemented in pretty(). This is\nprimarily useful for date/times, as extended_breaks() should do a slightly\nbetter job for numeric scales.\n","example_call":"breaks_pretty(n = 5, ...)"},"scales::transform_date":{"description":"Transformation for dates (class Date)\n","example_call":"transform_date()"},"scales::breaks_width":{"description":"Useful for numeric, date, and date-time scales.\n","example_call":"breaks_width(width, offset = 0)"},"scales::percent_format":{"description":"\n","example_call":"percent_format(accuracy = NULL, scale = 100, prefix = \"\", suffix = \"%\","},"scales::transform_time":{"description":"Transformation for date-times (class POSIXt)\n","example_call":"transform_time(tz = NULL)"},"scales::asn_trans":{"description":"This is the variance stabilising transformation for the binomial\ndistribution.\n","example_call":"asn_trans()"},"scales::log_breaks":{"description":"This algorithm starts by looking for integer powers of base. If that\ndoesn't provide enough breaks, it then looks for additional intermediate\nbreaks which are integer multiples of integer powers of base. If that fails\n(which it can for very small ranges), we fall back to extended_breaks()\n","example_call":"log_breaks(n = 5, base = 10)"},"scales::pretty_breaks":{"description":"\n","example_call":"pretty_breaks(n = 5, ...)"},"scales::transform_timespan":{"description":"transform_timespan() provides transformations for data encoding time passed\nalong with breaks and label formatting showing standard unit of time fitting\nthe range of the data. transform_hms() provides the same but using standard\nhms idioms and formatting.\n","example_call":"transform_timespan(unit = c(\"secs\", \"mins\", \"hours\", \"days\", \"weeks\"))"},"scales::alpha":{"description":"Vectorised in both colour and alpha.\n","example_call":"alpha(colour, alpha = NA)"},"scales::colour_ramp":{"description":"Returns a function that maps the interval [0,1] to a set of colours.\nInterpolation is performed in the CIELAB colour space. Similar to\ncolorRamp(space = 'Lab'), but hundreds of\ntimes faster, and provides results in \"#RRGGBB\" (or\n\"#RRGGBBAA\") character form instead of RGB colour matrices.\n","example_call":"colour_ramp(colors, na.color = NA, alpha = TRUE)"},"scales::date_breaks":{"description":"\n","example_call":"date_breaks(width = \"1 month\")"},"scales::label_date_short":{"description":"label_date() and label_time() label date/times using date/time format\nstrings. label_date_short() automatically constructs a short format string\nsufficient to uniquely identify labels. It's inspired by matplotlib's\nConciseDateFormatter,\nbut uses a slightly different approach: ConciseDateFormatter formats\n\"firsts\" (e.g. first day of month, first day of day) specially;\ndate_short() formats changes (e.g. new month, new year) specially.\nlabel_timespan() is intended to show time passed and adds common time units\nsuffix to the input (ns, us, ms, s, m, h, d, w).\n","example_call":"label_date_short(format = c(\"%Y\", \"%b\", \"%d\", \"%H:%M\"), sep = \"\\n\")"},"scales::ordinal_english":{"description":"Round values to integers and then display as ordinal values (e.g. 1st, 2nd,\n3rd). Built-in rules are provided for English, French, and Spanish.\n","example_call":"ordinal_english()"},"scales::breaks_timespan":{"description":"As timespan units span a variety of bases (1000 below seconds, 60 for second\nand minutes, 24 for hours, and 7 for days), the range of the input data\ndetermines the base used for calculating breaks\n","example_call":"breaks_timespan(unit = c(\"secs\", \"mins\", \"hours\", \"days\", \"weeks\"),"},"scales::transform_log":{"description":null,"example_call":"transform_log(base = exp(1))"},"scales::col_factor":{"description":"Conveniently maps data values (numeric or factor/character) to colours\naccording to a given palette, which can be provided in a variety of formats.\n","example_call":"col_factor(palette, domain, levels = NULL, ordered = FALSE, na.color = \"#808080\","},"scales::hms_trans":{"description":"transform_timespan() provides transformations for data encoding time passed\nalong with breaks and label formatting showing standard unit of time fitting\nthe range of the data. transform_hms() provides the same but using standard\nhms idioms and formatting.\n","example_call":"hms_trans()"},"scales::wrap_format":{"description":"\n","example_call":"wrap_format(width)"},"scales::demo_datetime":{"description":"These functions generate ggplot2 code needed to use scales functions for\nreal code.\n","example_call":"demo_datetime(x, ...)"},"scales::pal_linetype":{"description":"Based on a set supplied by Richard Pearson, University of Manchester\n","example_call":"pal_linetype()"},"scales::pal_shape":{"description":"Shape palette (discrete)\n","example_call":"pal_shape(solid = TRUE)"},"scales::abs_area":{"description":"Area palettes (continuous)\n","example_call":"abs_area(max)"},"scales::oob_squish_infinite":{"description":"This set of functions modify data values outside a given range.\nThe <U+2060>oob_*()<U+2060> functions are designed to be passed as the oob argument of\nggplot2 continuous and binned scales, with oob_discard being an exception.\n","example_call":"oob_squish_infinite(x, range = c(0, 1))"},"scales::is.transform":{"description":"A transformation encapsulates a transformation and its inverse, as well\nas the information needed to create pleasing breaks and labels. The breaks()\nfunction is applied on the un-transformed range of the data, and the\nformat() function takes the output of the breaks() function and returns\nwell-formatted labels. Transformations may also include the derivatives of the\ntransformation and its inverse, but are not required to.\n","example_call":"is.transform(x)"},"scales::pal_hue":{"description":"Hue palette (discrete)\n","example_call":"pal_hue(h = c(0, 360) + 15, c = 100, l = 65, h.start = 0, direction = 1)"},"scales::transform_asn":{"description":"This is the variance stabilising transformation for the binomial\ndistribution.\n","example_call":"transform_asn()"},"scales::pal_viridis":{"description":"Viridis palette\n","example_call":"pal_viridis(alpha = 1, begin = 0, end = 1, direction = 1, option = \"D\")"},"scales::label_number_si":{"description":"\n","example_call":"label_number_si(unit = \"\", accuracy = NULL, scale = 1, suffix = \"\","},"scales::transform_asinh":{"description":"Inverse Hyperbolic Sine transformation\n","example_call":"transform_asinh()"},"scales::label_comma":{"description":"Use label_number() force decimal display of numbers (i.e. don't use\nscientific notation). label_comma() is a special case\nthat inserts a comma every three digits.\n","example_call":"label_comma(accuracy = NULL, scale = 1, prefix = \"\", suffix = \"\","},"scales::transform_log1p":{"description":null,"example_call":"transform_log1p()"},"scales::label_timespan":{"description":"label_date() and label_time() label date/times using date/time format\nstrings. label_date_short() automatically constructs a short format string\nsufficient to uniquely identify labels. It's inspired by matplotlib's\nConciseDateFormatter,\nbut uses a slightly different approach: ConciseDateFormatter formats\n\"firsts\" (e.g. first day of month, first day of day) specially;\ndate_short() formats changes (e.g. new month, new year) specially.\nlabel_timespan() is intended to show time passed and adds common time units\nsuffix to the input (ns, us, ms, s, m, h, d, w).\n","example_call":"label_timespan(unit = c(\"secs\", \"mins\", \"hours\", \"days\", \"weeks\"),"},"scales::transform_sqrt":{"description":"This is the variance stabilising transformation for the Poisson\ndistribution.\n","example_call":"transform_sqrt()"},"scales::sqrt_trans":{"description":"This is the variance stabilising transformation for the Poisson\ndistribution.\n","example_call":"sqrt_trans()"},"scales::pvalue":{"description":"\n","example_call":"pvalue(x, accuracy = 0.001, decimal.mark = \".\", prefix = NULL,"},"scales::asinh_trans":{"description":"Inverse Hyperbolic Sine transformation\n","example_call":"asinh_trans()"},"scales::identity_trans":{"description":"Identity transformation (do nothing)\n","example_call":"identity_trans()"},"scales::trans_range":{"description":"Silently drops any ranges outside of the domain of transform.\n","example_call":"trans_range(transform, x)"},"scales::col_quantile":{"description":"Conveniently maps data values (numeric or factor/character) to colours\naccording to a given palette, which can be provided in a variety of formats.\n","example_call":"col_quantile(palette, domain, n = 4, probs = seq(0, 1, length.out = n +"},"scales::label_dollar":{"description":"\n","example_call":"label_dollar(accuracy = NULL, scale = 1, prefix = \"$\", suffix = \"\","},"scales::transform_exp":{"description":"Exponential transformation (inverse of log transformation)\n","example_call":"transform_exp(base = exp(1))"},"scales::trans_breaks":{"description":"\n","example_call":"trans_breaks(trans, inv, n = 5, ...)"},"scales::label_bytes":{"description":"Scale bytes into human friendly units. Can use either SI units (e.g.\nkB = 1000 bytes) or binary units (e.g. kiB = 1024 bytes). See\nUnits of Information\non Wikipedia for more details.\n","example_call":"label_bytes(units = \"auto_si\", accuracy = 1, scale = 1, ...)"},"scales::transform_reverse":{"description":"reversing transformation works by multiplying the input with -1. This means\nthat reverse transformation cannot easily be composed with transformations\nthat require positive input unless the reversing is done as a final step.\n","example_call":"transform_reverse()"},"scales::number_bytes_format":{"description":"\n","example_call":"number_bytes_format(symbol = \"auto\", units = \"binary\", ...)"},"scales::number":{"description":"This function is a low-level helper that powers many of the labelling\nfunctions. You should generally not need to call it directly unless you\nare creating your own labelling function.\n","example_call":"number(x, accuracy = NULL, scale = 1, prefix = \"\", suffix = \"\","},"scales::censor":{"description":"This set of functions modify data values outside a given range.\nThe <U+2060>oob_*()<U+2060> functions are designed to be passed as the oob argument of\nggplot2 continuous and binned scales, with oob_discard being an exception.\n","example_call":"censor(x, range = c(0, 1), only.finite = TRUE)"},"scales::fullseq":{"description":"Generate sequence of fixed size intervals covering range.\n","example_call":"fullseq(range, size, ...)"},"scales::demo_continuous":{"description":"These functions generate ggplot2 code needed to use scales functions for\nreal code.\n","example_call":"demo_continuous(x, ...)"},"scales::identity_pal":{"description":"Leaves values unchanged - useful when the data is already scaled.\n","example_call":"identity_pal()"},"scales::col_numeric":{"description":"Conveniently maps data values (numeric or factor/character) to colours\naccording to a given palette, which can be provided in a variety of formats.\n","example_call":"col_numeric(palette, domain, na.color = \"#808080\", alpha = FALSE,"},"scales::oob_discard":{"description":"This set of functions modify data values outside a given range.\nThe <U+2060>oob_*()<U+2060> functions are designed to be passed as the oob argument of\nggplot2 continuous and binned scales, with oob_discard being an exception.\n","example_call":"oob_discard(x, range = c(0, 1))"},"scales::pal_grey":{"description":"Grey scale palette (discrete)\n","example_call":"pal_grey(start = 0.2, end = 0.8)"},"scales::demo_log10":{"description":"These functions generate ggplot2 code needed to use scales functions for\nreal code.\n","example_call":"demo_log10(x, ...)"},"scales::log2_trans":{"description":null,"example_call":"log2_trans()"},"scales::cscale":{"description":"Continuous scale\n","example_call":"cscale(x, palette, na.value = NA_real_, trans = transform_identity())"},"scales::number_bytes":{"description":"\n","example_call":"number_bytes(x, symbol = \"auto\", units = c(\"binary\", \"si\"), accuracy = 1,"},"scales::exp_trans":{"description":"Exponential transformation (inverse of log transformation)\n","example_call":"exp_trans(base = exp(1))"},"scales::oob_keep":{"description":"This set of functions modify data values outside a given range.\nThe <U+2060>oob_*()<U+2060> functions are designed to be passed as the oob argument of\nggplot2 continuous and binned scales, with oob_discard being an exception.\n","example_call":"oob_keep(x, range = c(0, 1))"},"scales::cbreaks":{"description":"\n","example_call":"cbreaks(range, breaks = extended_breaks(), labels = scientific_format())"},"scales::minor_breaks_n":{"description":"Generate minor breaks between major breaks either spaced with a fixed width,\nor having a fixed number.\n","example_call":"minor_breaks_n(n)"},"scales::rescale_mid":{"description":"Rescale vector to have specified minimum, midpoint, and maximum\n","example_call":"rescale_mid(x, to, from, mid, ...)"},"scales::dscale":{"description":"Discrete scale\n","example_call":"dscale(x, palette, na.value = NA)"},"scales::boxcox_trans":{"description":"The Box-Cox transformation is a flexible transformation, often used to\ntransform data towards normality. The modulus transformation generalises\nBox-Cox to also work with negative values.\n","example_call":"boxcox_trans(p, offset = 0)"},"scales::trim_to_domain":{"description":"Silently drops any ranges outside of the domain of transform.\n","example_call":"trim_to_domain(transform, x)"},"scales::breaks_log":{"description":"This algorithm starts by looking for integer powers of base. If that\ndoesn't provide enough breaks, it then looks for additional intermediate\nbreaks which are integer multiples of integer powers of base. If that fails\n(which it can for very small ranges), we fall back to extended_breaks()\n","example_call":"breaks_log(n = 5, base = 10)"},"scales::cut_short_scale":{"description":"This function is a low-level helper that powers many of the labelling\nfunctions. You should generally not need to call it directly unless you\nare creating your own labelling function.\n","example_call":"cut_short_scale(space = FALSE)"},"scales::math_format":{"description":"\n","example_call":"math_format(expr = 10^.x, format = force)"},"scales::viridis_pal":{"description":"Viridis palette\n","example_call":"viridis_pal(alpha = 1, begin = 0, end = 1, direction = 1, option = \"D\")"},"scales::parse_format":{"description":"\n","example_call":"parse_format()"},"scales::squish":{"description":"This set of functions modify data values outside a given range.\nThe <U+2060>oob_*()<U+2060> functions are designed to be passed as the oob argument of\nggplot2 continuous and binned scales, with oob_discard being an exception.\n","example_call":"squish(x, range = c(0, 1), only.finite = TRUE)"},"scales::label_percent":{"description":"Label percentages (2.5%, 50%, etc)\n","example_call":"label_percent(accuracy = NULL, scale = 100, prefix = \"\", suffix = \"%\","},"scales::comma_format":{"description":"\n","example_call":"comma_format(accuracy = NULL, scale = 1, prefix = \"\", suffix = \"\","},"scales::pal_identity":{"description":"Leaves values unchanged - useful when the data is already scaled.\n","example_call":"pal_identity()"},"scales::demo_discrete":{"description":"These functions generate ggplot2 code needed to use scales functions for\nreal code.\n","example_call":"demo_discrete(x, ...)"},"scales::hue_pal":{"description":"Hue palette (discrete)\n","example_call":"hue_pal(h = c(0, 360) + 15, c = 100, l = 65, h.start = 0, direction = 1)"},"scales::rescale_none":{"description":"Don't perform rescaling\n","example_call":"rescale_none(x, ...)"},"scales::transform_log2":{"description":null,"example_call":"transform_log2()"},"scales::zero_range":{"description":"The machine epsilon is the difference between 1.0 and the next number\nthat can be represented by the machine. By default, this function\nuses epsilon * 1000 as the tolerance. First it scales the values so that\nthey have a mean of 1, and then it checks if the difference between\nthem is larger than the tolerance.\n","example_call":"zero_range(x, tol = 1000 * .Machine$double.eps)"},"scales::DiscreteRange":{"description":"Mutable ranges have a two methods (train and reset), and\nmake it possible to build up complete ranges with multiple passes.\n","example_call":"NULL"},"scales::pal_gradient_n":{"description":"Arbitrary colour gradient palette (continuous)\n","example_call":"pal_gradient_n(colours, values = NULL, space = \"Lab\")"},"scales::transform_modulus":{"description":"The Box-Cox transformation is a flexible transformation, often used to\ntransform data towards normality. The modulus transformation generalises\nBox-Cox to also work with negative values.\n","example_call":"transform_modulus(p, offset = 1)"},"scales::pal_div_gradient":{"description":"Diverging colour gradient (continuous).\n","example_call":"pal_div_gradient(low = mnsl(\"10B 4/6\"), mid = mnsl(\"N 8/0\"), high = mnsl(\"10R 4/6\"),"},"scales::cut_long_scale":{"description":"This function is a low-level helper that powers many of the labelling\nfunctions. You should generally not need to call it directly unless you\nare creating your own labelling function.\n","example_call":"cut_long_scale(space = FALSE)"},"scales::ordinal":{"description":"\n","example_call":"ordinal(x, prefix = \"\", suffix = \"\", big.mark = \" \", rules = ordinal_english(),"},"scales::label_date":{"description":"label_date() and label_time() label date/times using date/time format\nstrings. label_date_short() automatically constructs a short format string\nsufficient to uniquely identify labels. It's inspired by matplotlib's\nConciseDateFormatter,\nbut uses a slightly different approach: ConciseDateFormatter formats\n\"firsts\" (e.g. first day of month, first day of day) specially;\ndate_short() formats changes (e.g. new month, new year) specially.\nlabel_timespan() is intended to show time passed and adds common time units\nsuffix to the input (ns, us, ms, s, m, h, d, w).\n","example_call":"label_date(format = \"%Y-%m-%d\", tz = \"UTC\", locale = NULL)"},"scales::discard":{"description":"This set of functions modify data values outside a given range.\nThe <U+2060>oob_*()<U+2060> functions are designed to be passed as the oob argument of\nggplot2 continuous and binned scales, with oob_discard being an exception.\n","example_call":"discard(x, range = c(0, 1))"},"scales::label_time":{"description":"label_date() and label_time() label date/times using date/time format\nstrings. label_date_short() automatically constructs a short format string\nsufficient to uniquely identify labels. It's inspired by matplotlib's\nConciseDateFormatter,\nbut uses a slightly different approach: ConciseDateFormatter formats\n\"firsts\" (e.g. first day of month, first day of day) specially;\ndate_short() formats changes (e.g. new month, new year) specially.\nlabel_timespan() is intended to show time passed and adds common time units\nsuffix to the input (ns, us, ms, s, m, h, d, w).\n","example_call":"label_time(format = \"%H:%M:%S\", tz = \"UTC\", locale = NULL)"},"scales::transform_boxcox":{"description":"The Box-Cox transformation is a flexible transformation, often used to\ntransform data towards normality. The modulus transformation generalises\nBox-Cox to also work with negative values.\n","example_call":"transform_boxcox(p, offset = 0)"},"scales::comma":{"description":"\n","example_call":"comma(x, accuracy = NULL, scale = 1, prefix = \"\", suffix = \"\","},"scales::log1p_trans":{"description":null,"example_call":"log1p_trans()"},"scales::label_math":{"description":"label_parse() produces expression from strings by parsing them;\nlabel_math() constructs expressions by replacing the pronoun .x\nwith each string.\n","example_call":"label_math(expr = 10^.x, format = force)"},"scales::new_transform":{"description":"A transformation encapsulates a transformation and its inverse, as well\nas the information needed to create pleasing breaks and labels. The breaks()\nfunction is applied on the un-transformed range of the data, and the\nformat() function takes the output of the breaks() function and returns\nwell-formatted labels. Transformations may also include the derivatives of the\ntransformation and its inverse, but are not required to.\n","example_call":"new_transform(name, transform, inverse, d_transform = NULL, d_inverse = NULL,"},"scales::demo_time":{"description":"These functions generate ggplot2 code needed to use scales functions for\nreal code.\n","example_call":"demo_time(x, ...)"},"scales::log10_trans":{"description":null,"example_call":"log10_trans()"},"scales::brewer_pal":{"description":"Colour Brewer palette (discrete)\n","example_call":"brewer_pal(type = \"seq\", palette = 1, direction = 1)"},"scales::transform_probability":{"description":"Probability transformation\n","example_call":"transform_probability(distribution, ...)"},"scales::yj_trans":{"description":"The Yeo-Johnson transformation is a flexible transformation that is similar\nto Box-Cox, transform_boxcox(), but does not require input values to be\ngreater than zero.\n","example_call":"yj_trans(p)"},"scales::logit_trans":{"description":"Probability transformation\n","example_call":"logit_trans()"},"scales::breaks_extended":{"description":"Uses Wilkinson's extended breaks algorithm as implemented in the\nlabeling package.\n","example_call":"breaks_extended(n = 5, ...)"},"scales::pal_dichromat":{"description":"Dichromat (colour-blind) palette (discrete)\n","example_call":"pal_dichromat(name)"},"scales::dichromat_pal":{"description":"Dichromat (colour-blind) palette (discrete)\n","example_call":"dichromat_pal(name)"},"scales::show_col":{"description":"A quick and dirty way to show colours in a plot.\n","example_call":"show_col(colours, labels = TRUE, borders = NULL, cex_label = 1,"},"scales::demo_timespan":{"description":"These functions generate ggplot2 code needed to use scales functions for\nreal code.\n","example_call":"demo_timespan(x, ...)"},"scales::div_gradient_pal":{"description":"Diverging colour gradient (continuous).\n","example_call":"div_gradient_pal(low = mnsl(\"10B 4/6\"), mid = mnsl(\"N 8/0\"), high = mnsl(\"10R 4/6\"),"},"scales::pal_manual":{"description":"Manual palette (discrete)\n","example_call":"pal_manual(values)"},"scales::train_discrete":{"description":"Train (update) a discrete scale\n","example_call":"train_discrete(new, existing = NULL, drop = FALSE, na.rm = FALSE,"},"scales::transform_hms":{"description":"transform_timespan() provides transformations for data encoding time passed\nalong with breaks and label formatting showing standard unit of time fitting\nthe range of the data. transform_hms() provides the same but using standard\nhms idioms and formatting.\n","example_call":"transform_hms()"},"scales::manual_pal":{"description":"Manual palette (discrete)\n","example_call":"manual_pal(values)"},"scales::reverse_trans":{"description":"reversing transformation works by multiplying the input with -1. This means\nthat reverse transformation cannot easily be composed with transformations\nthat require positive input unless the reversing is done as a final step.\n","example_call":"reverse_trans()"},"scales::regular_minor_breaks":{"description":"Places minor breaks between major breaks.\n","example_call":"regular_minor_breaks(reverse = FALSE)"},"scales::pseudo_log_trans":{"description":null,"example_call":"pseudo_log_trans(sigma = 1, base = exp(1))"},"scales::seq_gradient_pal":{"description":"Sequential colour gradient palette (continuous)\n","example_call":"seq_gradient_pal(low = mnsl(\"10B 4/6\"), high = mnsl(\"10R 4/6\"), space = \"Lab\")"},"scales::ordinal_french":{"description":"Round values to integers and then display as ordinal values (e.g. 1st, 2nd,\n3rd). Built-in rules are provided for English, French, and Spanish.\n","example_call":"ordinal_french(gender = c(\"masculin\", \"feminin\"), plural = FALSE)"},"scales::rescale":{"description":"Rescale continuous vector to have specified minimum and maximum\n","example_call":"rescale(x, to, from, ...)"},"scales::transform_logit":{"description":"Probability transformation\n","example_call":"transform_logit()"},"scales::train_continuous":{"description":"Strips attributes and always returns a numeric vector\n","example_call":"train_continuous(new, existing = NULL)"},"scales::rescale_pal":{"description":"Just rescales the input to the specific output range.  Useful for\nalpha, size, and continuous position.\n","example_call":"rescale_pal(range = c(0.1, 1))"},"scales::col_bin":{"description":"Conveniently maps data values (numeric or factor/character) to colours\naccording to a given palette, which can be provided in a variety of formats.\n","example_call":"col_bin(palette, domain, bins = 7, pretty = TRUE, na.color = \"#808080\","},"scales::ordinal_format":{"description":"\n","example_call":"ordinal_format(prefix = \"\", suffix = \"\", big.mark = \" \", rules = ordinal_english(),"},"scales::scientific_format":{"description":"\n","example_call":"scientific_format(digits = 3, scale = 1, prefix = \"\", suffix = \"\", decimal.mark = \".\","},"scales::as.trans":{"description":"A transformation encapsulates a transformation and its inverse, as well\nas the information needed to create pleasing breaks and labels. The breaks()\nfunction is applied on the un-transformed range of the data, and the\nformat() function takes the output of the breaks() function and returns\nwell-formatted labels. Transformations may also include the derivatives of the\ntransformation and its inverse, but are not required to.\n","example_call":"as.trans(x, arg = deparse(substitute(x)))"},"scales::time_format":{"description":"\n","example_call":"time_format(format = \"%H:%M:%S\", tz = \"UTC\", locale = NULL)"},"scales::unit_format":{"description":"\n","example_call":"unit_format(accuracy = NULL, scale = 1, prefix = \"\", unit = \"m\","},"scales::oob_censor_any":{"description":"This set of functions modify data values outside a given range.\nThe <U+2060>oob_*()<U+2060> functions are designed to be passed as the oob argument of\nggplot2 continuous and binned scales, with oob_discard being an exception.\n","example_call":"oob_censor_any(x, range = c(0, 1))"},"scales::is.trans":{"description":"A transformation encapsulates a transformation and its inverse, as well\nas the information needed to create pleasing breaks and labels. The breaks()\nfunction is applied on the un-transformed range of the data, and the\nformat() function takes the output of the breaks() function and returns\nwell-formatted labels. Transformations may also include the derivatives of the\ntransformation and its inverse, but are not required to.\n","example_call":"is.trans(x)"},"scales::label_parse":{"description":"label_parse() produces expression from strings by parsing them;\nlabel_math() constructs expressions by replacing the pronoun .x\nwith each string.\n","example_call":"label_parse()"},"scales::modulus_trans":{"description":"The Box-Cox transformation is a flexible transformation, often used to\ntransform data towards normality. The modulus transformation generalises\nBox-Cox to also work with negative values.\n","example_call":"modulus_trans(p, offset = 1)"},"scales::label_number_auto":{"description":"Switches between number_format() and scientific_format() based on a set of\nheuristics designed to automatically generate useful labels across a wide\nrange of inputs\n","example_call":"label_number_auto()"},"scales::format_format":{"description":"\n","example_call":"format_format(...)"},"scales::expand_range":{"description":"Expand a range with a multiplicative or additive constant\n","example_call":"expand_range(range, mul = 0, add = 0, zero_width = 1)"},"scales::pal_seq_gradient":{"description":"Sequential colour gradient palette (continuous)\n","example_call":"pal_seq_gradient(low = mnsl(\"10B 4/6\"), high = mnsl(\"10R 4/6\"), space = \"Lab\")"},"scales::trans_format":{"description":"\n","example_call":"trans_format(trans, format = scientific_format())"},"scales::number_format":{"description":"\n","example_call":"number_format(accuracy = NULL, scale = 1, prefix = \"\", suffix = \"\","},"scales::probit_trans":{"description":"Probability transformation\n","example_call":"probit_trans()"},"scales::probability_trans":{"description":"Probability transformation\n","example_call":"probability_trans(distribution, ...)"},"scales::reciprocal_trans":{"description":"Reciprocal transformation\n","example_call":"reciprocal_trans()"},"scales::transform_identity":{"description":"Identity transformation (do nothing)\n","example_call":"transform_identity()"},"scales::ordinal_spanish":{"description":"Round values to integers and then display as ordinal values (e.g. 1st, 2nd,\n3rd). Built-in rules are provided for English, French, and Spanish.\n","example_call":"ordinal_spanish()"},"scales::transform_reciprocal":{"description":"Reciprocal transformation\n","example_call":"transform_reciprocal()"},"scales::cut_time_scale":{"description":"This function is a low-level helper that powers many of the labelling\nfunctions. You should generally not need to call it directly unless you\nare creating your own labelling function.\n","example_call":"cut_time_scale(space = FALSE)"},"scales::oob_squish":{"description":"This set of functions modify data values outside a given range.\nThe <U+2060>oob_*()<U+2060> functions are designed to be passed as the oob argument of\nggplot2 continuous and binned scales, with oob_discard being an exception.\n","example_call":"oob_squish(x, range = c(0, 1), only.finite = TRUE)"},"scales::atanh_trans":{"description":"Arc-tangent transformation\n","example_call":"atanh_trans()"},"scales::transform_pseudo_log":{"description":null,"example_call":"transform_pseudo_log(sigma = 1, base = exp(1))"},"scales::date_trans":{"description":"Transformation for dates (class Date)\n","example_call":"date_trans()"},"scales::oob_squish_any":{"description":"This set of functions modify data values outside a given range.\nThe <U+2060>oob_*()<U+2060> functions are designed to be passed as the oob argument of\nggplot2 continuous and binned scales, with oob_discard being an exception.\n","example_call":"oob_squish_any(x, range = c(0, 1))"},"scales::time_trans":{"description":"Transformation for date-times (class POSIXt)\n","example_call":"time_trans(tz = NULL)"},"scales::shape_pal":{"description":"Shape palette (discrete)\n","example_call":"shape_pal(solid = TRUE)"},"scales::label_log":{"description":"label_log() displays numbers as base^exponent, using superscript formatting.\n","example_call":"label_log(base = 10, digits = 3)"},"scales::squish_infinite":{"description":"This set of functions modify data values outside a given range.\nThe <U+2060>oob_*()<U+2060> functions are designed to be passed as the oob argument of\nggplot2 continuous and binned scales, with oob_discard being an exception.\n","example_call":"squish_infinite(x, range = c(0, 1))"},"scales::label_ordinal":{"description":"Round values to integers and then display as ordinal values (e.g. 1st, 2nd,\n3rd). Built-in rules are provided for English, French, and Spanish.\n","example_call":"label_ordinal(prefix = \"\", suffix = \"\", big.mark = \" \", rules = ordinal_english(),"},"scales::dollar":{"description":"\n","example_call":"dollar(x, accuracy = NULL, scale = 1, prefix = \"$\", suffix = \"\","},"scales::date_format":{"description":"\n","example_call":"date_format(format = \"%Y-%m-%d\", tz = \"UTC\", locale = NULL)"},"scales::pvalue_format":{"description":"\n","example_call":"pvalue_format(accuracy = 0.001, decimal.mark = \".\", prefix = NULL,"},"scales::gradient_n_pal":{"description":"Arbitrary colour gradient palette (continuous)\n","example_call":"gradient_n_pal(colours, values = NULL, space = \"Lab\")"},"scales::pal_brewer":{"description":"Colour Brewer palette (discrete)\n","example_call":"pal_brewer(type = \"seq\", palette = 1, direction = 1)"},"scales::ContinuousRange":{"description":"Mutable ranges have a two methods (train and reset), and\nmake it possible to build up complete ranges with multiple passes.\n","example_call":"NULL"},"scales::pal_area":{"description":"Area palettes (continuous)\n","example_call":"pal_area(range = c(1, 6))"},"scales::minor_breaks_width":{"description":"Generate minor breaks between major breaks either spaced with a fixed width,\nor having a fixed number.\n","example_call":"minor_breaks_width(width, offset)"},"scales::extended_breaks":{"description":"Uses Wilkinson's extended breaks algorithm as implemented in the\nlabeling package.\n","example_call":"extended_breaks(n = 5, ...)"},"scales::compose_trans":{"description":"This transformer provides a general mechanism for composing two or more\ntransformers together. The most important use case is to combine reverse\nwith other transformations.\n","example_call":"compose_trans(...)"},"scales::log_trans":{"description":null,"example_call":"log_trans(base = exp(1))"},"scales::cut_si":{"description":"This function is a low-level helper that powers many of the labelling\nfunctions. You should generally not need to call it directly unless you\nare creating your own labelling function.\n","example_call":"cut_si(unit)"},"scales::percent":{"description":"\n","example_call":"percent(x, accuracy = NULL, scale = 100, prefix = \"\", suffix = \"%\","},"scales::pal_rescale":{"description":"Just rescales the input to the specific output range.  Useful for\nalpha, size, and continuous position.\n","example_call":"pal_rescale(range = c(0.1, 1))"},"scales::label_scientific":{"description":"Label numbers with scientific notation (e.g. 1e05, 1.5e-02)\n","example_call":"label_scientific(digits = 3, scale = 1, prefix = \"\", suffix = \"\", decimal.mark = \".\","},"scales::transform_yj":{"description":"The Yeo-Johnson transformation is a flexible transformation that is similar\nto Box-Cox, transform_boxcox(), but does not require input values to be\ngreater than zero.\n","example_call":"transform_yj(p)"},"scales::transform_atanh":{"description":"Arc-tangent transformation\n","example_call":"transform_atanh()"},"scales::transform_log10":{"description":null,"example_call":"transform_log10()"},"scales::trans_new":{"description":"A transformation encapsulates a transformation and its inverse, as well\nas the information needed to create pleasing breaks and labels. The breaks()\nfunction is applied on the un-transformed range of the data, and the\nformat() function takes the output of the breaks() function and returns\nwell-formatted labels. Transformations may also include the derivatives of the\ntransformation and its inverse, but are not required to.\n","example_call":"trans_new(name, transform, inverse, d_transform = NULL, d_inverse = NULL,"},"scales::dollar_format":{"description":"\n","example_call":"dollar_format(accuracy = NULL, scale = 1, prefix = \"$\", suffix = \"\","},"scales::Range":{"description":"Mutable ranges have a two methods (train and reset), and\nmake it possible to build up complete ranges with multiple passes.\n","example_call":"NULL"},"scales::muted":{"description":"Mute standard colour\n","example_call":"muted(colour, l = 30, c = 70)"},"scales::transform_compose":{"description":"This transformer provides a general mechanism for composing two or more\ntransformers together. The most important use case is to combine reverse\nwith other transformations.\n","example_call":"transform_compose(...)"},"scales::as.transform":{"description":"A transformation encapsulates a transformation and its inverse, as well\nas the information needed to create pleasing breaks and labels. The breaks()\nfunction is applied on the un-transformed range of the data, and the\nformat() function takes the output of the breaks() function and returns\nwell-formatted labels. Transformations may also include the derivatives of the\ntransformation and its inverse, but are not required to.\n","example_call":"as.transform(x, arg = deparse(substitute(x)))"},"scales::label_wrap":{"description":"Uses strwrap() to split long labels across multiple lines.\n","example_call":"label_wrap(width)"},"scales::linetype_pal":{"description":"Based on a set supplied by Richard Pearson, University of Manchester\n","example_call":"linetype_pal()"},"scales::timespan_trans":{"description":"transform_timespan() provides transformations for data encoding time passed\nalong with breaks and label formatting showing standard unit of time fitting\nthe range of the data. transform_hms() provides the same but using standard\nhms idioms and formatting.\n","example_call":"timespan_trans(unit = c(\"secs\", \"mins\", \"hours\", \"days\", \"weeks\"))"},"scales::scientific":{"description":"\n","example_call":"scientific(x, digits = 3, scale = 1, prefix = \"\", suffix = \"\","},"scales::area_pal":{"description":"Area palettes (continuous)\n","example_call":"area_pal(range = c(1, 6))"},"scales::label_number":{"description":"Use label_number() force decimal display of numbers (i.e. don't use\nscientific notation). label_comma() is a special case\nthat inserts a comma every three digits.\n","example_call":"label_number(accuracy = NULL, scale = 1, prefix = \"\", suffix = \"\","},"scales::label_pvalue":{"description":"Formatter for p-values, using \"<\" and \">\" for p-values close to 0 and 1.\n","example_call":"label_pvalue(accuracy = 0.001, decimal.mark = \".\", prefix = NULL,"},"scales::label_currency":{"description":"Format numbers as currency, rounding values to monetary or fractional\nmonetary using unit a convenient heuristic.\n","example_call":"label_currency(accuracy = NULL, scale = 1, prefix = \"$\", suffix = \"\","},"sjlabelled::set_na":{"description":"This function replaces specific values of variables with NA.\n","example_call":"set_na(x, ..., na, drop.levels = TRUE, as.tag = FALSE)"},"sjlabelled::zap_labels":{"description":"For (partially) labelled vectors, zap_labels() will replace\nall values that have a value label attribute with NA;\nzap_unlabelled(), as counterpart, will replace all values\nthat don't have a value label attribute with NA.\ndrop_labels() drops all value labels for unused values,\ni.e. values that are not present in a vector. fill_labels() is the\ncounterpart to drop_labels() and adds value labels to\na partially labelled vector, i.e. if not all values are\nlabelled, non-labelled values get labels.\n","example_call":"zap_labels(x, ...)"},"sjlabelled::set_label":{"description":"This function adds variable labels as attribute\n(named \"label\") to the variable x, resp. to a\nset of variables in a data frame or a list-object. var_labels()\nis intended for use within pipe-workflows and has a tidyverse-consistent\nsyntax, including support for quasi-quotation (see 'Examples').\n","example_call":"set_label(x, label)"},"sjlabelled::add_labels":{"description":"These functions add, replace or remove value labels to or from variables.\n","example_call":"add_labels(x, ..., labels)"},"sjlabelled::val_labels":{"description":"This function adds labels as attribute (named \"labels\")\nto a variable or vector x, resp. to a set of variables in a\ndata frame or a list-object. A use-case is, for instance, the\nsjPlot-package, which supports labelled data and automatically\nassigns labels to axes or legends in plots or to be used in tables.\nval_labels() is intended for use within pipe-workflows and has a\ntidyverse-consistent syntax, including support for quasi-quotation\n(see 'Examples').\n","example_call":"val_labels(x, ..., force.labels = FALSE, force.values = TRUE,"},"sjlabelled::get_na":{"description":"This function retrieves tagged NA values and their associated\nvalue labels from a labelled vector.\n","example_call":"get_na(x, as.tag = FALSE)"},"sjlabelled::as_factor":{"description":"This function converts a variable into a factor, but preserves\nvariable and value label attributes.\n","example_call":"as_factor(x, ...)"},"sjlabelled::set_labels":{"description":"This function adds labels as attribute (named \"labels\")\nto a variable or vector x, resp. to a set of variables in a\ndata frame or a list-object. A use-case is, for instance, the\nsjPlot-package, which supports labelled data and automatically\nassigns labels to axes or legends in plots or to be used in tables.\nval_labels() is intended for use within pipe-workflows and has a\ntidyverse-consistent syntax, including support for quasi-quotation\n(see 'Examples').\n","example_call":"set_labels(x, ..., labels, force.labels = FALSE, force.values = TRUE,"},"sjlabelled::get_label":{"description":"This function returns the variable labels of labelled data.\n","example_call":"get_label(x, ..., def.value = NULL, case = NULL)"},"sjlabelled::as_character":{"description":"as_label() converts (replaces) values of a variable (also of factors\nor character vectors) with their associated value labels. Might\nbe helpful for factor variables.\nFor instance, if you have a Gender variable with 0/1 value, and associated\nlabels are male/female, this function would convert all 0 to male and\nall 1 to female and returns the new variable as factor.\nas_character() does the same as as_label(), but returns\na character vector.\n","example_call":"as_character(x, ...)"},"sjlabelled::read_spss":{"description":"Import data from SPSS, SAS or Stata, including NA's, value and variable\nlabels.\n","example_call":"read_spss(path, convert.factors = TRUE, drop.labels = FALSE,"},"sjlabelled::write_stata":{"description":"These functions write the content of a data frame to an SPSS, SAS or\nStata-file.\n","example_call":"write_stata(x, path, drop.na = FALSE, version = 14)"},"sjlabelled::as_labelled":{"description":"Converts a (labelled) vector of any class into a labelled\nclass vector, resp. adds a labelled class-attribute.\n","example_call":"as_labelled(x, add.labels = FALSE, add.class = FALSE, skip.strings = FALSE,"},"sjlabelled::get_term_labels":{"description":"This function retrieves variable labels from model terms. In case\nof categorical variables, where one variable has multiple dummies,\nvariable name and category value is returned.\n","example_call":"get_term_labels(models, mark.cat = FALSE, case = NULL, prefix = c(\"none\","},"sjlabelled::read_sas":{"description":"Import data from SPSS, SAS or Stata, including NA's, value and variable\nlabels.\n","example_call":"read_sas(path, path.cat = NULL, convert.factors = TRUE, drop.labels = FALSE,"},"sjlabelled::write_sas":{"description":"These functions write the content of a data frame to an SPSS, SAS or\nStata-file.\n","example_call":"write_sas(x, path, drop.na = FALSE)"},"sjlabelled::get_labels":{"description":"This function returns the value labels of labelled data.\n","example_call":"get_labels(x, attr.only = FALSE, values = NULL, non.labelled = FALSE,"},"sjlabelled::convert_case":{"description":"This function wraps to_any_case() from the snakecase\npackage with certain defaults for the sep_in and\nsep_out arguments, used for instance to convert cases in\nterm_labels.\n","example_call":"convert_case(lab, case = NULL, verbose = FALSE, ...)"},"sjlabelled::to_character":{"description":"as_label() converts (replaces) values of a variable (also of factors\nor character vectors) with their associated value labels. Might\nbe helpful for factor variables.\nFor instance, if you have a Gender variable with 0/1 value, and associated\nlabels are male/female, this function would convert all 0 to male and\nall 1 to female and returns the new variable as factor.\nas_character() does the same as as_label(), but returns\na character vector.\n","example_call":"to_character(x, ...)"},"sjlabelled::is_labelled":{"description":"This function checks whether x is of class labelled.\n","example_call":"is_labelled(x)"},"sjlabelled::term_labels":{"description":"This function retrieves variable labels from model terms. In case\nof categorical variables, where one variable has multiple dummies,\nvariable name and category value is returned.\n","example_call":"term_labels(models, mark.cat = FALSE, case = NULL, prefix = c(\"none\","},"sjlabelled::drop_labels":{"description":"For (partially) labelled vectors, zap_labels() will replace\nall values that have a value label attribute with NA;\nzap_unlabelled(), as counterpart, will replace all values\nthat don't have a value label attribute with NA.\ndrop_labels() drops all value labels for unused values,\ni.e. values that are not present in a vector. fill_labels() is the\ncounterpart to drop_labels() and adds value labels to\na partially labelled vector, i.e. if not all values are\nlabelled, non-labelled values get labels.\n","example_call":"drop_labels(x, ..., drop.na = TRUE)"},"sjlabelled::get_values":{"description":"This function retrieves the values associated with value labels\nfrom labelled vectors. Data is also labelled\nwhen imported from SPSS, SAS or STATA via read_spss,\nread_sas or read_stata.\n","example_call":"get_values(x, sort.val = TRUE, drop.na = FALSE)"},"sjlabelled::remove_all_labels":{"description":"This function removes value and variable label attributes\nfrom a vector or data frame. These attributes are typically\nadded to variables when importing foreign data (see\nread_spss) or manually adding label attributes\nwith set_labels.\n","example_call":"remove_all_labels(x)"},"sjlabelled::read_stata":{"description":"Import data from SPSS, SAS or Stata, including NA's, value and variable\nlabels.\n","example_call":"read_stata(path, convert.factors = TRUE, drop.labels = FALSE,"},"sjlabelled::remove_label":{"description":"Remove variable labels from variables.\n","example_call":"remove_label(x, ...)"},"sjlabelled::unlabel":{"description":"This function converts labelled class vectors\ninto a generic data format, which means that simply all labelled\nclass attributes will be removed, so all vectors / variables will most\nlikely become atomic.\n","example_call":"unlabel(x, verbose = FALSE)"},"sjlabelled::copy_labels":{"description":"Subsetting-functions usually drop value and variable labels from\nsubsetted data frames (if the original data frame has value and variable\nlabel attributes). This function copies these value and variable\nlabels back to subsetted data frames that have been subsetted, for instance,\nwith subset.\n","example_call":"copy_labels(df_new, df_origin = NULL, ...)"},"sjlabelled::get_dv_labels":{"description":"This function retrieves variable labels from model terms. In case\nof categorical variables, where one variable has multiple dummies,\nvariable name and category value is returned.\n","example_call":"get_dv_labels(models, case = NULL, multi.resp = FALSE, mv = FALSE,"},"sjlabelled::set_label<-":{"description":"This function adds variable labels as attribute\n(named \"label\") to the variable x, resp. to a\nset of variables in a data frame or a list-object. var_labels()\nis intended for use within pipe-workflows and has a tidyverse-consistent\nsyntax, including support for quasi-quotation (see 'Examples').\n","example_call":"set_label<-(x, value)"},"sjlabelled::to_label":{"description":"as_label() converts (replaces) values of a variable (also of factors\nor character vectors) with their associated value labels. Might\nbe helpful for factor variables.\nFor instance, if you have a Gender variable with 0/1 value, and associated\nlabels are male/female, this function would convert all 0 to male and\nall 1 to female and returns the new variable as factor.\nas_character() does the same as as_label(), but returns\na character vector.\n","example_call":"to_label(x, ...)"},"sjlabelled::remove_labels":{"description":"These functions add, replace or remove value labels to or from variables.\n","example_call":"remove_labels(x, ..., labels)"},"sjlabelled::zap_na_tags":{"description":"Replaces all tagged_na() values with\nregular NA.\n","example_call":"zap_na_tags(x, ...)"},"sjlabelled::replace_labels":{"description":"These functions add, replace or remove value labels to or from variables.\n","example_call":"replace_labels(x, ..., labels)"},"sjlabelled::response_labels":{"description":"This function retrieves variable labels from model terms. In case\nof categorical variables, where one variable has multiple dummies,\nvariable name and category value is returned.\n","example_call":"response_labels(models, case = NULL, multi.resp = FALSE, mv = FALSE,"},"sjlabelled::write_spss":{"description":"These functions write the content of a data frame to an SPSS, SAS or\nStata-file.\n","example_call":"write_spss(x, path, drop.na = FALSE, compress = FALSE)"},"sjlabelled::read_data":{"description":"Import data from SPSS, SAS or Stata, including NA's, value and variable\nlabels.\n","example_call":"read_data(path, convert.factors = TRUE, drop.labels = FALSE,"},"sjlabelled::as_numeric":{"description":"This function converts (replaces) factor levels with the\nrelated factor level index number, thus the factor is converted to\na numeric variable.\n","example_call":"as_numeric(x, ...)"},"sjlabelled::tidy_labels":{"description":"Duplicated value labels in variables may cause troubles when\nsaving labelled data, or computing cross tabs (cf.\nsjmisc::flat_table() or sjPlot::plot_xtab()).\ntidy_labels() repairs duplicated value labels by suffixing\nthem with the associated value.\n","example_call":"tidy_labels(x, ..., sep = \"_\", remove = FALSE)"},"sjlabelled::label_to_colnames":{"description":"This function sets variable labels as column names, to use \"labelled\ndata\" also for those functions that cannot cope with labelled data by default.\n","example_call":"label_to_colnames(x, ...)"},"sjlabelled::fill_labels":{"description":"For (partially) labelled vectors, zap_labels() will replace\nall values that have a value label attribute with NA;\nzap_unlabelled(), as counterpart, will replace all values\nthat don't have a value label attribute with NA.\ndrop_labels() drops all value labels for unused values,\ni.e. values that are not present in a vector. fill_labels() is the\ncounterpart to drop_labels() and adds value labels to\na partially labelled vector, i.e. if not all values are\nlabelled, non-labelled values get labels.\n","example_call":"fill_labels(x, ...)"},"sjlabelled::var_labels":{"description":"This function adds variable labels as attribute\n(named \"label\") to the variable x, resp. to a\nset of variables in a data frame or a list-object. var_labels()\nis intended for use within pipe-workflows and has a tidyverse-consistent\nsyntax, including support for quasi-quotation (see 'Examples').\n","example_call":"var_labels(x, ...)"},"sjlabelled::to_numeric":{"description":"This function converts (replaces) factor levels with the\nrelated factor level index number, thus the factor is converted to\na numeric variable.\n","example_call":"to_numeric(x, ...)"},"sjlabelled::zap_unlabelled":{"description":"For (partially) labelled vectors, zap_labels() will replace\nall values that have a value label attribute with NA;\nzap_unlabelled(), as counterpart, will replace all values\nthat don't have a value label attribute with NA.\ndrop_labels() drops all value labels for unused values,\ni.e. values that are not present in a vector. fill_labels() is the\ncounterpart to drop_labels() and adds value labels to\na partially labelled vector, i.e. if not all values are\nlabelled, non-labelled values get labels.\n","example_call":"zap_unlabelled(x, ...)"},"sjlabelled::to_factor":{"description":"This function converts a variable into a factor, but preserves\nvariable and value label attributes.\n","example_call":"to_factor(x, ...)"},"sjlabelled::as_label":{"description":"as_label() converts (replaces) values of a variable (also of factors\nor character vectors) with their associated value labels. Might\nbe helpful for factor variables.\nFor instance, if you have a Gender variable with 0/1 value, and associated\nlabels are male/female, this function would convert all 0 to male and\nall 1 to female and returns the new variable as factor.\nas_character() does the same as as_label(), but returns\na character vector.\n","example_call":"as_label(x, ...)"},"splines::bs":{"description":"Generate the B-spline basis matrix for a polynomial spline.\n","example_call":"bs(x, df = NULL, knots = NULL, degree = 3, intercept = FALSE,"},"splines::splineKnots":{"description":"Return the knot vector corresponding to a spline object.\n","example_call":"splineKnots(object)"},"splines::as.polySpline":{"description":"Create the piecewise polynomial representation of a spline object.\n","example_call":"as.polySpline(object, ...)"},"splines::interpSpline":{"description":"Create an interpolation spline, either from x and y\nvectors (default method), or from a formula / data.frame\ncombination (formula method).\n","example_call":"interpSpline(obj1, obj2, bSpline = FALSE, period = NULL, ord = 4L,"},"splines::splineDesign":{"description":"Evaluate the design matrix for the B-splines defined by knots\nat the values in x.\n","example_call":"splineDesign(knots, x, ord = 4L, derivs = 0L, outer.ok = FALSE,"},"splines::asVector":{"description":"This is a generic function.  Methods for this function coerce objects\nof given classes to vectors.\n","example_call":"asVector(object)"},"splines::spline.des":{"description":"Evaluate the design matrix for the B-splines defined by knots\nat the values in x.\n","example_call":"spline.des(knots, x, ord = 4, derivs = integer(length(x)), outer.ok = FALSE,"},"splines::backSpline":{"description":"Create a monotone inverse of a monotone natural spline.\n","example_call":"backSpline(object)"},"splines::ns":{"description":"Generate the B-spline basis matrix for a natural cubic spline.\n","example_call":"ns(x, df = NULL, knots = NULL, intercept = FALSE, Boundary.knots = range(x))"},"splines::xyVector":{"description":"Create an object to represent a set of x-y pairs.  The resulting\nobject can be treated as a matrix or as a data frame or as a vector.\nWhen treated as a vector it reduces to the y component only.\n","example_call":"xyVector(x, y)"},"splines::periodicSpline":{"description":"Create a periodic interpolation spline, either from x and\ny vectors, or from a formula/data.frame combination.\n","example_call":"periodicSpline(obj1, obj2, knots, period = 2 * pi, ord = 4L)"},"splines::splineOrder":{"description":"Return the order of a spline object.\n","example_call":"splineOrder(object)"},"splines::polySpline":{"description":"Create the piecewise polynomial representation of a spline object.\n","example_call":"polySpline(object, ...)"},"stats::asOneSidedFormula":{"description":"Names, calls, expressions (first element), numeric values, and\ncharacter strings are converted to one-sided formulae\nassociated with the global environment.\nIf the input is a formula, it must be\none-sided, in which case it is returned unaltered.\n","example_call":"asOneSidedFormula(object)"},"stats::r2dtable":{"description":"Generate random 2-way tables with given marginals using Patefield's\nalgorithm.\n","example_call":"r2dtable(n, r, c)"},"stats::drop.terms":{"description":"delete.response returns a terms object for the same\nmodel but with no response variable.\n","example_call":"drop.terms(termobj, dropx = NULL, keep.response = FALSE)"},"stats::confint.lm":{"description":"Computes confidence intervals for one or more parameters in a fitted\nmodel.  There is a default and a method for objects inheriting from class\n\"lm\".\n","example_call":"confint.lm(object, parm, level = 0.95, ...)"},"stats::is.mts":{"description":"The function ts is used to create time-series objects.\n","example_call":"is.mts(x)"},"stats::nlminb":{"description":"Unconstrained and box-constrained optimization using PORT routines.\n","example_call":"nlminb(start, objective, gradient = NULL, hessian = NULL,"},"stats::alias":{"description":"Find aliases (linearly dependent terms) in a linear model specified by\na formula.\n","example_call":"alias(object, ...)"},"stats::gaussian":{"description":"Family objects provide a convenient way to specify the details of the\nmodels used by functions such as glm.  See the\ndocumentation for glm for the details on how such model\nfitting takes place.\n","example_call":"gaussian(link = \"identity\")"},"stats::profile":{"description":"Investigates the behavior of the objective function near the solution\nrepresented by fitted.\n","example_call":"profile(fitted, ...)"},"stats::ls.diag":{"description":"Computes basic statistics, including standard errors, t- and p-values\nfor the regression coefficients.\n","example_call":"ls.diag(ls.out)"},"stats::mahalanobis":{"description":"Returns the squared Mahalanobis distance of all rows in x and the\nvector \\mu = center with respect to\n\\Sigma = cov.\nThis is (for vector x) defined as\n","example_call":"mahalanobis(x, center, cov, inverted = FALSE, ...)"},"stats::rmultinom":{"description":"Generate multinomially distributed random number vectors and\ncompute multinomial probabilities.\n","example_call":"rmultinom(n, size, prob)"},"stats::dpois":{"description":"Density, distribution function, quantile function and random\ngeneration for the Poisson distribution with parameter lambda.\n","example_call":"dpois(x, lambda, log = FALSE)"},"stats::numericDeriv":{"description":"numericDeriv numerically evaluates the gradient of an expression.\n","example_call":"numericDeriv(expr, theta, rho = parent.frame(), dir = 1, eps = .Machine$double.eps^(1/if (central) 3 else 2),"},"stats::makepredictcall":{"description":"A utility to help model.frame.default create the right\nmatrices when predicting from models with terms like (univariate)\npoly or ns.\n","example_call":"makepredictcall(var, call)"},"stats::qlogis":{"description":"Density, distribution function, quantile function and random\ngeneration for the logistic distribution with parameters\nlocation and scale.\n","example_call":"qlogis(p, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE)"},"stats::loadings":{"description":"Extract or print loadings in factor analysis (or principal\ncomponents analysis).\n","example_call":"loadings(x, ...)"},"stats::dlogis":{"description":"Density, distribution function, quantile function and random\ngeneration for the logistic distribution with parameters\nlocation and scale.\n","example_call":"dlogis(x, location = 0, scale = 1, log = FALSE)"},"stats::nlm":{"description":"This function carries out a minimization of the function f\nusing a Newton-type algorithm.  See the references for details.\n","example_call":"nlm(f, p, ..., hessian = FALSE, typsize = rep(1, length(p)),"},"stats::residuals.glm":{"description":"These functions are all methods for class glm or\nsummary.glm objects.\n","example_call":"residuals.glm(object, type = c(\"deviance\", \"pearson\", \"working\","},"stats::qcauchy":{"description":"Density, distribution function, quantile function and random\ngeneration for the Cauchy distribution with location parameter\nlocation and scale parameter scale.\n","example_call":"qcauchy(p, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE)"},"stats::nextn":{"description":"nextn returns the smallest integer,\ngreater than or equal to n, which can be obtained\nas a product of powers of the values contained in factors.\n","example_call":"nextn(n, factors = c(2, 3, 5))"},"stats::nls":{"description":"Determine the nonlinear (weighted) least-squares estimates of the\nparameters of a nonlinear model.\n","example_call":"nls(formula, data = parent.frame(), start, control = nls.control(),"},"stats::plot.stepfun":{"description":"Method of the generic plot for stepfun\nobjects and utility for plotting piecewise constant functions.\n","example_call":"plot.stepfun(x, xval, xlim, ylim = range(c(y, Fn.kn)), xlab = \"x\","},"stats::arima0.diag":{"description":"The functions or variables listed here are no longer part of R as\nthey are not needed (any more).\n","example_call":"arima0.diag(...)"},"stats::dummy.coef":{"description":"This extracts coefficients in terms of the original levels of the\ncoefficients rather than the coded variables.\n","example_call":"dummy.coef(object, ...)"},"stats::ftable":{"description":"Create <U+2018>flat<U+2019> contingency tables.","example_call":"ftable(x, ...)"},"stats::as.formula":{"description":"The generic function formula and its specific methods provide a\nway of extracting formulae which have been included in other objects.\n","example_call":"as.formula(object, env = parent.frame())"},"stats::pairwise.wilcox.test":{"description":"Calculate pairwise comparisons between group levels with corrections\nfor multiple testing.\n","example_call":"pairwise.wilcox.test(x, g, p.adjust.method = p.adjust.methods, paired = FALSE,"},"stats::time":{"description":"time creates the vector of times at which a time series was sampled.\n","example_call":"time(x, ...)"},"stats::embed":{"description":"Embeds the time series x into a low-dimensional\nEuclidean space.\n","example_call":"embed(x, dimension = 1)"},"stats::mantelhaen.test":{"description":"Performs a Cochran-Mantel-Haenszel chi-squared test of the null that\ntwo nominal variables are conditionally independent in each stratum,\nassuming that there is no three-way interaction.\n","example_call":"mantelhaen.test(x, y = NULL, z = NULL, alternative = c(\"two.sided\","},"stats::dwilcox":{"description":"Density, distribution function, quantile function and random\ngeneration for the distribution of the Wilcoxon rank sum statistic\nobtained from samples with size m and n, respectively.\n","example_call":"dwilcox(x, m, n, log = FALSE)"},"stats::ar":{"description":"Fit an autoregressive time series model to the data, by default\nselecting the complexity by AIC.\n","example_call":"ar(x, aic = TRUE, order.max = NULL, method = c(\"yule-walker\","},"stats::oneway.test":{"description":"Test whether two or more samples from normal distributions have the\nsame means.  The variances are not necessarily assumed to be equal.\n","example_call":"oneway.test(formula, data, subset, na.action, var.equal = FALSE)"},"stats::fligner.test":{"description":"Performs a Fligner-Killeen (median) test of the null that the\nvariances in each of the groups (samples) are the same.\n","example_call":"fligner.test(x, ...)"},"stats::bw.bcv":{"description":"Bandwidth selectors for Gaussian kernels in density.\n","example_call":"bw.bcv(x, nb = 1000L, lower = 0.1 * hmax, upper = hmax, tol = 0.1 *"},"stats::predict.glm":{"description":"Obtains predictions and optionally estimates standard errors of those\npredictions from a fitted generalized linear model object.\n","example_call":"predict.glm(object, newdata = NULL, type = c(\"link\", \"response\","},"stats::rWishart":{"description":"Generate n random matrices, distributed according to the\nWishart distribution with parameters Sigma and df,\nW_p(\\Sigma, m),\\ m=\\code{df},\\ \\Sigma=\\code{Sigma}.\n","example_call":"rWishart(n, df, Sigma)"},"stats::logLik":{"description":"This function is generic; method functions can be written to handle\nspecific classes of objects.  Classes which have methods for this\nfunction include: \"glm\", \"lm\", \"nls\" and\n\"Arima\".  Packages contain methods for other classes, such as\n\"fitdistr\", \"negbin\" and \"polr\" in package\nMASS, \"multinom\" in package nnet and\n\"gls\", \"gnls\" \"lme\" and others in package\nnlme.\n","example_call":"logLik(object, ...)"},"stats::confint.default":{"description":"Computes confidence intervals for one or more parameters in a fitted\nmodel.  There is a default and a method for objects inheriting from class\n\"lm\".\n","example_call":"confint.default(object, parm, level = 0.95, ...)"},"stats::AIC":{"description":"Generic function calculating Akaike's <U+2018>An Information Criterion<U+2019> for\none or several fitted model objects for which a log-likelihood value\ncan be obtained, according to the formula\n-2 \\mbox{log-likelihood} + k n_{par},\nwhere n_{par} represents the number of parameters in the\nfitted model, and k = 2 for the usual AIC, or\nk = \\log(n)\n(n being the number of observations) for the so-called BIC or SBC\n(Schwarz's Bayesian criterion).\n","example_call":"AIC(object, ..., k = 2)"},"stats::rlogis":{"description":"Density, distribution function, quantile function and random\ngeneration for the logistic distribution with parameters\nlocation and scale.\n","example_call":"rlogis(n, location = 0, scale = 1)"},"stats::bw.ucv":{"description":"Bandwidth selectors for Gaussian kernels in density.\n","example_call":"bw.ucv(x, nb = 1000L, lower = 0.1 * hmax, upper = hmax, tol = 0.1 *"},"stats::arima":{"description":"Fit an ARIMA model to a univariate time series.\n","example_call":"arima(x, order = c(0L, 0L, 0L), seasonal = list(order = c(0L,"},"stats::plot.ts":{"description":"Plotting method for objects inheriting from class \"ts\".\n","example_call":"plot.ts(x, y = NULL, plot.type = c(\"multiple\", \"single\"), xy.labels,"},"stats::tsp":{"description":"tsp returns the tsp attribute (or NULL).\nIt is included for compatibility with S version 2. tsp<-\nsets the tsp attribute. hasTsp ensures x has a\ntsp attribute, by adding one if needed.\n","example_call":"tsp(x)"},"stats::model.extract":{"description":"Returns the response, offset, subset, weights or other\nspecial components of a model frame passed as optional arguments to\nmodel.frame.\n","example_call":"model.extract(frame, component)"},"stats::tsp<-":{"description":"tsp returns the tsp attribute (or NULL).\nIt is included for compatibility with S version 2. tsp<-\nsets the tsp attribute. hasTsp ensures x has a\ntsp attribute, by adding one if needed.\n","example_call":"tsp<-(x, value)"},"stats::stat.anova":{"description":"This is a utility function, used in lm and\nglm methods for anova(..., test != NULL)\nand should not be used by the average user.\n","example_call":"stat.anova(table, test = c(\"Rao\", \"LRT\", \"Chisq\", \"F\", \"Cp\"),"},"stats::update.formula":{"description":"update.formula is used to update model formulae.\nThis typically involves adding or dropping terms,\nbut updates can be more general.\n","example_call":"update.formula(old, new, ...)"},"stats::qbeta":{"description":"Density, distribution function, quantile function and random\ngeneration for the Beta distribution with parameters shape1 and\nshape2 (and optional non-centrality parameter ncp).\n","example_call":"qbeta(p, shape1, shape2, ncp = 0, lower.tail = TRUE, log.p = FALSE)"},"stats::bw.SJ":{"description":"Bandwidth selectors for Gaussian kernels in density.\n","example_call":"bw.SJ(x, nb = 1000L, lower = 0.1 * hmax, upper = hmax, method = c(\"ste\","},"stats::factanal":{"description":"Perform maximum-likelihood factor analysis on a covariance matrix or\ndata matrix.\n","example_call":"factanal(x, factors, data = NULL, covmat = NULL, n.obs = NA,"},"stats::drop.scope":{"description":"add.scope and drop.scope compute those terms that can be\nindividually added to or dropped from a model while respecting the\nhierarchy of terms.\n","example_call":"drop.scope(terms1, terms2)"},"stats::summary.aov":{"description":"Summarize an analysis of variance model.\n","example_call":"summary.aov(object, intercept = FALSE, split, expand.split = TRUE,"},"stats::optimHess":{"description":"General-purpose optimization based on Nelder<U+2013>Mead, quasi-Newton and\nconjugate-gradient algorithms. It includes an option for\nbox-constrained optimization and simulated annealing.\n","example_call":"optimHess(par, fn, gr = NULL, ..., control = list())"},"stats::.lm.fit":{"description":"These are the basic computing engines called by lm used\nto fit linear models.  These should usually not be used\ndirectly unless by experienced users.  .lm.fit() is a bare-bones\nwrapper to the innermost QR-based C code, on which\nglm.fit and lsfit are also based, for\neven more experienced users.\n","example_call":".lm.fit(x, y, tol = 1e-07)"},"stats::cooks.distance":{"description":"This suite of functions can be used to compute some of the regression\n(leave-one-out deletion) diagnostics for linear and generalized linear\nmodels discussed in Belsley, Kuh and Welsch (1980),\nCook and Weisberg (1982), etc.\n","example_call":"cooks.distance(model, ...)"},"stats::dnorm":{"description":"Density, distribution function, quantile function and random\ngeneration for the normal distribution with mean equal to mean\nand standard deviation equal to sd.\n","example_call":"dnorm(x, mean = 0, sd = 1, log = FALSE)"},"stats::psmirnov":{"description":"Distribution function, quantile function and random generation for the\ndistribution of the Smirnov statistic.","example_call":"psmirnov(q, sizes, z = NULL, alternative = c(\"two.sided\", \"less\","},"stats::extractAIC":{"description":"Computes the (generalized) Akaike An Information\nCriterion for a fitted parametric model.\n","example_call":"extractAIC(fit, scale, k = 2, ...)"},"stats::qbirthday":{"description":"Computes answers to a generalised birthday paradox problem.\npbirthday computes the probability of a coincidence and\nqbirthday computes the smallest number of observations needed\nto have at least a specified probability of coincidence.\n","example_call":"qbirthday(prob = 0.5, classes = 365, coincident = 2)"},"stats::C":{"description":"Sets the \"contrasts\" attribute for the factor.\n","example_call":"C(object, contr, how.many, ...)"},"stats::sortedXyData":{"description":"This is a constructor function for the class of sortedXyData\nobjects.  These objects are mostly used in the initial\nfunction for a self-starting nonlinear regression model, which will be\nof the selfStart class.\n","example_call":"sortedXyData(x, y, data)"},"stats::D":{"description":"Compute derivatives of simple expressions, symbolically and algorithmically.\n","example_call":"D(expr, name)"},"stats::lowess":{"description":"This function performs the computations for the\nLOWESS smoother which uses locally-weighted polynomial\nregression (see the references).\n","example_call":"lowess(x, y = NULL, f = 2/3, iter = 3L, delta = 0.01 * diff(range(x)))"},"stats::varimax":{"description":"These functions <U+2018>rotate<U+2019> loading matrices in factor analysis.\n","example_call":"varimax(x, normalize = TRUE, eps = 1e-05)"},"stats::optimize":{"description":"The function optimize searches the interval from\nlower to upper for a minimum or maximum of\nthe function f with respect to its first argument.\n","example_call":"optimize(f, interval, ..., lower = min(interval), upper = max(interval),"},"stats::manova":{"description":"A class for the multivariate analysis of variance.\n","example_call":"manova(...)"},"stats::deviance":{"description":"Returns the deviance of a fitted model object.\n","example_call":"deviance(object, ...)"},"stats::optim":{"description":"General-purpose optimization based on Nelder<U+2013>Mead, quasi-Newton and\nconjugate-gradient algorithms. It includes an option for\nbox-constrained optimization and simulated annealing.\n","example_call":"optim(par, fn, gr = NULL, ..., method = c(\"Nelder-Mead\","},"stats::lag.plot":{"description":"Plot time series against lagged versions of themselves.\nHelps visualizing <U+2018>auto-dependence<U+2019> even when auto-correlations\nvanish.\n","example_call":"lag.plot(x, lags = 1, layout = NULL, set.lags = 1L:lags, main = NULL,"},"stats::constrOptim":{"description":"Minimise a function subject to linear inequality constraints using an\nadaptive barrier algorithm.\n","example_call":"constrOptim(theta, f, grad, ui, ci, mu = 1e-04, control = list(),"},"stats::splinefunH":{"description":"Perform cubic (or Hermite) spline interpolation of given data points,\nreturning either a list of points obtained by the interpolation or a\nfunction performing the interpolation.\n","example_call":"splinefunH(x, y, m)"},"stats::reformulate":{"description":"delete.response returns a terms object for the same\nmodel but with no response variable.\n","example_call":"reformulate(termlabels, response = NULL, intercept = TRUE, env = parent.frame())"},"stats::pacf":{"description":"The function acf computes (and by default plots) estimates of\nthe autocovariance or autocorrelation function.  Function pacf\nis the function used for the partial autocorrelations.  Function\nccf computes the cross-correlation or cross-covariance of two\nunivariate series.\n","example_call":"pacf(x, lag.max, plot, na.action, ...)"},"stats::mcnemar.test":{"description":"Performs McNemar's chi-squared test for symmetry of rows and columns\nin a two-dimensional contingency table.\n","example_call":"mcnemar.test(x, y = NULL, correct = TRUE)"},"stats::df":{"description":"Density, distribution function, quantile function and random\ngeneration for the F distribution with df1 and df2\ndegrees of freedom (and optional non-centrality parameter ncp).\n","example_call":"df(x, df1, df2, ncp, log = FALSE)"},"stats::tsSmooth":{"description":"Performs fixed-interval smoothing on a univariate time series via a\nstate-space model.  Fixed-interval smoothing gives the best estimate\nof the state at each time point based on the whole observed series.\n","example_call":"tsSmooth(object, ...)"},"stats::make.link":{"description":"This function is used with the family functions in\nglm().\nGiven the name of a link, it returns a link function, an inverse link\nfunction, the derivative d\\mu / d\\eta and a function\nfor domain checking.\n","example_call":"make.link(link)"},"stats::glm.control":{"description":"Auxiliary function for glm fitting.\nTypically only used internally by glm.fit, but may be\nused to construct a control argument to either function.\n","example_call":"glm.control(epsilon = 1e-08, maxit = 25, trace = FALSE)"},"stats::hasTsp":{"description":"tsp returns the tsp attribute (or NULL).\nIt is included for compatibility with S version 2. tsp<-\nsets the tsp attribute. hasTsp ensures x has a\ntsp attribute, by adding one if needed.\n","example_call":"hasTsp(x)"},"stats::pgamma":{"description":"Density, distribution function, quantile function and random\ngeneration for the Gamma distribution with parameters shape and\nscale.\n","example_call":"pgamma(q, shape, rate = 1, scale = 1/rate, lower.tail = TRUE,"},"stats::addmargins":{"description":"For a given table one can specify which of the classifying factors to\nexpand by one or more levels to hold margins to be calculated.  One may for\nexample form sums and means over the first dimension and medians over the\nsecond.  The resulting table will then have two extra levels for the first\ndimension and one extra level for the second.  The default is to sum over\nall margins in the table.  Other possibilities may give results that\ndepend on the order in which the margins are computed.  This is flagged\nin the printed output from the function.\n","example_call":"addmargins(A, margin = seq_along(dim(A)), FUN = sum, quiet = FALSE)"},"stats::dexp":{"description":"Density, distribution function, quantile function and random\ngeneration for the exponential distribution with rate rate\n(i.e., mean 1/rate).\n","example_call":"dexp(x, rate = 1, log = FALSE)"},"stats::power.anova.test":{"description":"Compute power of test or determine parameters to obtain target power.\n","example_call":"power.anova.test(groups = NULL, n = NULL, between.var = NULL, within.var = NULL,"},"stats::prop.test":{"description":"prop.test can be used for testing the null that the\nproportions (probabilities of success) in several groups are the\nsame, or that they equal certain given values.\n","example_call":"prop.test(x, n, p = NULL, alternative = c(\"two.sided\", \"less\","},"stats::model.weights":{"description":"Returns the response, offset, subset, weights or other\nspecial components of a model frame passed as optional arguments to\nmodel.frame.\n","example_call":"model.weights(x)"},"stats::ave":{"description":"Subsets of x[] are averaged, where each subset consist of those\nobservations with the same factor levels.\n","example_call":"ave(x, ..., FUN = mean)"},"stats::is.stepfun":{"description":"Given the vectors (x_1, \\ldots, x_n) and\n(y_0,y_1,\\ldots, y_n) (one value\nmore!), stepfun(x, y, ...) returns an interpolating\n<U+2018>step<U+2019> function, say fn. I.e., fn(t) =\n    c_i (constant) for t \\in (x_i, x_{i+1}) and at the abscissa values, if (by default)\nright = FALSE, fn(x_i) = y_i and for\nright = TRUE, fn(x_i) = y_{i-1}, for\ni=1,\\ldots,n.\n","example_call":"is.stepfun(x)"},"stats::heatmap":{"description":"A heat map is a false color image (basically\nimage(t(x))) with a dendrogram added to the left side\nand to the top.  Typically, reordering of the rows and columns\naccording to some set of values (row or column means) within the\nrestrictions imposed by the dendrogram is carried out.\n","example_call":"heatmap(x, Rowv = NULL, Colv = if (symm) \"Rowv\" else NULL,"},"stats::stepfun":{"description":"Given the vectors (x_1, \\ldots, x_n) and\n(y_0,y_1,\\ldots, y_n) (one value\nmore!), stepfun(x, y, ...) returns an interpolating\n<U+2018>step<U+2019> function, say fn. I.e., fn(t) =\n    c_i (constant) for t \\in (x_i, x_{i+1}) and at the abscissa values, if (by default)\nright = FALSE, fn(x_i) = y_i and for\nright = TRUE, fn(x_i) = y_{i-1}, for\ni=1,\\ldots,n.\n","example_call":"stepfun(x, y, f = as.numeric(right), ties = \"ordered\", right = FALSE)"},"stats::loess.smooth":{"description":"Plot and add a smooth curve computed by loess to a scatter plot.\n","example_call":"loess.smooth(x, y, span = 2/3, degree = 1, family = c(\"symmetric\","},"stats::window<-":{"description":"window is a generic function which\nextracts the subset of the object x\nobserved between the times start and end. If a\nfrequency is specified, the series is then re-sampled at the new\nfrequency.\n","example_call":"window<-(x, ..., value)"},"stats::line":{"description":"Fit a line robustly as recommended in Exploratory Data Analysis.\n","example_call":"line(x, y = NULL, iter = 1)"},"stats::qqline":{"description":"qqnorm is a generic function the default method of which\nproduces a normal QQ plot of the values in y.\nqqline adds a line to a <U+201C>theoretical<U+201D>, by default\nnormal, quantile-quantile plot which passes through the probs\nquantiles, by default the first and third quartiles.\n","example_call":"qqline(y, datax = FALSE, distribution = qnorm, probs = c(0.25,"},"stats::ar.mle":{"description":"Fit an autoregressive time series model to the data, by default\nselecting the complexity by AIC.\n","example_call":"ar.mle(x, aic = TRUE, order.max = NULL, na.action = na.fail,"},"stats::residuals":{"description":"residuals is a generic function which extracts model residuals\nfrom objects returned by modeling functions.\n","example_call":"residuals(object, ...)"},"stats::lsfit":{"description":"The least squares estimate of \\beta in the model\n","example_call":"lsfit(x, y, wt = NULL, intercept = TRUE, tolerance = 1e-07,"},"stats::get_all_vars":{"description":"model.frame (a generic function) and its methods return a\ndata.frame with the variables needed to use\nformula and any ... arguments.\n","example_call":"get_all_vars(formula, data = NULL, ...)"},"stats::dt":{"description":"Density, distribution function, quantile function and random\ngeneration for the t distribution with df degrees of freedom\n(and optional non-centrality parameter ncp).\n","example_call":"dt(x, df, ncp, log = FALSE)"},"stats::splinefun":{"description":"Perform cubic (or Hermite) spline interpolation of given data points,\nreturning either a list of points obtained by the interpolation or a\nfunction performing the interpolation.\n","example_call":"splinefun(x, y = NULL, method = c(\"fmm\", \"periodic\", \"natural\","},"stats::ks.test":{"description":"Perform a one- or two-sample Kolmogorov-Smirnov test.\n","example_call":"ks.test(x, ...)"},"stats::cor":{"description":"var, cov and cor compute the variance of x\nand the covariance or correlation of x and y if these\nare vectors.   If x and y are matrices then the\ncovariances (or correlations) between the columns of x and the\ncolumns of y are computed.\n","example_call":"cor(x, y = NULL, use = \"everything\", method = c(\"pearson\","},"stats::add.scope":{"description":"add.scope and drop.scope compute those terms that can be\nindividually added to or dropped from a model while respecting the\nhierarchy of terms.\n","example_call":"add.scope(terms1, terms2)"},"stats::ecdf":{"description":"Compute an empirical cumulative distribution function, with several\nmethods for plotting, printing and computing with such an\n<U+201C>ecdf<U+201D> object.\n","example_call":"ecdf(x)"},"stats::pwilcox":{"description":"Density, distribution function, quantile function and random\ngeneration for the distribution of the Wilcoxon rank sum statistic\nobtained from samples with size m and n, respectively.\n","example_call":"pwilcox(q, m, n, lower.tail = TRUE, log.p = FALSE)"},"stats::cov":{"description":"var, cov and cor compute the variance of x\nand the covariance or correlation of x and y if these\nare vectors.   If x and y are matrices then the\ncovariances (or correlations) between the columns of x and the\ncolumns of y are computed.\n","example_call":"cov(x, y = NULL, use = \"everything\", method = c(\"pearson\","},"stats::dendrapply":{"description":"Apply function FUN to each node of a dendrogram\nrecursively.  When  y <- dendrapply(x, fn), then y is a\ndendrogram of the same graph structure as x and for each node,\ny.node[j] <- FUN( x.node[j], ...) (where y.node[j] is an\n(invalid!) notation for the j-th node of y).\n","example_call":"dendrapply(X, FUN, ...)"},"stats::rsignrank":{"description":"Density, distribution function, quantile function and random\ngeneration for the distribution of the Wilcoxon Signed Rank statistic\nobtained from a sample with size n.\n","example_call":"rsignrank(nn, n)"},"stats::bandwidth.kernel":{"description":"The \"tskernel\" class is designed to represent discrete\nsymmetric normalized smoothing kernels.  These kernels can be used to\nsmooth vectors, matrices, or time series objects.\n","example_call":"bandwidth.kernel(k)"},"stats::as.dist":{"description":"This function computes and returns the distance matrix computed by\nusing the specified distance measure to compute the distances between\nthe rows of a data matrix.\n","example_call":"as.dist(m, diag = FALSE, upper = FALSE)"},"stats::SSweibull":{"description":"This selfStart model evaluates the Weibull model for growth\ncurve data and its gradient.  It has an initial attribute that\nwill evaluate initial estimates of the parameters Asym, Drop,\nlrc, and pwr for a given set of data.\n","example_call":"SSweibull(x, Asym, Drop, lrc, pwr)"},"stats::bw.nrd":{"description":"Bandwidth selectors for Gaussian kernels in density.\n","example_call":"bw.nrd(x)"},"stats::start":{"description":"Extract and encode the times the first and last observations were\ntaken. Provided only for compatibility with S version 2.\n","example_call":"start(x, ...)"},"stats::plnorm":{"description":"Density, distribution function, quantile function and random\ngeneration for the log normal distribution whose logarithm has mean\nequal to meanlog and standard deviation equal to sdlog.\n","example_call":"plnorm(q, meanlog = 0, sdlog = 1, lower.tail = TRUE, log.p = FALSE)"},"stats::ts.union":{"description":"Bind time series which have a common frequency. ts.union pads\nwith NAs to the total time coverage, ts.intersect\nrestricts to the time covered by all the series.\n","example_call":"ts.union(..., dframe = FALSE)"},"stats::mvfft":{"description":"Computes the Discrete Fourier Transform (DFT) of an array with a fast\nalgorithm, the <U+201C>Fast Fourier Transform<U+201D> (FFT).\n","example_call":"mvfft(z, inverse = FALSE)"},"stats::dweibull":{"description":"Density, distribution function, quantile function and random\ngeneration for the Weibull distribution with parameters shape\nand scale.\n","example_call":"dweibull(x, shape, scale = 1, log = FALSE)"},"stats::as.ts":{"description":"The function ts is used to create time-series objects.\n","example_call":"as.ts(x, ...)"},"stats::cor.test":{"description":"Test for association between paired samples, using one of\nPearson's product moment correlation coefficient,\nKendall's \\tau or Spearman's \\rho.\n","example_call":"cor.test(x, ...)"},"stats::.checkMFClasses":{"description":".checkMFClasses checks if the variables used in a predict\nmethod agree in type with those used for fitting.\n","example_call":".checkMFClasses(cl, m, ordNotOK = FALSE)"},"stats::effects":{"description":"Returns (orthogonal) effects from a fitted model, usually a linear\nmodel. This is a generic function, but currently only has a methods for\nobjects inheriting from classes \"lm\" and \"glm\".\n","example_call":"effects(object, ...)"},"stats::reorder":{"description":"reorder is a generic function.  The \"default\" method\ntreats its first argument as a categorical variable, and reorders its\nlevels based on the values of a second variable, usually numeric.\n","example_call":"reorder(x, ...)"},"stats::KalmanForecast":{"description":"Use Kalman Filtering to find the (Gaussian) log-likelihood, or for\nforecasting or smoothing.\n","example_call":"KalmanForecast(n.ahead = 10L, mod, update = FALSE)"},"stats::eff.aovlist":{"description":"Computes the efficiencies of fixed-effect terms in an analysis of\nvariance model with multiple strata.\n","example_call":"eff.aovlist(aovlist)"},"stats::qgamma":{"description":"Density, distribution function, quantile function and random\ngeneration for the Gamma distribution with parameters shape and\nscale.\n","example_call":"qgamma(p, shape, rate = 1, scale = 1/rate, lower.tail = TRUE,"},"stats::glm.fit":{"description":"glm is used to fit generalized linear models, specified by\ngiving a symbolic description of the linear predictor and a\ndescription of the error distribution.\n","example_call":"glm.fit(x, y, weights = rep.int(1, nobs), start = NULL, etastart = NULL,"},"stats::plot.spec.coherency":{"description":"Plotting method for objects of class \"spec\".  For multivariate\ntime series it plots the marginal spectra of the series or pairs plots\nof the coherency and phase of the cross-spectra.\n","example_call":"plot.spec.coherency(x, ci = 0.95, xlab = \"frequency\", ylab = \"squared coherency\","},"stats::dgamma":{"description":"Density, distribution function, quantile function and random\ngeneration for the Gamma distribution with parameters shape and\nscale.\n","example_call":"dgamma(x, shape, rate = 1, scale = 1/rate, log = FALSE)"},"stats::cov2cor":{"description":"var, cov and cor compute the variance of x\nand the covariance or correlation of x and y if these\nare vectors.   If x and y are matrices then the\ncovariances (or correlations) between the columns of x and the\ncolumns of y are computed.\n","example_call":"cov2cor(V)"},"stats::ls.print":{"description":"Computes basic statistics, including standard errors, t- and p-values\nfor the regression coefficients and prints them if print.it is\nTRUE.\n","example_call":"ls.print(ls.out, digits = 4L, print.it = TRUE)"},"stats::setNames":{"description":"This is a convenience function that sets the names on an object and\nreturns the object.  It is most useful at the end of a function\ndefinition where one is creating the object to be returned and would\nprefer not to store it under a name just so the names can be assigned.\n","example_call":"setNames(object = nm, nm)"},"stats::acf2AR":{"description":"Compute an AR process exactly fitting an autocorrelation function.\n","example_call":"acf2AR(acf)"},"stats::add1":{"description":"Compute all the single terms in the scope argument that can be\nadded to or dropped from the model, fit those models and compute a\ntable of the changes in fit.\n","example_call":"add1(object, scope, ...)"},"stats::rcauchy":{"description":"Density, distribution function, quantile function and random\ngeneration for the Cauchy distribution with location parameter\nlocation and scale parameter scale.\n","example_call":"rcauchy(n, location = 0, scale = 1)"},"stats::shapiro.test":{"description":"Performs the Shapiro-Wilk test of normality.\n","example_call":"shapiro.test(x)"},"stats::deriv3":{"description":"Compute derivatives of simple expressions, symbolically and algorithmically.\n","example_call":"deriv3(expr, ...)"},"stats::window":{"description":"window is a generic function which\nextracts the subset of the object x\nobserved between the times start and end. If a\nfrequency is specified, the series is then re-sampled at the new\nfrequency.\n","example_call":"window(x, ...)"},"stats::model.tables":{"description":"Computes summary tables for model fits, especially complex aov\nfits.\n","example_call":"model.tables(x, ...)"},"stats::model.matrix":{"description":"model.matrix creates a design (or model) matrix, e.g., by\nexpanding factors to a set of dummy variables (depending on the\ncontrasts) and expanding interactions similarly.\n","example_call":"model.matrix(object, ...)"},"stats::.nknots.smspl":{"description":"Fits a cubic smoothing spline to the supplied data.\n","example_call":".nknots.smspl(n)"},"stats::KalmanLike":{"description":"Use Kalman Filtering to find the (Gaussian) log-likelihood, or for\nforecasting or smoothing.\n","example_call":"KalmanLike(y, mod, nit = 0L, update = FALSE)"},"stats::SSasymp":{"description":"This selfStart model evaluates the asymptotic regression\nfunction and its gradient.  It has an initial attribute that\nwill evaluate initial estimates of the parameters Asym, R0,\nand lrc for a given set of data.\n","example_call":"SSasymp(input, Asym, R0, lrc)"},"stats::predict":{"description":"predict is a generic function for predictions from the results of\nvarious model fitting functions.  The function invokes particular\nmethods which depend on the class of\nthe first argument.\n","example_call":"predict(object, ...)"},"stats::as.stepfun":{"description":"Given the vectors (x_1, \\ldots, x_n) and\n(y_0,y_1,\\ldots, y_n) (one value\nmore!), stepfun(x, y, ...) returns an interpolating\n<U+2018>step<U+2019> function, say fn. I.e., fn(t) =\n    c_i (constant) for t \\in (x_i, x_{i+1}) and at the abscissa values, if (by default)\nright = FALSE, fn(x_i) = y_i and for\nright = TRUE, fn(x_i) = y_{i-1}, for\ni=1,\\ldots,n.\n","example_call":"as.stepfun(x, ...)"},"stats::t.test":{"description":"Performs one and two sample t-tests on vectors of data.\n","example_call":"t.test(x, ...)"},"stats::power.prop.test":{"description":"Compute the power of the two-sample test for proportions, or determine\nparameters to obtain a target power.\n","example_call":"power.prop.test(n = NULL, p1 = NULL, p2 = NULL, sig.level = 0.05, power = NULL,"},"stats::rstandard":{"description":"This suite of functions can be used to compute some of the regression\n(leave-one-out deletion) diagnostics for linear and generalized linear\nmodels discussed in Belsley, Kuh and Welsch (1980),\nCook and Weisberg (1982), etc.\n","example_call":"rstandard(model, ...)"},"stats::binom.test":{"description":"Performs an exact test of a simple null hypothesis about the\nprobability of success in a Bernoulli experiment.\n","example_call":"binom.test(x, n, p = 0.5, alternative = c(\"two.sided\", \"less\","},"stats::cophenetic":{"description":"Computes the cophenetic distances for a hierarchical clustering.\n","example_call":"cophenetic(x)"},"stats::pbeta":{"description":"Density, distribution function, quantile function and random\ngeneration for the Beta distribution with parameters shape1 and\nshape2 (and optional non-centrality parameter ncp).\n","example_call":"pbeta(q, shape1, shape2, ncp = 0, lower.tail = TRUE, log.p = FALSE)"},"stats::KalmanRun":{"description":"Use Kalman Filtering to find the (Gaussian) log-likelihood, or for\nforecasting or smoothing.\n","example_call":"KalmanRun(y, mod, nit = 0L, update = FALSE)"},"stats::naprint":{"description":"Use missing value information to report the effects of an na.action.\n","example_call":"naprint(x, ...)"},"stats::qlnorm":{"description":"Density, distribution function, quantile function and random\ngeneration for the log normal distribution whose logarithm has mean\nequal to meanlog and standard deviation equal to sdlog.\n","example_call":"qlnorm(p, meanlog = 0, sdlog = 1, lower.tail = TRUE, log.p = FALSE)"},"stats::plclust":{"description":"The functions or variables listed here are no longer part of R as\nthey are not needed (any more).\n","example_call":"plclust(tree, hang = 0.1, unit = FALSE, level = FALSE, hmin = 0,"},"stats::model.response":{"description":"Returns the response, offset, subset, weights or other\nspecial components of a model frame passed as optional arguments to\nmodel.frame.\n","example_call":"model.response(data, type = \"any\")"},"stats::dlnorm":{"description":"Density, distribution function, quantile function and random\ngeneration for the log normal distribution whose logarithm has mean\nequal to meanlog and standard deviation equal to sdlog.\n","example_call":"dlnorm(x, meanlog = 0, sdlog = 1, log = FALSE)"},"stats::lag":{"description":"Compute a lagged version of a time series, shifting the time base\nback by a given number of observations.\n","example_call":"lag(x, ...)"},"stats::spec.pgram":{"description":"spec.pgram calculates the periodogram using a fast Fourier\ntransform, and optionally smooths the result with a series of\nmodified Daniell smoothers (moving averages giving half weight to\nthe end values).\n","example_call":"spec.pgram(x, spans = NULL, kernel = NULL, taper = 0.1, pad = 0,"},"stats::interaction.plot":{"description":"Plots the mean (or other summary) of the response for two-way\ncombinations of factors, thereby illustrating possible interactions.\n","example_call":"interaction.plot(x.factor, trace.factor, response, fun = mean, type = c(\"l\","},"stats::fitted":{"description":"fitted is a generic function which extracts fitted values from\nobjects returned by modeling functions.  fitted.values is an\nalias for it.\n","example_call":"fitted(object, ...)"},"stats::rgeom":{"description":"Density, distribution function, quantile function and random\ngeneration for the geometric distribution with parameter prob.\n","example_call":"rgeom(n, prob)"},"stats::estVar":{"description":"Functions to compute matrix of residual sums of squares and products,\nor the estimated variance matrix for multivariate linear models.\n","example_call":"estVar(object, ...)"},"stats::rgamma":{"description":"Density, distribution function, quantile function and random\ngeneration for the Gamma distribution with parameters shape and\nscale.\n","example_call":"rgamma(n, shape, rate = 1, scale = 1/rate)"},"stats::arima0":{"description":"Fit an ARIMA model to a univariate time series, and forecast from\nthe fitted model.\n","example_call":"arima0(x, order = c(0, 0, 0), seasonal = list(order = c(0,"},"stats::loglin":{"description":"loglin is used to fit log-linear models to multidimensional\ncontingency tables by Iterative Proportional Fitting.\n","example_call":"loglin(table, margin, start = rep(1, length(table)), fit = FALSE,"},"stats::ar.yw":{"description":"Fit an autoregressive time series model to the data, by default\nselecting the complexity by AIC.\n","example_call":"ar.yw(x, ...)"},"stats::promax":{"description":"These functions <U+2018>rotate<U+2019> loading matrices in factor analysis.\n","example_call":"promax(x, m = 4)"},"stats::phyper":{"description":"Density, distribution function, quantile function and random\ngeneration for the hypergeometric distribution.\n","example_call":"phyper(q, m, n, k, lower.tail = TRUE, log.p = FALSE)"},"stats::drop1":{"description":"Compute all the single terms in the scope argument that can be\nadded to or dropped from the model, fit those models and compute a\ntable of the changes in fit.\n","example_call":"drop1(object, scope, ...)"},"stats::SSfol":{"description":"This selfStart model evaluates the first-order compartment\nfunction and its gradient.  It has an initial attribute that\ncreates initial estimates of the parameters lKe, lKa,\nand lCl.\n","example_call":"SSfol(Dose, input, lKe, lKa, lCl)"},"stats::runif":{"description":"These functions provide information about the uniform distribution\non the interval from min to max.  dunif gives the\ndensity, punif gives the distribution function qunif\ngives the quantile function and runif generates random\ndeviates.\n","example_call":"runif(n, min = 0, max = 1)"},"stats::family":{"description":"Family objects provide a convenient way to specify the details of the\nmodels used by functions such as glm.  See the\ndocumentation for glm for the details on how such model\nfitting takes place.\n","example_call":"family(object, ...)"},"stats::quantile":{"description":"The generic function quantile produces sample quantiles\ncorresponding to the given probabilities.\nThe smallest observation corresponds to a probability of 0 and the\nlargest to a probability of 1.\n","example_call":"quantile(x, ...)"},"stats::wilcox.test":{"description":"Performs one- and two-sample Wilcoxon tests on vectors of data; the\nlatter is also known as <U+2018>Mann-Whitney<U+2019> test.\n","example_call":"wilcox.test(x, ...)"},"stats::psignrank":{"description":"Density, distribution function, quantile function and random\ngeneration for the distribution of the Wilcoxon Signed Rank statistic\nobtained from a sample with size n.\n","example_call":"psignrank(q, n, lower.tail = TRUE, log.p = FALSE)"},"stats::complete.cases":{"description":"Return a logical vector indicating which cases are complete, i.e.,\nhave no missing values.\n","example_call":"complete.cases(...)"},"stats::offset":{"description":"An offset is a term to be added to a linear predictor, such as in a\ngeneralised linear model, with known coefficient 1 rather than an\nestimated coefficient.\n","example_call":"offset(object)"},"stats::scatter.smooth":{"description":"Plot and add a smooth curve computed by loess to a scatter plot.\n","example_call":"scatter.smooth(x, y = NULL, span = 2/3, degree = 1, family = c(\"symmetric\","},"stats::dmultinom":{"description":"Generate multinomially distributed random number vectors and\ncompute multinomial probabilities.\n","example_call":"dmultinom(x, size = NULL, prob, log = FALSE)"},"stats::rlnorm":{"description":"Density, distribution function, quantile function and random\ngeneration for the log normal distribution whose logarithm has mean\nequal to meanlog and standard deviation equal to sdlog.\n","example_call":"rlnorm(n, meanlog = 0, sdlog = 1)"},"stats::approx":{"description":"Return a list of points which linearly interpolate given data points,\nor a function performing the linear (or constant) interpolation.\n","example_call":"approx(x, y = NULL, xout, method = \"linear\", n = 50, yleft,"},"stats::naresid":{"description":"Use missing value information to adjust residuals and predictions.\n","example_call":"naresid(omit, x, ...)"},"stats::SSfpl":{"description":"This selfStart model evaluates the four-parameter logistic\nfunction and its gradient.  It has an initial attribute computing\ninitial estimates of the parameters A, B,\nxmid, and scal for a given set of data.\n","example_call":"SSfpl(input, A, B, xmid, scal)"},"stats::proj":{"description":"proj returns a matrix or list of matrices giving the projections\nof the data onto the terms of a linear model.  It is most frequently\nused for aov models.\n","example_call":"proj(object, ...)"},"stats::supsmu":{"description":"Smooth the (x, y) values by Friedman's <U+2018>super smoother<U+2019>.\n","example_call":"supsmu(x, y, wt = rep(1, n), span = \"cv\", periodic = FALSE,"},"stats::qqnorm":{"description":"qqnorm is a generic function the default method of which\nproduces a normal QQ plot of the values in y.\nqqline adds a line to a <U+201C>theoretical<U+201D>, by default\nnormal, quantile-quantile plot which passes through the probs\nquantiles, by default the first and third quartiles.\n","example_call":"qqnorm(y, ...)"},"stats::end":{"description":"Extract and encode the times the first and last observations were\ntaken. Provided only for compatibility with S version 2.\n","example_call":"end(x, ...)"},"stats::printCoefmat":{"description":"Utility function to be used in higher-level print\nmethods, such as those for summary.lm,\nsummary.glm and anova.  The\ngoal is to provide a flexible interface with smart defaults such\nthat often, only x needs to be specified.\n","example_call":"printCoefmat(x, digits = max(3L, getOption(\"digits\") - 2L), signif.stars = getOption(\"show.signif.stars\"),"},"stats::princomp":{"description":"princomp performs a principal components analysis on the given\nnumeric data matrix and returns the results as an object of class\nprincomp.\n","example_call":"princomp(x, ...)"},"stats::aggregate.data.frame":{"description":"Splits the data into subsets, computes summary statistics for each,\nand returns the result in a convenient form.\n","example_call":"aggregate.data.frame(x, by, FUN, ..., simplify = TRUE, drop = TRUE)"},"stats::dnbinom":{"description":"Density, distribution function, quantile function and random\ngeneration for the negative binomial distribution with parameters\nsize and prob.\n","example_call":"dnbinom(x, size, prob, mu, log = FALSE)"},"stats::lm.influence":{"description":"This function provides the basic quantities which are\nused in forming a wide variety of diagnostics for\nchecking the quality of regression fits.\n","example_call":"lm.influence(model, do.coef = TRUE)"},"stats::rect.hclust":{"description":"Draws rectangles around the branches of a dendrogram highlighting the\ncorresponding clusters. First the dendrogram is cut at a certain\nlevel, then a rectangle is drawn around selected branches.\n","example_call":"rect.hclust(tree, k = NULL, which = NULL, x = NULL, h = NULL, border = 2,"},"stats::convolve":{"description":"Use the Fast Fourier Transform to compute the several kinds of\nconvolutions of two sequences.\n","example_call":"convolve(x, y, conj = TRUE, type = c(\"circular\", \"open\", \"filter\"))"},"stats::ansari.test":{"description":"Performs the Ansari-Bradley two-sample test for a difference in scale\nparameters.\n","example_call":"ansari.test(x, ...)"},"stats::median.default":{"description":"Compute the sample median.\n","example_call":"median.default(x, na.rm = FALSE, ...)"},"stats::ARMAacf":{"description":"Compute the theoretical autocorrelation function or partial\nautocorrelation function for an ARMA process.\n","example_call":"ARMAacf(ar = numeric(), ma = numeric(), lag.max = r, pacf = FALSE)"},"stats::poly":{"description":"Returns or evaluates orthogonal polynomials of degree 1 to\ndegree over the specified set of points x: these are all\northogonal to the constant polynomial of degree 0.  Alternatively,\nevaluate raw polynomials.\n","example_call":"poly(x, ..., degree = 1, coefs = NULL, raw = FALSE, simple = FALSE)"},"stats::NLSstRtAsymptote":{"description":"Provide an initial guess at the horizontal asymptote on the right side\n(i.e., large values of x) of the graph of y versus\nx from the xy object.  Primarily used within\ninitial functions for self-starting nonlinear regression\nmodels.\n","example_call":"NLSstRtAsymptote(xy)"},"stats::power.t.test":{"description":"Compute the power of the one- or two- sample t test,\nor determine parameters to obtain a target power.\n","example_call":"power.t.test(n = NULL, delta = NULL, sd = 1, sig.level = 0.05, power = NULL,"},"stats::write.ftable":{"description":"Read, write and coerce <U+2018>flat<U+2019> (contingency) tables, aka\nftables.\n","example_call":"write.ftable(x, file = \"\", quote = TRUE, append = FALSE, digits = getOption(\"digits\"),"},"stats::qhyper":{"description":"Density, distribution function, quantile function and random\ngeneration for the hypergeometric distribution.\n","example_call":"qhyper(p, m, n, k, lower.tail = TRUE, log.p = FALSE)"},"stats::polym":{"description":"Returns or evaluates orthogonal polynomials of degree 1 to\ndegree over the specified set of points x: these are all\northogonal to the constant polynomial of degree 0.  Alternatively,\nevaluate raw polynomials.\n","example_call":"polym(..., degree = 1, coefs = NULL, raw = FALSE)"},"stats::weights":{"description":"weights is a generic function which extracts fitting weights from\nobjects returned by modeling functions.\n","example_call":"weights(object, ...)"},"stats::dhyper":{"description":"Density, distribution function, quantile function and random\ngeneration for the hypergeometric distribution.\n","example_call":"dhyper(x, m, n, k, log = FALSE)"},"stats::contrasts<-":{"description":"Set and view the contrasts associated with a factor.\n","example_call":"contrasts<-(x, how.many = NULL, value)"},"stats::kernel":{"description":"The \"tskernel\" class is designed to represent discrete\nsymmetric normalized smoothing kernels.  These kernels can be used to\nsmooth vectors, matrices, or time series objects.\n","example_call":"kernel(coef, m = 2, r, name = \"unknown\")"},"stats::friedman.test":{"description":"Performs a Friedman rank sum test with unreplicated blocked data.\n","example_call":"friedman.test(y, ...)"},"stats::acf":{"description":"The function acf computes (and by default plots) estimates of\nthe autocovariance or autocorrelation function.  Function pacf\nis the function used for the partial autocorrelations.  Function\nccf computes the cross-correlation or cross-covariance of two\nunivariate series.\n","example_call":"acf(x, lag.max = NULL, type = c(\"correlation\", \"covariance\","},"stats::qwilcox":{"description":"Density, distribution function, quantile function and random\ngeneration for the distribution of the Wilcoxon rank sum statistic\nobtained from samples with size m and n, respectively.\n","example_call":"qwilcox(p, m, n, lower.tail = TRUE, log.p = FALSE)"},"stats::filter":{"description":"Applies linear filtering to a univariate time series or to each series\nseparately of a multivariate time series.\n","example_call":"filter(x, filter, method = c(\"convolution\", \"recursive\"),"},"stats::lm.fit":{"description":"These are the basic computing engines called by lm used\nto fit linear models.  These should usually not be used\ndirectly unless by experienced users.  .lm.fit() is a bare-bones\nwrapper to the innermost QR-based C code, on which\nglm.fit and lsfit are also based, for\neven more experienced users.\n","example_call":"lm.fit(x, y, offset = NULL, method = \"qr\", tol = 1e-07, singular.ok = TRUE,"},"stats::rpois":{"description":"Density, distribution function, quantile function and random\ngeneration for the Poisson distribution with parameter lambda.\n","example_call":"rpois(n, lambda)"},"stats::cmdscale":{"description":"Classical multidimensional scaling (MDS) of a data matrix.\nAlso known as principal coordinates analysis (Gower, 1966).\n","example_call":"cmdscale(d, k = 2, eig = FALSE, add = FALSE, x.ret = FALSE,"},"stats::factor.scope":{"description":"add.scope and drop.scope compute those terms that can be\nindividually added to or dropped from a model while respecting the\nhierarchy of terms.\n","example_call":"factor.scope(factor, scope)"},"stats::Gamma":{"description":"Family objects provide a convenient way to specify the details of the\nmodels used by functions such as glm.  See the\ndocumentation for glm for the details on how such model\nfitting takes place.\n","example_call":"Gamma(link = \"inverse\")"},"stats::pweibull":{"description":"Density, distribution function, quantile function and random\ngeneration for the Weibull distribution with parameters shape\nand scale.\n","example_call":"pweibull(q, shape, scale = 1, lower.tail = TRUE, log.p = FALSE)"},"stats::pchisq":{"description":"Density, distribution function, quantile function and random\ngeneration for the chi-squared (\\chi^2) distribution with\ndf degrees of freedom and optional non-centrality parameter\nncp.\n","example_call":"pchisq(q, df, ncp = 0, lower.tail = TRUE, log.p = FALSE)"},"stats::ksmooth":{"description":"The Nadaraya<U+2013>Watson kernel regression estimate.\n","example_call":"ksmooth(x, y, kernel = c(\"box\", \"normal\"), bandwidth = 0.5,"},"stats::symnum":{"description":"Symbolically encode a given numeric or logical vector or array.\nParticularly useful for visualization of structured matrices,\ne.g., correlation, sparse, or logical ones.\n","example_call":"symnum(x, cutpoints = c(0.3, 0.6, 0.8, 0.9, 0.95), symbols = if (numeric.x) c(\" \","},"stats::smooth":{"description":"Tukey's smoothers, 3RS3R, 3RSS, 3R, etc.\n","example_call":"smooth(x, kind = c(\"3RS3R\", \"3RSS\", \"3RSR\", \"3R\", \"3\", \"S\"),"},"stats::quasipoisson":{"description":"Family objects provide a convenient way to specify the details of the\nmodels used by functions such as glm.  See the\ndocumentation for glm for the details on how such model\nfitting takes place.\n","example_call":"quasipoisson(link = \"log\")"},"stats::ppr":{"description":"Fit a projection pursuit regression model.\n","example_call":"ppr(x, ...)"},"stats::spec.ar":{"description":"Fits an AR model to x (or uses the existing fit) and computes\n(and by default plots) the spectral density of the fitted model.\n","example_call":"spec.ar(x, n.freq, order = NULL, plot = TRUE, na.action = na.fail,"},"stats::pnbinom":{"description":"Density, distribution function, quantile function and random\ngeneration for the negative binomial distribution with parameters\nsize and prob.\n","example_call":"pnbinom(q, size, prob, mu, lower.tail = TRUE, log.p = FALSE)"},"stats::coefficients":{"description":"coef is a generic function which extracts model coefficients\nfrom objects returned by modeling functions.  coefficients is\nan alias for it.\n","example_call":"coefficients(object, ...)"},"stats::model.offset":{"description":"Returns the response, offset, subset, weights or other\nspecial components of a model frame passed as optional arguments to\nmodel.frame.\n","example_call":"model.offset(x)"},"stats::dbeta":{"description":"Density, distribution function, quantile function and random\ngeneration for the Beta distribution with parameters shape1 and\nshape2 (and optional non-centrality parameter ncp).\n","example_call":"dbeta(x, shape1, shape2, ncp = 0, log = FALSE)"},"stats::SSasympOff":{"description":"This selfStart model evaluates an alternative parametrization\nof the asymptotic\nregression function and the gradient with respect to those parameters.\nIt has an initial\nattribute that creates initial estimates of the parameters\nAsym, lrc, and c0.\n","example_call":"SSasympOff(input, Asym, lrc, c0)"},"stats::pbirthday":{"description":"Computes answers to a generalised birthday paradox problem.\npbirthday computes the probability of a coincidence and\nqbirthday computes the smallest number of observations needed\nto have at least a specified probability of coincidence.\n","example_call":"pbirthday(n, classes = 365, coincident = 2)"},"stats::replications":{"description":"Returns a vector or a list of the number of replicates for\neach term in the formula.\n","example_call":"replications(formula, data = NULL, na.action)"},"stats::ar.ols":{"description":"Fit an autoregressive time series model to the data by ordinary\nleast squares, by default selecting the complexity by AIC.\n","example_call":"ar.ols(x, aic = TRUE, order.max = NULL, na.action = na.fail,"},"stats::rhyper":{"description":"Density, distribution function, quantile function and random\ngeneration for the hypergeometric distribution.\n","example_call":"rhyper(nn, m, n, k)"},"stats::spectrum":{"description":"The spectrum function estimates the spectral density of a\ntime series.\n","example_call":"spectrum(x, ..., method = c(\"pgram\", \"ar\"))"},"stats::lm":{"description":"lm is used to fit linear models, including multivariate ones.\nIt can be used to carry out regression,\nsingle stratum analysis of variance and\nanalysis of covariance (although aov may provide a more\nconvenient interface for these).\n","example_call":"lm(formula, data, subset, weights, na.action, method = \"qr\","},"stats::expand.model.frame":{"description":"Evaluates new variables as if they had been part of the formula of the\nspecified model.  This ensures that the same na.action and\nsubset arguments are applied and allows, for example, x\nto be recovered for a model using sin(x) as a predictor.\n","example_call":"expand.model.frame(model, extras, envir = environment(formula(model)),"},"stats::kernapply":{"description":"kernapply computes the convolution between an input sequence\nand a specific kernel.\n","example_call":"kernapply(x, ...)"},"stats::bw.nrd0":{"description":"Bandwidth selectors for Gaussian kernels in density.\n","example_call":"bw.nrd0(x)"},"stats::stl":{"description":"Decompose a time series into seasonal, trend and irregular components\nusing loess, acronym STL.\n","example_call":"stl(x, s.window, s.degree = 0, t.window = NULL, t.degree = 1,"},"stats::loess":{"description":"Fit a locally polynomial surface determined by one or more numerical\npredictors, using local fitting.\n","example_call":"loess(formula, data, weights, subset, na.action, model = FALSE,"},"stats::IQR":{"description":"computes interquartile range of the x values.","example_call":"IQR(x, na.rm = FALSE, type = 7)"},"stats::qgeom":{"description":"Density, distribution function, quantile function and random\ngeneration for the geometric distribution with parameter prob.\n","example_call":"qgeom(p, prob, lower.tail = TRUE, log.p = FALSE)"},"stats::contr.helmert":{"description":"Return a matrix of contrasts.\n","example_call":"contr.helmert(n, contrasts = TRUE, sparse = FALSE)"},"stats::na.pass":{"description":"These generic functions are useful for dealing with NAs\nin e.g., data frames.\nna.fail returns the object if it does not contain any\nmissing values, and signals an error otherwise.\nna.omit returns the object with incomplete cases removed.\nna.pass returns the object unchanged.\n","example_call":"na.pass(object, ...)"},"stats::toeplitz":{"description":"In its simplest use, toeplitz() forms a symmetric Toeplitz matrix\ngiven its first column (or row).  For the general case, asymmetric and\nnon-square Toeplitz matrices are formed either by specifying the first\ncolumn and row separately,\n","example_call":"toeplitz(x, r = NULL, symmetric = is.null(r))"},"stats::pairwise.t.test":{"description":"Calculate pairwise comparisons between group levels with corrections\nfor multiple testing\n","example_call":"pairwise.t.test(x, g, p.adjust.method = p.adjust.methods, pool.sd = !paired,"},"stats::dist":{"description":"This function computes and returns the distance matrix computed by\nusing the specified distance measure to compute the distances between\nthe rows of a data matrix.\n","example_call":"dist(x, method = \"euclidean\", diag = FALSE, upper = FALSE,"},"stats::.getXlevels":{"description":".checkMFClasses checks if the variables used in a predict\nmethod agree in type with those used for fitting.\n","example_call":".getXlevels(Terms, m)"},"stats::NLSstClosestX":{"description":"Use inverse linear interpolation to approximate the x value at\nwhich the function represented by xy is equal to yval.\n","example_call":"NLSstClosestX(xy, yval)"},"stats::getInitial":{"description":"This function evaluates initial parameter estimates for a nonlinear\nregression model.  If data is a parameterized data frame or\npframe object, its parameters attribute is returned.\nOtherwise the object is examined to see if it contains a call to a\nselfStart object whose initial attribute can be\nevaluated.\n","example_call":"getInitial(object, data, ...)"},"stats::sigma":{"description":"Extract the estimated standard deviation of the errors, the\n<U+201C>residual standard deviation<U+201D> (misnamed also\n<U+201C>residual standard error<U+201D>, e.g., in\nsummary.lm()'s output, from a fitted model).\n","example_call":"sigma(object, ...)"},"stats::qchisq":{"description":"Density, distribution function, quantile function and random\ngeneration for the chi-squared (\\chi^2) distribution with\ndf degrees of freedom and optional non-centrality parameter\nncp.\n","example_call":"qchisq(p, df, ncp = 0, lower.tail = TRUE, log.p = FALSE)"},"stats::contr.poly":{"description":"Return a matrix of contrasts.\n","example_call":"contr.poly(n, scores = 1:n, contrasts = TRUE, sparse = FALSE)"},"stats::dchisq":{"description":"Density, distribution function, quantile function and random\ngeneration for the chi-squared (\\chi^2) distribution with\ndf degrees of freedom and optional non-centrality parameter\nncp.\n","example_call":"dchisq(x, df, ncp = 0, log = FALSE)"},"stats::spline":{"description":"Perform cubic (or Hermite) spline interpolation of given data points,\nreturning either a list of points obtained by the interpolation or a\nfunction performing the interpolation.\n","example_call":"spline(x, y = NULL, n = 3 * length(x), method = \"fmm\", xmin = min(x),"},"stats::qunif":{"description":"These functions provide information about the uniform distribution\non the interval from min to max.  dunif gives the\ndensity, punif gives the distribution function qunif\ngives the quantile function and runif generates random\ndeviates.\n","example_call":"qunif(p, min = 0, max = 1, lower.tail = TRUE, log.p = FALSE)"},"stats::confint":{"description":"Computes confidence intervals for one or more parameters in a fitted\nmodel.  There is a default and a method for objects inheriting from class\n\"lm\".\n","example_call":"confint(object, parm, level = 0.95, ...)"},"stats::pairwise.table":{"description":"Creates  table of p values for pairwise comparisons\nwith corrections for multiple testing.\n","example_call":"pairwise.table(compare.levels, level.names, p.adjust.method)"},"stats::SSasympOrig":{"description":"This selfStart model evaluates the asymptotic regression\nfunction through the origin and its gradient.  It has an\ninitial attribute that will evaluate initial estimates of the\nparameters Asym and lrc for a given set of data.\n","example_call":"SSasympOrig(input, Asym, lrc)"},"stats::pexp":{"description":"Density, distribution function, quantile function and random\ngeneration for the exponential distribution with rate rate\n(i.e., mean 1/rate).\n","example_call":"pexp(q, rate = 1, lower.tail = TRUE, log.p = FALSE)"},"stats::plot.spec.phase":{"description":"Plotting method for objects of class \"spec\".  For multivariate\ntime series it plots the marginal spectra of the series or pairs plots\nof the coherency and phase of the cross-spectra.\n","example_call":"plot.spec.phase(x, ci = 0.95, xlab = \"frequency\", ylab = \"phase\", ylim = c(-pi,"},"stats::density.default":{"description":"The (S3) generic function density computes kernel density\nestimates.  Its default method does so with the given kernel and\nbandwidth for univariate observations.\n","example_call":"density.default(x, bw = \"nrd0\", adjust = 1, kernel = c(\"gaussian\","},"stats::medpolish":{"description":"Fits an additive model (two-way decomposition) using Tukey's\nmedian polish procedure.\n","example_call":"medpolish(x, eps = 0.01, maxiter = 10L, trace.iter = TRUE, na.rm = FALSE)"},"stats::ptukey":{"description":"Functions of the distribution of the studentized range, R/s,\nwhere R is the range of a standard normal sample and\ndf \\times s^2 is independently distributed as\nchi-squared with df degrees of freedom, see pchisq.\n","example_call":"ptukey(q, nmeans, df, nranges = 1, lower.tail = TRUE, log.p = FALSE)"},"stats::cancor":{"description":"Compute the canonical correlations between two data matrices.\n","example_call":"cancor(x, y, xcenter = TRUE, ycenter = TRUE)"},"stats::Box.test":{"description":"Compute the Box<U+2013>Pierce or Ljung<U+2013>Box test statistic for examining the\nnull hypothesis of independence in a given time series.  These are\nsometimes known as <U+2018>portmanteau<U+2019> tests.\n","example_call":"Box.test(x, lag = 1, type = c(\"Box-Pierce\", \"Ljung-Box\"), fitdf = 0)"},"stats::TukeyHSD":{"description":"Create a set of confidence intervals on the differences between the\nmeans of the levels of a factor with the specified family-wise\nprobability of coverage.  The intervals are based on the Studentized\nrange statistic, Tukey's <U+2018>Honest Significant Difference<U+2019>\nmethod.\n","example_call":"TukeyHSD(x, which, ordered = FALSE, conf.level = 0.95, ...)"},"stats::rnorm":{"description":"Density, distribution function, quantile function and random\ngeneration for the normal distribution with mean equal to mean\nand standard deviation equal to sd.\n","example_call":"rnorm(n, mean = 0, sd = 1)"},"stats::var.test":{"description":"Performs an F test to compare the variances of two samples from normal\npopulations.\n","example_call":"var.test(x, ...)"},"stats::poisson":{"description":"Family objects provide a convenient way to specify the details of the\nmodels used by functions such as glm.  See the\ndocumentation for glm for the details on how such model\nfitting takes place.\n","example_call":"poisson(link = \"log\")"},"stats::bartlett.test":{"description":"Performs Bartlett's test of the null that the variances in each of the\ngroups (samples) are the same.\n","example_call":"bartlett.test(x, ...)"},"stats::summary.stepfun":{"description":"Given the vectors (x_1, \\ldots, x_n) and\n(y_0,y_1,\\ldots, y_n) (one value\nmore!), stepfun(x, y, ...) returns an interpolating\n<U+2018>step<U+2019> function, say fn. I.e., fn(t) =\n    c_i (constant) for t \\in (x_i, x_{i+1}) and at the abscissa values, if (by default)\nright = FALSE, fn(x_i) = y_i and for\nright = TRUE, fn(x_i) = y_{i-1}, for\ni=1,\\ldots,n.\n","example_call":"summary.stepfun(object, ...)"},"stats::na.fail":{"description":"These generic functions are useful for dealing with NAs\nin e.g., data frames.\nna.fail returns the object if it does not contain any\nmissing values, and signals an error otherwise.\nna.omit returns the object with incomplete cases removed.\nna.pass returns the object unchanged.\n","example_call":"na.fail(object, ...)"},"stats::model.frame":{"description":"model.frame (a generic function) and its methods return a\ndata.frame with the variables needed to use\nformula and any ... arguments.\n","example_call":"model.frame(formula, ...)"},"stats::covratio":{"description":"This suite of functions can be used to compute some of the regression\n(leave-one-out deletion) diagnostics for linear and generalized linear\nmodels discussed in Belsley, Kuh and Welsch (1980),\nCook and Weisberg (1982), etc.\n","example_call":"covratio(model, infl = lm.influence(model, do.coef = FALSE),"},"stats::contrasts":{"description":"Set and view the contrasts associated with a factor.\n","example_call":"contrasts(x, contrasts = TRUE, sparse = FALSE)"},"stats::ar.burg":{"description":"Fit an autoregressive time series model to the data, by default\nselecting the complexity by AIC.\n","example_call":"ar.burg(x, ...)"},"stats::residuals.lm":{"description":"All these functions are methods for class \"lm\"  objects.\n","example_call":"residuals.lm(object, type = c(\"working\", \"response\", \"deviance\","},"stats::df.residual":{"description":"Returns the residual degrees-of-freedom extracted from a fitted model\nobject.\n","example_call":"df.residual(object, ...)"},"stats::ts.intersect":{"description":"Bind time series which have a common frequency. ts.union pads\nwith NAs to the total time coverage, ts.intersect\nrestricts to the time covered by all the series.\n","example_call":"ts.intersect(..., dframe = FALSE)"},"stats::power":{"description":"Creates a link object based on the link function\n\\eta = \\mu ^ \\lambda.\n","example_call":"power(lambda = 1)"},"stats::SSlogis":{"description":"This selfStart model evaluates the logistic\nfunction and its gradient.  It has an initial attribute that\ncreates initial estimates of the parameters Asym,\nxmid, and scal.   In R 3.4.2 and earlier, that\ninit function failed when min(input) was exactly zero.\n","example_call":"SSlogis(input, Asym, xmid, scal)"},"stats::glm":{"description":"glm is used to fit generalized linear models, specified by\ngiving a symbolic description of the linear predictor and a\ndescription of the error distribution.\n","example_call":"glm(formula, family = gaussian, data, weights, subset,"},"stats::rchisq":{"description":"Density, distribution function, quantile function and random\ngeneration for the chi-squared (\\chi^2) distribution with\ndf degrees of freedom and optional non-centrality parameter\nncp.\n","example_call":"rchisq(n, df, ncp = 0)"},"stats::getCall":{"description":"update will update and (by default) re-fit a model.  It does this\nby extracting the call stored in the object, updating the call and (by\ndefault) evaluating that call.  Sometimes it is useful to call\nupdate with only one argument, for example if the data frame has\nbeen corrected.\n","example_call":"getCall(x, ...)"},"stats::model.matrix.lm":{"description":"model.matrix creates a design (or model) matrix, e.g., by\nexpanding factors to a set of dummy variables (depending on the\ncontrasts) and expanding interactions similarly.\n","example_call":"model.matrix.lm(object, ...)"},"stats::chisq.test":{"description":"chisq.test performs chi-squared contingency table tests\nand goodness-of-fit tests.\n","example_call":"chisq.test(x, y = NULL, correct = TRUE, p = rep(1/length(x), length(x)),"},"stats::coef":{"description":"coef is a generic function which extracts model coefficients\nfrom objects returned by modeling functions.  coefficients is\nan alias for it.\n","example_call":"coef(object, ...)"},"stats::step":{"description":"Select a formula-based model by AIC.\n","example_call":"step(object, scope, scale = 0, direction = c(\"both\", \"backward\","},"stats::ppoints":{"description":"Generates the sequence of probability points\n(1:m - a)/(m + (1-a)-a)\nwhere m is either n, if length(n)==1, or\nlength(n).\n","example_call":"ppoints(n, a = if (n <= 10) 3/8 else 1/2)"},"stats::vcov":{"description":"Returns the variance-covariance matrix of the main parameters of\na fitted model object.  The <U+201C>main<U+201D> parameters of model\ncorrespond to those returned by coef, and typically do\nnot contain a nuisance scale parameter (sigma).\n","example_call":"vcov(object, ...)"},"stats::.preformat.ts":{"description":"Notably for calendar related time series objects,  \nformat and print methods showing years,\nmonths and or quarters respectively.\n","example_call":".preformat.ts(x, calendar, ...)"},"stats::qqplot":{"description":"qqnorm is a generic function the default method of which\nproduces a normal QQ plot of the values in y.\nqqline adds a line to a <U+201C>theoretical<U+201D>, by default\nnormal, quantile-quantile plot which passes through the probs\nquantiles, by default the first and third quartiles.\n","example_call":"qqplot(x, y, plot.it = TRUE, xlab = deparse1(substitute(x)),"},"stats::DF2formula":{"description":"The generic function formula and its specific methods provide a\nway of extracting formulae which have been included in other objects.\n","example_call":"DF2formula(x, env = parent.frame())"},"stats::update.default":{"description":"update will update and (by default) re-fit a model.  It does this\nby extracting the call stored in the object, updating the call and (by\ndefault) evaluating that call.  Sometimes it is useful to call\nupdate with only one argument, for example if the data frame has\nbeen corrected.\n","example_call":"update.default(object, formula., ..., evaluate = TRUE)"},"stats::qtukey":{"description":"Functions of the distribution of the studentized range, R/s,\nwhere R is the range of a standard normal sample and\ndf \\times s^2 is independently distributed as\nchi-squared with df degrees of freedom, see pchisq.\n","example_call":"qtukey(p, nmeans, df, nranges = 1, lower.tail = TRUE, log.p = FALSE)"},"stats::quade.test":{"description":"Performs a Quade test with unreplicated blocked data.\n","example_call":"quade.test(y, ...)"},"stats::qpois":{"description":"Density, distribution function, quantile function and random\ngeneration for the Poisson distribution with parameter lambda.\n","example_call":"qpois(p, lambda, lower.tail = TRUE, log.p = FALSE)"},"stats::df.kernel":{"description":"The \"tskernel\" class is designed to represent discrete\nsymmetric normalized smoothing kernels.  These kernels can be used to\nsmooth vectors, matrices, or time series objects.\n","example_call":"df.kernel(k)"},"stats::influence":{"description":"This function provides the basic quantities which are\nused in forming a wide variety of diagnostics for\nchecking the quality of regression fits.\n","example_call":"influence(model, ...)"},"stats::qsmirnov":{"description":"Distribution function, quantile function and random generation for the\ndistribution of the Smirnov statistic.","example_call":"qsmirnov(p, sizes, z = NULL, alternative = c(\"two.sided\", \"less\","},"stats::cutree":{"description":"Cuts a tree, e.g., as resulting from hclust, into several\ngroups either by specifying the desired number(s) of groups or the cut\nheight(s).\n","example_call":"cutree(tree, k = NULL, h = NULL)"},"stats::poisson.test":{"description":"Performs an exact test of a simple null hypothesis about the\nrate parameter in Poisson distribution, or for the\nratio between two rate parameters.\n","example_call":"poisson.test(x, T = 1, r = 1, alternative = c(\"two.sided\", \"less\","},"stats::pf":{"description":"Density, distribution function, quantile function and random\ngeneration for the F distribution with df1 and df2\ndegrees of freedom (and optional non-centrality parameter ncp).\n","example_call":"pf(q, df1, df2, ncp, lower.tail = TRUE, log.p = FALSE)"},"stats::case.names":{"description":"Simple utilities returning (non-missing) case names, and\n(non-eliminated) variable names.\n","example_call":"case.names(object, ...)"},"stats::frequency":{"description":"time creates the vector of times at which a time series was sampled.\n","example_call":"frequency(x, ...)"},"stats::tsdiag":{"description":"A generic function to plot time-series diagnostics.\n","example_call":"tsdiag(object, gof.lag, ...)"},"stats::qweibull":{"description":"Density, distribution function, quantile function and random\ngeneration for the Weibull distribution with parameters shape\nand scale.\n","example_call":"qweibull(p, shape, scale = 1, lower.tail = TRUE, log.p = FALSE)"},"stats::NLSstLfAsymptote":{"description":"Provide an initial guess at the horizontal asymptote on the left side\n(i.e., small values of x) of the graph of y versus\nx from the xy object.  Primarily used within\ninitial functions for self-starting nonlinear regression\nmodels.\n","example_call":"NLSstLfAsymptote(xy)"},"stats::kmeans":{"description":"Perform k-means clustering on a data matrix.\n","example_call":"kmeans(x, centers, iter.max = 10L, nstart = 1L, algorithm = c(\"Hartigan-Wong\","},"stats::weighted.residuals":{"description":"Computed weighted residuals from a linear model fit.\n","example_call":"weighted.residuals(obj, drop0 = TRUE)"},"stats::mauchly.test":{"description":"Tests whether a Wishart-distributed covariance matrix (or\ntransformation thereof) is proportional to a given matrix.\n","example_call":"mauchly.test(object, ...)"},"stats::napredict":{"description":"Use missing value information to adjust residuals and predictions.\n","example_call":"napredict(omit, x, ...)"},"stats::qexp":{"description":"Density, distribution function, quantile function and random\ngeneration for the exponential distribution with rate rate\n(i.e., mean 1/rate).\n","example_call":"qexp(p, rate = 1, lower.tail = TRUE, log.p = FALSE)"},"stats::deriv":{"description":"Compute derivatives of simple expressions, symbolically and algorithmically.\n","example_call":"deriv(expr, ...)"},"stats::var":{"description":"var, cov and cor compute the variance of x\nand the covariance or correlation of x and y if these\nare vectors.   If x and y are matrices then the\ncovariances (or correlations) between the columns of x and the\ncolumns of y are computed.\n","example_call":"var(x, y = NULL, na.rm = FALSE, use)"},"stats::aggregate.ts":{"description":"Splits the data into subsets, computes summary statistics for each,\nand returns the result in a convenient form.\n","example_call":"aggregate.ts(x, nfrequency = 1, FUN = sum, ndeltat = 1, ts.eps = getOption(\"ts.eps\"),"},"stats::rwilcox":{"description":"Density, distribution function, quantile function and random\ngeneration for the distribution of the Wilcoxon rank sum statistic\nobtained from samples with size m and n, respectively.\n","example_call":"rwilcox(nn, m, n)"},"stats::SSbiexp":{"description":"This selfStart model evaluates the biexponential model function\nand its gradient.  It has an initial attribute that\ncreates initial estimates of the parameters A1, lrc1,\nA2, and lrc2.\n","example_call":"SSbiexp(input, A1, lrc1, A2, lrc2)"},"stats::pt":{"description":"Density, distribution function, quantile function and random\ngeneration for the t distribution with df degrees of freedom\n(and optional non-centrality parameter ncp).\n","example_call":"pt(q, df, ncp, lower.tail = TRUE, log.p = FALSE)"},"stats::rsmirnov":{"description":"Distribution function, quantile function and random generation for the\ndistribution of the Smirnov statistic.","example_call":"rsmirnov(n, sizes, z = NULL, alternative = c(\"two.sided\", \"less\","},"stats::qf":{"description":"Density, distribution function, quantile function and random\ngeneration for the F distribution with df1 and df2\ndegrees of freedom (and optional non-centrality parameter ncp).\n","example_call":"qf(p, df1, df2, ncp, lower.tail = TRUE, log.p = FALSE)"},"stats::xtabs":{"description":"Create a contingency table (optionally a sparse matrix) from\ncross-classifying factors, usually contained in a data frame,\nusing a formula interface.\n","example_call":"xtabs(formula = ~., data = parent.frame(), subset, sparse = FALSE,"},"stats::kruskal.test":{"description":"Performs a Kruskal-Wallis rank sum test.\n","example_call":"kruskal.test(x, ...)"},"stats::median":{"description":"Compute the sample median.\n","example_call":"median(x, na.rm = FALSE, ...)"},"stats::as.hclust":{"description":"Converts objects from other hierarchical clustering functions to\nclass \"hclust\".\n","example_call":"as.hclust(x, ...)"},"stats::termplot":{"description":"Plots regression terms against their predictors, optionally with\nstandard errors and partial residuals added.\n","example_call":"termplot(model, data = NULL, envir = environment(formula(model)),"},"stats::rweibull":{"description":"Density, distribution function, quantile function and random\ngeneration for the Weibull distribution with parameters shape\nand scale.\n","example_call":"rweibull(n, shape, scale = 1)"},"stats::resid":{"description":"residuals is a generic function which extracts model residuals\nfrom objects returned by modeling functions.\n","example_call":"resid(object, ...)"},"stats::pgeom":{"description":"Density, distribution function, quantile function and random\ngeneration for the geometric distribution with parameter prob.\n","example_call":"pgeom(q, prob, lower.tail = TRUE, log.p = FALSE)"},"stats::qnbinom":{"description":"Density, distribution function, quantile function and random\ngeneration for the negative binomial distribution with parameters\nsize and prob.\n","example_call":"qnbinom(p, size, prob, mu, lower.tail = TRUE, log.p = FALSE)"},"stats::se.contrast":{"description":"Returns the standard errors for one or more contrasts in an aov\nobject.\n","example_call":"se.contrast(object, ...)"},"stats::summary.manova":{"description":"A summary method for class \"manova\".\n","example_call":"summary.manova(object, test = c(\"Pillai\", \"Wilks\", \"Hotelling-Lawley\","},"stats::prcomp":{"description":"Performs a principal components analysis on the given data matrix\nand returns the results as an object of class prcomp.","example_call":"prcomp(x, ...)"},"stats::preplot":{"description":"Compute an object to be used for plots relating to the given model object.\n","example_call":"preplot(object, ...)"},"stats::plot.ecdf":{"description":"Compute an empirical cumulative distribution function, with several\nmethods for plotting, printing and computing with such an\n<U+201C>ecdf<U+201D> object.\n","example_call":"plot.ecdf(x, ..., ylab = \"Fn(x)\", verticals = FALSE, col.01line = \"gray70\","},"stats::arima.sim":{"description":"Simulate from an ARIMA model.\n","example_call":"arima.sim(model, n, rand.gen = rnorm, innov = rand.gen(n, ...),"},"stats::lm.wfit":{"description":"These are the basic computing engines called by lm used\nto fit linear models.  These should usually not be used\ndirectly unless by experienced users.  .lm.fit() is a bare-bones\nwrapper to the innermost QR-based C code, on which\nglm.fit and lsfit are also based, for\neven more experienced users.\n","example_call":"lm.wfit(x, y, w, offset = NULL, method = \"qr\", tol = 1e-07,"},"stats::ccf":{"description":"The function acf computes (and by default plots) estimates of\nthe autocovariance or autocorrelation function.  Function pacf\nis the function used for the partial autocorrelations.  Function\nccf computes the cross-correlation or cross-covariance of two\nunivariate series.\n","example_call":"ccf(x, y, lag.max = NULL, type = c(\"correlation\", \"covariance\"),"},"stats::is.leaf":{"description":"Class \"dendrogram\" provides general functions for handling\ntree-like structures.  It is intended as a replacement for similar\nfunctions in hierarchical clustering and classification/regression\ntrees, such that all of these can use the same engine for plotting or\ncutting trees.\n","example_call":"is.leaf(object)"},"stats::na.action":{"description":"Extract information on the NA action used to create an object.\n","example_call":"na.action(object, ...)"},"stats::screeplot":{"description":"screeplot.default plots the variances against the number of the\nprincipal component. This is also the plot method for classes\n\"princomp\" and \"prcomp\".\n","example_call":"screeplot(x, ...)"},"stats::approxfun":{"description":"Return a list of points which linearly interpolate given data points,\nor a function performing the linear (or constant) interpolation.\n","example_call":"approxfun(x, y = NULL, method = \"linear\", yleft, yright, rule = 1,"},"stats::NLSstAsymptotic":{"description":"Fits the asymptotic regression model, in the form b0 +\n      b1*(1-exp(-exp(lrc) * x)) to the xy data.\nThis can be used as a building block in determining starting estimates\nfor more complicated models.\n","example_call":"NLSstAsymptotic(xy)"},"stats::order.dendrogram":{"description":"Theses functions return the order (index) or the \"label\"\nattribute for the leaves in a\ndendrogram.  These indices can then be used to access the appropriate\ncomponents of any additional data.\n","example_call":"order.dendrogram(x)"},"stats::cycle":{"description":"time creates the vector of times at which a time series was sampled.\n","example_call":"cycle(x, ...)"},"stats::qt":{"description":"Density, distribution function, quantile function and random\ngeneration for the t distribution with df degrees of freedom\n(and optional non-centrality parameter ncp).\n","example_call":"qt(p, df, ncp, lower.tail = TRUE, log.p = FALSE)"},"stats::rf":{"description":"Density, distribution function, quantile function and random\ngeneration for the F distribution with df1 and df2\ndegrees of freedom (and optional non-centrality parameter ncp).\n","example_call":"rf(n, df1, df2, ncp)"},"stats::punif":{"description":"These functions provide information about the uniform distribution\non the interval from min to max.  dunif gives the\ndensity, punif gives the distribution function qunif\ngives the quantile function and runif generates random\ndeviates.\n","example_call":"punif(q, min = 0, max = 1, lower.tail = TRUE, log.p = FALSE)"},"stats::quasi":{"description":"Family objects provide a convenient way to specify the details of the\nmodels used by functions such as glm.  See the\ndocumentation for glm for the details on how such model\nfitting takes place.\n","example_call":"quasi(link = \"identity\", variance = \"constant\")"},"stats::ts.plot":{"description":"Plot several time series on a common plot. Unlike\nplot.ts the series can have a different time bases,\nbut they should have the same frequency.\n","example_call":"ts.plot(..., gpars = list())"},"stats::cov.wt":{"description":"Returns a list containing estimates of the weighted covariance matrix\nand the mean of the data, and optionally of the (weighted) correlation\nmatrix.","example_call":"cov.wt(x, wt = rep(1/nrow(x), nrow(x)), cor = FALSE, center = TRUE,"},"stats::mood.test":{"description":"Performs Mood's two-sample test for a difference in scale parameters.\n","example_call":"mood.test(x, ...)"},"stats::PP.test":{"description":"Computes the Phillips-Perron test for the null hypothesis that\nx has a unit root against a stationary alternative.\n","example_call":"PP.test(x, lshort = TRUE)"},"stats::is.empty.model":{"description":"R's formula notation allows models with no intercept and no\npredictors. These require special handling internally.\nis.empty.model() checks whether an object describes an empty\nmodel.\n","example_call":"is.empty.model(x)"},"stats::loess.control":{"description":"Set control parameters for loess fits.\n","example_call":"loess.control(surface = c(\"interpolate\", \"direct\"), statistics = c(\"approximate\","},"stats::decompose":{"description":"Decompose a time series into seasonal, trend and irregular components\nusing moving averages.  Deals with additive or multiplicative\nseasonal component.\n","example_call":"decompose(x, type = c(\"additive\", \"multiplicative\"), filter = NULL)"},"stats::aggregate":{"description":"Splits the data into subsets, computes summary statistics for each,\nand returns the result in a convenient form.\n","example_call":"aggregate(x, ...)"},"stats::BIC":{"description":"Generic function calculating Akaike's <U+2018>An Information Criterion<U+2019> for\none or several fitted model objects for which a log-likelihood value\ncan be obtained, according to the formula\n-2 \\mbox{log-likelihood} + k n_{par},\nwhere n_{par} represents the number of parameters in the\nfitted model, and k = 2 for the usual AIC, or\nk = \\log(n)\n(n being the number of observations) for the so-called BIC or SBC\n(Schwarz's Bayesian criterion).\n","example_call":"BIC(object, ...)"},"stats::reshape":{"description":"This function reshapes a data frame between <U+2018>wide<U+2019> format (with\nrepeated measurements in separate columns of the same row) and\n<U+2018>long<U+2019> format (with the repeated measurements in separate\nrows).\n","example_call":"reshape(data, varying = NULL, v.names = NULL, timevar = \"time\","},"stats::makeARIMA":{"description":"Use Kalman Filtering to find the (Gaussian) log-likelihood, or for\nforecasting or smoothing.\n","example_call":"makeARIMA(phi, theta, Delta, kappa = 1e+06, SSinit = c(\"Gardner1980\","},"stats::ARMAtoMA":{"description":"Convert ARMA process to infinite MA process.\n","example_call":"ARMAtoMA(ar = numeric(), ma = numeric(), lag.max)"},"stats::weighted.mean":{"description":"Compute a weighted mean.\n","example_call":"weighted.mean(x, w, ...)"},"stats::pbinom":{"description":"Density, distribution function, quantile function and random\ngeneration for the binomial distribution with parameters size\nand prob.\n","example_call":"pbinom(q, size, prob, lower.tail = TRUE, log.p = FALSE)"},"stats::selfStart":{"description":"Construct self-starting nonlinear models to be used in\nnls, etc.  Via function initial to compute\napproximate parameter values from data, such models are\n<U+201C>self-starting<U+201D>, i.e., do not need a start argument in,\ne.g., nls().\n","example_call":"selfStart(model, initial, parameters, template)"},"stats::SSgompertz":{"description":"This selfStart model evaluates the Gompertz growth model\nand its gradient.  It has an initial attribute that\ncreates initial estimates of the parameters Asym,\nb2, and b3.\n","example_call":"SSgompertz(x, Asym, b2, b3)"},"stats::qnorm":{"description":"Density, distribution function, quantile function and random\ngeneration for the normal distribution with mean equal to mean\nand standard deviation equal to sd.\n","example_call":"qnorm(p, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)"},"stats::inverse.gaussian":{"description":"Family objects provide a convenient way to specify the details of the\nmodels used by functions such as glm.  See the\ndocumentation for glm for the details on how such model\nfitting takes place.\n","example_call":"inverse.gaussian(link = \"1/mu^2\")"},"stats::na.omit":{"description":"These generic functions are useful for dealing with NAs\nin e.g., data frames.\nna.fail returns the object if it does not contain any\nmissing values, and signals an error otherwise.\nna.omit returns the object with incomplete cases removed.\nna.pass returns the object unchanged.\n","example_call":"na.omit(object, ...)"},"stats::sd":{"description":"This function computes the standard deviation of the values in\nx.\nIf na.rm is TRUE then missing values are removed before\ncomputation proceeds.\n","example_call":"sd(x, na.rm = FALSE)"},"stats::rt":{"description":"Density, distribution function, quantile function and random\ngeneration for the t distribution with df degrees of freedom\n(and optional non-centrality parameter ncp).\n","example_call":"rt(n, df, ncp)"},"stats::fft":{"description":"Computes the Discrete Fourier Transform (DFT) of an array with a fast\nalgorithm, the <U+201C>Fast Fourier Transform<U+201D> (FFT).\n","example_call":"fft(z, inverse = FALSE)"},"stats::dcauchy":{"description":"Density, distribution function, quantile function and random\ngeneration for the Cauchy distribution with location parameter\nlocation and scale parameter scale.\n","example_call":"dcauchy(x, location = 0, scale = 1, log = FALSE)"},"stats::fivenum":{"description":"Returns Tukey's five number summary (minimum, lower-hinge, median,\nupper-hinge, maximum) for the input data.\n","example_call":"fivenum(x, na.rm = TRUE)"},"stats::toeplitz2":{"description":"In its simplest use, toeplitz() forms a symmetric Toeplitz matrix\ngiven its first column (or row).  For the general case, asymmetric and\nnon-square Toeplitz matrices are formed either by specifying the first\ncolumn and row separately,\n","example_call":"toeplitz2(x, nrow = length(x) + 1L - ncol, ncol = length(x) +"},"stats::relevel":{"description":"The levels of a factor are re-ordered so that the level specified by\nref is first and the others are moved down. This is useful\nfor contr.treatment contrasts which take the first level as\nthe reference.\n","example_call":"relevel(x, ref, ...)"},"stats::summary.glm":{"description":"These functions are all methods for class glm or\nsummary.glm objects.\n","example_call":"summary.glm(object, dispersion = NULL, correlation = FALSE, symbolic.cor = FALSE,"},"stats::rexp":{"description":"Density, distribution function, quantile function and random\ngeneration for the exponential distribution with rate rate\n(i.e., mean 1/rate).\n","example_call":"rexp(n, rate = 1)"},"stats::monthplot":{"description":"These functions plot seasonal (or other) subseries of a time series.\nFor each season (or other category), a time series is plotted.\n","example_call":"monthplot(x, ...)"},"stats::dfbeta":{"description":"This suite of functions can be used to compute some of the regression\n(leave-one-out deletion) diagnostics for linear and generalized linear\nmodels discussed in Belsley, Kuh and Welsch (1980),\nCook and Weisberg (1982), etc.\n","example_call":"dfbeta(model, ...)"},"stats::diffinv":{"description":"Computes the inverse function of the lagged differences function\ndiff.\n","example_call":"diffinv(x, ...)"},"stats::nobs":{"description":"Extract the number of <U+2018>observations<U+2019> from a model fit.  This is\nprincipally intended to be used in computing BIC (see AIC).\n","example_call":"nobs(object, ...)"},"stats::SSmicmen":{"description":"This selfStart model evaluates the Michaelis-Menten model and\nits gradient.  It has an initial attribute that\nwill evaluate initial estimates of the parameters Vm and K\n","example_call":"SSmicmen(input, Vm, K)"},"stats::is.ts":{"description":"The function ts is used to create time-series objects.\n","example_call":"is.ts(x)"},"stats::dummy.coef.lm":{"description":"This extracts coefficients in terms of the original levels of the\ncoefficients rather than the coded variables.\n","example_call":"dummy.coef.lm(object, use.na = FALSE, ...)"},"stats::hatvalues":{"description":"This suite of functions can be used to compute some of the regression\n(leave-one-out deletion) diagnostics for linear and generalized linear\nmodels discussed in Belsley, Kuh and Welsch (1980),\nCook and Weisberg (1982), etc.\n","example_call":"hatvalues(model, ...)"},"stats::variable.names":{"description":"Simple utilities returning (non-missing) case names, and\n(non-eliminated) variable names.\n","example_call":"variable.names(object, ...)"},"stats::Pair":{"description":"Combines two vectors into an object of class \"Pair\".\n","example_call":"Pair(x, y)"},"stats::model.frame.default":{"description":"model.frame (a generic function) and its methods return a\ndata.frame with the variables needed to use\nformula and any ... arguments.\n","example_call":"model.frame.default(formula, data = NULL, subset = NULL, na.action, drop.unused.levels = FALSE,"},"stats::anova":{"description":"Compute analysis of variance (or deviance) tables for one or more\nfitted model objects.\n","example_call":"anova(object, ...)"},"stats::simulate":{"description":"Simulate one or more responses from the distribution\ncorresponding to a fitted model object.\n","example_call":"simulate(object, nsim = 1, seed = NULL, ...)"},"stats::dffits":{"description":"This suite of functions can be used to compute some of the regression\n(leave-one-out deletion) diagnostics for linear and generalized linear\nmodels discussed in Belsley, Kuh and Welsch (1980),\nCook and Weisberg (1982), etc.\n","example_call":"dffits(model, infl = lm.influence(model, do.coef = FALSE),"},"stats::model.matrix.default":{"description":"model.matrix creates a design (or model) matrix, e.g., by\nexpanding factors to a set of dummy variables (depending on the\ncontrasts) and expanding interactions similarly.\n","example_call":"model.matrix.default(object, data = environment(object), contrasts.arg = NULL,"},"stats::contr.SAS":{"description":"Return a matrix of contrasts.\n","example_call":"contr.SAS(n, contrasts = TRUE, sparse = FALSE)"},"stats::contr.treatment":{"description":"Return a matrix of contrasts.\n","example_call":"contr.treatment(n, base = 1, contrasts = TRUE, sparse = FALSE)"},"stats::predict.lm":{"description":"Predicted values based on linear model object.\n","example_call":"predict.lm(object, newdata, se.fit = FALSE, scale = NULL, df = Inf,"},"stats::prop.trend.test":{"description":"Performs chi-squared test for trend in proportions, i.e., a test\nasymptotically optimal for local alternatives where the log odds vary\nin proportion with score.  By default, score is chosen\nas the group numbers.\n","example_call":"prop.trend.test(x, n, score = seq_along(x))"},"stats::as.dendrogram":{"description":"Class \"dendrogram\" provides general functions for handling\ntree-like structures.  It is intended as a replacement for similar\nfunctions in hierarchical clustering and classification/regression\ntrees, such that all of these can use the same engine for plotting or\ncutting trees.\n","example_call":"as.dendrogram(object, ...)"},"stats::ppois":{"description":"Density, distribution function, quantile function and random\ngeneration for the Poisson distribution with parameter lambda.\n","example_call":"ppois(q, lambda, lower.tail = TRUE, log.p = FALSE)"},"stats::pcauchy":{"description":"Density, distribution function, quantile function and random\ngeneration for the Cauchy distribution with location parameter\nlocation and scale parameter scale.\n","example_call":"pcauchy(q, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE)"},"stats::smoothEnds":{"description":"Smooth end points of a vector y using subsequently smaller\nmedians and Tukey's end point rule at the very end. (of odd span),\n","example_call":"smoothEnds(y, k = 3)"},"stats::qbinom":{"description":"Density, distribution function, quantile function and random\ngeneration for the binomial distribution with parameters size\nand prob.\n","example_call":"qbinom(p, size, prob, lower.tail = TRUE, log.p = FALSE)"},"stats::hat":{"description":"This suite of functions can be used to compute some of the regression\n(leave-one-out deletion) diagnostics for linear and generalized linear\nmodels discussed in Belsley, Kuh and Welsch (1980),\nCook and Weisberg (1982), etc.\n","example_call":"hat(x, intercept = TRUE)"},"stats::p.adjust":{"description":"Given a set of p-values, returns p-values adjusted using\none of several methods.","example_call":"p.adjust(p, method = p.adjust.methods, n = length(p))"},"stats::.MFclass":{"description":".checkMFClasses checks if the variables used in a predict\nmethod agree in type with those used for fitting.\n","example_call":".MFclass(x)"},"stats::dbinom":{"description":"Density, distribution function, quantile function and random\ngeneration for the binomial distribution with parameters size\nand prob.\n","example_call":"dbinom(x, size, prob, log = FALSE)"},"stats::terms.formula":{"description":"This function takes a formula and some optional arguments and\nconstructs a terms object. The terms object can then be used to\nconstruct a model.matrix.\n","example_call":"terms.formula(x, specials = NULL, abb = NULL, data = NULL, neg.out = TRUE,"},"stats::spec.taper":{"description":"Apply a cosine-bell taper to a time series.\n","example_call":"spec.taper(x, p = 0.1)"},"stats::HoltWinters":{"description":"Computes Holt-Winters Filtering of a given time series.\nUnknown parameters are determined by minimizing the squared\nprediction error.\n","example_call":"HoltWinters(x, alpha = NULL, beta = NULL, gamma = NULL, seasonal = c(\"additive\","},"stats::ts":{"description":"The function ts is used to create time-series objects.\n","example_call":"ts(data = NA, start = 1, end = numeric(), frequency = 1,"},"stats::na.exclude":{"description":"These generic functions are useful for dealing with NAs\nin e.g., data frames.\nna.fail returns the object if it does not contain any\nmissing values, and signals an error otherwise.\nna.omit returns the object with incomplete cases removed.\nna.pass returns the object unchanged.\n","example_call":"na.exclude(object, ...)"},"stats::dsignrank":{"description":"Density, distribution function, quantile function and random\ngeneration for the distribution of the Wilcoxon Signed Rank statistic\nobtained from a sample with size n.\n","example_call":"dsignrank(x, n, log = FALSE)"},"stats::is.tskernel":{"description":"The \"tskernel\" class is designed to represent discrete\nsymmetric normalized smoothing kernels.  These kernels can be used to\nsmooth vectors, matrices, or time series objects.\n","example_call":"is.tskernel(k)"},"stats::fitted.values":{"description":"fitted is a generic function which extracts fitted values from\nobjects returned by modeling functions.  fitted.values is an\nalias for it.\n","example_call":"fitted.values(object, ...)"},"stats::qsignrank":{"description":"Density, distribution function, quantile function and random\ngeneration for the distribution of the Wilcoxon Signed Rank statistic\nobtained from a sample with size n.\n","example_call":"qsignrank(p, n, lower.tail = TRUE, log.p = FALSE)"},"stats::integrate":{"description":"Adaptive quadrature of functions of one variable over a finite or\ninfinite interval.\n","example_call":"integrate(f, lower, upper, ..., subdivisions = 100L, rel.tol = .Machine$double.eps^0.25,"},"stats::optimise":{"description":"The function optimize searches the interval from\nlower to upper for a minimum or maximum of\nthe function f with respect to its first argument.\n","example_call":"optimise(f, interval, ..., lower = min(interval), upper = max(interval),"},"stats::binomial":{"description":"Family objects provide a convenient way to specify the details of the\nmodels used by functions such as glm.  See the\ndocumentation for glm for the details on how such model\nfitting takes place.\n","example_call":"binomial(link = \"logit\")"},"stats::KalmanSmooth":{"description":"Use Kalman Filtering to find the (Gaussian) log-likelihood, or for\nforecasting or smoothing.\n","example_call":"KalmanSmooth(y, mod, nit = 0L)"},"stats::.vcov.aliased":{"description":"Returns the variance-covariance matrix of the main parameters of\na fitted model object.  The <U+201C>main<U+201D> parameters of model\ncorrespond to those returned by coef, and typically do\nnot contain a nuisance scale parameter (sigma).\n","example_call":".vcov.aliased(aliased, vc, complete = TRUE)"},"stats::deltat":{"description":"time creates the vector of times at which a time series was sampled.\n","example_call":"deltat(x, ...)"},"stats::p.adjust.methods":{"description":"Given a set of p-values, returns p-values adjusted using\none of several methods.","example_call":"NULL"},"stats::SSD":{"description":"Functions to compute matrix of residual sums of squares and products,\nor the estimated variance matrix for multivariate linear models.\n","example_call":"SSD(object, ...)"},"stats::summary.lm":{"description":"summary method for class \"lm\".\n","example_call":"summary.lm(object, correlation = FALSE, symbolic.cor = FALSE,"},"stats::smooth.spline":{"description":"Fits a cubic smoothing spline to the supplied data.\n","example_call":"smooth.spline(x, y = NULL, w = NULL, df, spar = NULL, lambda = NULL,"},"stats::rstudent":{"description":"This suite of functions can be used to compute some of the regression\n(leave-one-out deletion) diagnostics for linear and generalized linear\nmodels discussed in Belsley, Kuh and Welsch (1980),\nCook and Weisberg (1982), etc.\n","example_call":"rstudent(model, ...)"},"stats::hclust":{"description":"Hierarchical cluster analysis on a set of dissimilarities and\nmethods for analyzing it.\n","example_call":"hclust(d, method = \"complete\", members = NULL)"},"stats::density":{"description":"The (S3) generic function density computes kernel density\nestimates.  Its default method does so with the given kernel and\nbandwidth for univariate observations.\n","example_call":"density(x, ...)"},"stats::dgeom":{"description":"Density, distribution function, quantile function and random\ngeneration for the geometric distribution with parameter prob.\n","example_call":"dgeom(x, prob, log = FALSE)"},"stats::terms":{"description":"The function terms is a generic function\nwhich can be used to extract terms objects\nfrom various kinds of R data objects.\n","example_call":"terms(x, ...)"},"stats::fisher.test":{"description":"Performs Fisher's exact test for testing the null of independence of\nrows and columns in a contingency table with fixed marginals.\n","example_call":"fisher.test(x, y = NULL, workspace = 2e+05, hybrid = FALSE, hybridPars = c(expect = 5,"},"stats::rbinom":{"description":"Density, distribution function, quantile function and random\ngeneration for the binomial distribution with parameters size\nand prob.\n","example_call":"rbinom(n, size, prob)"},"stats::formula":{"description":"The generic function formula and its specific methods provide a\nway of extracting formulae which have been included in other objects.\n","example_call":"formula(x, ...)"},"stats::nls.control":{"description":"Allow the user to set some characteristics of the nls\nnonlinear least squares algorithm.\n","example_call":"nls.control(maxiter = 50, tol = 1e-05, minFactor = 1/1024, printEval = FALSE,"},"stats::isoreg":{"description":"Compute the isotonic (monotonically increasing nonparametric) least\nsquares regression which is piecewise constant.\n","example_call":"isoreg(x, y = NULL)"},"stats::contr.sum":{"description":"Return a matrix of contrasts.\n","example_call":"contr.sum(n, contrasts = TRUE, sparse = FALSE)"},"stats::uniroot":{"description":"The function uniroot searches the interval from lower\nto upper for a root (i.e., zero) of the function f with\nrespect to its first argument.\n","example_call":"uniroot(f, interval, ..., lower = min(interval), upper = max(interval),"},"stats::quasibinomial":{"description":"Family objects provide a convenient way to specify the details of the\nmodels used by functions such as glm.  See the\ndocumentation for glm for the details on how such model\nfitting takes place.\n","example_call":"quasibinomial(link = \"logit\")"},"stats::dunif":{"description":"These functions provide information about the uniform distribution\non the interval from min to max.  dunif gives the\ndensity, punif gives the distribution function qunif\ngives the quantile function and runif generates random\ndeviates.\n","example_call":"dunif(x, min = 0, max = 1, log = FALSE)"},"stats::influence.measures":{"description":"This suite of functions can be used to compute some of the regression\n(leave-one-out deletion) diagnostics for linear and generalized linear\nmodels discussed in Belsley, Kuh and Welsch (1980),\nCook and Weisberg (1982), etc.\n","example_call":"influence.measures(model, infl = influence(model))"},"stats::na.contiguous":{"description":"Find the longest consecutive stretch of non-missing values in a time\nseries object.  (In the event of a tie, the first such stretch.)\n","example_call":"na.contiguous(object, ...)"},"stats::dfbetas":{"description":"This suite of functions can be used to compute some of the regression\n(leave-one-out deletion) diagnostics for linear and generalized linear\nmodels discussed in Belsley, Kuh and Welsch (1980),\nCook and Weisberg (1982), etc.\n","example_call":"dfbetas(model, ...)"},"stats::pairwise.prop.test":{"description":"Calculate pairwise comparisons between pairs of proportions with\ncorrection for multiple testing\n","example_call":"pairwise.prop.test(x, n, p.adjust.method = p.adjust.methods, ...)"},"stats::rnbinom":{"description":"Density, distribution function, quantile function and random\ngeneration for the negative binomial distribution with parameters\nsize and prob.\n","example_call":"rnbinom(n, size, prob, mu)"},"stats::pnorm":{"description":"Density, distribution function, quantile function and random\ngeneration for the normal distribution with mean equal to mean\nand standard deviation equal to sd.\n","example_call":"pnorm(q, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)"},"stats::rbeta":{"description":"Density, distribution function, quantile function and random\ngeneration for the Beta distribution with parameters shape1 and\nshape2 (and optional non-centrality parameter ncp).\n","example_call":"rbeta(n, shape1, shape2, ncp = 0)"},"stats::cpgram":{"description":"Plots a cumulative periodogram.\n","example_call":"cpgram(ts, taper = 0.1, main = paste(\"Series: \", deparse1(substitute(ts))),"},"stats::knots":{"description":"Given the vectors (x_1, \\ldots, x_n) and\n(y_0,y_1,\\ldots, y_n) (one value\nmore!), stepfun(x, y, ...) returns an interpolating\n<U+2018>step<U+2019> function, say fn. I.e., fn(t) =\n    c_i (constant) for t \\in (x_i, x_{i+1}) and at the abscissa values, if (by default)\nright = FALSE, fn(x_i) = y_i and for\nright = TRUE, fn(x_i) = y_{i-1}, for\ni=1,\\ldots,n.\n","example_call":"knots(Fn, ...)"},"stats::biplot":{"description":"Plot a biplot on the current graphics device.\n","example_call":"biplot(x, ...)"},"stats::runmed":{"description":"Compute running medians of odd span.  This is the <U+2018>most robust<U+2019>\nscatter plot smoothing possible.  For efficiency (and historical\nreason), you can use one of two different algorithms giving identical\nresults.\n","example_call":"runmed(x, k, endrule = c(\"median\", \"keep\", \"constant\"), algorithm = NULL,"},"stats::mad":{"description":"Compute the median absolute deviation, i.e., the (lo-/hi-) median of\nthe absolute deviations from the median, and (by default) adjust by a\nfactor for asymptotically normal consistency.\n","example_call":"mad(x, center = median(x), constant = 1.4826, na.rm = FALSE,"},"stats::delete.response":{"description":"delete.response returns a terms object for the same\nmodel but with no response variable.\n","example_call":"delete.response(termobj)"},"stats::plogis":{"description":"Density, distribution function, quantile function and random\ngeneration for the logistic distribution with parameters\nlocation and scale.\n","example_call":"plogis(q, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE)"},"stats::read.ftable":{"description":"Read, write and coerce <U+2018>flat<U+2019> (contingency) tables, aka\nftables.\n","example_call":"read.ftable(file, sep = \"\", quote = \"\\\"\", row.var.names, col.vars,"},"stats::aov":{"description":"Fit an analysis of variance model by a call to lm (for each\nstratum if an Error(.) is used).\n","example_call":"aov(formula, data = NULL, projections = FALSE, qr = TRUE,"},"stats::update":{"description":"update will update and (by default) re-fit a model.  It does this\nby extracting the call stored in the object, updating the call and (by\ndefault) evaluating that call.  Sometimes it is useful to call\nupdate with only one argument, for example if the data frame has\nbeen corrected.\n","example_call":"update(object, ...)"},"stats::StructTS":{"description":"Fit a structural model for a time series by maximum likelihood.\n","example_call":"StructTS(x, type = c(\"level\", \"trend\", \"BSM\"), init = NULL,"},"stats4::mle":{"description":"Estimate parameters by the method of maximum likelihood.\n","example_call":"mle(minuslogl, start, optim = stats::optim, method = if (!useLim) \"BFGS\" else \"L-BFGS-B\","},"stringi::stri_startswith":{"description":"These functions check if a string starts or ends with a match\nto a given pattern. Also, it is possible to check if there is a match\nat a specific position.\n","example_call":"stri_startswith(str, ..., fixed, coll, charclass)"},"stringi::stri_locate_first":{"description":"These functions find the indexes (positions) where\nthere is a match to some pattern.\nThe functions stri_locate_all_* locate all the matches.\nstri_locate_first_* and stri_locate_last_*\ngive the first and the last matches, respectively.\n","example_call":"stri_locate_first(str, ..., regex, fixed, coll, charclass)"},"stringi::%s==%":{"description":"Relational operators for comparing corresponding strings in\ntwo character vectors, with a typical R look-and-feel.\n","example_call":"%s==%(e1, e2)"},"stringi::stri_subset_regex":{"description":"These functions return or modify a sub-vector where there is a match to\na given pattern. In other words, they\nare roughly equivalent (but faster and easier to use) to a call to\nstr[stri_detect(str, ...)] or\nstr[stri_detect(str, ...)] <- value.\n","example_call":"stri_subset_regex(str, pattern, omit_na = FALSE, negate = FALSE, ...,"},"stringi::stri_locate_all_boundaries":{"description":"These functions locate text boundaries\n(like character, word, line, or sentence boundaries).\nUse stri_locate_all_* to locate all the matches.\nstri_locate_first_* and stri_locate_last_*\ngive the first or the last matches, respectively.\n","example_call":"stri_locate_all_boundaries(str, omit_no_match = FALSE, get_length = FALSE, ...,"},"stringi::stri_width":{"description":"Approximates the number of text columns the 'cat()' function\nmight use to print a string using a mono-spaced font.\n","example_call":"stri_width(str)"},"stringi::stri_datetime_add<-":{"description":"Modifies a date-time object by adding a specific amount of time units.\n","example_call":"stri_datetime_add<-(time, units = \"seconds\", tz = NULL, locale = NULL,"},"stringi::stri_datetime_parse":{"description":"These functions convert a given date/time object\nto a character vector, or vice versa.\n","example_call":"stri_datetime_parse(str, format = \"uuuu-MM-dd HH:mm:ss\", lenient = FALSE,"},"stringi::stri_join_list":{"description":"These functions concatenate all the strings in each character vector\nin a given list.\nstri_c_list and stri_paste_list are aliases for\nstri_join_list.\n","example_call":"stri_join_list(x, sep = \"\", collapse = NULL)"},"stringi::stri_extract_all_regex":{"description":"These functions extract all substrings matching a given pattern.\n","example_call":"stri_extract_all_regex(str, pattern, simplify = FALSE, omit_no_match = FALSE,"},"stringi::stri_extract_first_fixed":{"description":"These functions extract all substrings matching a given pattern.\n","example_call":"stri_extract_first_fixed(str, pattern, ..., opts_fixed = NULL)"},"stringi::stri_detect_regex":{"description":"These functions determine, for each string in str,\nif there is at least one match to a corresponding pattern.\n","example_call":"stri_detect_regex(str, pattern, negate = FALSE, max_count = -1, ...,"},"stringi::stri_trim_right":{"description":"These functions may be used, e.g., to remove unnecessary\nwhite-spaces from strings. Trimming ends at the first or\nstarts at the last pattern match.\n","example_call":"stri_trim_right(str, pattern = \"\\\\P{Wspace}\", negate = FALSE)"},"stringi::stri_order":{"description":"This function finds a permutation which rearranges the\nstrings in a given character vector into the ascending or descending\nlocale-dependent lexicographic order.\n","example_call":"stri_order(str, decreasing = FALSE, na_last = TRUE, ..., opts_collator = NULL)"},"stringi::stri_locale_info":{"description":"Provides some basic information on a given locale identifier.\n","example_call":"stri_locale_info(locale = NULL)"},"stringi::stri_extract_last_charclass":{"description":"These functions extract all substrings matching a given pattern.\n","example_call":"stri_extract_last_charclass(str, pattern)"},"stringi::stri_datetime_add":{"description":"Modifies a date-time object by adding a specific amount of time units.\n","example_call":"stri_datetime_add(time, value = 1L, units = \"seconds\", tz = NULL, locale = NULL)"},"stringi::%s<%":{"description":"Relational operators for comparing corresponding strings in\ntwo character vectors, with a typical R look-and-feel.\n","example_call":"%s<%(e1, e2)"},"stringi::stri_trans_isnfkc":{"description":"These functions convert strings to NFC, NFKC, NFD, NFKD, or NFKC_Casefold\nUnicode Normalization Form or check whether strings are normalized.\n","example_call":"stri_trans_isnfkc(str)"},"stringi::stri_subset_fixed":{"description":"These functions return or modify a sub-vector where there is a match to\na given pattern. In other words, they\nare roughly equivalent (but faster and easier to use) to a call to\nstr[stri_detect(str, ...)] or\nstr[stri_detect(str, ...)] <- value.\n","example_call":"stri_subset_fixed(str, pattern, omit_na = FALSE, negate = FALSE, ...,"},"stringi::stri_trans_isnfkd":{"description":"These functions convert strings to NFC, NFKC, NFD, NFKD, or NFKC_Casefold\nUnicode Normalization Form or check whether strings are normalized.\n","example_call":"stri_trans_isnfkd(str)"},"stringi::stri_extract_last_coll":{"description":"These functions extract all substrings matching a given pattern.\n","example_call":"stri_extract_last_coll(str, pattern, ..., opts_collator = NULL)"},"stringi::stri_replace_first_regex":{"description":"These functions replace, with the given replacement string, every/first/last\nsubstring of the input that matches the specified pattern.\n","example_call":"stri_replace_first_regex(str, pattern, replacement, ..., opts_regex = NULL)"},"stringi::stri_reverse":{"description":"Reverses the order of the code points in every string.\n","example_call":"stri_reverse(str)"},"stringi::stri_enc_fromutf32":{"description":"This function converts integer vectors,\nrepresenting sequences of UTF-32 code points, to UTF-8 strings.\n","example_call":"stri_enc_fromutf32(vec)"},"stringi::stri_opts_fixed":{"description":"A convenience function used to tune up the behavior of stri_*_fixed\nfunctions, see stringi-search-fixed.\n","example_call":"stri_opts_fixed(case_insensitive = FALSE, overlap = FALSE)"},"stringi::stri_datetime_fields":{"description":"Computes and returns values for all date and time fields.\n","example_call":"stri_datetime_fields(time, tz = attr(time, \"tzone\"), locale = NULL)"},"stringi::%s>=%":{"description":"Relational operators for comparing corresponding strings in\ntwo character vectors, with a typical R look-and-feel.\n","example_call":"%s>=%(e1, e2)"},"stringi::stri_locate_first_boundaries":{"description":"These functions locate text boundaries\n(like character, word, line, or sentence boundaries).\nUse stri_locate_all_* to locate all the matches.\nstri_locate_first_* and stri_locate_last_*\ngive the first or the last matches, respectively.\n","example_call":"stri_locate_first_boundaries(str, get_length = FALSE, ..., opts_brkiter = NULL)"},"stringi::stri_enc_toascii":{"description":"This function converts input strings to ASCII,\ni.e., to character strings consisting of bytes not greater than 127.\n","example_call":"stri_enc_toascii(str)"},"stringi::stri_locate_all_fixed":{"description":"These functions find the indexes (positions) where\nthere is a match to some pattern.\nThe functions stri_locate_all_* locate all the matches.\nstri_locate_first_* and stri_locate_last_*\ngive the first and the last matches, respectively.\n","example_call":"stri_locate_all_fixed(str, pattern, omit_no_match = FALSE, get_length = FALSE,"},"stringi::stri_trans_toupper":{"description":"These functions transform strings either to lower case,\nUPPER CASE, or Title Case or perform case folding.\n","example_call":"stri_trans_toupper(str, locale = NULL)"},"stringi::stri_sub_all<-":{"description":"stri_sub_all extracts multiple substrings from each string.\nIts replacement version substitutes (in-place) multiple substrings with the\ncorresponding replacement strings.\nstri_sub_replace_all (alias stri_sub_all_replace)\nis its forward pipe operator-friendly variant, returning\na copy of the input vector.\n","example_call":"stri_sub_all<-(str, from = list(1L), to = list(-1L), length, omit_na = FALSE,"},"stringi::stri_sort_key":{"description":"This function computes a locale-dependent sort key, which is an alternative\ncharacter representation of the string that, when ordered in the C locale\n(which orders using the underlying bytes directly), will give an equivalent\nordering to the original string. It is useful for enhancing algorithms\nthat sort only in the C locale (e.g., the strcmp function in libc)\nwith the ability to be locale-aware.\n","example_call":"stri_sort_key(str, ..., opts_collator = NULL)"},"stringi::stri_locate_first_words":{"description":"These functions locate text boundaries\n(like character, word, line, or sentence boundaries).\nUse stri_locate_all_* to locate all the matches.\nstri_locate_first_* and stri_locate_last_*\ngive the first or the last matches, respectively.\n","example_call":"stri_locate_first_words(str, locale = NULL, get_length = FALSE)"},"stringi::%stri!=%":{"description":"Relational operators for comparing corresponding strings in\ntwo character vectors, with a typical R look-and-feel.\n","example_call":"%stri!=%(e1, e2)"},"stringi::stri_info":{"description":"Gives the current default settings used by the ICU library.\n","example_call":"stri_info(short = FALSE)"},"stringi::stri_replace_last_charclass":{"description":"These functions replace, with the given replacement string, every/first/last\nsubstring of the input that matches the specified pattern.\n","example_call":"stri_replace_last_charclass(str, pattern, replacement)"},"stringi::stri_enc_isutf16le":{"description":"These functions detect whether a given byte stream is\nvalid UTF-16LE, UTF-16BE, UTF-32LE, or UTF-32BE.\n","example_call":"stri_enc_isutf16le(str)"},"stringi::stri_length":{"description":"This function returns the number of code points\nin each string.\n","example_call":"stri_length(str)"},"stringi::stri_replace_first_coll":{"description":"These functions replace, with the given replacement string, every/first/last\nsubstring of the input that matches the specified pattern.\n","example_call":"stri_replace_first_coll(str, pattern, replacement, ..., opts_collator = NULL)"},"stringi::stri_extract_last_boundaries":{"description":"These functions extract data between text boundaries.\n","example_call":"stri_extract_last_boundaries(str, ..., opts_brkiter = NULL)"},"stringi::stri_split_lines1":{"description":"These functions split each character string in a given vector\ninto text lines.\n","example_call":"stri_split_lines1(str)"},"stringi::stri_trans_nfkc_casefold":{"description":"These functions convert strings to NFC, NFKC, NFD, NFKD, or NFKC_Casefold\nUnicode Normalization Form or check whether strings are normalized.\n","example_call":"stri_trans_nfkc_casefold(str)"},"stringi::stri_trans_tolower":{"description":"These functions transform strings either to lower case,\nUPPER CASE, or Title Case or perform case folding.\n","example_call":"stri_trans_tolower(str, locale = NULL)"},"stringi::stri_na2empty":{"description":"This function replaces all missing values with empty strings.\nSee stri_replace_na for a generalization.\n","example_call":"stri_na2empty(x)"},"stringi::stri_sub<-":{"description":"stri_sub extracts particular substrings at code point-based\nindex ranges provided. Its replacement version allows to substitute\n(in-place) parts of\na string with given replacement strings. stri_sub_replace\nis its forward pipe operator-friendly variant that returns\na copy of the input vector.\n","example_call":"stri_sub<-(str, from = 1L, to = -1L, length, omit_na = FALSE,"},"stringi::stri_read_lines":{"description":"Reads a text file in ins entirety, re-encodes it, and splits it into text lines.\n","example_call":"stri_read_lines(con, encoding = NULL, fname = con)"},"stringi::stri_detect":{"description":"These functions determine, for each string in str,\nif there is at least one match to a corresponding pattern.\n","example_call":"stri_detect(str, ..., regex, fixed, coll, charclass)"},"stringi::stri_locate_last_coll":{"description":"These functions find the indexes (positions) where\nthere is a match to some pattern.\nThe functions stri_locate_all_* locate all the matches.\nstri_locate_first_* and stri_locate_last_*\ngive the first and the last matches, respectively.\n","example_call":"stri_locate_last_coll(str, pattern, get_length = FALSE, ..., opts_collator = NULL)"},"stringi::stri_trans_casefold":{"description":"These functions transform strings either to lower case,\nUPPER CASE, or Title Case or perform case folding.\n","example_call":"stri_trans_casefold(str)"},"stringi::stri_split_fixed":{"description":"These functions split each element in str into substrings.\npattern defines the delimiters that separate the inputs into tokens.\nThe input data between the matches become the fields themselves.\n","example_call":"stri_split_fixed(str, pattern, n = -1L, omit_empty = FALSE, tokens_only = FALSE,"},"stringi::%s>%":{"description":"Relational operators for comparing corresponding strings in\ntwo character vectors, with a typical R look-and-feel.\n","example_call":"%s>%(e1, e2)"},"stringi::stri_extract_all_words":{"description":"These functions extract data between text boundaries.\n","example_call":"stri_extract_all_words(str, simplify = FALSE, omit_no_match = FALSE, locale = NULL)"},"stringi::stri_rand_strings":{"description":"Generates (pseudo)random strings of desired lengths.\n","example_call":"stri_rand_strings(n, length, pattern = \"[A-Za-z0-9]\")"},"stringi::stri_trans_isnfc":{"description":"These functions convert strings to NFC, NFKC, NFD, NFKD, or NFKC_Casefold\nUnicode Normalization Form or check whether strings are normalized.\n","example_call":"stri_trans_isnfc(str)"},"stringi::stri_endswith_fixed":{"description":"These functions check if a string starts or ends with a match\nto a given pattern. Also, it is possible to check if there is a match\nat a specific position.\n","example_call":"stri_endswith_fixed(str, pattern, to = -1L, negate = FALSE, ..., opts_fixed = NULL)"},"stringi::stri_trans_isnfd":{"description":"These functions convert strings to NFC, NFKC, NFD, NFKD, or NFKC_Casefold\nUnicode Normalization Form or check whether strings are normalized.\n","example_call":"stri_trans_isnfd(str)"},"stringi::stri_split_coll":{"description":"These functions split each element in str into substrings.\npattern defines the delimiters that separate the inputs into tokens.\nThe input data between the matches become the fields themselves.\n","example_call":"stri_split_coll(str, pattern, n = -1L, omit_empty = FALSE, tokens_only = FALSE,"},"stringi::stri_locate_all_charclass":{"description":"These functions find the indexes (positions) where\nthere is a match to some pattern.\nThe functions stri_locate_all_* locate all the matches.\nstri_locate_first_* and stri_locate_last_*\ngive the first and the last matches, respectively.\n","example_call":"stri_locate_all_charclass(str, pattern, merge = TRUE, omit_no_match = FALSE,"},"stringi::%s!=%":{"description":"Relational operators for comparing corresponding strings in\ntwo character vectors, with a typical R look-and-feel.\n","example_call":"%s!=%(e1, e2)"},"stringi::stri_c":{"description":"These are the stringi's equivalents of the built-in\npaste function.\nstri_c and stri_paste are aliases for stri_join.\n","example_call":"stri_c(..., sep = \"\", collapse = NULL, ignore_null = FALSE)"},"stringi::stri_subset<-":{"description":"These functions return or modify a sub-vector where there is a match to\na given pattern. In other words, they\nare roughly equivalent (but faster and easier to use) to a call to\nstr[stri_detect(str, ...)] or\nstr[stri_detect(str, ...)] <- value.\n","example_call":"stri_subset<-(str, ..., regex, fixed, coll, charclass, value)"},"stringi::stri_locate_first_coll":{"description":"These functions find the indexes (positions) where\nthere is a match to some pattern.\nThe functions stri_locate_all_* locate all the matches.\nstri_locate_first_* and stri_locate_last_*\ngive the first and the last matches, respectively.\n","example_call":"stri_locate_first_coll(str, pattern, get_length = FALSE, ..., opts_collator = NULL)"},"stringi::stri_locate_first_charclass":{"description":"These functions find the indexes (positions) where\nthere is a match to some pattern.\nThe functions stri_locate_all_* locate all the matches.\nstri_locate_first_* and stri_locate_last_*\ngive the first and the last matches, respectively.\n","example_call":"stri_locate_first_charclass(str, pattern, get_length = FALSE)"},"stringi::stri_conv":{"description":"These functions convert strings between encodings.\nThey aim to serve as a more portable and faster replacement\nfor R's own iconv.\n","example_call":"stri_conv(str, from = NULL, to = NULL, to_raw = FALSE)"},"stringi::stri_sub_replace_all":{"description":"stri_sub_all extracts multiple substrings from each string.\nIts replacement version substitutes (in-place) multiple substrings with the\ncorresponding replacement strings.\nstri_sub_replace_all (alias stri_sub_all_replace)\nis its forward pipe operator-friendly variant, returning\na copy of the input vector.\n","example_call":"stri_sub_replace_all(..., replacement, value = replacement)"},"stringi::stri_enc_list":{"description":"Gives the list of encodings that are supported by ICU.\n","example_call":"stri_enc_list(simplify = TRUE)"},"stringi::stri_string_format":{"description":"stri_sprintf (synonym: stri_string_format)\nis a Unicode-aware replacement for and enhancement of\nthe built-in sprintf function.\nMoreover, stri_printf prints formatted strings.\n","example_call":"stri_string_format(format, ..., na_string = NA_character_, inf_string = \"Inf\","},"stringi::stri_sub_replace":{"description":"stri_sub extracts particular substrings at code point-based\nindex ranges provided. Its replacement version allows to substitute\n(in-place) parts of\na string with given replacement strings. stri_sub_replace\nis its forward pipe operator-friendly variant that returns\na copy of the input vector.\n","example_call":"stri_sub_replace(..., replacement, value = replacement)"},"stringi::stri_pad_left":{"description":"Add multiple pad characters at the given side(s) of each string\nso that each output string is of total width of at least width.\nThese functions may be used to center or left/right-align each string.\n","example_call":"stri_pad_left(str, width = floor(0.9 * getOption(\"width\")), pad = \" \","},"stringi::stri_locate_all_coll":{"description":"These functions find the indexes (positions) where\nthere is a match to some pattern.\nThe functions stri_locate_all_* locate all the matches.\nstri_locate_first_* and stri_locate_last_*\ngive the first and the last matches, respectively.\n","example_call":"stri_locate_all_coll(str, pattern, omit_no_match = FALSE, get_length = FALSE,"},"stringi::stri_subset_regex<-":{"description":"These functions return or modify a sub-vector where there is a match to\na given pattern. In other words, they\nare roughly equivalent (but faster and easier to use) to a call to\nstr[stri_detect(str, ...)] or\nstr[stri_detect(str, ...)] <- value.\n","example_call":"stri_subset_regex<-(str, pattern, negate = FALSE, ..., opts_regex = NULL,"},"stringi::stri_detect_fixed":{"description":"These functions determine, for each string in str,\nif there is at least one match to a corresponding pattern.\n","example_call":"stri_detect_fixed(str, pattern, negate = FALSE, max_count = -1, ...,"},"stringi::stri_unique":{"description":"This function returns a character vector like str,\nbut with duplicate elements removed.\n","example_call":"stri_unique(str, ..., opts_collator = NULL)"},"stringi::stri_omit_na":{"description":"stri_remove_empty (alias stri_omit_empty)\nremoves all empty strings from a character vector,\nand, if na_empty is TRUE, also gets rid of all missing\nvalues.\n","example_call":"stri_omit_na(x)"},"stringi::stri_locale_list":{"description":"Creates a character vector with all available locale identifies.\n","example_call":"stri_locale_list()"},"stringi::stri_trans_isnfkc_casefold":{"description":"These functions convert strings to NFC, NFKC, NFD, NFKD, or NFKC_Casefold\nUnicode Normalization Form or check whether strings are normalized.\n","example_call":"stri_trans_isnfkc_casefold(str)"},"stringi::stri_locate_last_regex":{"description":"These functions find the indexes (positions) where\nthere is a match to some pattern.\nThe functions stri_locate_all_* locate all the matches.\nstri_locate_first_* and stri_locate_last_*\ngive the first and the last matches, respectively.\n","example_call":"stri_locate_last_regex(str, pattern, capture_groups = FALSE, get_length = FALSE,"},"stringi::stri_escape_unicode":{"description":"Generates an ASCII string where all non-printable characters\nand non-ASCII characters are converted to escape sequences.\n","example_call":"stri_escape_unicode(str)"},"stringi::stri_duplicated":{"description":"stri_duplicated() determines which strings in a character vector\nare duplicates of other elements.\n","example_call":"stri_duplicated(str, from_last = FALSE, fromLast = from_last, ...,"},"stringi::stri_sort":{"description":"This function sorts a character vector according to a locale-dependent\nlexicographic order.\n","example_call":"stri_sort(str, decreasing = FALSE, na_last = NA, ..., opts_collator = NULL)"},"stringi::stri_split_lines":{"description":"These functions split each character string in a given vector\ninto text lines.\n","example_call":"stri_split_lines(str, omit_empty = FALSE)"},"stringi::stri_flatten":{"description":"Joins the elements of a character vector into one string.\n","example_call":"stri_flatten(str, collapse = \"\", na_empty = FALSE, omit_empty = FALSE)"},"stringi::stri_extract_last_regex":{"description":"These functions extract all substrings matching a given pattern.\n","example_call":"stri_extract_last_regex(str, pattern, ..., opts_regex = NULL)"},"stringi::stri_subset_coll":{"description":"These functions return or modify a sub-vector where there is a match to\na given pattern. In other words, they\nare roughly equivalent (but faster and easier to use) to a call to\nstr[stri_detect(str, ...)] or\nstr[stri_detect(str, ...)] <- value.\n","example_call":"stri_subset_coll(str, pattern, omit_na = FALSE, negate = FALSE, ...,"},"stringi::stri_subset":{"description":"These functions return or modify a sub-vector where there is a match to\na given pattern. In other words, they\nare roughly equivalent (but faster and easier to use) to a call to\nstr[stri_detect(str, ...)] or\nstr[stri_detect(str, ...)] <- value.\n","example_call":"stri_subset(str, ..., regex, fixed, coll, charclass)"},"stringi::stri_datetime_format":{"description":"These functions convert a given date/time object\nto a character vector, or vice versa.\n","example_call":"stri_datetime_format(time, format = \"uuuu-MM-dd HH:mm:ss\", tz = NULL, locale = NULL)"},"stringi::stri_replace_last_regex":{"description":"These functions replace, with the given replacement string, every/first/last\nsubstring of the input that matches the specified pattern.\n","example_call":"stri_replace_last_regex(str, pattern, replacement, ..., opts_regex = NULL)"},"stringi::stri_split_boundaries":{"description":"This function locates text boundaries\n(like character, word, line, or sentence boundaries)\nand splits strings at the indicated positions.\n","example_call":"stri_split_boundaries(str, n = -1L, tokens_only = FALSE, simplify = FALSE,"},"stringi::stri_extract_all_coll":{"description":"These functions extract all substrings matching a given pattern.\n","example_call":"stri_extract_all_coll(str, pattern, simplify = FALSE, omit_no_match = FALSE,"},"stringi::stri_trans_nfc":{"description":"These functions convert strings to NFC, NFKC, NFD, NFKD, or NFKC_Casefold\nUnicode Normalization Form or check whether strings are normalized.\n","example_call":"stri_trans_nfc(str)"},"stringi::stri_trans_nfd":{"description":"These functions convert strings to NFC, NFKC, NFD, NFKD, or NFKC_Casefold\nUnicode Normalization Form or check whether strings are normalized.\n","example_call":"stri_trans_nfd(str)"},"stringi::stri_cmp_equiv":{"description":"These functions may be used to determine if two strings\nare equal, canonically equivalent (this is performed in a much more clever\nfashion than when testing for equality), or to check whether they are in\na specific lexicographic order.\n","example_call":"stri_cmp_equiv(e1, e2, ..., opts_collator = NULL)"},"stringi::stri_endswith":{"description":"These functions check if a string starts or ends with a match\nto a given pattern. Also, it is possible to check if there is a match\nat a specific position.\n","example_call":"stri_endswith(str, ..., fixed, coll, charclass)"},"stringi::stri_replace_first":{"description":"These functions replace, with the given replacement string, every/first/last\nsubstring of the input that matches the specified pattern.\n","example_call":"stri_replace_first(str, replacement, ..., regex, fixed, coll, charclass)"},"stringi::stri_split_regex":{"description":"These functions split each element in str into substrings.\npattern defines the delimiters that separate the inputs into tokens.\nThe input data between the matches become the fields themselves.\n","example_call":"stri_split_regex(str, pattern, n = -1L, omit_empty = FALSE, tokens_only = FALSE,"},"stringi::stri_locate_last_charclass":{"description":"These functions find the indexes (positions) where\nthere is a match to some pattern.\nThe functions stri_locate_all_* locate all the matches.\nstri_locate_first_* and stri_locate_last_*\ngive the first and the last matches, respectively.\n","example_call":"stri_locate_last_charclass(str, pattern, get_length = FALSE)"},"stringi::stri_count_boundaries":{"description":"These functions determine the number of text boundaries\n(like character, word, line, or sentence boundaries) in a string.\n","example_call":"stri_count_boundaries(str, ..., opts_brkiter = NULL)"},"stringi::stri_endswith_coll":{"description":"These functions check if a string starts or ends with a match\nto a given pattern. Also, it is possible to check if there is a match\nat a specific position.\n","example_call":"stri_endswith_coll(str, pattern, to = -1L, negate = FALSE, ..., opts_collator = NULL)"},"stringi::stri_endswith_charclass":{"description":"These functions check if a string starts or ends with a match\nto a given pattern. Also, it is possible to check if there is a match\nat a specific position.\n","example_call":"stri_endswith_charclass(str, pattern, to = -1L, negate = FALSE)"},"stringi::stri_sprintf":{"description":"stri_sprintf (synonym: stri_string_format)\nis a Unicode-aware replacement for and enhancement of\nthe built-in sprintf function.\nMoreover, stri_printf prints formatted strings.\n","example_call":"stri_sprintf(format, ..., na_string = NA_character_, inf_string = \"Inf\","},"stringi::stri_enc_isutf32le":{"description":"These functions detect whether a given byte stream is\nvalid UTF-16LE, UTF-16BE, UTF-32LE, or UTF-32BE.\n","example_call":"stri_enc_isutf32le(str)"},"stringi::stri_detect_coll":{"description":"These functions determine, for each string in str,\nif there is at least one match to a corresponding pattern.\n","example_call":"stri_detect_coll(str, pattern, negate = FALSE, max_count = -1, ...,"},"stringi::stri_remove_na":{"description":"stri_remove_empty (alias stri_omit_empty)\nremoves all empty strings from a character vector,\nand, if na_empty is TRUE, also gets rid of all missing\nvalues.\n","example_call":"stri_remove_na(x)"},"stringi::stri_locate_all_words":{"description":"These functions locate text boundaries\n(like character, word, line, or sentence boundaries).\nUse stri_locate_all_* to locate all the matches.\nstri_locate_first_* and stri_locate_last_*\ngive the first or the last matches, respectively.\n","example_call":"stri_locate_all_words(str, omit_no_match = FALSE, locale = NULL, get_length = FALSE)"},"stringi::stri_locale_set":{"description":"stri_locale_set changes the default locale for all the functions\nin the stringi package,\ni.e., establishes the meaning of the <U+201C>NULL locale<U+201D> argument\nof locale-sensitive functions.\nstri_locale_get\ngives the current default locale.\n","example_call":"stri_locale_set(locale)"},"stringi::stri_printf":{"description":"stri_sprintf (synonym: stri_string_format)\nis a Unicode-aware replacement for and enhancement of\nthe built-in sprintf function.\nMoreover, stri_printf prints formatted strings.\n","example_call":"stri_printf(format, ..., file = \"\", sep = \"\\n\", append = FALSE,"},"stringi::%stri<=%":{"description":"Relational operators for comparing corresponding strings in\ntwo character vectors, with a typical R look-and-feel.\n","example_call":"%stri<=%(e1, e2)"},"stringi::stri_cmp":{"description":"These functions may be used to determine if two strings\nare equal, canonically equivalent (this is performed in a much more clever\nfashion than when testing for equality), or to check whether they are in\na specific lexicographic order.\n","example_call":"stri_cmp(e1, e2, ..., opts_collator = NULL)"},"stringi::stri_rank":{"description":"This function ranks each string in a character vector according to a\nlocale-dependent lexicographic order.\nIt is a portable replacement for the base xtfrm function.\n","example_call":"stri_rank(str, ..., opts_collator = NULL)"},"stringi::stri_replace_na":{"description":"This function gives a convenient way to replace each missing (NA)\nvalue with a given string.\n","example_call":"stri_replace_na(str, replacement = \"NA\")"},"stringi::%s$%":{"description":"Provides access to stri_sprintf in form of a binary\noperator in a way similar to Python's % overloaded for strings.\n","example_call":"%s$%(e1, e2)"},"stringi::stri_count_coll":{"description":"These functions count the number of occurrences\nof a pattern in a string.\n","example_call":"stri_count_coll(str, pattern, ..., opts_collator = NULL)"},"stringi::stri_count_words":{"description":"These functions determine the number of text boundaries\n(like character, word, line, or sentence boundaries) in a string.\n","example_call":"stri_count_words(str, locale = NULL)"},"stringi::stri_sub_all":{"description":"stri_sub_all extracts multiple substrings from each string.\nIts replacement version substitutes (in-place) multiple substrings with the\ncorresponding replacement strings.\nstri_sub_replace_all (alias stri_sub_all_replace)\nis its forward pipe operator-friendly variant, returning\na copy of the input vector.\n","example_call":"stri_sub_all(str, from = list(1L), to = list(-1L), length, use_matrix = TRUE,"},"stringi::stri_extract_all":{"description":"These functions extract all substrings matching a given pattern.\n","example_call":"stri_extract_all(str, ..., regex, fixed, coll, charclass)"},"stringi::stri_numbytes":{"description":"Counts the number of bytes needed to store\neach string in the computer's memory.\n","example_call":"stri_numbytes(str)"},"stringi::stri_enc_detect":{"description":"This function uses the ICU engine to determine the character set,\nor encoding, of character data in an unknown format.\n","example_call":"stri_enc_detect(str, filter_angle_brackets = FALSE)"},"stringi::stri_datetime_symbols":{"description":"Returns a list of all localizable date-time formatting data,\nincluding month and weekday names, localized AM/PM strings, etc.\n","example_call":"stri_datetime_symbols(locale = NULL, context = \"standalone\", width = \"wide\")"},"stringi::stri_isempty":{"description":"This is the fastest way to find out\nwhether the elements of a character vector are empty strings.\n","example_call":"stri_isempty(str)"},"stringi::stri_replace_first_fixed":{"description":"These functions replace, with the given replacement string, every/first/last\nsubstring of the input that matches the specified pattern.\n","example_call":"stri_replace_first_fixed(str, pattern, replacement, ..., opts_fixed = NULL)"},"stringi::stri_count_fixed":{"description":"These functions count the number of occurrences\nof a pattern in a string.\n","example_call":"stri_count_fixed(str, pattern, ..., opts_fixed = NULL)"},"stringi::stri_rand_lipsum":{"description":"Generates (pseudo)random lorem ipsum text consisting\nof a given number of text paragraphs.\n","example_call":"stri_rand_lipsum(n_paragraphs, start_lipsum = TRUE, nparagraphs = n_paragraphs)"},"stringi::stri_trans_nfkc":{"description":"These functions convert strings to NFC, NFKC, NFD, NFKD, or NFKC_Casefold\nUnicode Normalization Form or check whether strings are normalized.\n","example_call":"stri_trans_nfkc(str)"},"stringi::stri_trans_nfkd":{"description":"These functions convert strings to NFC, NFKC, NFD, NFKD, or NFKC_Casefold\nUnicode Normalization Form or check whether strings are normalized.\n","example_call":"stri_trans_nfkd(str)"},"stringi::stri_replace_all_coll":{"description":"These functions replace, with the given replacement string, every/first/last\nsubstring of the input that matches the specified pattern.\n","example_call":"stri_replace_all_coll(str, pattern, replacement, vectorize_all = TRUE, vectorise_all = vectorize_all,"},"stringi::stri_encode":{"description":"These functions convert strings between encodings.\nThey aim to serve as a more portable and faster replacement\nfor R's own iconv.\n","example_call":"stri_encode(str, from = NULL, to = NULL, to_raw = FALSE)"},"stringi::stri_replace_rstr":{"description":"Converts a gsub-style replacement strings\nto those which can be used in stri_replace.\nIn particular, $ becomes \\$ and \\1 becomes $1.\n","example_call":"stri_replace_rstr(x)"},"stringi::stri_match_last":{"description":"These functions extract substrings in str that\nmatch a given regex pattern. Additionally, they extract matches\nto every capture group, i.e., to all the sub-patterns given\nin round parentheses.\n","example_call":"stri_match_last(str, ..., regex)"},"stringi::%stri<%":{"description":"Relational operators for comparing corresponding strings in\ntwo character vectors, with a typical R look-and-feel.\n","example_call":"%stri<%(e1, e2)"},"stringi::stri_duplicated_any":{"description":"stri_duplicated() determines which strings in a character vector\nare duplicates of other elements.\n","example_call":"stri_duplicated_any(str, from_last = FALSE, fromLast = from_last, ...,"},"stringi::stri_timezone_info":{"description":"Provides some basic information on a given time zone identifier.\n","example_call":"stri_timezone_info(tz = NULL, locale = NULL, display_type = \"long\")"},"stringi::stri_match_first_regex":{"description":"These functions extract substrings in str that\nmatch a given regex pattern. Additionally, they extract matches\nto every capture group, i.e., to all the sub-patterns given\nin round parentheses.\n","example_call":"stri_match_first_regex(str, pattern, cg_missing = NA_character_, ..., opts_regex = NULL)"},"stringi::stri_match_all":{"description":"These functions extract substrings in str that\nmatch a given regex pattern. Additionally, they extract matches\nto every capture group, i.e., to all the sub-patterns given\nin round parentheses.\n","example_call":"stri_match_all(str, ..., regex)"},"stringi::stri_extract_first_charclass":{"description":"These functions extract all substrings matching a given pattern.\n","example_call":"stri_extract_first_charclass(str, pattern)"},"stringi::stri_extract_first_boundaries":{"description":"These functions extract data between text boundaries.\n","example_call":"stri_extract_first_boundaries(str, ..., opts_brkiter = NULL)"},"stringi::stri_enc_tonative":{"description":"Converts character strings with declared encodings\nto the current native encoding.\n","example_call":"stri_enc_tonative(str)"},"stringi::stri_startswith_fixed":{"description":"These functions check if a string starts or ends with a match\nto a given pattern. Also, it is possible to check if there is a match\nat a specific position.\n","example_call":"stri_startswith_fixed(str, pattern, from = 1L, negate = FALSE, ..., opts_fixed = NULL)"},"stringi::stri_pad":{"description":"Add multiple pad characters at the given side(s) of each string\nso that each output string is of total width of at least width.\nThese functions may be used to center or left/right-align each string.\n","example_call":"stri_pad(str, width = floor(0.9 * getOption(\"width\")), side = c(\"left\","},"stringi::%stri*%":{"description":"Duplicates each str(e1) string times(e2) times\nand concatenates the results.\n","example_call":"%stri*%(e1, e2)"},"stringi::stri_dup":{"description":"Duplicates each str(e1) string times(e2) times\nand concatenates the results.\n","example_call":"stri_dup(str, times)"},"stringi::stri_opts_brkiter":{"description":"A convenience function to tune the ICU BreakIterator's behavior\nin some text boundary analysis functions, see\nstringi-search-boundaries.\n","example_call":"stri_opts_brkiter(type, locale, skip_word_none, skip_word_number, skip_word_letter,"},"stringi::stri_omit_empty_na":{"description":"stri_remove_empty (alias stri_omit_empty)\nremoves all empty strings from a character vector,\nand, if na_empty is TRUE, also gets rid of all missing\nvalues.\n","example_call":"stri_omit_empty_na(x)"},"stringi::stri_write_lines":{"description":"Writes a text file is such a way that each element of a given\ncharacter vector becomes a separate text line.\n","example_call":"stri_write_lines(str, con, encoding = \"UTF-8\", sep = ifelse(.Platform$OS.type =="},"stringi::stri_match_last_regex":{"description":"These functions extract substrings in str that\nmatch a given regex pattern. Additionally, they extract matches\nto every capture group, i.e., to all the sub-patterns given\nin round parentheses.\n","example_call":"stri_match_last_regex(str, pattern, cg_missing = NA_character_, ..., opts_regex = NULL)"},"stringi::stri_c_list":{"description":"These functions concatenate all the strings in each character vector\nin a given list.\nstri_c_list and stri_paste_list are aliases for\nstri_join_list.\n","example_call":"stri_c_list(x, sep = \"\", collapse = NULL)"},"stringi::stri_replace_all":{"description":"These functions replace, with the given replacement string, every/first/last\nsubstring of the input that matches the specified pattern.\n","example_call":"stri_replace_all(str, replacement, ..., regex, fixed, coll, charclass)"},"stringi::stri_opts_regex":{"description":"A convenience function to tune the ICU regular expressions\nmatcher's behavior, e.g., in stri_count_regex\nand other stringi-search-regex functions.\n","example_call":"stri_opts_regex(case_insensitive, comments, dotall, dot_all = dotall,"},"stringi::%stri!==%":{"description":"Relational operators for comparing corresponding strings in\ntwo character vectors, with a typical R look-and-feel.\n","example_call":"%stri!==%(e1, e2)"},"stringi::stri_subset_charclass<-":{"description":"These functions return or modify a sub-vector where there is a match to\na given pattern. In other words, they\nare roughly equivalent (but faster and easier to use) to a call to\nstr[stri_detect(str, ...)] or\nstr[stri_detect(str, ...)] <- value.\n","example_call":"stri_subset_charclass<-(str, pattern, negate = FALSE, value)"},"stringi::stri_replace_all_regex":{"description":"These functions replace, with the given replacement string, every/first/last\nsubstring of the input that matches the specified pattern.\n","example_call":"stri_replace_all_regex(str, pattern, replacement, vectorize_all = TRUE, vectorise_all = vectorize_all,"},"stringi::stri_locate_last_boundaries":{"description":"These functions locate text boundaries\n(like character, word, line, or sentence boundaries).\nUse stri_locate_all_* to locate all the matches.\nstri_locate_first_* and stri_locate_last_*\ngive the first or the last matches, respectively.\n","example_call":"stri_locate_last_boundaries(str, get_length = FALSE, ..., opts_brkiter = NULL)"},"stringi::stri_subset_fixed<-":{"description":"These functions return or modify a sub-vector where there is a match to\na given pattern. In other words, they\nare roughly equivalent (but faster and easier to use) to a call to\nstr[stri_detect(str, ...)] or\nstr[stri_detect(str, ...)] <- value.\n","example_call":"stri_subset_fixed<-(str, pattern, negate = FALSE, ..., opts_fixed = NULL,"},"stringi::stri_locate_first_fixed":{"description":"These functions find the indexes (positions) where\nthere is a match to some pattern.\nThe functions stri_locate_all_* locate all the matches.\nstri_locate_first_* and stri_locate_last_*\ngive the first and the last matches, respectively.\n","example_call":"stri_locate_first_fixed(str, pattern, get_length = FALSE, ..., opts_fixed = NULL)"},"stringi::stri_extract_last_words":{"description":"These functions extract data between text boundaries.\n","example_call":"stri_extract_last_words(str, locale = NULL)"},"stringi::stri_replace_last":{"description":"These functions replace, with the given replacement string, every/first/last\nsubstring of the input that matches the specified pattern.\n","example_call":"stri_replace_last(str, replacement, ..., regex, fixed, coll, charclass)"},"stringi::stri_enc_isutf16be":{"description":"These functions detect whether a given byte stream is\nvalid UTF-16LE, UTF-16BE, UTF-32LE, or UTF-32BE.\n","example_call":"stri_enc_isutf16be(str)"},"stringi::stri_extract_first":{"description":"These functions extract all substrings matching a given pattern.\n","example_call":"stri_extract_first(str, ..., regex, fixed, coll, charclass)"},"stringi::stri_rand_shuffle":{"description":"Generates a (pseudo)random permutation of the code points\nin each string.\n","example_call":"stri_rand_shuffle(str)"},"stringi::%stri+%":{"description":"Binary operators for joining (concatenating) two character vectors,\nwith a typical R look-and-feel.\n","example_call":"%stri+%(e1, e2)"},"stringi::stri_extract_last":{"description":"These functions extract all substrings matching a given pattern.\n","example_call":"stri_extract_last(str, ..., regex, fixed, coll, charclass)"},"stringi::stri_locate_last":{"description":"These functions find the indexes (positions) where\nthere is a match to some pattern.\nThe functions stri_locate_all_* locate all the matches.\nstri_locate_first_* and stri_locate_last_*\ngive the first and the last matches, respectively.\n","example_call":"stri_locate_last(str, ..., regex, fixed, coll, charclass)"},"stringi::stri_datetime_now":{"description":"Returns the current date and time.\n","example_call":"stri_datetime_now()"},"stringi::stri_startswith_coll":{"description":"These functions check if a string starts or ends with a match\nto a given pattern. Also, it is possible to check if there is a match\nat a specific position.\n","example_call":"stri_startswith_coll(str, pattern, from = 1L, negate = FALSE, ..., opts_collator = NULL)"},"stringi::stri_trim_both":{"description":"These functions may be used, e.g., to remove unnecessary\nwhite-spaces from strings. Trimming ends at the first or\nstarts at the last pattern match.\n","example_call":"stri_trim_both(str, pattern = \"\\\\P{Wspace}\", negate = FALSE)"},"stringi::%s!==%":{"description":"Relational operators for comparing corresponding strings in\ntwo character vectors, with a typical R look-and-feel.\n","example_call":"%s!==%(e1, e2)"},"stringi::stri_replace":{"description":"These functions replace, with the given replacement string, every/first/last\nsubstring of the input that matches the specified pattern.\n","example_call":"stri_replace(str, replacement, ..., regex, fixed, coll, charclass,"},"stringi::stri_extract_last_fixed":{"description":"These functions extract all substrings matching a given pattern.\n","example_call":"stri_extract_last_fixed(str, pattern, ..., opts_fixed = NULL)"},"stringi::stri_replace_all_charclass":{"description":"These functions replace, with the given replacement string, every/first/last\nsubstring of the input that matches the specified pattern.\n","example_call":"stri_replace_all_charclass(str, pattern, replacement, merge = FALSE, vectorize_all = TRUE,"},"stringi::stri_pad_right":{"description":"Add multiple pad characters at the given side(s) of each string\nso that each output string is of total width of at least width.\nThese functions may be used to center or left/right-align each string.\n","example_call":"stri_pad_right(str, width = floor(0.9 * getOption(\"width\")), pad = \" \","},"stringi::stri_match":{"description":"These functions extract substrings in str that\nmatch a given regex pattern. Additionally, they extract matches\nto every capture group, i.e., to all the sub-patterns given\nin round parentheses.\n","example_call":"stri_match(str, ..., regex, mode = c(\"first\", \"all\", \"last\"))"},"stringi::stri_replace_last_coll":{"description":"These functions replace, with the given replacement string, every/first/last\nsubstring of the input that matches the specified pattern.\n","example_call":"stri_replace_last_coll(str, pattern, replacement, ..., opts_collator = NULL)"},"stringi::stri_opts_collator":{"description":"A convenience function to tune the ICU Collator's behavior,\ne.g., in stri_compare, stri_order,\nstri_unique, stri_duplicated,\nas well as stri_detect_coll\nand other stringi-search-coll functions.\n","example_call":"stri_opts_collator(locale = NULL, strength = 3L, alternate_shifted = FALSE,"},"stringi::stri_cmp_lt":{"description":"These functions may be used to determine if two strings\nare equal, canonically equivalent (this is performed in a much more clever\nfashion than when testing for equality), or to check whether they are in\na specific lexicographic order.\n","example_call":"stri_cmp_lt(e1, e2, ..., opts_collator = NULL)"},"stringi::stri_subset_coll<-":{"description":"These functions return or modify a sub-vector where there is a match to\na given pattern. In other words, they\nare roughly equivalent (but faster and easier to use) to a call to\nstr[stri_detect(str, ...)] or\nstr[stri_detect(str, ...)] <- value.\n","example_call":"stri_subset_coll<-(str, pattern, negate = FALSE, ..., opts_collator = NULL,"},"stringi::stri_enc_info":{"description":"Gets basic information on a character encoding.\n","example_call":"stri_enc_info(enc = NULL)"},"stringi::stri_trans_char":{"description":"Translates Unicode code points in each input string.\n","example_call":"stri_trans_char(str, pattern, replacement)"},"stringi::stri_stats_latex":{"description":"This function gives LaTeX-oriented statistics for a character vector,\ne.g., obtained by loading a text file with the\nreadLines function, where each text line\nis represented by a separate string.\n","example_call":"stri_stats_latex(str)"},"stringi::stri_trim_left":{"description":"These functions may be used, e.g., to remove unnecessary\nwhite-spaces from strings. Trimming ends at the first or\nstarts at the last pattern match.\n","example_call":"stri_trim_left(str, pattern = \"\\\\P{Wspace}\", negate = FALSE)"},"stringi::stri_replace_all_fixed":{"description":"These functions replace, with the given replacement string, every/first/last\nsubstring of the input that matches the specified pattern.\n","example_call":"stri_replace_all_fixed(str, pattern, replacement, vectorize_all = TRUE, vectorise_all = vectorize_all,"},"stringi::stri_replace_last_fixed":{"description":"These functions replace, with the given replacement string, every/first/last\nsubstring of the input that matches the specified pattern.\n","example_call":"stri_replace_last_fixed(str, pattern, replacement, ..., opts_fixed = NULL)"},"stringi::stri_join":{"description":"These are the stringi's equivalents of the built-in\npaste function.\nstri_c and stri_paste are aliases for stri_join.\n","example_call":"stri_join(..., sep = \"\", collapse = NULL, ignore_null = FALSE)"},"stringi::stri_enc_toutf32":{"description":"UTF-32 is a 32-bit encoding where each Unicode code point\ncorresponds to exactly one integer value.\nThis function converts a character vector to a list\nof integer vectors so that, e.g.,\nindividual code points may be easily accessed, changed, etc.\n","example_call":"stri_enc_toutf32(str)"},"stringi::stri_cmp_neq":{"description":"These functions may be used to determine if two strings\nare equal, canonically equivalent (this is performed in a much more clever\nfashion than when testing for equality), or to check whether they are in\na specific lexicographic order.\n","example_call":"stri_cmp_neq(e1, e2)"},"stringi::stri_locate_all_regex":{"description":"These functions find the indexes (positions) where\nthere is a match to some pattern.\nThe functions stri_locate_all_* locate all the matches.\nstri_locate_first_* and stri_locate_last_*\ngive the first and the last matches, respectively.\n","example_call":"stri_locate_all_regex(str, pattern, omit_no_match = FALSE, capture_groups = FALSE,"},"stringi::stri_replace_first_charclass":{"description":"These functions replace, with the given replacement string, every/first/last\nsubstring of the input that matches the specified pattern.\n","example_call":"stri_replace_first_charclass(str, pattern, replacement)"},"stringi::stri_enc_toutf8":{"description":"Converts character strings with declared marked encodings\nto UTF-8 strings.\n","example_call":"stri_enc_toutf8(str, is_unknown_8bit = FALSE, validate = FALSE)"},"stringi::stri_locale_get":{"description":"stri_locale_set changes the default locale for all the functions\nin the stringi package,\ni.e., establishes the meaning of the <U+201C>NULL locale<U+201D> argument\nof locale-sensitive functions.\nstri_locale_get\ngives the current default locale.\n","example_call":"stri_locale_get()"},"stringi::stri_trim":{"description":"These functions may be used, e.g., to remove unnecessary\nwhite-spaces from strings. Trimming ends at the first or\nstarts at the last pattern match.\n","example_call":"stri_trim(str, side = c(\"both\", \"left\", \"right\"), pattern = \"\\\\P{Wspace}\","},"stringi::stri_count_regex":{"description":"These functions count the number of occurrences\nof a pattern in a string.\n","example_call":"stri_count_regex(str, pattern, ..., opts_regex = NULL)"},"stringi::stri_cmp_le":{"description":"These functions may be used to determine if two strings\nare equal, canonically equivalent (this is performed in a much more clever\nfashion than when testing for equality), or to check whether they are in\na specific lexicographic order.\n","example_call":"stri_cmp_le(e1, e2, ..., opts_collator = NULL)"},"stringi::stri_timezone_set":{"description":"stri_timezone_set changes the current default time zone for all functions\nin the stringi package, i.e., establishes the meaning of the\n<U+201C>NULL time zone<U+201D> argument to date/time processing functions.\n","example_call":"stri_timezone_set(tz)"},"stringi::stri_count_charclass":{"description":"These functions count the number of occurrences\nof a pattern in a string.\n","example_call":"stri_count_charclass(str, pattern)"},"stringi::stri_pad_both":{"description":"Add multiple pad characters at the given side(s) of each string\nso that each output string is of total width of at least width.\nThese functions may be used to center or left/right-align each string.\n","example_call":"stri_pad_both(str, width = floor(0.9 * getOption(\"width\")), pad = \" \","},"stringi::stri_paste_list":{"description":"These functions concatenate all the strings in each character vector\nin a given list.\nstri_c_list and stri_paste_list are aliases for\nstri_join_list.\n","example_call":"stri_paste_list(x, sep = \"\", collapse = NULL)"},"stringi::stri_sub_all_replace":{"description":"stri_sub_all extracts multiple substrings from each string.\nIts replacement version substitutes (in-place) multiple substrings with the\ncorresponding replacement strings.\nstri_sub_replace_all (alias stri_sub_all_replace)\nis its forward pipe operator-friendly variant, returning\na copy of the input vector.\n","example_call":"stri_sub_all_replace(..., replacement, value = replacement)"},"stringi::stri_datetime_create":{"description":"Constructs date-time objects from numeric representations.\n","example_call":"stri_datetime_create(year = NULL, month = NULL, day = NULL, hour = 0L, minute = 0L,"},"stringi::stri_extract_first_coll":{"description":"These functions extract all substrings matching a given pattern.\n","example_call":"stri_extract_first_coll(str, pattern, ..., opts_collator = NULL)"},"stringi::stri_read_raw":{"description":"Reads a text file as-is, with no conversion or text line splitting.\n","example_call":"stri_read_raw(con, fname = con)"},"stringi::stri_enc_mark":{"description":"Reads declared encodings for each string in a character vector\nas seen by stringi.\n","example_call":"stri_enc_mark(str)"},"stringi::stri_timezone_get":{"description":"stri_timezone_set changes the current default time zone for all functions\nin the stringi package, i.e., establishes the meaning of the\n<U+201C>NULL time zone<U+201D> argument to date/time processing functions.\n","example_call":"stri_timezone_get()"},"stringi::stri_datetime_fstr":{"description":"This function converts strptime or\nstrftime-style\nformat strings to ICU format strings that may be used\nin stri_datetime_parse and stri_datetime_format\nfunctions.\n","example_call":"stri_datetime_fstr(x, ignore_special = TRUE)"},"stringi::stri_locate_last_words":{"description":"These functions locate text boundaries\n(like character, word, line, or sentence boundaries).\nUse stri_locate_all_* to locate all the matches.\nstri_locate_first_* and stri_locate_last_*\ngive the first or the last matches, respectively.\n","example_call":"stri_locate_last_words(str, locale = NULL, get_length = FALSE)"},"stringi::stri_match_first":{"description":"These functions extract substrings in str that\nmatch a given regex pattern. Additionally, they extract matches\nto every capture group, i.e., to all the sub-patterns given\nin round parentheses.\n","example_call":"stri_match_first(str, ..., regex)"},"stringi::stri_cmp_nequiv":{"description":"These functions may be used to determine if two strings\nare equal, canonically equivalent (this is performed in a much more clever\nfashion than when testing for equality), or to check whether they are in\na specific lexicographic order.\n","example_call":"stri_cmp_nequiv(e1, e2, ..., opts_collator = NULL)"},"stringi::stri_extract_all_charclass":{"description":"These functions extract all substrings matching a given pattern.\n","example_call":"stri_extract_all_charclass(str, pattern, merge = TRUE, simplify = FALSE, omit_no_match = FALSE)"},"stringi::stri_list2matrix":{"description":"This function converts a given list of atomic vectors to\na character matrix.\n","example_call":"stri_list2matrix(x, byrow = FALSE, fill = NA_character_, n_min = 0,"},"stringi::stri_startswith_charclass":{"description":"These functions check if a string starts or ends with a match\nto a given pattern. Also, it is possible to check if there is a match\nat a specific position.\n","example_call":"stri_startswith_charclass(str, pattern, from = 1L, negate = FALSE)"},"stringi::stri_remove_empty_na":{"description":"stri_remove_empty (alias stri_omit_empty)\nremoves all empty strings from a character vector,\nand, if na_empty is TRUE, also gets rid of all missing\nvalues.\n","example_call":"stri_remove_empty_na(x)"},"stringi::stri_subset_charclass":{"description":"These functions return or modify a sub-vector where there is a match to\na given pattern. In other words, they\nare roughly equivalent (but faster and easier to use) to a call to\nstr[stri_detect(str, ...)] or\nstr[stri_detect(str, ...)] <- value.\n","example_call":"stri_subset_charclass(str, pattern, omit_na = FALSE, negate = FALSE)"},"stringi::stri_locate_first_regex":{"description":"These functions find the indexes (positions) where\nthere is a match to some pattern.\nThe functions stri_locate_all_* locate all the matches.\nstri_locate_first_* and stri_locate_last_*\ngive the first and the last matches, respectively.\n","example_call":"stri_locate_first_regex(str, pattern, capture_groups = FALSE, get_length = FALSE,"},"stringi::stri_remove_empty":{"description":"stri_remove_empty (alias stri_omit_empty)\nremoves all empty strings from a character vector,\nand, if na_empty is TRUE, also gets rid of all missing\nvalues.\n","example_call":"stri_remove_empty(x, na_empty = FALSE)"},"stringi::%stri===%":{"description":"Relational operators for comparing corresponding strings in\ntwo character vectors, with a typical R look-and-feel.\n","example_call":"%stri===%(e1, e2)"},"stringi::stri_trans_general":{"description":"ICU General transforms provide different ways\nfor processing Unicode text. They are useful in handling a variety\nof different tasks, including:\n","example_call":"stri_trans_general(str, id, rules = FALSE, forward = TRUE)"},"stringi::stri_stats_general":{"description":"This function gives general statistics for a character vector,\ne.g., obtained by loading a text file with the\nreadLines or stri_read_lines function,\nwhere each text line' is represented by a separate string.\n","example_call":"stri_stats_general(str)"},"stringi::stri_locate_all":{"description":"These functions find the indexes (positions) where\nthere is a match to some pattern.\nThe functions stri_locate_all_* locate all the matches.\nstri_locate_first_* and stri_locate_last_*\ngive the first and the last matches, respectively.\n","example_call":"stri_locate_all(str, ..., regex, fixed, coll, charclass)"},"stringi::%s*%":{"description":"Duplicates each str(e1) string times(e2) times\nand concatenates the results.\n","example_call":"%s*%(e1, e2)"},"stringi::stri_enc_set":{"description":"stri_enc_set sets the encoding used to re-encode strings\ninternally (i.e., by R) declared to be in native encoding,\nsee stringi-encoding and stri_enc_mark.\nstri_enc_get returns the currently used default encoding.\n","example_call":"stri_enc_set(enc)"},"stringi::stri_cmp_gt":{"description":"These functions may be used to determine if two strings\nare equal, canonically equivalent (this is performed in a much more clever\nfashion than when testing for equality), or to check whether they are in\na specific lexicographic order.\n","example_call":"stri_cmp_gt(e1, e2, ..., opts_collator = NULL)"},"stringi::stri_detect_charclass":{"description":"These functions determine, for each string in str,\nif there is at least one match to a corresponding pattern.\n","example_call":"stri_detect_charclass(str, pattern, negate = FALSE, max_count = -1)"},"stringi::stri_split":{"description":"These functions split each element in str into substrings.\npattern defines the delimiters that separate the inputs into tokens.\nThe input data between the matches become the fields themselves.\n","example_call":"stri_split(str, ..., regex, fixed, coll, charclass)"},"stringi::stri_compare":{"description":"These functions may be used to determine if two strings\nare equal, canonically equivalent (this is performed in a much more clever\nfashion than when testing for equality), or to check whether they are in\na specific lexicographic order.\n","example_call":"stri_compare(e1, e2, ..., opts_collator = NULL)"},"stringi::stri_extract_all_boundaries":{"description":"These functions extract data between text boundaries.\n","example_call":"stri_extract_all_boundaries(str, simplify = FALSE, omit_no_match = FALSE, ...,"},"stringi::stri_unescape_unicode":{"description":"Un-escapes all known escape sequences.\n","example_call":"stri_unescape_unicode(str)"},"stringi::stri_locate":{"description":"These functions find the indexes (positions) where\nthere is a match to some pattern.\nThe functions stri_locate_all_* locate all the matches.\nstri_locate_first_* and stri_locate_last_*\ngive the first and the last matches, respectively.\n","example_call":"stri_locate(str, ..., regex, fixed, coll, charclass, mode = c(\"first\","},"stringi::stri_enc_get":{"description":"stri_enc_set sets the encoding used to re-encode strings\ninternally (i.e., by R) declared to be in native encoding,\nsee stringi-encoding and stri_enc_mark.\nstri_enc_get returns the currently used default encoding.\n","example_call":"stri_enc_get()"},"stringi::stri_omit_empty":{"description":"stri_remove_empty (alias stri_omit_empty)\nremoves all empty strings from a character vector,\nand, if na_empty is TRUE, also gets rid of all missing\nvalues.\n","example_call":"stri_omit_empty(x, na_empty = FALSE)"},"stringi::stri_enc_isutf32be":{"description":"These functions detect whether a given byte stream is\nvalid UTF-16LE, UTF-16BE, UTF-32LE, or UTF-32BE.\n","example_call":"stri_enc_isutf32be(str)"},"stringi::stri_timezone_list":{"description":"Returns a list of available time zone identifiers.\n","example_call":"stri_timezone_list(region = NA_character_, offset = NA_integer_)"},"stringi::%s===%":{"description":"Relational operators for comparing corresponding strings in\ntwo character vectors, with a typical R look-and-feel.\n","example_call":"%s===%(e1, e2)"},"stringi::stri_extract":{"description":"These functions extract all substrings matching a given pattern.\n","example_call":"stri_extract(str, ..., regex, fixed, coll, charclass, mode = c(\"first\","},"stringi::%stri$%":{"description":"Provides access to stri_sprintf in form of a binary\noperator in a way similar to Python's % overloaded for strings.\n","example_call":"%stri$%(e1, e2)"},"stringi::stri_wrap":{"description":"This function breaks text paragraphs into lines,\nof total width (if it is possible) at most given width.\n","example_call":"stri_wrap(str, width = floor(0.9 * getOption(\"width\")), cost_exponent = 2,"},"stringi::stri_split_charclass":{"description":"These functions split each element in str into substrings.\npattern defines the delimiters that separate the inputs into tokens.\nThe input data between the matches become the fields themselves.\n","example_call":"stri_split_charclass(str, pattern, n = -1L, omit_empty = FALSE, tokens_only = FALSE,"},"stringi::stri_enc_detect2":{"description":"This function tries to detect character encoding\nin case the language of text is known.\n","example_call":"stri_enc_detect2(str, locale = NULL)"},"stringi::%stri==%":{"description":"Relational operators for comparing corresponding strings in\ntwo character vectors, with a typical R look-and-feel.\n","example_call":"%stri==%(e1, e2)"},"stringi::stri_locate_last_fixed":{"description":"These functions find the indexes (positions) where\nthere is a match to some pattern.\nThe functions stri_locate_all_* locate all the matches.\nstri_locate_first_* and stri_locate_last_*\ngive the first and the last matches, respectively.\n","example_call":"stri_locate_last_fixed(str, pattern, get_length = FALSE, ..., opts_fixed = NULL)"},"stringi::%s+%":{"description":"Binary operators for joining (concatenating) two character vectors,\nwith a typical R look-and-feel.\n","example_call":"%s+%(e1, e2)"},"stringi::%s<=%":{"description":"Relational operators for comparing corresponding strings in\ntwo character vectors, with a typical R look-and-feel.\n","example_call":"%s<=%(e1, e2)"},"stringi::stri_cmp_ge":{"description":"These functions may be used to determine if two strings\nare equal, canonically equivalent (this is performed in a much more clever\nfashion than when testing for equality), or to check whether they are in\na specific lexicographic order.\n","example_call":"stri_cmp_ge(e1, e2, ..., opts_collator = NULL)"},"stringi::stri_sub":{"description":"stri_sub extracts particular substrings at code point-based\nindex ranges provided. Its replacement version allows to substitute\n(in-place) parts of\na string with given replacement strings. stri_sub_replace\nis its forward pipe operator-friendly variant that returns\na copy of the input vector.\n","example_call":"stri_sub(str, from = 1L, to = -1L, length, use_matrix = TRUE,"},"stringi::stri_enc_isutf8":{"description":"The function checks whether given sequences of bytes forms\na proper UTF-8 string.\n","example_call":"stri_enc_isutf8(str)"},"stringi::stri_trans_list":{"description":"Returns a list of available text transform identifiers.\nEach of them may be used in stri_trans_general\ntasks.\n","example_call":"stri_trans_list()"},"stringi::stri_match_all_regex":{"description":"These functions extract substrings in str that\nmatch a given regex pattern. Additionally, they extract matches\nto every capture group, i.e., to all the sub-patterns given\nin round parentheses.\n","example_call":"stri_match_all_regex(str, pattern, omit_no_match = FALSE, cg_missing = NA_character_,"},"stringi::stri_extract_first_regex":{"description":"These functions extract all substrings matching a given pattern.\n","example_call":"stri_extract_first_regex(str, pattern, ..., opts_regex = NULL)"},"stringi::stri_paste":{"description":"These are the stringi's equivalents of the built-in\npaste function.\nstri_c and stri_paste are aliases for stri_join.\n","example_call":"stri_paste(..., sep = \"\", collapse = NULL, ignore_null = FALSE)"},"stringi::stri_count":{"description":"These functions count the number of occurrences\nof a pattern in a string.\n","example_call":"stri_count(str, ..., regex, fixed, coll, charclass)"},"stringi::stri_extract_all_fixed":{"description":"These functions extract all substrings matching a given pattern.\n","example_call":"stri_extract_all_fixed(str, pattern, simplify = FALSE, omit_no_match = FALSE,"},"stringi::stri_coll":{"description":"A convenience function to tune the ICU Collator's behavior,\ne.g., in stri_compare, stri_order,\nstri_unique, stri_duplicated,\nas well as stri_detect_coll\nand other stringi-search-coll functions.\n","example_call":"stri_coll(locale = NULL, strength = 3L, alternate_shifted = FALSE,"},"stringi::%stri>%":{"description":"Relational operators for comparing corresponding strings in\ntwo character vectors, with a typical R look-and-feel.\n","example_call":"%stri>%(e1, e2)"},"stringi::stri_cmp_eq":{"description":"These functions may be used to determine if two strings\nare equal, canonically equivalent (this is performed in a much more clever\nfashion than when testing for equality), or to check whether they are in\na specific lexicographic order.\n","example_call":"stri_cmp_eq(e1, e2)"},"stringi::stri_extract_first_words":{"description":"These functions extract data between text boundaries.\n","example_call":"stri_extract_first_words(str, locale = NULL)"},"stringi::stri_trans_totitle":{"description":"These functions transform strings either to lower case,\nUPPER CASE, or Title Case or perform case folding.\n","example_call":"stri_trans_totitle(str, ..., opts_brkiter = NULL)"},"stringi::stri_enc_isascii":{"description":"The function checks whether all bytes in a string are <= 127.\n","example_call":"stri_enc_isascii(str)"},"stringi::%stri>=%":{"description":"Relational operators for comparing corresponding strings in\ntwo character vectors, with a typical R look-and-feel.\n","example_call":"%stri>=%(e1, e2)"},"stringr::word":{"description":"Extract words from a sentence\n","example_call":"word(string, start = 1L, end = start, sep = fixed(\" \"))"},"stringr::str_which":{"description":"str_which() returns the indices of string where there's at least\none match to pattern. It's a wrapper around\nwhich(str_detect(x, pattern)), and is equivalent to grep(pattern, x).\n","example_call":"str_which(string, pattern, negate = FALSE)"},"stringr::str_subset":{"description":"str_subset() returns all elements of string where there's at least\none match to pattern. It's a wrapper around x[str_detect(x, pattern)],\nand is equivalent to grep(pattern, x, value = TRUE).\n","example_call":"str_subset(string, pattern, negate = FALSE)"},"stringr::str_interp":{"description":"\n","example_call":"str_interp(string, env = parent.frame())"},"stringr::str_glue_data":{"description":"These functions are wrappers around glue::glue() and glue::glue_data(),\nwhich provide a powerful and elegant syntax for interpolating strings\nwith {}.\n","example_call":"str_glue_data(.x, ..., .sep = \"\", .envir = parent.frame(), .na = \"NA\")"},"stringr::str_like":{"description":"str_like() follows the conventions of the SQL LIKE operator:\n","example_call":"str_like(string, pattern, ignore_case = TRUE)"},"stringr::str_remove":{"description":"Remove matches, i.e. replace them with \"\".\n","example_call":"str_remove(string, pattern)"},"stringr::str_to_upper":{"description":"A character vector the same length as string.\n","example_call":"str_to_upper(string, locale = \"en\")"},"stringr::str_to_lower":{"description":"A character vector the same length as string.\n","example_call":"str_to_lower(string, locale = \"en\")"},"stringr::str_sub_all":{"description":"str_sub() extracts or replaces the elements at a single position in each\nstring. str_sub_all() allows you to extract strings at multiple elements\nin every string.\n","example_call":"str_sub_all(string, start = 1L, end = -1L)"},"stringr::str_split":{"description":"This family of functions provides various ways of splitting a string up\ninto pieces. These two functions return a character vector:\n","example_call":"str_split(string, pattern, n = Inf, simplify = FALSE)"},"stringr::str_detect":{"description":"str_detect() returns a logical vector with TRUE for each element of\nstring that matches pattern and FALSE otherwise. It's equivalent to\ngrepl(pattern, string).\n","example_call":"str_detect(string, pattern, negate = FALSE)"},"stringr::str_starts":{"description":"str_starts() and str_ends() are special cases of str_detect() that\nonly match at the beginning or end of a string, respectively.\n","example_call":"str_starts(string, pattern, negate = FALSE)"},"stringr::str_width":{"description":"str_length() returns the number of codepoints in a string. These are\nthe individual elements (which are often, but not always letters) that\ncan be extracted with str_sub().\n","example_call":"str_width(string)"},"stringr::str_extract_all":{"description":"str_extract() extracts the first complete match from each string,\nstr_extract_all()extracts all matches from each string.\n","example_call":"str_extract_all(string, pattern, simplify = FALSE)"},"stringr::regex":{"description":"Modifier functions control the meaning of the pattern argument to\nstringr functions:\n","example_call":"regex(pattern, ignore_case = FALSE, multiline = FALSE, comments = FALSE,"},"stringr::str_glue":{"description":"These functions are wrappers around glue::glue() and glue::glue_data(),\nwhich provide a powerful and elegant syntax for interpolating strings\nwith {}.\n","example_call":"str_glue(..., .sep = \"\", .envir = parent.frame())"},"stringr::str_order":{"description":"A character vector the same length as string.\n","example_call":"str_order(x, decreasing = FALSE, na_last = TRUE, locale = \"en\","},"stringr::str_view":{"description":"str_view() is used to print the underlying representation of a string and\nto see how a pattern matches.\n","example_call":"str_view(string, pattern = NULL, match = TRUE, html = FALSE,"},"stringr::str_rank":{"description":"A character vector the same length as string.\n","example_call":"str_rank(x, locale = \"en\", numeric = FALSE, ...)"},"stringr::str_sort":{"description":"A character vector the same length as string.\n","example_call":"str_sort(x, decreasing = FALSE, na_last = TRUE, locale = \"en\","},"stringr::str_to_sentence":{"description":"A character vector the same length as string.\n","example_call":"str_to_sentence(string, locale = \"en\")"},"stringr::str_replace_na":{"description":"Turn NA into \"NA\"\n","example_call":"str_replace_na(string, replacement = \"NA\")"},"stringr::str_trunc":{"description":"Truncate a string to a fixed of characters, so that\nstr_length(str_trunc(x, n)) is always less than or equal to n.\n","example_call":"str_trunc(string, width, side = c(\"right\", \"left\", \"center\"),"},"stringr::str_unique":{"description":"str_unique() removes duplicated values, with optional control over\nhow duplication is measured.\n","example_call":"str_unique(string, locale = \"en\", ignore_case = FALSE, ...)"},"stringr::str_flatten_comma":{"description":"str_flatten() reduces a character vector to a single string. This is a\nsummary function because regardless of the length of the input x, it\nalways returns a single string.\n","example_call":"str_flatten_comma(string, last = NULL, na.rm = FALSE)"},"stringr::str_view_all":{"description":"str_view() is used to print the underlying representation of a string and\nto see how a pattern matches.\n","example_call":"str_view_all(string, pattern = NULL, match = NA, html = FALSE, use_escapes = FALSE)"},"stringr::str_remove_all":{"description":"Remove matches, i.e. replace them with \"\".\n","example_call":"str_remove_all(string, pattern)"},"stringr::str_pad":{"description":"Pad a string to a fixed width, so that\nstr_length(str_pad(x, n)) is always greater than or equal to n.\n","example_call":"str_pad(string, width, side = c(\"left\", \"right\", \"both\"), pad = \" \","},"stringr::str_split_fixed":{"description":"This family of functions provides various ways of splitting a string up\ninto pieces. These two functions return a character vector:\n","example_call":"str_split_fixed(string, pattern, n)"},"stringr::str_conv":{"description":"This is a convenient way to override the current encoding of a string.\n","example_call":"str_conv(string, encoding)"},"stringr::str_squish":{"description":"str_trim() removes whitespace from start and end of string; str_squish()\nremoves whitespace at the start and end, and replaces all internal whitespace\nwith a single space.\n","example_call":"str_squish(string)"},"stringr::str_length":{"description":"str_length() returns the number of codepoints in a string. These are\nthe individual elements (which are often, but not always letters) that\ncan be extracted with str_sub().\n","example_call":"str_length(string)"},"stringr::str_sub<-":{"description":"str_sub() extracts or replaces the elements at a single position in each\nstring. str_sub_all() allows you to extract strings at multiple elements\nin every string.\n","example_call":"str_sub<-(string, start = 1L, end = -1L, omit_na = FALSE, value)"},"stringr::str_flatten":{"description":"str_flatten() reduces a character vector to a single string. This is a\nsummary function because regardless of the length of the input x, it\nalways returns a single string.\n","example_call":"str_flatten(string, collapse = \"\", last = NULL, na.rm = FALSE)"},"stringr::invert_match":{"description":"Invert a matrix of match locations to match the opposite of what was\npreviously matched.\n","example_call":"invert_match(loc)"},"stringr::str_dup":{"description":"str_dup() duplicates the characters within a string, e.g.\nstr_dup(\"xy\", 3) returns \"xyxyxy\".\n","example_call":"str_dup(string, times)"},"stringr::boundary":{"description":"Modifier functions control the meaning of the pattern argument to\nstringr functions:\n","example_call":"boundary(type = c(\"character\", \"line_break\", \"sentence\", \"word\"),"},"stringr::str_escape":{"description":"This function escapes metacharacter, the characters that have special\nmeaning to the regular expression engine. In most cases you are better\noff using fixed() since it is faster, but str_escape() is useful\nif you are composing user provided strings into a pattern.\n","example_call":"str_escape(string)"},"stringr::str_split_i":{"description":"This family of functions provides various ways of splitting a string up\ninto pieces. These two functions return a character vector:\n","example_call":"str_split_i(string, pattern, i)"},"stringr::str_ends":{"description":"str_starts() and str_ends() are special cases of str_detect() that\nonly match at the beginning or end of a string, respectively.\n","example_call":"str_ends(string, pattern, negate = FALSE)"},"stringr::str_extract":{"description":"str_extract() extracts the first complete match from each string,\nstr_extract_all()extracts all matches from each string.\n","example_call":"str_extract(string, pattern, group = NULL)"},"stringr::str_trim":{"description":"str_trim() removes whitespace from start and end of string; str_squish()\nremoves whitespace at the start and end, and replaces all internal whitespace\nwith a single space.\n","example_call":"str_trim(string, side = c(\"both\", \"left\", \"right\"))"},"stringr::str_to_title":{"description":"A character vector the same length as string.\n","example_call":"str_to_title(string, locale = \"en\")"},"stringr::str_replace":{"description":"str_replace() replaces the first match; str_replace_all() replaces\nall matches.\n","example_call":"str_replace(string, pattern, replacement)"},"stringr::str_locate":{"description":"str_locate() returns the start and end position of the first match;\nstr_locate_all() returns the start and end position of each match.\n","example_call":"str_locate(string, pattern)"},"stringr::str_equal":{"description":"This uses Unicode canonicalisation rules, and optionally ignores case.\n","example_call":"str_equal(x, y, locale = \"en\", ignore_case = FALSE, ...)"},"stringr::str_locate_all":{"description":"str_locate() returns the start and end position of the first match;\nstr_locate_all() returns the start and end position of each match.\n","example_call":"str_locate_all(string, pattern)"},"stringr::str_count":{"description":"Counts the number of times pattern is found within each element\nof string.\n","example_call":"str_count(string, pattern = \"\")"},"stringr::str_replace_all":{"description":"str_replace() replaces the first match; str_replace_all() replaces\nall matches.\n","example_call":"str_replace_all(string, pattern, replacement)"},"stringr::str_match_all":{"description":"Extract any number of matches defined by unnamed, (pattern), and\nnamed, <U+2060>(?<name>pattern)<U+2060> capture groups.\n","example_call":"str_match_all(string, pattern)"},"stringr::str_split_1":{"description":"This family of functions provides various ways of splitting a string up\ninto pieces. These two functions return a character vector:\n","example_call":"str_split_1(string, pattern)"},"stringr::str_sub":{"description":"str_sub() extracts or replaces the elements at a single position in each\nstring. str_sub_all() allows you to extract strings at multiple elements\nin every string.\n","example_call":"str_sub(string, start = 1L, end = -1L)"},"stringr::str_wrap":{"description":"Wrap words into paragraphs, minimizing the \"raggedness\" of the lines\n(i.e. the variation in length line) using the Knuth-Plass algorithm.\n","example_call":"str_wrap(string, width = 80, indent = 0, exdent = 0, whitespace_only = TRUE)"},"stringr::coll":{"description":"Modifier functions control the meaning of the pattern argument to\nstringr functions:\n","example_call":"coll(pattern, ignore_case = FALSE, locale = \"en\", ...)"},"stringr::fixed":{"description":"Modifier functions control the meaning of the pattern argument to\nstringr functions:\n","example_call":"fixed(pattern, ignore_case = FALSE)"},"stringr::str_match":{"description":"Extract any number of matches defined by unnamed, (pattern), and\nnamed, <U+2060>(?<name>pattern)<U+2060> capture groups.\n","example_call":"str_match(string, pattern)"},"stringr::str_c":{"description":"str_c() combines multiple character vectors into a single character\nvector. It's very similar to paste0() but uses tidyverse recycling and\nNA rules.\n","example_call":"str_c(..., sep = \"\", collapse = NULL)"},"testthat::testthat_print":{"description":"Evaluates code in a special context in which all output is captured,\nsimilar to capture.output().\n","example_call":"testthat_print(x)"},"testthat::ListReporter":{"description":"This reporter gathers all results, adding additional information such as\ntest elapsed time, and test filename if available. Very useful for reporting.\n","example_call":"NULL"},"testthat::is.expectation":{"description":"For advanced use only. If you are creating your own expectation, you should\ncall expect() instead. See vignette(\"custom-expectation\") for more\ndetails.\n","example_call":"is.expectation(x)"},"testthat::MinimalReporter":{"description":"The minimal test reporter provides the absolutely minimum amount of\ninformation: whether each expectation has succeeded, failed or experienced\nan error.  If you want to find out what the failures and errors actually\nwere, you'll need to run a more informative test reporter.\n","example_call":"NULL"},"testthat::expect_output":{"description":"Test for output produced by print() or cat(). This is best used for\nvery simple output; for more complex cases use expect_snapshot().\n","example_call":"expect_output(object, regexp = NULL, ..., info = NULL, label = NULL,"},"testthat::expect_no_message":{"description":"These expectations are the opposite of expect_error(),\nexpect_warning(), expect_message(), and expect_condition(). They\nassert the absence of an error, warning, or message, respectively.\n","example_call":"expect_no_message(object, ..., message = NULL, class = NULL)"},"testthat::skip_on_bioc":{"description":"skip_if() and skip_if_not() allow you to skip tests, immediately\nconcluding a test_that() block without executing any further expectations.\nThis allows you to skip a test without failure, if for some reason it\ncan't be run (e.g. it depends on the feature of a specific operating system,\nor it requires a specific version of a package).\n","example_call":"skip_on_bioc()"},"testthat::set_state_inspector":{"description":"One of the most pernicious challenges to debug is when a test runs fine\nin your test suite, but fails when you run it interactively (or similarly,\nit fails randomly when running your tests in parallel). One of the most\ncommon causes of this problem is accidentally changing global state in a\nprevious test (e.g. changing an option, an environment variable, or the\nworking directory). This is hard to debug, because it's very hard to figure\nout which test made the change.\n","example_call":"set_state_inspector(callback)"},"testthat::expect_snapshot":{"description":"Snapshot tests (aka golden tests) are similar to unit tests except that the\nexpected result is stored in a separate file that is managed by testthat.\nSnapshot tests are useful for when the expected value is large, or when\nthe intent of the code is something that can only be verified by a human\n(e.g. this is a useful error message). Learn more in\nvignette(\"snapshotting\").\n","example_call":"expect_snapshot(x, cran = FALSE, error = FALSE, transform = NULL, variant = NULL,"},"testthat::find_test_scripts":{"description":"Find test files\n","example_call":"find_test_scripts(path, filter = NULL, invert = FALSE, ..., full.names = TRUE,"},"testthat::capture_message":{"description":"\n","example_call":"capture_message(code, entrace = FALSE)"},"testthat::StopReporter":{"description":"The default reporter used when expect_that() is run interactively.\nIt responds by stop()ping on failures and doing nothing otherwise. This\nwill ensure that a failing test will raise an error.\n","example_call":"NULL"},"testthat::with_reporter":{"description":"get_reporter() and set_reporter() access and modify the current \"active\"\nreporter. Generally, these functions should not be called directly; instead\nuse with_reporter() to temporarily change, then reset, the active reporter.\n","example_call":"with_reporter(reporter, code, start_end_reporter = TRUE)"},"testthat::TeamcityReporter":{"description":"This reporter will output results in the Teamcity message format.\nFor more information about Teamcity messages, see\nhttp://confluence.jetbrains.com/display/TCD7/Build+Script+Interaction+with+TeamCity\n","example_call":"NULL"},"testthat::expect_gte":{"description":"Does code return a number greater/less than the expected value?\n","example_call":"expect_gte(object, expected, label = NULL, expected.label = NULL)"},"testthat::expect_type":{"description":"See https://adv-r.hadley.nz/oo.html for an overview of R's OO systems, and\nthe vocabulary used here.\n","example_call":"expect_type(object, type)"},"testthat::local_test_directory":{"description":"For expert use only.\n","example_call":"local_test_directory(path, package = NULL, .env = parent.frame())"},"testthat::expect_false":{"description":"These are fall-back expectations that you can use when none of the other\nmore specific expectations apply. The disadvantage is that you may get\na less informative error message.\n","example_call":"expect_false(object, info = NULL, label = NULL)"},"testthat::expect_snapshot_error":{"description":"\n","example_call":"expect_snapshot_error(x, class = \"error\", cran = FALSE, variant = NULL)"},"testthat::testthat_tolerance":{"description":"testthat's default numeric tolerance is 1.4901161 <97> 10-8.\n","example_call":"testthat_tolerance()"},"testthat::set_reporter":{"description":"get_reporter() and set_reporter() access and modify the current \"active\"\nreporter. Generally, these functions should not be called directly; instead\nuse with_reporter() to temporarily change, then reset, the active reporter.\n","example_call":"set_reporter(reporter)"},"testthat::expect_silent":{"description":"Checks that the code produces no output, messages, or warnings.\n","example_call":"expect_silent(object)"},"testthat::show_failure":{"description":"Use these expectations to test other expectations.\nUse show_failure() in examples to print the failure message without\nthrowing an error.\n","example_call":"show_failure(expr)"},"testthat::expect_length":{"description":"Does code return a vector with the specified length?\n","example_call":"expect_length(object, n)"},"testthat::succeed":{"description":"These allow you to manually trigger success or failure. Failure is\nparticularly useful to a pre-condition or mark a test as not yet\nimplemented.\n","example_call":"succeed(message = \"Success has been forced\", info = NULL)"},"testthat::capture_error":{"description":"\n","example_call":"capture_error(code, entrace = FALSE)"},"testthat::skip_on_cran":{"description":"skip_if() and skip_if_not() allow you to skip tests, immediately\nconcluding a test_that() block without executing any further expectations.\nThis allows you to skip a test without failure, if for some reason it\ncan't be run (e.g. it depends on the feature of a specific operating system,\nor it requires a specific version of a package).\n","example_call":"skip_on_cran()"},"testthat::compare_file_binary":{"description":"Whole file snapshot testing is designed for testing objects that don't have\na convenient textual representation, with initial support for images\n(.png, .jpg, .svg), data frames (.csv), and text files\n(.R, .txt, .json, ...).\n","example_call":"compare_file_binary(old, new)"},"testthat::expect_snapshot_output":{"description":"\n","example_call":"expect_snapshot_output(x, cran = FALSE, variant = NULL)"},"testthat::test_file":{"description":"Helper, setup, and teardown files located in the same directory as the\ntest will also be run. See vignette(\"special-files\") for details.\n","example_call":"test_file(path, reporter = default_compact_reporter(), desc = NULL,"},"testthat::skip_on_os":{"description":"skip_if() and skip_if_not() allow you to skip tests, immediately\nconcluding a test_that() block without executing any further expectations.\nThis allows you to skip a test without failure, if for some reason it\ncan't be run (e.g. it depends on the feature of a specific operating system,\nor it requires a specific version of a package).\n","example_call":"skip_on_os(os, arch = NULL)"},"testthat::local_test_context":{"description":"local_test_context() is run automatically by test_that() but you may\nwant to run it yourself if you want to replicate test results interactively.\nIf run inside a function, the effects are automatically reversed when the\nfunction exits; if running in the global environment, use\nwithr::deferred_run() to undo.\n","example_call":"local_test_context(.env = parent.frame())"},"testthat::testthat_example":{"description":"testthat_examples() retrieves path to directory of test files,\ntestthat_example() retrieves path to a single test file.\n","example_call":"testthat_example(filename)"},"testthat::it":{"description":"A simple BDD DSL for writing tests. The language is similar to RSpec for\nRuby or Mocha for JavaScript. BDD tests read like sentences and it should\nthus be easier to understand what the specification of a function/component\nis.\n","example_call":"it(description, code = NULL)"},"testthat::LocationReporter":{"description":"This reporter simply prints the location of every expectation and error.\nThis is useful if you're trying to figure out the source of a segfault,\nor you want to figure out which code triggers a C/C++ breakpoint\n","example_call":"NULL"},"testthat::context":{"description":"\n","example_call":"context(desc)"},"testthat::expect_named":{"description":"You can either check for the presence of names (leaving expected\nblank), specific names (by supplying a vector of names), or absence of\nnames (with NULL).\n","example_call":"expect_named(object, expected, ignore.order = FALSE, ignore.case = FALSE,"},"testthat::context_start_file":{"description":"For use in external reporters\n","example_call":"context_start_file(name)"},"testthat::is_a":{"description":"\n","example_call":"is_a(class)"},"testthat::prints_text":{"description":"\n","example_call":"prints_text(regexp = NULL, ...)"},"testthat::get_reporter":{"description":"get_reporter() and set_reporter() access and modify the current \"active\"\nreporter. Generally, these functions should not be called directly; instead\nuse with_reporter() to temporarily change, then reset, the active reporter.\n","example_call":"get_reporter()"},"testthat::testthat_examples":{"description":"testthat_examples() retrieves path to directory of test files,\ntestthat_example() retrieves path to a single test file.\n","example_call":"testthat_examples()"},"testthat::equals_reference":{"description":"\n","example_call":"equals_reference(file, label = NULL, ...)"},"testthat::local_edition":{"description":"local_edition() allows you to temporarily (within a single test or\na single test file) change the active edition of testthat.\nedition_get() allows you to retrieve the currently active edition.\n","example_call":"local_edition(x, .env = parent.frame())"},"testthat::expect_that":{"description":"\n","example_call":"expect_that(object, condition, info = NULL, label = NULL)"},"testthat::shows_message":{"description":"\n","example_call":"shows_message(regexp = NULL, all = FALSE, ...)"},"testthat::test_example":{"description":"These helper functions make it easier to test the examples in a package.\nEach example counts as one test, and it succeeds if the code runs without\nan error. Generally, this is redundant with R CMD check, and is not\nrecommended in routine practice.\n","example_call":"test_example(path, title = path)"},"testthat::expect_snapshot_file":{"description":"Whole file snapshot testing is designed for testing objects that don't have\na convenient textual representation, with initial support for images\n(.png, .jpg, .svg), data frames (.csv), and text files\n(.R, .txt, .json, ...).\n","example_call":"expect_snapshot_file(path, name = basename(path), binary = lifecycle::deprecated(),"},"testthat::ProgressReporter":{"description":"ProgressReporter is designed for interactive use. Its goal is to\ngive you actionable insights to help you understand the status of your\ncode. This reporter also praises you from time-to-time if all your tests\npass. It's the default reporter for test_dir().\n","example_call":"NULL"},"testthat::is_null":{"description":"\n","example_call":"is_null()"},"testthat::teardown":{"description":"\n","example_call":"teardown(code, env = parent.frame())"},"testthat::new_expectation":{"description":"For advanced use only. If you are creating your own expectation, you should\ncall expect() instead. See vignette(\"custom-expectation\") for more\ndetails.\n","example_call":"new_expectation(type, message, ..., srcref = NULL, trace = NULL, .subclass = NULL)"},"testthat::expect_contains":{"description":"Note that expect_setequal() ignores names, and you will be warned if both\nobject and expected have them.\n","example_call":"expect_contains(object, expected)"},"testthat::expect_equal_to_reference":{"description":"For complex printed output and objects, it is often challenging to describe\nexactly what you expect to see. expect_known_value() and\nexpect_known_output() provide a slightly weaker guarantee, simply\nasserting that the values have not changed since the last time that you ran\nthem.\n","example_call":"expect_equal_to_reference(..., update = FALSE)"},"testthat::set_max_fails":{"description":"This sets the TESTTHAT_MAX_FAILS env var which will affect both the\ncurrent R process and any processes launched from it.\n","example_call":"set_max_fails(n)"},"testthat::expect_condition":{"description":"expect_error(), expect_warning(), expect_message(), and\nexpect_condition() check that code throws an error, warning, message,\nor condition with a message that matches regexp, or a class that inherits\nfrom class. See below for more details.\n","example_call":"expect_condition(object, regexp = NULL, class = NULL, ..., inherit = TRUE,"},"testthat::local_mocked_bindings":{"description":"with_mocked_bindings() and local_mocked_bindings() provide tools for\n\"mocking\", temporarily redefining a function so that it behaves differently\nduring tests. This is helpful for testing functions that depend on external\nstate (i.e. reading a value from a file or a website, or pretending a package\nis or isn't installed).\n","example_call":"local_mocked_bindings(..., .package = NULL, .env = caller_env())"},"testthat::expect_success":{"description":"Use these expectations to test other expectations.\nUse show_failure() in examples to print the failure message without\nthrowing an error.\n","example_call":"expect_success(expr)"},"testthat::snapshot_accept":{"description":null,"example_call":"snapshot_accept(files = NULL, path = \"tests/testthat\")"},"testthat::capture_output_lines":{"description":"Evaluates code in a special context in which all output is captured,\nsimilar to capture.output().\n","example_call":"capture_output_lines(code, print = FALSE, width = 80)"},"testthat::make_expectation":{"description":"This a convenience function to make a expectation that checks that\ninput stays the same.\n","example_call":"make_expectation(x, expectation = \"equals\")"},"testthat::expect_no_warning":{"description":"These expectations are the opposite of expect_error(),\nexpect_warning(), expect_message(), and expect_condition(). They\nassert the absence of an error, warning, or message, respectively.\n","example_call":"expect_no_warning(object, ..., message = NULL, class = NULL)"},"testthat::fail":{"description":"These allow you to manually trigger success or failure. Failure is\nparticularly useful to a pre-condition or mark a test as not yet\nimplemented.\n","example_call":"fail(message = \"Failure has been forced\", info = NULL, trace_env = caller_env())"},"testthat::skip_if":{"description":"skip_if() and skip_if_not() allow you to skip tests, immediately\nconcluding a test_that() block without executing any further expectations.\nThis allows you to skip a test without failure, if for some reason it\ncan't be run (e.g. it depends on the feature of a specific operating system,\nor it requires a specific version of a package).\n","example_call":"skip_if(condition, message = NULL)"},"testthat::skip_if_not":{"description":"skip_if() and skip_if_not() allow you to skip tests, immediately\nconcluding a test_that() block without executing any further expectations.\nThis allows you to skip a test without failure, if for some reason it\ncan't be run (e.g. it depends on the feature of a specific operating system,\nor it requires a specific version of a package).\n","example_call":"skip_if_not(condition, message = NULL)"},"testthat::test_examples":{"description":"These helper functions make it easier to test the examples in a package.\nEach example counts as one test, and it succeeds if the code runs without\nan error. Generally, this is redundant with R CMD check, and is not\nrecommended in routine practice.\n","example_call":"test_examples(path = \"../..\")"},"testthat::throws_error":{"description":"\n","example_call":"throws_error(regexp = NULL, ...)"},"testthat::is_testing":{"description":"These functions help you determine if you code is running in a particular\ntesting context:\n","example_call":"is_testing()"},"testthat::has_names":{"description":"\n","example_call":"has_names(expected, ignore.order = FALSE, ignore.case = FALSE)"},"testthat::expect_cpp_tests_pass":{"description":"Test compiled code in the package package. A call to this function will\nautomatically be generated for you in tests/testthat/test-cpp.R after\ncalling use_catch(); you should not need to manually call this expectation\nyourself.\n","example_call":"expect_cpp_tests_pass(package)"},"testthat::watch":{"description":"This is used to power the auto_test() and\nauto_test_package() functions which are used to rerun tests\nwhenever source code changes.\n","example_call":"watch(path, callback, pattern = NULL, hash = TRUE)"},"testthat::is_parallel":{"description":"These functions help you determine if you code is running in a particular\ntesting context:\n","example_call":"is_parallel()"},"testthat::expect_less_than":{"description":"These functions have been deprecated in favour of the more concise\nexpect_gt() and expect_lt().\n","example_call":"expect_less_than(...)"},"testthat::expect_snapshot_value":{"description":"Captures the result of function, flexibly serializing it into a text\nrepresentation that's stored in a snapshot file. See expect_snapshot()\nfor more details on snapshot testing.\n","example_call":"expect_snapshot_value(x, style = c(\"json\", \"json2\", \"deparse\", \"serialize\"),"},"testthat::expect_equivalent":{"description":"Compares object and expected using all.equal() and\ncheck.attributes = FALSE.\n","example_call":"expect_equivalent(object, expected, ..., info = NULL, label = NULL, expected.label = NULL)"},"testthat::CompactProgressReporter":{"description":"ProgressReporter is designed for interactive use. Its goal is to\ngive you actionable insights to help you understand the status of your\ncode. This reporter also praises you from time-to-time if all your tests\npass. It's the default reporter for test_dir().\n","example_call":"NULL"},"testthat::MultiReporter":{"description":"This reporter is useful to use several reporters at the same time, e.g.\nadding a custom reporter without removing the current one.\n","example_call":"NULL"},"testthat::describe":{"description":"A simple BDD DSL for writing tests. The language is similar to RSpec for\nRuby or Mocha for JavaScript. BDD tests read like sentences and it should\nthus be easier to understand what the specification of a function/component\nis.\n","example_call":"describe(description, code)"},"testthat::skip_on_appveyor":{"description":"\n","example_call":"skip_on_appveyor()"},"testthat::expect_lt":{"description":"Does code return a number greater/less than the expected value?\n","example_call":"expect_lt(object, expected, label = NULL, expected.label = NULL)"},"testthat::expect_known_output":{"description":"For complex printed output and objects, it is often challenging to describe\nexactly what you expect to see. expect_known_value() and\nexpect_known_output() provide a slightly weaker guarantee, simply\nasserting that the values have not changed since the last time that you ran\nthem.\n","example_call":"expect_known_output(object, file, update = TRUE, ..., info = NULL, label = NULL,"},"testthat::gives_warning":{"description":"\n","example_call":"gives_warning(regexp = NULL, all = FALSE, ...)"},"testthat::expect_message":{"description":"expect_error(), expect_warning(), expect_message(), and\nexpect_condition() check that code throws an error, warning, message,\nor condition with a message that matches regexp, or a class that inherits\nfrom class. See below for more details.\n","example_call":"expect_message(object, regexp = NULL, class = NULL, ..., inherit = TRUE,"},"testthat::quasi_label":{"description":"The first argument to every expect_ function can use unquoting to\nconstruct better labels. This makes it easy to create informative labels when\nexpectations are used inside a function or a for loop. quasi_label() wraps\nup the details, returning the expression and label.\n","example_call":"quasi_label(quo, label = NULL, arg = \"quo\")"},"testthat::is_less_than":{"description":"\n","example_call":"is_less_than(expected, label = NULL, ...)"},"testthat::compare":{"description":"\n","example_call":"compare(x, y, ...)"},"testthat::expect_output_file":{"description":"expect_output_file() behaves identically to expect_known_output().\n","example_call":"expect_output_file(object, file, update = TRUE, ..., info = NULL, label = NULL,"},"testthat::auto_test_package":{"description":"Watches a package for changes, rerunning tests as appropriate.\n","example_call":"auto_test_package(pkg = \".\", reporter = default_reporter(), hash = TRUE)"},"testthat::skip_on_travis":{"description":"\n","example_call":"skip_on_travis()"},"testthat::teardown_env":{"description":"This environment has no purpose other than as a handle for withr::defer():\nuse it when you want to run code after all tests have been run.\nTypically, you'll use withr::defer(cleanup(), teardown_env())\nimmediately after you've made a mess in a <U+2060>setup-*.R<U+2060> file.\n","example_call":"teardown_env()"},"testthat::auto_test":{"description":"The idea behind auto_test() is that you just leave it running while\nyou develop your code.  Every time you save a file it will be automatically\ntested and you can easily see if your changes have caused any test\nfailures.\n","example_call":"auto_test(code_path, test_path, reporter = default_reporter(),"},"testthat::expect_error":{"description":"expect_error(), expect_warning(), expect_message(), and\nexpect_condition() check that code throws an error, warning, message,\nor condition with a message that matches regexp, or a class that inherits\nfrom class. See below for more details.\n","example_call":"expect_error(object, regexp = NULL, class = NULL, ..., inherit = TRUE,"},"testthat::expect_invisible":{"description":"Use this to test whether a function returns a visible or invisible\noutput. Typically you'll use this to check that functions called primarily\nfor their side-effects return their data argument invisibly.\n","example_call":"expect_invisible(call, label = NULL)"},"testthat::announce_snapshot_file":{"description":"Whole file snapshot testing is designed for testing objects that don't have\na convenient textual representation, with initial support for images\n(.png, .jpg, .svg), data frames (.csv), and text files\n(.R, .txt, .json, ...).\n","example_call":"announce_snapshot_file(path, name = basename(path))"},"testthat::expect_identical":{"description":"These functions provide two levels of strictness when comparing a\ncomputation to a reference value. expect_identical() is the baseline;\nexpect_equal() relaxes the test to ignore small numeric differences.\n","example_call":"expect_identical(object, expected, info = NULL, label = NULL, expected.label = NULL,"},"testthat::is_equivalent_to":{"description":"\n","example_call":"is_equivalent_to(expected, label = NULL)"},"testthat::default_compact_reporter":{"description":"The defaults are:\n","example_call":"default_compact_reporter()"},"testthat::check_reporter":{"description":"The defaults are:\n","example_call":"check_reporter()"},"testthat::Reporter":{"description":"The job of a reporter is to aggregate the results from files, tests, and\nexpectations and display them in an informative way. Every testtthat function\nthat runs multiple tests provides a reporter argument which you can\nuse to override the default (which is selected by default_reporter()).\n","example_call":"NULL"},"testthat::verify_output":{"description":"\n","example_call":"verify_output(path, code, width = 80, crayon = FALSE, unicode = FALSE,"},"testthat::CheckReporter":{"description":"<U+2060>R CMD check<U+2060> displays only the last 13 lines of the result, so this\nreport is designed to ensure that you see something useful there.\n","example_call":"NULL"},"testthat::capture_warnings":{"description":"\n","example_call":"capture_warnings(code, ignore_deprecation = FALSE)"},"testthat::capture_expectation":{"description":"\n","example_call":"capture_expectation(code, entrace = FALSE)"},"testthat::is_snapshot":{"description":"These functions help you determine if you code is running in a particular\ntesting context:\n","example_call":"is_snapshot()"},"testthat::expect":{"description":"Call expect() when writing your own expectations. See\nvignette(\"custom-expectation\") for details.\n","example_call":"expect(ok, failure_message, info = NULL, srcref = NULL, trace = NULL,"},"testthat::expect_no_error":{"description":"These expectations are the opposite of expect_error(),\nexpect_warning(), expect_message(), and expect_condition(). They\nassert the absence of an error, warning, or message, respectively.\n","example_call":"expect_no_error(object, ..., message = NULL, class = NULL)"},"testthat::use_catch":{"description":"Add the necessary infrastructure to enable C++ unit testing\nin R packages with Catch and\ntestthat.\n","example_call":"use_catch(dir = getwd())"},"testthat::capture_warning":{"description":"\n","example_call":"capture_warning(code, entrace = FALSE)"},"testthat::expect_no_condition":{"description":"These expectations are the opposite of expect_error(),\nexpect_warning(), expect_message(), and expect_condition(). They\nassert the absence of an error, warning, or message, respectively.\n","example_call":"expect_no_condition(object, ..., message = NULL, class = NULL)"},"testthat::source_test_helpers":{"description":"These are used by test_dir() and friends\n","example_call":"source_test_helpers(path = \"tests/testthat\", env = test_env())"},"testthat::expect_more_than":{"description":"These functions have been deprecated in favour of the more concise\nexpect_gt() and expect_lt().\n","example_call":"expect_more_than(...)"},"testthat::skip_if_translated":{"description":"skip_if() and skip_if_not() allow you to skip tests, immediately\nconcluding a test_that() block without executing any further expectations.\nThis allows you to skip a test without failure, if for some reason it\ncan't be run (e.g. it depends on the feature of a specific operating system,\nor it requires a specific version of a package).\n","example_call":"skip_if_translated(msgid = \"'%s' not found\")"},"testthat::expect_null":{"description":"This is a special case because NULL is a singleton so it's possible\ncheck for it either with expect_equal(x, NULL) or expect_type(x, \"NULL\").\n","example_call":"expect_null(object, info = NULL, label = NULL)"},"testthat::with_mock":{"description":"\n","example_call":"with_mock(..., .env = topenv())"},"testthat::expect_true":{"description":"These are fall-back expectations that you can use when none of the other\nmore specific expectations apply. The disadvantage is that you may get\na less informative error message.\n","example_call":"expect_true(object, info = NULL, label = NULL)"},"testthat::takes_less_than":{"description":"This is useful for performance regression testing.\n","example_call":"takes_less_than(amount)"},"testthat::expect_visible":{"description":"Use this to test whether a function returns a visible or invisible\noutput. Typically you'll use this to check that functions called primarily\nfor their side-effects return their data argument invisibly.\n","example_call":"expect_visible(call, label = NULL)"},"testthat::test_check":{"description":"See vignette(\"special-files\") to learn about the various files that\ntestthat works with.\n","example_call":"test_check(package, reporter = check_reporter(), ...)"},"testthat::source_test_teardown":{"description":"These are used by test_dir() and friends\n","example_call":"source_test_teardown(path = \"tests/testthat\", env = test_env())"},"testthat::testing_package":{"description":"These functions help you determine if you code is running in a particular\ntesting context:\n","example_call":"testing_package()"},"testthat::expect_match":{"description":"Does a string match a regular expression?\n","example_call":"expect_match(object, regexp, perl = FALSE, fixed = FALSE, ..., all = TRUE,"},"testthat::source_test_setup":{"description":"These are used by test_dir() and friends\n","example_call":"source_test_setup(path = \"tests/testthat\", env = test_env())"},"testthat::test_env":{"description":"We use a new environment which inherits from globalenv() or a package\nnamespace. In an ideal world, we'd avoid putting the global environment on\nthe search path for tests, but it's not currently possible without losing\nthe ability to load packages in tests.\n","example_call":"test_env(package = NULL)"},"testthat::expectation":{"description":"For advanced use only. If you are creating your own expectation, you should\ncall expect() instead. See vignette(\"custom-expectation\") for more\ndetails.\n","example_call":"expectation(type, message, srcref = NULL, trace = NULL)"},"testthat::edition_get":{"description":"local_edition() allows you to temporarily (within a single test or\na single test file) change the active edition of testthat.\nedition_get() allows you to retrieve the currently active edition.\n","example_call":"edition_get()"},"testthat::test_path":{"description":"Many tests require some external file (e.g. a .csv if you're testing a\ndata import function) but the working directory varies depending on the way\nthat you're running the test (e.g. interactively, with devtools::test(),\nor with <U+2060>R CMD check<U+2060>). test_path() understands these variations and\nautomatically generates a path relative to tests/testthat, regardless of\nwhere that directory might reside relative to the current working directory.\n","example_call":"test_path(...)"},"testthat::expect_mapequal":{"description":"Note that expect_setequal() ignores names, and you will be warned if both\nobject and expected have them.\n","example_call":"expect_mapequal(object, expected)"},"testthat::expect_equal":{"description":"These functions provide two levels of strictness when comparing a\ncomputation to a reference value. expect_identical() is the baseline;\nexpect_equal() relaxes the test to ignore small numeric differences.\n","example_call":"expect_equal(object, expected, ..., tolerance = if (edition_get() >="},"testthat::not":{"description":"This negates an expectation, making it possible to express that you\nwant the opposite of a standard expectation. This function is deprecated\nand will be removed in a future version.\n","example_call":"not(f)"},"testthat::DebugReporter":{"description":"This reporter will call a modified version of recover() on all\nbroken expectations.\n","example_call":"NULL"},"testthat::local_snapshotter":{"description":"Needed if you want to run snapshot tests outside of the usual testthat\nframework For expert use only.\n","example_call":"local_snapshotter(snap_dir = NULL, cleanup = FALSE, fail_on_new = FALSE,"},"testthat::with_mocked_bindings":{"description":"with_mocked_bindings() and local_mocked_bindings() provide tools for\n\"mocking\", temporarily redefining a function so that it behaves differently\nduring tests. This is helpful for testing functions that depend on external\nstate (i.e. reading a value from a file or a website, or pretending a package\nis or isn't installed).\n","example_call":"with_mocked_bindings(code, ..., .package = NULL)"},"testthat::TapReporter":{"description":"This reporter will output results in the Test Anything Protocol (TAP),\na simple text-based interface between testing modules in a test harness.\nFor more information about TAP, see http://testanything.org\n","example_call":"NULL"},"testthat::expect_setequal":{"description":"Note that expect_setequal() ignores names, and you will be warned if both\nobject and expected have them.\n","example_call":"expect_setequal(object, expected)"},"testthat::try_again":{"description":"Try evaluating an expressing multiple times until it succeeds.\n","example_call":"try_again(times, code)"},"testthat::expect_snapshot_warning":{"description":"\n","example_call":"expect_snapshot_warning(x, class = \"warning\", cran = FALSE, variant = NULL)"},"testthat::test_dir":{"description":"This function is the low-level workhorse that powers test_local() and\ntest_package(). Generally, you should not call this function directly.\nIn particular, you are responsible for ensuring that the functions to test\nare available in the test env (e.g. via load_package).\n","example_call":"test_dir(path, filter = NULL, reporter = NULL, env = NULL, ...,"},"testthat::snapshot_review":{"description":null,"example_call":"snapshot_review(files = NULL, path = \"tests/testthat\")"},"testthat::is_more_than":{"description":"\n","example_call":"is_more_than(expected, label = NULL, ...)"},"testthat::expect_in":{"description":"Note that expect_setequal() ignores names, and you will be warned if both\nobject and expected have them.\n","example_call":"expect_in(object, expected)"},"testthat::expect_s3_class":{"description":"See https://adv-r.hadley.nz/oo.html for an overview of R's OO systems, and\nthe vocabulary used here.\n","example_call":"expect_s3_class(object, class, exact = FALSE)"},"testthat::expect_is":{"description":"\n","example_call":"expect_is(object, class, info = NULL, label = NULL)"},"testthat::test_local":{"description":"See vignette(\"special-files\") to learn about the various files that\ntestthat works with.\n","example_call":"test_local(path = \".\", reporter = NULL, ..., load_package = \"source\")"},"testthat::setup":{"description":"\n","example_call":"setup(code, env = parent.frame())"},"testthat::expect_vector":{"description":"expect_vector() is a thin wrapper around vctrs::vec_assert(), converting\nthe results of that function in to the expectations used by testthat. This\nmeans that it used the vctrs of ptype (prototype) and size. See\ndetails in https://vctrs.r-lib.org/articles/type-size.html\n","example_call":"expect_vector(object, ptype = NULL, size = NULL)"},"testthat::is_identical_to":{"description":"\n","example_call":"is_identical_to(expected, label = NULL)"},"testthat::expect_gt":{"description":"Does code return a number greater/less than the expected value?\n","example_call":"expect_gt(object, expected, label = NULL, expected.label = NULL)"},"testthat::is_false":{"description":"\n","example_call":"is_false()"},"testthat::expect_s4_class":{"description":"See https://adv-r.hadley.nz/oo.html for an overview of R's OO systems, and\nthe vocabulary used here.\n","example_call":"expect_s4_class(object, class)"},"testthat::is_true":{"description":"\n","example_call":"is_true()"},"testthat::skip_on_covr":{"description":"skip_if() and skip_if_not() allow you to skip tests, immediately\nconcluding a test_that() block without executing any further expectations.\nThis allows you to skip a test without failure, if for some reason it\ncan't be run (e.g. it depends on the feature of a specific operating system,\nor it requires a specific version of a package).\n","example_call":"skip_on_covr()"},"testthat::source_dir":{"description":"These are used by test_dir() and friends\n","example_call":"source_dir(path, pattern = \"\\\\.[rR]$\", env = test_env(), chdir = TRUE,"},"testthat::compare_file_text":{"description":"Whole file snapshot testing is designed for testing objects that don't have\na convenient textual representation, with initial support for images\n(.png, .jpg, .svg), data frames (.csv), and text files\n(.R, .txt, .json, ...).\n","example_call":"compare_file_text(old, new)"},"testthat::is_informative_error":{"description":"\n","example_call":"is_informative_error(x, ...)"},"testthat::expect_known_value":{"description":"For complex printed output and objects, it is often challenging to describe\nexactly what you expect to see. expect_known_value() and\nexpect_known_output() provide a slightly weaker guarantee, simply\nasserting that the values have not changed since the last time that you ran\nthem.\n","example_call":"expect_known_value(object, file, update = TRUE, ..., info = NULL, label = NULL,"},"testthat::capture_messages":{"description":"\n","example_call":"capture_messages(code)"},"testthat::run_cpp_tests":{"description":"Test compiled code in the package package. A call to this function will\nautomatically be generated for you in tests/testthat/test-cpp.R after\ncalling use_catch(); you should not need to manually call this expectation\nyourself.\n","example_call":"run_cpp_tests(package)"},"testthat::expect_failure":{"description":"Use these expectations to test other expectations.\nUse show_failure() in examples to print the failure message without\nthrowing an error.\n","example_call":"expect_failure(expr, message = NULL, ...)"},"testthat::capture_output":{"description":"Evaluates code in a special context in which all output is captured,\nsimilar to capture.output().\n","example_call":"capture_output(code, print = FALSE, width = 80)"},"testthat::expect_warning":{"description":"expect_error(), expect_warning(), expect_message(), and\nexpect_condition() check that code throws an error, warning, message,\nor condition with a message that matches regexp, or a class that inherits\nfrom class. See below for more details.\n","example_call":"expect_warning(object, regexp = NULL, class = NULL, ..., inherit = TRUE,"},"testthat::test_rd":{"description":"These helper functions make it easier to test the examples in a package.\nEach example counts as one test, and it succeeds if the code runs without\nan error. Generally, this is redundant with R CMD check, and is not\nrecommended in routine practice.\n","example_call":"test_rd(rd, title = attr(rd, \"Rdfile\"))"},"testthat::default_parallel_reporter":{"description":"The defaults are:\n","example_call":"default_parallel_reporter()"},"testthat::expect_no_match":{"description":"Does a string match a regular expression?\n","example_call":"expect_no_match(object, regexp, perl = FALSE, fixed = FALSE, ..., all = TRUE,"},"testthat::ParallelProgressReporter":{"description":"ProgressReporter is designed for interactive use. Its goal is to\ngive you actionable insights to help you understand the status of your\ncode. This reporter also praises you from time-to-time if all your tests\npass. It's the default reporter for test_dir().\n","example_call":"NULL"},"testthat::skip_on_ci":{"description":"skip_if() and skip_if_not() allow you to skip tests, immediately\nconcluding a test_that() block without executing any further expectations.\nThis allows you to skip a test without failure, if for some reason it\ncan't be run (e.g. it depends on the feature of a specific operating system,\nor it requires a specific version of a package).\n","example_call":"skip_on_ci()"},"testthat::local_reproducible_output":{"description":"local_test_context() is run automatically by test_that() but you may\nwant to run it yourself if you want to replicate test results interactively.\nIf run inside a function, the effects are automatically reversed when the\nfunction exits; if running in the global environment, use\nwithr::deferred_run() to undo.\n","example_call":"local_reproducible_output(width = 80, crayon = FALSE, unicode = FALSE, rstudio = FALSE,"},"testthat::JunitReporter":{"description":"This reporter includes detailed results about each test and summaries,\nwritten to a file (or stdout) in jUnit XML format. This can be read by\nthe Jenkins Continuous Integration System to report on a dashboard etc.\nRequires the xml2 package.\n","example_call":"NULL"},"testthat::test_that":{"description":"A test encapsulates a series of expectations about a small, self-contained\nunit of functionality. Each test contains one or more expectations, such as\nexpect_equal() or expect_error(), and lives in a <U+2060>test/testhat/test*<U+2060>\nfile, often together with other tests that relate to the same function or set\nof functions.\n","example_call":"test_that(desc, code)"},"testthat::SummaryReporter":{"description":"This is a reporter designed for interactive usage: it lets you know which\ntests have run successfully and as well as fully reporting information about\nfailures and errors.\n","example_call":"NULL"},"testthat::test_package":{"description":"See vignette(\"special-files\") to learn about the various files that\ntestthat works with.\n","example_call":"test_package(package, reporter = check_reporter(), ...)"},"testthat::default_reporter":{"description":"The defaults are:\n","example_call":"default_reporter()"},"testthat::equals":{"description":"\n","example_call":"equals(expected, label = NULL, ...)"},"testthat::capture_condition":{"description":"\n","example_call":"capture_condition(code, entrace = FALSE)"},"testthat::source_file":{"description":"These are used by test_dir() and friends\n","example_call":"source_file(path, env = test_env(), chdir = TRUE, desc = NULL,"},"testthat::local_mock":{"description":"\n","example_call":"local_mock(..., .env = topenv(), .local_envir = parent.frame())"},"testthat::skip_if_offline":{"description":"skip_if() and skip_if_not() allow you to skip tests, immediately\nconcluding a test_that() block without executing any further expectations.\nThis allows you to skip a test without failure, if for some reason it\ncan't be run (e.g. it depends on the feature of a specific operating system,\nor it requires a specific version of a package).\n","example_call":"skip_if_offline(host = \"captive.apple.com\")"},"testthat::exp_signal":{"description":"For advanced use only. If you are creating your own expectation, you should\ncall expect() instead. See vignette(\"custom-expectation\") for more\ndetails.\n","example_call":"exp_signal(exp)"},"testthat::RStudioReporter":{"description":"This reporter is designed for output to RStudio. It produces results in\nany easily parsed form.\n","example_call":"NULL"},"testthat::expect_reference":{"description":"expect_reference() compares the underlying memory addresses of\ntwo symbols. It is for expert use only.\n","example_call":"expect_reference(object, expected, info = NULL, label = NULL, expected.label = NULL)"},"testthat::expect_known_hash":{"description":"For complex printed output and objects, it is often challenging to describe\nexactly what you expect to see. expect_known_value() and\nexpect_known_output() provide a slightly weaker guarantee, simply\nasserting that the values have not changed since the last time that you ran\nthem.\n","example_call":"expect_known_hash(object, hash = NULL)"},"testthat::expect_lte":{"description":"Does code return a number greater/less than the expected value?\n","example_call":"expect_lte(object, expected, label = NULL, expected.label = NULL)"},"testthat::FailReporter":{"description":"This reporter will simply throw an error if any of the tests failed. It is\nbest combined with another reporter, such as the\nSummaryReporter.\n","example_call":"NULL"},"testthat::skip_if_not_installed":{"description":"skip_if() and skip_if_not() allow you to skip tests, immediately\nconcluding a test_that() block without executing any further expectations.\nThis allows you to skip a test without failure, if for some reason it\ncan't be run (e.g. it depends on the feature of a specific operating system,\nor it requires a specific version of a package).\n","example_call":"skip_if_not_installed(pkg, minimum_version = NULL)"},"testthat::skip":{"description":"skip_if() and skip_if_not() allow you to skip tests, immediately\nconcluding a test_that() block without executing any further expectations.\nThis allows you to skip a test without failure, if for some reason it\ncan't be run (e.g. it depends on the feature of a specific operating system,\nor it requires a specific version of a package).\n","example_call":"skip(message = \"Skipping\")"},"testthat::matches":{"description":"\n","example_call":"matches(regexp, all = TRUE, ...)"},"testthat::SilentReporter":{"description":"This reporter quietly runs all tests, simply gathering all expectations.\nThis is helpful for programmatically inspecting errors after a test run.\nYou can retrieve the results with the expectations()\nmethod.\n","example_call":"NULL"},"testthat::evaluate_promise":{"description":"Evaluate a promise, capturing all types of output.\n","example_call":"evaluate_promise(code, print = FALSE)"},"testthat::is_checking":{"description":"These functions help you determine if you code is running in a particular\ntesting context:\n","example_call":"is_checking()"},"tibble::new_tibble":{"description":"Creates or validates a subclass of a tibble.\nThese function is mostly useful for package authors that implement subclasses\nof a tibble, like sf or tsibble.\n","example_call":"new_tibble(x, ..., nrow = NULL, class = NULL, subclass = NULL)"},"tibble::set_char_opts":{"description":"\n","example_call":"set_char_opts(x, ..., min_chars = NULL, shorten = c(\"back\", \"front\","},"tibble::tidy_names":{"description":"\n","example_call":"tidy_names(name, syntactic = FALSE, quiet = FALSE)"},"tibble::as_tibble_row":{"description":"as_tibble() turns an existing object, such as a data frame or\nmatrix, into a so-called tibble, a data frame with class tbl_df. This is\nin contrast with tibble(), which builds a tibble from individual columns.\nas_tibble() is to tibble() as base::as.data.frame() is to\nbase::data.frame().\n","example_call":"as_tibble_row(x, .name_repair = c(\"check_unique\", \"unique\", \"universal\","},"tibble::char":{"description":"\n","example_call":"char(x, ..., min_chars = NULL, shorten = c(\"back\", \"front\","},"tibble::as_data_frame":{"description":"\n","example_call":"as_data_frame(x, ...)"},"tibble::as_tibble_col":{"description":"as_tibble() turns an existing object, such as a data frame or\nmatrix, into a so-called tibble, a data frame with class tbl_df. This is\nin contrast with tibble(), which builds a tibble from individual columns.\nas_tibble() is to tibble() as base::as.data.frame() is to\nbase::data.frame().\n","example_call":"as_tibble_col(x, column_name = \"value\")"},"tibble::rownames_to_column":{"description":"While a tibble can have row names (e.g., when converting from a regular data\nframe), they are removed when subsetting with the [ operator.\nA warning will be raised when attempting to assign non-NULL row names\nto a tibble.\nGenerally, it is best to avoid row names, because they are basically a\ncharacter column with different semantics than every other column.\n","example_call":"rownames_to_column(.data, var = \"rowname\")"},"tibble::deframe":{"description":"enframe() converts named atomic vectors or lists to one- or two-column\ndata frames.\nFor a list, the result will be a nested tibble with a column of type list.\nFor unnamed vectors, the natural sequence is used as name column.\n","example_call":"deframe(x)"},"tibble::is.tibble":{"description":"\n","example_call":"is.tibble(x)"},"tibble::data_frame":{"description":"\n","example_call":"data_frame(...)"},"tibble::trunc_mat":{"description":"\nAs of tibble 3.1.0, printing is handled entirely by the pillar package.\nDo not use this function.\nIf you implement a package that extend tibble,\nthe printed output can be customized in various ways.\nSee vignette(\"extending\", package = \"pillar\") for details.\n","example_call":"trunc_mat(x, n = NULL, width = NULL, n_extra = NULL)"},"tibble::add_case":{"description":"This is a convenient way to add one or more rows of data to an existing data\nframe. See tribble() for an easy way to create an complete\ndata frame row-by-row. Use tibble_row() to ensure that the new data\nhas only one row.\n","example_call":"add_case(.data, ..., .before = NULL, .after = NULL)"},"tibble::lst":{"description":"lst() constructs a list, similar to base::list(), but with some of the\nsame features as tibble(). lst() builds components sequentially. When\ndefining a component, you can refer to components created earlier in the\ncall. lst() also generates missing names automatically.\n","example_call":"lst(...)"},"tibble::tibble":{"description":"tibble() constructs a data frame. It is used like base::data.frame(), but\nwith a couple notable differences:\n","example_call":"tibble(..., .rows = NULL, .name_repair = c(\"check_unique\","},"tibble::as.tibble":{"description":"\n","example_call":"as.tibble(x, ...)"},"tibble::data_frame_":{"description":"\n","example_call":"data_frame_(xs)"},"tibble::rowid_to_column":{"description":"While a tibble can have row names (e.g., when converting from a regular data\nframe), they are removed when subsetting with the [ operator.\nA warning will be raised when attempting to assign non-NULL row names\nto a tibble.\nGenerally, it is best to avoid row names, because they are basically a\ncharacter column with different semantics than every other column.\n","example_call":"rowid_to_column(.data, var = \"rowid\")"},"tibble::enframe":{"description":"enframe() converts named atomic vectors or lists to one- or two-column\ndata frames.\nFor a list, the result will be a nested tibble with a column of type list.\nFor unnamed vectors, the natural sequence is used as name column.\n","example_call":"enframe(x, name = \"name\", value = \"value\")"},"tibble::frame_matrix":{"description":"Create matrices laying out the data in rows, similar to\nmatrix(..., byrow = TRUE), with a nicer-to-read syntax.\nThis is useful for small matrices, e.g. covariance matrices, where readability\nis important. The syntax is inspired by tribble().\n","example_call":"frame_matrix(...)"},"tibble::tibble_":{"description":"\n","example_call":"tibble_(xs)"},"tibble::has_rownames":{"description":"While a tibble can have row names (e.g., when converting from a regular data\nframe), they are removed when subsetting with the [ operator.\nA warning will be raised when attempting to assign non-NULL row names\nto a tibble.\nGenerally, it is best to avoid row names, because they are basically a\ncharacter column with different semantics than every other column.\n","example_call":"has_rownames(.data)"},"tibble::remove_rownames":{"description":"While a tibble can have row names (e.g., when converting from a regular data\nframe), they are removed when subsetting with the [ operator.\nA warning will be raised when attempting to assign non-NULL row names\nto a tibble.\nGenerally, it is best to avoid row names, because they are basically a\ncharacter column with different semantics than every other column.\n","example_call":"remove_rownames(.data)"},"tibble::view":{"description":"\n","example_call":"view(x, title = NULL, ..., n = NULL)"},"tibble::lst_":{"description":"\n","example_call":"lst_(xs)"},"tibble::frame_data":{"description":"\n","example_call":"frame_data(...)"},"tibble::tibble_row":{"description":"tibble() constructs a data frame. It is used like base::data.frame(), but\nwith a couple notable differences:\n","example_call":"tibble_row(..., .name_repair = c(\"check_unique\", \"unique\", \"universal\","},"tibble::set_num_opts":{"description":"\n","example_call":"set_num_opts(x, ..., sigfig = NULL, digits = NULL, label = NULL,"},"tibble::validate_tibble":{"description":"Creates or validates a subclass of a tibble.\nThese function is mostly useful for package authors that implement subclasses\nof a tibble, like sf or tsibble.\n","example_call":"validate_tibble(x)"},"tibble::is_tibble":{"description":"This function returns TRUE for tibbles or subclasses thereof,\nand FALSE for all other objects, including regular data frames.\n","example_call":"is_tibble(x)"},"tibble::set_tidy_names":{"description":"\n","example_call":"set_tidy_names(x, syntactic = FALSE, quiet = FALSE)"},"tibble::add_row":{"description":"This is a convenient way to add one or more rows of data to an existing data\nframe. See tribble() for an easy way to create an complete\ndata frame row-by-row. Use tibble_row() to ensure that the new data\nhas only one row.\n","example_call":"add_row(.data, ..., .before = NULL, .after = NULL)"},"tibble::tribble":{"description":"Create tibbles using an easier to read row-by-row layout.\nThis is useful for small tables of data where readability is\nimportant.  Please see tibble-package for a general introduction.\n","example_call":"tribble(...)"},"tibble::as_tibble":{"description":"as_tibble() turns an existing object, such as a data frame or\nmatrix, into a so-called tibble, a data frame with class tbl_df. This is\nin contrast with tibble(), which builds a tibble from individual columns.\nas_tibble() is to tibble() as base::as.data.frame() is to\nbase::data.frame().\n","example_call":"as_tibble(x, ..., .rows = NULL, .name_repair = c(\"check_unique\","},"tibble::column_to_rownames":{"description":"While a tibble can have row names (e.g., when converting from a regular data\nframe), they are removed when subsetting with the [ operator.\nA warning will be raised when attempting to assign non-NULL row names\nto a tibble.\nGenerally, it is best to avoid row names, because they are basically a\ncharacter column with different semantics than every other column.\n","example_call":"column_to_rownames(.data, var = \"rowname\")"},"tibble::add_column":{"description":"This is a convenient way to add one or more columns to an existing data\nframe.\n","example_call":"add_column(.data, ..., .before = NULL, .after = NULL, .name_repair = c(\"check_unique\","},"tibble::repair_names":{"description":"\n","example_call":"repair_names(x, prefix = \"V\", sep = \"\")"},"tibble::num":{"description":"\n","example_call":"num(x, ..., sigfig = NULL, digits = NULL, label = NULL,"},"tidyr::separate_wider_delim":{"description":"\n","example_call":"separate_wider_delim(data, cols, delim, ..., names = NULL, names_sep = NULL,"},"tidyr::unnest_wider":{"description":"unnest_wider() turns each element of a list-column into a column. It\nis most naturally suited to list-columns where every element is named,\nand the names are consistent from row-to-row.\nunnest_wider() preserves the rows of x while modifying the columns.\n","example_call":"unnest_wider(data, col, names_sep = NULL, simplify = TRUE, strict = FALSE,"},"tidyr::pivot_wider":{"description":"pivot_wider() \"widens\" data, increasing the number of columns and\ndecreasing the number of rows. The inverse transformation is\npivot_longer().\n","example_call":"pivot_wider(data, ..., id_cols = NULL, id_expand = FALSE, names_from = name,"},"tidyr::check_pivot_spec":{"description":"check_pivot_spec() is a developer facing helper function for validating\nthe pivot spec used in pivot_longer_spec() or pivot_wider_spec(). It is\nonly useful if you are extending pivot_longer() or pivot_wider() with\nnew S3 methods.\n","example_call":"check_pivot_spec(spec, call = caller_env())"},"tidyr::spread_":{"description":"\n","example_call":"spread_(data, key_col, value_col, fill = NA, convert = FALSE,"},"tidyr::build_longer_spec":{"description":"This is a low level interface to pivoting, inspired by the cdata package,\nthat allows you to describe pivoting with a data frame.\n","example_call":"build_longer_spec(data, cols, ..., names_to = \"name\", values_to = \"value\","},"tidyr::gather":{"description":"\n","example_call":"gather(data, key = \"key\", value = \"value\", ..., na.rm = FALSE,"},"tidyr::nesting_":{"description":"\n","example_call":"nesting_(x)"},"tidyr::expand_":{"description":"\n","example_call":"expand_(data, dots, ...)"},"tidyr::expand_grid":{"description":"expand_grid() is heavily motivated by expand.grid().\nCompared to expand.grid(), it:\n","example_call":"expand_grid(..., .name_repair = \"check_unique\")"},"tidyr::unpack":{"description":"Packing and unpacking preserve the length of a data frame, changing its\nwidth. pack() makes df narrow by collapsing a set of columns into a\nsingle df-column. unpack() makes data wider by expanding df-columns\nback out into individual columns.\n","example_call":"unpack(data, cols, ..., names_sep = NULL, names_repair = \"check_unique\","},"tidyr::chop":{"description":"Chopping and unchopping preserve the width of a data frame, changing its\nlength. chop() makes df shorter by converting rows within each group\ninto list-columns. unchop() makes df longer by expanding list-columns\nso that each element of the list-column gets its own row in the output.\nchop() and unchop() are building blocks for more complicated functions\n(like unnest(), unnest_longer(), and unnest_wider()) and are generally\nmore suitable for programming than interactive data analysis.\n","example_call":"chop(data, cols, ..., error_call = current_env())"},"tidyr::unnest_":{"description":"\n","example_call":"unnest_(...)"},"tidyr::spread":{"description":"\n","example_call":"spread(data, key, value, fill = NA, convert = FALSE, drop = TRUE,"},"tidyr::separate_longer_position":{"description":"\n","example_call":"separate_longer_position(data, cols, width, ..., keep_empty = FALSE)"},"tidyr::unite":{"description":"Convenience function to paste together multiple columns into one.\n","example_call":"unite(data, col, ..., sep = \"_\", remove = TRUE, na.rm = FALSE)"},"tidyr::nest_legacy":{"description":"\n","example_call":"nest_legacy(data, ..., .key = \"data\")"},"tidyr::nest":{"description":"Nesting creates a list-column of data frames; unnesting flattens it back out\ninto regular columns. Nesting is implicitly a summarising operation: you\nget one row for each group defined by the non-nested columns. This is useful\nin conjunction with other summaries that work with whole datasets, most\nnotably models.\n","example_call":"nest(.data, ..., .by = NULL, .key = NULL, .names_sep = NULL)"},"tidyr::full_seq":{"description":"This is useful if you want to fill in missing values that should have\nbeen observed but weren't. For example, full_seq(c(1, 2, 4, 6), 1)\nwill return 1:6.\n","example_call":"full_seq(x, period, tol = 1e-06)"},"tidyr::drop_na":{"description":"drop_na() drops rows where any column specified by ... contains a\nmissing value.\n","example_call":"drop_na(data, ...)"},"tidyr::separate_wider_regex":{"description":"\n","example_call":"separate_wider_regex(data, cols, patterns, ..., names_sep = NULL, names_repair = \"check_unique\","},"tidyr::pivot_longer":{"description":"pivot_longer() \"lengthens\" data, increasing the number of rows and\ndecreasing the number of columns. The inverse transformation is\npivot_wider()\n","example_call":"pivot_longer(data, cols, ..., cols_vary = \"fastest\", names_to = \"name\","},"tidyr::expand":{"description":"expand() generates all combination of variables found in a dataset.\nIt is paired with nesting() and crossing() helpers. crossing()\nis a wrapper around expand_grid() that de-duplicates and sorts its inputs;\nnesting() is a helper that only finds combinations already present in the\ndata.\n","example_call":"expand(data, ..., .name_repair = \"check_unique\")"},"tidyr::extract_":{"description":"\n","example_call":"extract_(data, col, into, regex = \"([[:alnum:]]+)\", remove = TRUE,"},"tidyr::fill_":{"description":"\n","example_call":"fill_(data, fill_cols, .direction = c(\"down\", \"up\"))"},"tidyr::nesting":{"description":"expand() generates all combination of variables found in a dataset.\nIt is paired with nesting() and crossing() helpers. crossing()\nis a wrapper around expand_grid() that de-duplicates and sorts its inputs;\nnesting() is a helper that only finds combinations already present in the\ndata.\n","example_call":"nesting(..., .name_repair = \"check_unique\")"},"tidyr::uncount":{"description":"Performs the opposite operation to dplyr::count(), duplicating rows\naccording to a weighting variable (or expression).\n","example_call":"uncount(data, weights, ..., .remove = TRUE, .id = NULL)"},"tidyr::fill":{"description":"Fills missing values in selected columns using the next or previous entry.\nThis is useful in the common output format where values are not repeated,\nand are only recorded when they change.\n","example_call":"fill(data, ..., .direction = c(\"down\", \"up\", \"downup\", \"updown\"))"},"tidyr::extract_numeric":{"description":"DEPRECATED: please use readr::parse_number() instead.\n","example_call":"extract_numeric(x)"},"tidyr::complete_":{"description":"\n","example_call":"complete_(data, cols, fill = list(), ...)"},"tidyr::build_wider_spec":{"description":"This is a low level interface to pivoting, inspired by the cdata package,\nthat allows you to describe pivoting with a data frame.\n","example_call":"build_wider_spec(data, ..., names_from = name, values_from = value,"},"tidyr::pivot_wider_spec":{"description":"This is a low level interface to pivoting, inspired by the cdata package,\nthat allows you to describe pivoting with a data frame.\n","example_call":"pivot_wider_spec(data, spec, ..., names_repair = \"check_unique\", id_cols = NULL,"},"tidyr::replace_na":{"description":"Replace NAs with specified values\n","example_call":"replace_na(data, replace, ...)"},"tidyr::unchop":{"description":"Chopping and unchopping preserve the width of a data frame, changing its\nlength. chop() makes df shorter by converting rows within each group\ninto list-columns. unchop() makes df longer by expanding list-columns\nso that each element of the list-column gets its own row in the output.\nchop() and unchop() are building blocks for more complicated functions\n(like unnest(), unnest_longer(), and unnest_wider()) and are generally\nmore suitable for programming than interactive data analysis.\n","example_call":"unchop(data, cols, ..., keep_empty = FALSE, ptype = NULL,"},"tidyr::crossing":{"description":"expand() generates all combination of variables found in a dataset.\nIt is paired with nesting() and crossing() helpers. crossing()\nis a wrapper around expand_grid() that de-duplicates and sorts its inputs;\nnesting() is a helper that only finds combinations already present in the\ndata.\n","example_call":"crossing(..., .name_repair = \"check_unique\")"},"tidyr::separate":{"description":"\n","example_call":"separate(data, col, into, sep = \"[^[:alnum:]]+\", remove = TRUE,"},"tidyr::unnest_longer":{"description":"unnest_longer() turns each element of a list-column into a row. It\nis most naturally suited to list-columns where the elements are unnamed\nand the length of each element varies from row to row.\n","example_call":"unnest_longer(data, col, values_to = NULL, indices_to = NULL, indices_include = NULL,"},"tidyr::unite_":{"description":"\n","example_call":"unite_(data, col, from, sep = \"_\", remove = TRUE)"},"tidyr::unnest":{"description":"Unnest expands a list-column containing data frames into rows and columns.\n","example_call":"unnest(data, cols, ..., keep_empty = FALSE, ptype = NULL,"},"tidyr::crossing_":{"description":"\n","example_call":"crossing_(x)"},"tidyr::pivot_longer_spec":{"description":"This is a low level interface to pivoting, inspired by the cdata package,\nthat allows you to describe pivoting with a data frame.\n","example_call":"pivot_longer_spec(data, spec, ..., cols_vary = \"fastest\", names_repair = \"check_unique\","},"tidyr::extract":{"description":"\n","example_call":"extract(data, col, into, regex = \"([[:alnum:]]+)\", remove = TRUE,"},"tidyr::unnest_legacy":{"description":"\n","example_call":"unnest_legacy(data, ..., .drop = NA, .id = NULL, .sep = NULL, .preserve = NULL)"},"tidyr::tidyr_legacy":{"description":"Ensures all column names are unique using the approach found in\ntidyr 0.8.3 and earlier. Only use this function if you want to preserve\nthe naming strategy, otherwise you're better off adopting the new\ntidyverse standard with name_repair = \"universal\"\n","example_call":"tidyr_legacy(nms, prefix = \"V\", sep = \"\")"},"tidyr::separate_rows_":{"description":"\n","example_call":"separate_rows_(data, cols, sep = \"[^[:alnum:].]+\", convert = FALSE)"},"tidyr::separate_rows":{"description":"\n","example_call":"separate_rows(data, ..., sep = \"[^[:alnum:].]+\", convert = FALSE)"},"tidyr::gather_":{"description":"\n","example_call":"gather_(data, key_col, value_col, gather_cols, na.rm = FALSE,"},"tidyr::pack":{"description":"Packing and unpacking preserve the length of a data frame, changing its\nwidth. pack() makes df narrow by collapsing a set of columns into a\nsingle df-column. unpack() makes data wider by expanding df-columns\nback out into individual columns.\n","example_call":"pack(.data, ..., .names_sep = NULL, .error_call = current_env())"},"tidyr::nest_":{"description":"\n","example_call":"nest_(...)"},"tidyr::drop_na_":{"description":"\n","example_call":"drop_na_(data, vars)"},"tidyr::separate_":{"description":"\n","example_call":"separate_(data, col, into, sep = \"[^[:alnum:]]+\", remove = TRUE,"},"tidyr::unnest_auto":{"description":"unnest_auto() picks between unnest_wider() or unnest_longer()\nby inspecting the inner names of the list-col:\n","example_call":"unnest_auto(data, col)"},"tidyr::complete":{"description":"Turns implicit missing values into explicit missing values. This is a wrapper\naround expand(), dplyr::full_join() and replace_na() that's useful for\ncompleting missing combinations of data.\n","example_call":"complete(data, ..., fill = list(), explicit = TRUE)"},"tidyr::hoist":{"description":"hoist() allows you to selectively pull components of a list-column\ninto their own top-level columns, using the same syntax as purrr::pluck().\n","example_call":"hoist(.data, .col, ..., .remove = TRUE, .simplify = TRUE,"},"tidyr::separate_wider_position":{"description":"\n","example_call":"separate_wider_position(data, cols, widths, ..., names_sep = NULL, names_repair = \"check_unique\","},"tidyr::separate_longer_delim":{"description":"\n","example_call":"separate_longer_delim(data, cols, delim, ...)"},"tidyselect::vars_select_helpers":{"description":"This list contains all selection helpers exported in tidyselect. It\nwas useful when you wanted to embed the helpers in your API without\nhaving to track addition of new helpers in tidyselect. However the\nselection helpers are now always embedded in the DSL.\n","example_call":"NULL"},"tidyselect::eval_rename":{"description":"eval_select() and eval_rename() evaluate defused R code\n(i.e. quoted expressions) according to the special rules of the\ntidyselect syntax. They\npower functions like dplyr::select(), dplyr::rename(), or\ntidyr::pivot_longer().\n","example_call":"eval_rename(expr, data, env = caller_env(), ..., strict = TRUE,"},"tidyselect::where":{"description":"This selection helper selects the variables for which a\nfunction returns TRUE.\n","example_call":"where(fn)"},"tidyselect::peek_vars":{"description":"Read the Get started for\nexamples of how to create selection helpers with peek_vars().\n","example_call":"peek_vars(..., fn = NULL)"},"tidyselect::starts_with":{"description":"These selection helpers match variables according\nto a given pattern.\n","example_call":"starts_with(match, ignore.case = TRUE, vars = NULL)"},"tidyselect::peek_data":{"description":"Read the Get started for\nexamples of how to create selection helpers with peek_vars().\n","example_call":"peek_data(..., fn = NULL)"},"tidyselect::poke_vars":{"description":"Variables are made available to select helpers by\nregistering them in a special placeholder.\n","example_call":"poke_vars(vars)"},"tidyselect::vars_pull":{"description":"This function powers dplyr::pull() and various functions of the\ntidyr package. It is similar to vars_select() but returns only\none column name and has slightly different semantics: it allows\nnegative numbers to select columns from the end.\n","example_call":"vars_pull(vars, var = -1, error_call = caller_env(), error_arg = caller_arg(var))"},"tidyselect::vars_rename":{"description":"\n","example_call":"vars_rename(.vars, ..., .strict = TRUE)"},"tidyselect::last_col":{"description":"These functions are selection helpers.\n","example_call":"last_col(offset = 0L, vars = NULL)"},"tidyselect::tidyselect_data_has_predicates":{"description":"If your doesn't support predicate functions, return a 0-row data frame\nfrom tidyselect_data_proxy() and FALSE from\ntidyselect_data_has_predicates().\n","example_call":"tidyselect_data_has_predicates(x)"},"tidyselect::scoped_vars":{"description":"Variables are made available to select helpers by\nregistering them in a special placeholder.\n","example_call":"scoped_vars(vars, frame = caller_env())"},"tidyselect::all_of":{"description":"These selection helpers select variables\ncontained in a character vector. They are especially useful for\nprogramming with selecting functions.\n","example_call":"all_of(x)"},"tidyselect::one_of":{"description":"one_of() is superseded in favour of the more precise any_of() and\nall_of() selectors.\n","example_call":"one_of(..., .vars = NULL)"},"tidyselect::num_range":{"description":"These selection helpers match variables according\nto a given pattern.\n","example_call":"num_range(prefix, range, suffix = \"\", width = NULL, vars = NULL)"},"tidyselect::eval_relocate":{"description":"eval_relocate() is a variant of eval_select() that moves a selection to\na new location. Either before or after can be provided to specify where\nto move the selection to. This powers dplyr::relocate().\n","example_call":"eval_relocate(expr, data, ..., before = NULL, after = NULL, strict = TRUE,"},"tidyselect::contains":{"description":"These selection helpers match variables according\nto a given pattern.\n","example_call":"contains(match, ignore.case = TRUE, vars = NULL)"},"tidyselect::vars_select":{"description":"\n","example_call":"vars_select(.vars, ..., .include = character(), .exclude = character(),"},"tidyselect::ends_with":{"description":"These selection helpers match variables according\nto a given pattern.\n","example_call":"ends_with(match, ignore.case = TRUE, vars = NULL)"},"tidyselect::eval_select":{"description":"eval_select() and eval_rename() evaluate defused R code\n(i.e. quoted expressions) according to the special rules of the\ntidyselect syntax. They\npower functions like dplyr::select(), dplyr::rename(), or\ntidyr::pivot_longer().\n","example_call":"eval_select(expr, data, env = caller_env(), ..., include = NULL,"},"tidyselect::any_of":{"description":"These selection helpers select variables\ncontained in a character vector. They are especially useful for\nprogramming with selecting functions.\n","example_call":"any_of(x, ..., vars = NULL)"},"tidyselect::with_vars":{"description":"Variables are made available to select helpers by\nregistering them in a special placeholder.\n","example_call":"with_vars(vars, expr)"},"tidyselect::tidyselect_data_proxy":{"description":"If your doesn't support predicate functions, return a 0-row data frame\nfrom tidyselect_data_proxy() and FALSE from\ntidyselect_data_has_predicates().\n","example_call":"tidyselect_data_proxy(x)"},"tidyselect::matches":{"description":"These selection helpers match variables according\nto a given pattern.\n","example_call":"matches(match, ignore.case = TRUE, perl = FALSE, vars = NULL)"},"tidyselect::everything":{"description":"These functions are selection helpers.\n","example_call":"everything(vars = NULL)"},"tools::md5sum":{"description":"Compute the 32-byte MD5 hashes of one or more files.\n","example_call":"md5sum(files)"},"tools::parse_Rd":{"description":"This function reads an R documentation (Rd) file and parses it, for\nprocessing by other functions.\n","example_call":"parse_Rd(file, srcfile = NULL, encoding = \"unknown\", verbose = FALSE,"},"tools::SIGKILL":{"description":"pskill sends a signal to a process, usually to terminate it.\n","example_call":"NULL"},"tools::Rd2ex":{"description":"These functions take the output of parse_Rd(), an\nRd object, and produce a help page from it.  As they are mainly\nintended for internal use, their interfaces are subject to change.\n","example_call":"Rd2ex(Rd, out = \"\", defines = .Platform$OS.type, stages = \"render\","},"tools::compactPDF":{"description":"Re-save PDF files (especially vignettes) more compactly.\nSupport function for R CMD build --compact-vignettes.\n","example_call":"compactPDF(paths, qpdf = Sys.which(Sys.getenv(\"R_QPDF\", \"qpdf\")),"},"tools::installFoundDepends":{"description":"The functions or variables listed here are no longer part of R as\nthey are not needed (any more).\n","example_call":"installFoundDepends(depPkgList, ...)"},"tools::startDynamicHelp":{"description":"This function starts the internal help server, so that HTML help pages\nare rendered when requested.\n","example_call":"startDynamicHelp(start = TRUE)"},"tools::checkRdContents":{"description":"Functions for performing various quality control (QC) checks on R code\nand documentation, notably on R packages.\n","example_call":"checkRdContents(package, dir, lib.loc = NULL, chkInternal = NULL)"},"tools::R_user_dir":{"description":"Directories for storing R-related user-specific data, configuration\nand cache files.\n","example_call":"R_user_dir(package, which = c(\"data\", \"config\", \"cache\"))"},"tools::assertError":{"description":"When testing code, it is not sufficient to check that results are correct,\nbut also that errors or warnings are signalled in appropriate\nsituations.  The functions described here provide a convenient\nfacility for doing so.  The three functions check that evaluating the\nsupplied expression produces an error, a warning or one of a\nspecified list of conditions, respectively.  If the assertion fails,\nan error is signalled.\n","example_call":"assertError(expr, classes = \"error\", verbose = FALSE)"},"tools::Rd2txt":{"description":"These functions take the output of parse_Rd(), an\nRd object, and produce a help page from it.  As they are mainly\nintended for internal use, their interfaces are subject to change.\n","example_call":"Rd2txt(Rd, out = \"\", package = \"\", defines = .Platform$OS.type,"},"tools::CRAN_package_db":{"description":"Tools for obtaining information about current packages in the\nCRAN package repository, and their check status.\n","example_call":"CRAN_package_db()"},"tools::SIGTSTP":{"description":"pskill sends a signal to a process, usually to terminate it.\n","example_call":"NULL"},"tools::checkS3methods":{"description":"Functions for performing various quality control (QC) checks on R code\nand documentation, notably on R packages.\n","example_call":"checkS3methods(package, dir, lib.loc = NULL)"},"tools::undoc":{"description":"Finds the objects in a package which are undocumented, in the sense\nthat they are visible to the user (or data objects or S4 classes\nprovided by the package), but no documentation entry exists.\n","example_call":"undoc(package, dir, lib.loc = NULL)"},"tools::find_gs_cmd":{"description":"Find a GhostScript executable in a cross-platform way.\n","example_call":"find_gs_cmd(gs_cmd = \"\")"},"tools::encoded_text_to_latex":{"description":"Translate non-ASCII characters in text to LaTeX escape sequences.\n","example_call":"encoded_text_to_latex(x, encoding = c(\"latin1\", \"latin2\", \"latin9\", \"UTF-8\","},"tools::checkDocFiles":{"description":"Functions for performing various quality control (QC) checks on R code\nand documentation, notably on R packages.\n","example_call":"checkDocFiles(package, dir, lib.loc = NULL, chkInternal = NULL)"},"tools::getDepList":{"description":"The functions or variables listed here are no longer part of R as\nthey are not needed (any more).\n","example_call":"getDepList(depMtrx, instPkgs, recursive = TRUE, local = TRUE,"},"tools::summarize_check_packages_in_dir_timings":{"description":"Check source packages in a given directory, optionally with their\nreverse dependencies.\n","example_call":"summarize_check_packages_in_dir_timings(dir, all = FALSE, full = FALSE)"},"tools::as.Rconcordance":{"description":"The Rd parser records locations in <U+2018>.Rd<U+2019> files from\nwhich components of the file are read.  Output generators\nRd2HTML and Rd2latex can output\ninformation about these locations as <U+201C>concordances<U+201D> between\nsource and output lines.  \n","example_call":"as.Rconcordance(x, ...)"},"tools::Adobe_glyphs":{"description":"charset_to_Unicode is a matrix of Unicode code points with\ncolumns for the common 8-bit encodings.\n","example_call":"NULL"},"tools::pkgDepends":{"description":"The functions or variables listed here are no longer part of R as\nthey are not needed (any more).\n","example_call":"pkgDepends(pkg, recursive = TRUE, local = TRUE, reduce = TRUE,"},"tools::langElts":{"description":"Functions for performing various quality control (QC) checks on R code\nand documentation, notably on R packages.\n","example_call":"NULL"},"tools::HTMLheader":{"description":"This function generates the standard HTML header used on R help pages.\n","example_call":"HTMLheader(title = \"R\", logo = TRUE, up = NULL, top = file.path(Rhome,"},"tools::package_native_routine_registration_skeleton":{"description":"Write a skeleton for adding native routine registration to a package.\n","example_call":"package_native_routine_registration_skeleton(dir, con = stdout(), align = TRUE, character_only = TRUE,"},"tools::parseLatex":{"description":"The parseLatex function parses LaTeX source, producing a\nstructured object; deparseLatex reverses the process.  The\nlatexToUtf8 function takes a LaTeX object, and processes a number\nof different macros to convert them into the corresponding UTF-8\ncharacters.\n","example_call":"parseLatex(text, filename = deparse1(substitute(text)), verbose = FALSE,"},"tools::matchConcordance":{"description":"The Rd parser records locations in <U+2018>.Rd<U+2019> files from\nwhich components of the file are read.  Output generators\nRd2HTML and Rd2latex can output\ninformation about these locations as <U+201C>concordances<U+201D> between\nsource and output lines.  \n","example_call":"matchConcordance(linenum, concordance)"},"tools::followConcordance":{"description":"The Rd parser records locations in <U+2018>.Rd<U+2019> files from\nwhich components of the file are read.  Output generators\nRd2HTML and Rd2latex can output\ninformation about these locations as <U+201C>concordances<U+201D> between\nsource and output lines.  \n","example_call":"followConcordance(concordance, prevConcordance)"},"tools::toRd":{"description":"Methods for this function render their associated classes as a fragment of Rd\ncode, which can then be rendered into text, HTML, or LaTeX.\n","example_call":"toRd(obj, ...)"},"tools::file_path_sans_ext":{"description":"Utilities for listing files, and manipulating file paths.\n","example_call":"file_path_sans_ext(x, compression = FALSE)"},"tools::CRAN_check_results":{"description":"Tools for obtaining information about current packages in the\nCRAN package repository, and their check status.\n","example_call":"CRAN_check_results(flavors = NULL)"},"tools::list_files_with_type":{"description":"Utilities for listing files, and manipulating file paths.\n","example_call":"list_files_with_type(dir, type, all.files = FALSE, full.names = TRUE, OS_subdirs = .OStype())"},"tools::checkRd":{"description":"Check an help file or the output of the parse_Rd function.\n","example_call":"checkRd(Rd, defines = .Platform$OS.type, stages = \"render\","},"tools::SIGUSR1":{"description":"pskill sends a signal to a process, usually to terminate it.\n","example_call":"NULL"},"tools::vignetteDepends":{"description":"The functions or variables listed here are no longer part of R as\nthey are not needed (any more).\n","example_call":"vignetteDepends(vignette, recursive = TRUE, reduce = TRUE, local = TRUE,"},"tools::makevars_site":{"description":"Determine the location of the user and site specific <U+2018>Makevars<U+2019>\nfiles for customizing package compilation.\n","example_call":"makevars_site()"},"tools::SIGUSR2":{"description":"pskill sends a signal to a process, usually to terminate it.\n","example_call":"NULL"},"tools::SweaveTeXFilter":{"description":"This function blanks out code chunks and Noweb markup in an Sweave\ninput file, for spell checking or other uses.\n","example_call":"SweaveTeXFilter(ifile, encoding = \"unknown\")"},"tools::vignetteInfo":{"description":"Extract metadata from a vignette source file.\n","example_call":"vignetteInfo(file)"},"tools::checkPoFile":{"description":"These functions compare formats embedded in English messages\nwith translated strings to check for consistency.  checkPoFile\nchecks one file, while checkPoFiles checks all files for specified\nor all languages.\n","example_call":"checkPoFile(f, strictPlural = FALSE)"},"tools::xgettext2pot":{"description":"For each file in the <U+2018>R<U+2019> directory (including system-specific\nsubdirectories) of a source package, extract the unique arguments passed\nto these <U+201C>message generating<U+201D> calls;\n","example_call":"xgettext2pot(dir, potFile, name = \"R\", version, bugs)"},"tools::loadRdMacros":{"description":"Loads macros from an <U+2018>.Rd<U+2019> file, or from several <U+2018>.Rd<U+2019>\nfiles contained in a package.\n","example_call":"loadRdMacros(file, macros = TRUE)"},"tools::texi2pdf":{"description":"Run latex/pdflatex, makeindex and bibtex\nuntil all cross-references are resolved to create a DVI or a PDF file.\n","example_call":"texi2pdf(file, clean = FALSE, quiet = TRUE, texi2dvi = getOption(\"texi2dvi\"),"},"tools::summarize_check_packages_in_dir_results":{"description":"Check source packages in a given directory, optionally with their\nreverse dependencies.\n","example_call":"summarize_check_packages_in_dir_results(dir, all = TRUE, full = FALSE, ...)"},"tools::summarize_check_packages_in_dir_depends":{"description":"Check source packages in a given directory, optionally with their\nreverse dependencies.\n","example_call":"summarize_check_packages_in_dir_depends(dir, all = FALSE, which = c(\"Depends\", \"Imports\", \"LinkingTo\"))"},"tools::pskill":{"description":"pskill sends a signal to a process, usually to terminate it.\n","example_call":"pskill(pid, signal = SIGTERM)"},"tools::checkMD5sums":{"description":"checkMD5sums checks the files against a file <U+2018>MD5<U+2019>.\n","example_call":"checkMD5sums(package, dir)"},"tools::.print.via.format":{"description":".print.via.format is a <U+201C>prototype<U+201D> print()\nmethod, useful, at least as a start, by a simple\n","example_call":".print.via.format(x, ...)"},"tools::makevars_user":{"description":"Determine the location of the user and site specific <U+2018>Makevars<U+2019>\nfiles for customizing package compilation.\n","example_call":"makevars_user()"},"tools::file_path_as_absolute":{"description":"Utilities for listing files, and manipulating file paths.\n","example_call":"file_path_as_absolute(x)"},"tools::standard_package_names":{"description":"These functions allow an installed package to be tested, or all base\nand recommended packages.\n","example_call":"standard_package_names()"},"tools::testInstalledPackages":{"description":"These functions allow an installed package to be tested, or all base\nand recommended packages.\n","example_call":"testInstalledPackages(outDir = \".\", errorsAreFatal = TRUE, scope = c(\"both\","},"tools::SIGCHLD":{"description":"pskill sends a signal to a process, usually to terminate it.\n","example_call":"NULL"},"tools::checkRdaFiles":{"description":"This reports for each of the files produced by save the size,\nif it was saved in ASCII or XDR binary format, and if it was\ncompressed (and if so in what format).\n","example_call":"checkRdaFiles(paths)"},"tools::showNonASCII":{"description":"This function prints elements of a character vector which contain\nnon-ASCII bytes, printing such bytes as a escape like <U+2018><U+2060><fc><U+2060><U+2019>.\n","example_call":"showNonASCII(x)"},"tools::Rd_db":{"description":"Utilities for computing on the information in Rd objects.","example_call":"Rd_db(package, dir, lib.loc = NULL, stages = \"build\")"},"tools::pkg2HTML":{"description":"Generate a single-page HTML reference manual from the Rd sources\ncontained in an installed or source R package.\n","example_call":"pkg2HTML(package, dir = NULL, lib.loc = NULL, outputEncoding = \"UTF-8\","},"tools::delimMatch":{"description":"Match delimited substrings in a character vector, with proper nesting.\n","example_call":"delimMatch(x, delim = c(\"{\", \"}\"), syntax = \"Rd\")"},"tools::testInstalledBasic":{"description":"These functions allow an installed package to be tested, or all base\nand recommended packages.\n","example_call":"testInstalledBasic(scope = c(\"basic\", \"devel\", \"both\", \"internet\", \"all\"),"},"tools::toHTML":{"description":"This generic function generates a complete HTML page from an object.\n","example_call":"toHTML(x, ...)"},"tools::assertWarning":{"description":"When testing code, it is not sufficient to check that results are correct,\nbut also that errors or warnings are signalled in appropriate\nsituations.  The functions described here provide a convenient\nfacility for doing so.  The three functions check that evaluating the\nsupplied expression produces an error, a warning or one of a\nspecified list of conditions, respectively.  If the assertion fails,\nan error is signalled.\n","example_call":"assertWarning(expr, classes = \"warning\", verbose = FALSE)"},"tools::dependsOnPkgs":{"description":"Find <U+2018>reverse<U+2019> dependencies of packages, that is those packages\nwhich depend on this one, and (optionally) so on recursively.\n","example_call":"dependsOnPkgs(pkgs, dependencies = \"strong\", recursive = TRUE, lib.loc = NULL,"},"tools::codoc":{"description":"Find inconsistencies between actual and documented <U+2018>structure<U+2019>\nof R objects in a package.  codoc compares names and\noptionally also corresponding positions and default values of the\narguments of functions.  codocClasses and codocData\ncompare slot names of S4 classes and variable names of data sets,\nrespectively.\n","example_call":"codoc(package, dir, lib.loc = NULL, use.values = NULL, verbose = getOption(\"verbose\"))"},"tools::xngettext":{"description":"For each file in the <U+2018>R<U+2019> directory (including system-specific\nsubdirectories) of a source package, extract the unique arguments passed\nto these <U+201C>message generating<U+201D> calls;\n","example_call":"xngettext(dir, verbose = FALSE)"},"tools::CRAN_check_issues":{"description":"Tools for obtaining information about current packages in the\nCRAN package repository, and their check status.\n","example_call":"CRAN_check_issues()"},"tools::update_pkg_po":{"description":"Prepare the <U+2018>po<U+2019> directory of a package and optionally compile and install\nthe translations.\n","example_call":"update_pkg_po(pkgdir, pkg = NULL, version = NULL, pot_make = TRUE,"},"tools::charset_to_Unicode":{"description":"charset_to_Unicode is a matrix of Unicode code points with\ncolumns for the common 8-bit encodings.\n","example_call":"NULL"},"tools::SIGQUIT":{"description":"pskill sends a signal to a process, usually to terminate it.\n","example_call":"NULL"},"tools::Rd2latex":{"description":"These functions take the output of parse_Rd(), an\nRd object, and produce a help page from it.  As they are mainly\nintended for internal use, their interfaces are subject to change.\n","example_call":"Rd2latex(Rd, out = \"\", defines = .Platform$OS.type, stages = \"render\","},"tools::SIGHUP":{"description":"pskill sends a signal to a process, usually to terminate it.\n","example_call":"NULL"},"tools::checkDocStyle":{"description":"Functions for performing various quality control (QC) checks on R code\nand documentation, notably on R packages.\n","example_call":"checkDocStyle(package, dir, lib.loc = NULL)"},"tools::Rd2txt_options":{"description":"This function sets various options for displaying text help.\n","example_call":"Rd2txt_options(...)"},"tools::codocClasses":{"description":"Find inconsistencies between actual and documented <U+2018>structure<U+2019>\nof R objects in a package.  codoc compares names and\noptionally also corresponding positions and default values of the\narguments of functions.  codocClasses and codocData\ncompare slot names of S4 classes and variable names of data sets,\nrespectively.\n","example_call":"codocClasses(package, lib.loc = NULL)"},"tools::SIGTERM":{"description":"pskill sends a signal to a process, usually to terminate it.\n","example_call":"NULL"},"tools::read.00Index":{"description":"Read item/description information from <U+2018>00Index<U+2019>-like files.  Such\nfiles are description lists rendered in tabular form, and currently\nused for the <U+2018>INDEX<U+2019> and <U+2018>demo/00Index<U+2019> files of add-on\npackages.\n","example_call":"read.00Index(file)"},"tools::checkReplaceFuns":{"description":"Functions for performing various quality control (QC) checks on R code\nand documentation, notably on R packages.\n","example_call":"checkReplaceFuns(package, dir, lib.loc = NULL)"},"tools::bibstyle":{"description":"This function defines and registers styles for rendering\nbibentry objects into <U+2018>Rd<U+2019> format, for later\nconversion to text, HTML, etc.\n","example_call":"bibstyle(style, envir, ..., .init = FALSE, .default = TRUE)"},"tools::list_files_with_exts":{"description":"Utilities for listing files, and manipulating file paths.\n","example_call":"list_files_with_exts(dir, exts, all.files = FALSE, full.names = TRUE)"},"tools::codocData":{"description":"Find inconsistencies between actual and documented <U+2018>structure<U+2019>\nof R objects in a package.  codoc compares names and\noptionally also corresponding positions and default values of the\narguments of functions.  codocClasses and codocData\ncompare slot names of S4 classes and variable names of data sets,\nrespectively.\n","example_call":"codocData(package, lib.loc = NULL)"},"tools::write_PACKAGES":{"description":"Generate <U+2018>PACKAGES<U+2019>, <U+2018>PACKAGES.gz<U+2019> and <U+2018>PACKAGES.rds<U+2019>\nfiles for a repository of source or Mac/Windows binary packages.\n","example_call":"write_PACKAGES(dir = \".\", fields = NULL, type = c(\"source\", \"mac.binary\","},"tools::checkFF":{"description":"Performs checks on calls to compiled code from R code.  Currently only\nchecks whether the interface functions such as .C and\n.Fortran are called with a \"NativeSymbolInfo\"\nfirst argument or with argument PACKAGE specified, which is\nhighly recommended to avoid name clashes in foreign function calls.\n","example_call":"checkFF(package, dir, file, lib.loc = NULL, registration = FALSE,"},"tools::checkVignettes":{"description":"Check all vignettes of a package by running\nSweave (or other custom weave function) and/or\nStangle (or other custom tangle function) on them.\nAll R source code files found after the tangling step are\nsourceed to check whether all code can be\nexecuted without errors.\n","example_call":"checkVignettes(package, dir, lib.loc = NULL, tangle = TRUE, weave = TRUE,"},"tools::check_packages_in_dir_changes":{"description":"Check source packages in a given directory, optionally with their\nreverse dependencies.\n","example_call":"check_packages_in_dir_changes(dir, old, outputs = FALSE, sources = FALSE, ...)"},"tools::deparseLatex":{"description":"The parseLatex function parses LaTeX source, producing a\nstructured object; deparseLatex reverses the process.  The\nlatexToUtf8 function takes a LaTeX object, and processes a number\nof different macros to convert them into the corresponding UTF-8\ncharacters.\n","example_call":"deparseLatex(x, dropBraces = FALSE)"},"tools::Rdindex":{"description":"Print a 2-column index table with names and titles from given\nR documentation files to a given output file or connection.  The\ntitles are nicely formatted between two column positions (typically 25\nand 72, respectively).\n","example_call":"Rdindex(RdFiles, outFile = \"\", type = NULL, width = 0.9 * getOption(\"width\"),"},"tools::file_ext":{"description":"Utilities for listing files, and manipulating file paths.\n","example_call":"file_ext(x)"},"tools::texi2dvi":{"description":"Run latex/pdflatex, makeindex and bibtex\nuntil all cross-references are resolved to create a DVI or a PDF file.\n","example_call":"texi2dvi(file, pdf = FALSE, clean = FALSE, quiet = TRUE, texi2dvi = getOption(\"texi2dvi\"),"},"tools::nonS3methods":{"description":"Functions for performing various quality control (QC) checks on R code\nand documentation, notably on R packages.\n","example_call":"nonS3methods(package)"},"tools::SIGCONT":{"description":"pskill sends a signal to a process, usually to terminate it.\n","example_call":"NULL"},"tools::findHTMLlinks":{"description":"Compute relative file paths for URLs to other package's installed HTML\ndocumentation.\n","example_call":"findHTMLlinks(pkgDir = \"\", lib.loc = NULL, level = 0:2)"},"tools::resaveRdaFiles":{"description":"This reports for each of the files produced by save the size,\nif it was saved in ASCII or XDR binary format, and if it was\ncompressed (and if so in what format).\n","example_call":"resaveRdaFiles(paths, compress = c(\"auto\", \"gzip\", \"bzip2\", \"xz\"),"},"tools::CRAN_check_details":{"description":"Tools for obtaining information about current packages in the\nCRAN package repository, and their check status.\n","example_call":"CRAN_check_details(flavors = NULL)"},"tools::buildVignette":{"description":"Run Sweave (or other custom weave function),\ntexi2pdf, and/or Stangle \n(or other custom tangle function) on one vignette.\n","example_call":"buildVignette(file, dir = \".\", weave = TRUE, latex = TRUE, tangle = TRUE,"},"tools::psnice":{"description":"Get or set the <U+2018>niceness<U+2019> of the current process, or one or\nmore other processes.\n","example_call":"psnice(pid = Sys.getpid(), value = NA_integer_)"},"tools::assertCondition":{"description":"When testing code, it is not sufficient to check that results are correct,\nbut also that errors or warnings are signalled in appropriate\nsituations.  The functions described here provide a convenient\nfacility for doing so.  The three functions check that evaluating the\nsupplied expression produces an error, a warning or one of a\nspecified list of conditions, respectively.  If the assertion fails,\nan error is signalled.\n","example_call":"assertCondition(expr, ..., .exprString = .deparseTrim(substitute(expr),"},"tools::loadPkgRdMacros":{"description":"Loads macros from an <U+2018>.Rd<U+2019> file, or from several <U+2018>.Rd<U+2019>\nfiles contained in a package.\n","example_call":"loadPkgRdMacros(pkgdir, macros = NULL)"},"tools::check_packages_in_dir":{"description":"Check source packages in a given directory, optionally with their\nreverse dependencies.\n","example_call":"check_packages_in_dir(dir, pfiles = Sys.glob(\"*.tar.gz\"), check_args = character(),"},"tools::package.dependencies":{"description":"The functions or variables listed here are no longer part of R as\nthey are not needed (any more).\n","example_call":"package.dependencies(x, check = FALSE, depLevel = c(\"Depends\", \"Imports\","},"tools::testInstalledPackage":{"description":"These functions allow an installed package to be tested, or all base\nand recommended packages.\n","example_call":"testInstalledPackage(pkg, lib.loc = NULL, outDir = \".\", types = c(\"examples\","},"tools::Rd2HTML":{"description":"These functions take the output of parse_Rd(), an\nRd object, and produce a help page from it.  As they are mainly\nintended for internal use, their interfaces are subject to change.\n","example_call":"Rd2HTML(Rd, out = \"\", package = \"\", defines = .Platform$OS.type,"},"tools::buildVignettes":{"description":"Run Sweave (or other custom weave function)\nand texi2pdf on all vignettes\nof a package, or list the vignettes.\n","example_call":"buildVignettes(package, dir, lib.loc = NULL, quiet = TRUE, clean = TRUE,"},"tools::vignetteEngine":{"description":"Vignettes are normally processed by Sweave, but package\nwriters may choose to use a different engine (e.g., one provided by the\nknitr, noweb or R.rsp packages).  This function\nis used by those packages to register their engines, and internally by\nR to retrieve them.\n","example_call":"vignetteEngine(name, weave, tangle, pattern = NULL, package = NULL,"},"tools::Rcmd":{"description":"Invoke R CMD tools from within R.\n","example_call":"Rcmd(args, ...)"},"tools::summarize_CRAN_check_status":{"description":"Tools for obtaining information about current packages in the\nCRAN package repository, and their check status.\n","example_call":"summarize_CRAN_check_status(packages, results = NULL, details = NULL, issues = NULL)"},"tools::check_packages_in_dir_details":{"description":"Check source packages in a given directory, optionally with their\nreverse dependencies.\n","example_call":"check_packages_in_dir_details(dir, logs = NULL, drop_ok = TRUE, ...)"},"tools::Rdiff":{"description":"Given two R output files, compute differences ignoring headers,\nfooters and some other differences.\n","example_call":"Rdiff(from, to, useDiff = FALSE, forEx = FALSE, nullPointers = TRUE,"},"tools::xgettext":{"description":"For each file in the <U+2018>R<U+2019> directory (including system-specific\nsubdirectories) of a source package, extract the unique arguments passed\nto these <U+201C>message generating<U+201D> calls;\n","example_call":"xgettext(dir, verbose = FALSE, asCall = TRUE)"},"tools::pkgVignettes":{"description":"Run Sweave (or other custom weave function)\nand texi2pdf on all vignettes\nof a package, or list the vignettes.\n","example_call":"pkgVignettes(package, dir, subdirs = NULL, lib.loc = NULL, output = FALSE,"},"tools::latexToUtf8":{"description":"The parseLatex function parses LaTeX source, producing a\nstructured object; deparseLatex reverses the process.  The\nlatexToUtf8 function takes a LaTeX object, and processes a number\nof different macros to convert them into the corresponding UTF-8\ncharacters.\n","example_call":"latexToUtf8(x)"},"tools::update_PACKAGES":{"description":"Update an existing repository by reading the PACKAGES\nfile, retaining entries which are still valid, removing entries which\nare no longer valid, and only processing built package tarballs which do not\nmatch existing entries.\n","example_call":"update_PACKAGES(dir = \".\", fields = NULL, type = c(\"source\", \"mac.binary\","},"tools::getVignetteInfo":{"description":"This function gets information on installed vignettes.\n","example_call":"getVignetteInfo(package = NULL, lib.loc = NULL, all = TRUE)"},"tools::SIGSTOP":{"description":"pskill sends a signal to a process, usually to terminate it.\n","example_call":"NULL"},"tools::SIGINT":{"description":"pskill sends a signal to a process, usually to terminate it.\n","example_call":"NULL"},"tools::showNonASCIIfile":{"description":"This function prints elements of a character vector which contain\nnon-ASCII bytes, printing such bytes as a escape like <U+2018><U+2060><fc><U+2060><U+2019>.\n","example_call":"showNonASCIIfile(file)"},"tools::add_datalist":{"description":"The data() command with no arguments lists all the\ndatasets available via data in attached packages, and to do so a\nper-package list is installed.  Creating that list at install time can\nbe slow for packages with huge datasets, and can be expedited by a\nsupplying <U+2018>data/datalist<U+2019> file.\n","example_call":"add_datalist(pkgpath, force = FALSE, small.size = 1024^2)"},"tools::checkPoFiles":{"description":"These functions compare formats embedded in English messages\nwith translated strings to check for consistency.  checkPoFile\nchecks one file, while checkPoFiles checks all files for specified\nor all languages.\n","example_call":"checkPoFiles(language, dir = \".\")"},"tools::toTitleCase":{"description":"Convert a character vector to title case, especially package titles.\n","example_call":"toTitleCase(text)"},"tools::package_dependencies":{"description":"Find (recursively) dependencies or reverse dependencies of packages.\n","example_call":"package_dependencies(packages = NULL, db = NULL, which = \"strong\", recursive = FALSE,"},"tools::getBibstyle":{"description":"This function defines and registers styles for rendering\nbibentry objects into <U+2018>Rd<U+2019> format, for later\nconversion to text, HTML, etc.\n","example_call":"getBibstyle(all = FALSE)"},"tools::checkTnF":{"description":"Checks the specified R package or code file for occurrences of\nT or F, and gathers the expression containing these.\nThis is useful as in R T and F are just variables which\nare set to the logicals TRUE and FALSE by default, but\nare not reserved words and hence can be overwritten by the user.\nHence, one should always use TRUE and FALSE for the\nlogicals.\n","example_call":"checkTnF(package, dir, file, lib.loc = NULL)"},"tools::make_translations_pkg":{"description":"A utility for R Core members to prepare a package of updated translations.\n","example_call":"make_translations_pkg(srcdir, outDir = \".\", append = \"-1\")"},"tools::RdTextFilter":{"description":"This function blanks out all non-text in an Rd file,\nfor spell checking or other uses.\n","example_call":"RdTextFilter(ifile, encoding = \"unknown\", keepSpacing = TRUE, drop = character(),"},"tzdb::tzdb_initialize":{"description":"tzdb_initialize() is intended to be called from a client package's\n.onLoad() as tzdb::tzdb_initialize() to ensure that the tzdb package\nhas been loaded.\n","example_call":"tzdb_initialize()"},"tzdb::tzdb_names":{"description":"tzdb_names() returns the time zone names found in the database.\n","example_call":"tzdb_names()"},"tzdb::tzdb_path":{"description":"Retrieve the path to the time zone database\n","example_call":"tzdb_path(type)"},"tzdb::tzdb_version":{"description":"tzdb_version() returns the version of the time zone database currently in\nuse.\n","example_call":"tzdb_version()"},"utf8::output_utf8":{"description":"Test whether the output connection has ANSI style escape support\nor UTF-8 support.\n","example_call":"output_utf8()"},"utf8::utf8_format":{"description":"Format a character object for UTF-8 printing.\n","example_call":"utf8_format(x, trim = FALSE, chars = NULL, justify = \"left\", width = NULL,"},"utf8::utf8_print":{"description":"Print a UTF-8 character object.\n","example_call":"utf8_print(x, chars = NULL, quote = TRUE, na.print = NULL, print.gap = NULL,"},"utf8::output_ansi":{"description":"Test whether the output connection has ANSI style escape support\nor UTF-8 support.\n","example_call":"output_ansi()"},"utf8::utf8_width":{"description":"Compute the display widths of the elements of a character object.\n","example_call":"utf8_width(x, encode = TRUE, quote = FALSE, utf8 = NULL)"},"utf8::as_utf8":{"description":"UTF-8 text encoding and validation.\n","example_call":"as_utf8(x, normalize = FALSE)"},"utf8::utf8_normalize":{"description":"Transform text to normalized form, optionally mapping to lowercase\nand applying compatibility maps.\n","example_call":"utf8_normalize(x, map_case = FALSE, map_compat = FALSE, map_quote = FALSE,"},"utf8::utf8_valid":{"description":"UTF-8 text encoding and validation.\n","example_call":"utf8_valid(x)"},"utf8::utf8_encode":{"description":"Escape the strings in a character object, optionally adding\nquotes or spaces, adjusting the width for display.\n","example_call":"utf8_encode(x, width = 0L, quote = FALSE, justify = \"left\", escapes = NULL,"},"utils::write.socket":{"description":"read.socket reads a string from the specified socket,\nwrite.socket writes to the specified socket.  There is very\nlittle error checking done by either.\n","example_call":"write.socket(socket, string)"},"utils::fixInNamespace":{"description":"Utility functions to access and replace the non-exported functions in\na namespace, for use in developing packages with namespaces.\n","example_call":"fixInNamespace(x, ns, pos = -1, envir = as.environment(pos), ...)"},"utils::changedFiles":{"description":"fileSnapshot takes a snapshot of a selection of files,\nrecording summary information about each.  changedFiles\ncompares two snapshots, or compares one snapshot to the current state\nof the file system.  The snapshots need not be the same directory;\nthis could be used to compare two directories.\n","example_call":"changedFiles(before, after, path = before$path, timestamp = before$timestamp,"},"utils::history":{"description":"Load or save or display the commands history.\n","example_call":"history(max.show = 25, reverse = FALSE, pattern, ...)"},"utils::SweaveHooks":{"description":"These functions are handy for writing Sweave drivers and are\nconsidered internal and hence not documented.  Look at the source code\nof the Sweave LaTeX driver (in this\npackage) or the HTML driver (in the R2HTML package from CRAN) to see\nhow they can be used.\n","example_call":"SweaveHooks(options, run = FALSE, envir = .GlobalEnv)"},"utils::packageDate":{"description":"Parses and returns the <U+2018>DESCRIPTION<U+2019> file of a package as a\n\"packageDescription\".\n","example_call":"packageDate(pkg, lib.loc = NULL, date.fields = c(\"Date\", \"Packaged\","},"utils::installed.packages":{"description":"Find (or retrieve) details of all packages installed in the specified\nlibraries.\n","example_call":"installed.packages(lib.loc = NULL, priority = NULL, noCache = FALSE, fields = NULL,"},"utils::citEntry":{"description":"Old interface providing functionality for specifying bibliographic \ninformation in enhanced BibTeX style.  Since R 2.14.0 this has been \nsuperseded by bibentry.\n","example_call":"citEntry(entry, textVersion = NULL, header = NULL, footer = NULL,"},"utils::as.roman":{"description":"Simple manipulation of (a small set of) integer numbers as roman numerals.\n","example_call":"as.roman(x)"},"utils::.romans":{"description":"Simple manipulation of (a small set of) integer numbers as roman numerals.\n","example_call":"NULL"},"utils::suppressForeignCheck":{"description":"For globalVariables, the names supplied are of functions or\nother objects that should be regarded as defined globally when the\ncheck tool is applied to this package.  The call to\nglobalVariables will be included in the package's source.\nRepeated calls in the same package accumulate the names of the\nglobal variables.\n","example_call":"suppressForeignCheck(names, package, add = TRUE)"},"utils::aregexec":{"description":"Determine positions of approximate string matches.\n","example_call":"aregexec(pattern, text, max.distance = 0.1, costs = NULL, ignore.case = FALSE,"},"utils::txtProgressBar":{"description":"Text progress bar in the R console.\n","example_call":"txtProgressBar(min = 0, max = 1, initial = 0, char = \"=\", width = NA,"},"utils::strcapture":{"description":"Given a character vector and a regular expression containing capture\nexpressions, strcapture will extract the captured tokens into a\ntabular data structure, such as a data.frame, the type and structure of\nwhich is specified by a prototype object. The assumption is that the\nsame number of tokens are captured from every input string. \n","example_call":"strcapture(pattern, x, proto, perl = FALSE, useBytes = FALSE)"},"utils::xemacs":{"description":"Invoke a text editor on an R object.\n","example_call":"xemacs(name = NULL, file = \"\")"},"utils::rtags":{"description":"rtags provides etags-like indexing capabilities for R code,\nusing R's own parser.\n","example_call":"rtags(path = \".\", pattern = \"\\\\.[RrSs]$\", recursive = FALSE,"},"utils::as.person":{"description":"A class and utility methods for holding information about persons\nlike name and email address.\n","example_call":"as.person(x)"},"utils::maintainer":{"description":"Show the name and email address of the maintainer of an installed package.\n","example_call":"maintainer(pkg)"},"utils::aspell":{"description":"Spell check given files via Aspell, Hunspell or Ispell.\n","example_call":"aspell(files, filter, control = list(), encoding = \"unknown\","},"utils::bug.report":{"description":"Invokes an editor or email program to write a bug report or opens a\nweb page for bug submission.  Some standard information on the current\nversion and configuration of R are included automatically.\n","example_call":"bug.report(subject = \"\", address, file = \"R.bug.report\", package = NULL,"},"utils::capture.output":{"description":"Evaluates its arguments with the output being returned as a character\nstring or sent to a file.  Related to sink similarly to how\nwith is related to attach.\n","example_call":"capture.output(..., file = NULL, append = FALSE, type = c(\"output\","},"utils::remhash":{"description":"Create and manipulate mutable hash tables.\n","example_call":"remhash(h, key)"},"utils::assignInMyNamespace":{"description":"Utility functions to access and replace the non-exported functions in\na namespace, for use in developing packages with namespaces.\n","example_call":"assignInMyNamespace(x, value)"},"utils::aspell_package_vignettes":{"description":"Utilities for spell checking packages via Aspell, Hunspell or Ispell.\n","example_call":"aspell_package_vignettes(dir, control = list(), program = NULL, dictionaries = character())"},"utils::memory.limit":{"description":"These functions are currently stubs which report infinity\n(Inf) with a warning on all platforms.  OS's own facilities\ncan be used on some systems to limit memory allocation.\n\n","example_call":"memory.limit(size = NA)"},"utils::person":{"description":"A class and utility methods for holding information about persons\nlike name and email address.\n","example_call":"person(given = NULL, family = NULL, middle = NULL, email = NULL,"},"utils::ls.str":{"description":"ls.str and lsf.str are variations of ls\napplying str() to each matched name: see section Value.\n","example_call":"ls.str(pos = -1, name, envir, all.names = FALSE, pattern,"},"utils::read.delim2":{"description":"Reads a file in table format and creates a data frame from it, with\ncases corresponding to lines and variables to fields in the file.\n","example_call":"read.delim2(file, header = TRUE, sep = \"\\t\", quote = \"\\\"\", dec = \",\","},"utils::RweaveLatexWritedoc":{"description":"These functions are handy for writing Sweave drivers and are\nconsidered internal and hence not documented.  Look at the source code\nof the Sweave LaTeX driver (in this\npackage) or the HTML driver (in the R2HTML package from CRAN) to see\nhow they can be used.\n","example_call":"RweaveLatexWritedoc(object, chunk)"},"utils::hasName":{"description":"hasName is a convenient way to test for one or more names\nin an R object.\n","example_call":"hasName(x, name)"},"utils::getTxtProgressBar":{"description":"Text progress bar in the R console.\n","example_call":"getTxtProgressBar(pb)"},"utils::news":{"description":"Build and query the news data base for R or add-on packages.\n","example_call":"news(query, package = \"R\", lib.loc = NULL, format = NULL,"},"utils::typhash":{"description":"Create and manipulate mutable hash tables.\n","example_call":"typhash(h)"},"utils::read.csv":{"description":"Reads a file in table format and creates a data frame from it, with\ncases corresponding to lines and variables to fields in the file.\n","example_call":"read.csv(file, header = TRUE, sep = \",\", quote = \"\\\"\", dec = \".\","},"utils::RSiteSearch":{"description":"Search for key words or phrases in various documentation, such as\nR manuals, help pages of base and CRAN packages, vignettes, task views and others, using the search engine\nat https://search.r-project.org and view them in a web browser.\n","example_call":"RSiteSearch(string, restrict = c(\"functions\", \"descriptions\", \"news\","},"utils::debugger":{"description":"Functions to dump the evaluation environments (frames) and to examine\ndumped frames.\n","example_call":"debugger(dump = last.dump)"},"utils::demo":{"description":"demo is a user-friendly interface to running some demonstration\nR scripts.  demo() gives the list of available topics.\n","example_call":"demo(topic, package = NULL, lib.loc = NULL, character.only = FALSE,"},"utils::isS3stdGeneric":{"description":"Determines whether f acts as a standard S3-style generic\nfunction.\n","example_call":"isS3stdGeneric(f)"},"utils::Sweave":{"description":"Sweave provides a flexible framework for mixing text and R/S code\nfor automatic report generation.  The basic idea is to replace the\ncode with its output, such that the final document only contains the\ntext and the output of the statistical analysis: however, the source\ncode can also be included.\n","example_call":"Sweave(file, driver = RweaveLatex(), syntax = getOption(\"SweaveSyntax\"),"},"utils::nsl":{"description":"Interface to the system gethostbyname, currently available\nonly on unix-alikes, i.e., not on Windows.\n","example_call":"nsl(hostname)"},"utils::modifyList":{"description":"Modifies a possibly nested list recursively by changing a subset of\nelements at each level to match a second list.\n","example_call":"modifyList(x, val, keep.null = FALSE)"},"utils::promptData":{"description":"Generates a shell of documentation for a data set.\n","example_call":"promptData(object, filename = NULL, name = NULL)"},"utils::help.request":{"description":"Prompts the user to check they have done all that is expected of them\nbefore sending a post to the R-help mailing list, provides a template\nfor the post with session information included and optionally sends\nthe email (on Unix systems).\n","example_call":"help.request(subject = \"\", address = \"r-help@R-project.org\", file = \"R.help.request\","},"utils::alarm":{"description":"Gives an audible or visual signal to the user.\n","example_call":"alarm()"},"utils::.DollarNames":{"description":"This page documents a mechanism to generate relevant completions\nfrom a partially completed command line.  It is not intended to be\nuseful by itself, but rather in conjunction with other mechanisms that\nuse it as a backend.  The functions listed in the usage section\nprovide a simple control and query mechanism.  The actual interface\nconsists of a few unexported functions described further down.\n","example_call":".DollarNames(x, pattern)"},"utils::promptImport":{"description":"Facilitate the constructing of files documenting R objects.\n","example_call":"promptImport(object, filename = NULL, name = NULL, importedFrom = NULL,"},"utils::close.socket":{"description":"Closes the socket and frees the space in the file descriptor table.  The\nport may not be freed immediately.\n","example_call":"close.socket(socket, ...)"},"utils::read.csv2":{"description":"Reads a file in table format and creates a data frame from it, with\ncases corresponding to lines and variables to fields in the file.\n","example_call":"read.csv2(file, header = TRUE, sep = \";\", quote = \"\\\"\", dec = \",\","},"utils::zip":{"description":"A wrapper for an external zip command to create zip archives.\n","example_call":"zip(zipfile, files, flags = \"-r9X\", extras = \"\", zip = Sys.getenv(\"R_ZIPCMD\","},"utils::hsearch_db_concepts":{"description":"Utilities for searching the help system.\n","example_call":"hsearch_db_concepts(db = hsearch_db())"},"utils::assignInNamespace":{"description":"Utility functions to access and replace the non-exported functions in\na namespace, for use in developing packages with namespaces.\n","example_call":"assignInNamespace(x, value, ns, pos = -1, envir = as.environment(pos))"},"utils::askYesNo":{"description":"askYesNo provides a standard way to ask the user a yes/no question.  \nIt provides a way for front-ends to substitute their own dialogs.\n","example_call":"askYesNo(msg, default = TRUE, prompts = getOption(\"askYesNo\","},"utils::read.delim":{"description":"Reads a file in table format and creates a data frame from it, with\ncases corresponding to lines and variables to fields in the file.\n","example_call":"read.delim(file, header = TRUE, sep = \"\\t\", quote = \"\\\"\", dec = \".\","},"utils::limitedLabels":{"description":"Functions to dump the evaluation environments (frames) and to examine\ndumped frames.\n","example_call":"limitedLabels(value, maxwidth = getOption(\"width\") - 5L)"},"utils::is.relistable":{"description":"relist() is an S3 generic function with a few methods in order\nto allow easy inversion of unlist(obj) when that is used\nwith an object obj of (S3) class \"relistable\".\n","example_call":"is.relistable(x)"},"utils::toLatex":{"description":"These methods convert R objects to character vectors with\nBibTeX or LaTeX markup.\n","example_call":"toLatex(object, ...)"},"utils::citFooter":{"description":"How to cite R and R packages in publications.\n","example_call":"citFooter(...)"},"utils::head.matrix":{"description":"Returns the first or last parts of a vector, matrix, table, data frame\nor function.  Since head() and tail() are generic\nfunctions, they may also have been extended to other classes.\n","example_call":"head.matrix(x, n = 6L, ...)"},"utils::View":{"description":"Invoke a spreadsheet-style data viewer on a matrix-like R object.\n","example_call":"View(x, title)"},"utils::findMatches":{"description":"This page documents a mechanism to generate relevant completions\nfrom a partially completed command line.  It is not intended to be\nuseful by itself, but rather in conjunction with other mechanisms that\nuse it as a backend.  The functions listed in the usage section\nprovide a simple control and query mechanism.  The actual interface\nconsists of a few unexported functions described further down.\n","example_call":"findMatches(pattern, values, fuzzy, backtick)"},"utils::create.post":{"description":"An ancillary function used by bug.report and\nhelp.request to prepare emails for submission to package\nmaintainers or to R mailing lists.\n","example_call":"create.post(instructions = character(), description = \"post\", subject = \"\","},"utils::globalVariables":{"description":"For globalVariables, the names supplied are of functions or\nother objects that should be regarded as defined globally when the\ncheck tool is applied to this package.  The call to\nglobalVariables will be included in the package's source.\nRepeated calls in the same package accumulate the names of the\nglobal variables.\n","example_call":"globalVariables(names, package, add = TRUE)"},"utils::vi":{"description":"Invoke a text editor on an R object.\n","example_call":"vi(name = NULL, file = \"\")"},"utils::bibentry":{"description":"Functionality for representing and manipulating bibliographic\ninformation in enhanced BibTeX style.\n","example_call":"bibentry(bibtype, textVersion = NULL, header = NULL, footer = NULL,"},"utils::checkCRAN":{"description":"Functions helping to maintain CRAN, some of them may also be useful\nfor administrators of other repository networks.\n","example_call":"checkCRAN(method)"},"utils::Stangle":{"description":"Sweave provides a flexible framework for mixing text and R/S code\nfor automatic report generation.  The basic idea is to replace the\ncode with its output, such that the final document only contains the\ntext and the output of the statistical analysis: however, the source\ncode can also be included.\n","example_call":"Stangle(file, driver = Rtangle(), syntax = getOption(\"SweaveSyntax\"),"},"utils::methods":{"description":"List all available methods for a S3 and S4 generic function, or all\nmethods for an S3 or S4 class.\n","example_call":"methods(generic.function, class, all.names = FALSE, dropPath = FALSE)"},"utils::sethash":{"description":"Create and manipulate mutable hash tables.\n","example_call":"sethash(h, key, value)"},"utils::type.convert":{"description":"Convert a data object to logical, integer, numeric, complex, character\nor factor as appropriate.\n","example_call":"type.convert(x, ...)"},"utils::findLineNum":{"description":"These functions locate objects containing particular lines of source\ncode, using the information saved when the code was parsed with\nkeep.source = TRUE.\n","example_call":"findLineNum(srcfile, line, nameonly = TRUE, envir = parent.frame(),"},"utils::menu":{"description":"menu presents the user with a menu of choices labelled from 1\nto the number of choices.  To exit without choosing an item one can\nselect <U+2018><U+2060>0<U+2060><U+2019>.\n","example_call":"menu(choices, graphics = FALSE, title = NULL)"},"utils::?":{"description":"These functions provide access to documentation.\nDocumentation on a topic with name name (typically, an R\nobject or a data set) can be displayed by either help(\"name\") or\n?name.\n","example_call":"?(e1, e2)"},"utils::aspell_package_C_files":{"description":"Utilities for spell checking packages via Aspell, Hunspell or Ispell.\n","example_call":"aspell_package_C_files(dir, ignore = character(), control = list(), program = NULL,"},"utils::old.packages":{"description":"old.packages indicates packages which have a (suitable) later\nversion on the repositories whereas update.packages offers to\ndownload and install such packages.\n","example_call":"old.packages(lib.loc = NULL, repos = getOption(\"repos\"), contriburl = contrib.url(repos,"},"utils::hsearch_db_keywords":{"description":"Utilities for searching the help system.\n","example_call":"hsearch_db_keywords(db = hsearch_db())"},"utils::RShowDoc":{"description":"Utility function to find and display R documentation.\n","example_call":"RShowDoc(what, type = c(\"pdf\", \"html\", \"txt\"), package)"},"utils::browseURL":{"description":"Load a given URL into an HTML browser.\n","example_call":"browseURL(url, browser = getOption(\"browser\"), encodeIfNeeded = FALSE)"},"utils::debugcall":{"description":"Set or unset debugging flags based on a call to a function. Takes into\naccount S3/S4 method dispatch based on the classes of the arguments in\nthe call.\n","example_call":"debugcall(call, once = FALSE)"},"utils::is.hashtab":{"description":"Create and manipulate mutable hash tables.\n","example_call":"is.hashtab(x)"},"utils::gethash":{"description":"Create and manipulate mutable hash tables.\n","example_call":"gethash(h, key, nomatch = NULL)"},"utils::setTxtProgressBar":{"description":"Text progress bar in the R console.\n","example_call":"setTxtProgressBar(pb, value, title = NULL, label = NULL)"},"utils::tail":{"description":"Returns the first or last parts of a vector, matrix, table, data frame\nor function.  Since head() and tail() are generic\nfunctions, they may also have been extended to other classes.\n","example_call":"tail(x, ...)"},"utils::emacs":{"description":"Invoke a text editor on an R object.\n","example_call":"emacs(name = NULL, file = \"\")"},"utils::object.size":{"description":"Provides an estimate of the memory that is being used to store an R object.\n","example_call":"object.size(x)"},"utils::RweaveTryStop":{"description":"These functions are handy for writing Sweave drivers and are\nconsidered internal and hence not documented.  Look at the source code\nof the Sweave LaTeX driver (in this\npackage) or the HTML driver (in the R2HTML package from CRAN) to see\nhow they can be used.\n","example_call":"RweaveTryStop(err, options)"},"utils::undebugcall":{"description":"Set or unset debugging flags based on a call to a function. Takes into\naccount S3/S4 method dispatch based on the classes of the arguments in\nthe call.\n","example_call":"undebugcall(call)"},"utils::download.file":{"description":"This function can be used to download a file from the Internet.\n","example_call":"download.file(url, destfile, method, quiet = FALSE, mode = \"w\", cacheOK = TRUE,"},"utils::loadhistory":{"description":"Load or save or display the commands history.\n","example_call":"loadhistory(file = \".Rhistory\")"},"utils::RweaveChunkPrefix":{"description":"These functions are handy for writing Sweave drivers and are\nconsidered internal and hence not documented.  Look at the source code\nof the Sweave LaTeX driver (in this\npackage) or the HTML driver (in the R2HTML package from CRAN) to see\nhow they can be used.\n","example_call":"RweaveChunkPrefix(options)"},"utils::summaryRprof":{"description":"Summarise the output of the Rprof function to show the\namount of time used by different R functions.\n","example_call":"summaryRprof(filename = \"Rprof.out\", chunksize = 5000, memory = c(\"none\","},"utils::make.socket":{"description":"With server = FALSE attempts to open a client socket to the\nspecified port and host.  With server = TRUE the R process\nlistens on the specified port for a connection and then returns a\nserver socket.  It is a good idea to use on.exit to\nensure that a socket is closed, as you only get 64 of them.\n","example_call":"make.socket(host = \"localhost\", port, fail = TRUE, server = FALSE)"},"utils::xedit":{"description":"Invoke a text editor on an R object.\n","example_call":"xedit(name = NULL, file = \"\")"},"utils::data":{"description":"Loads specified data sets, or list the available data sets.\n","example_call":"data(..., list = character(), package = NULL, lib.loc = NULL,"},"utils::charClass":{"description":"An interface to the (C99) wide character classification functions in use.\n","example_call":"charClass(x, class)"},"utils::RtangleSetup":{"description":"A driver for Stangle that extracts R code chunks.\nNotably all RtangleSetup() arguments may be used as arguments\nin the Stangle() call.\n","example_call":"RtangleSetup(file, syntax, output = NULL, annotate = TRUE, split = FALSE,"},"utils::browseEnv":{"description":"The browseEnv function opens a browser with list of objects\ncurrently in sys.frame() environment.\n","example_call":"browseEnv(envir = .GlobalEnv, pattern, excludepatt = \"^last\\\\.warning\","},"utils::update.packages":{"description":"old.packages indicates packages which have a (suitable) later\nversion on the repositories whereas update.packages offers to\ndownload and install such packages.\n","example_call":"update.packages(lib.loc = NULL, repos = getOption(\"repos\"), contriburl = contrib.url(repos,"},"utils::untar":{"description":"Extract files from or list the contents of a tar archive.\n","example_call":"untar(tarfile, files = NULL, list = FALSE, exdir = \".\", compressed = NA,"},"utils::tail.matrix":{"description":"Returns the first or last parts of a vector, matrix, table, data frame\nor function.  Since head() and tail() are generic\nfunctions, they may also have been extended to other classes.\n","example_call":"tail.matrix(x, n = 6L, keepnums = TRUE, addrownums, ...)"},"utils::getS3method":{"description":"Get a method for an S3 generic, possibly from a namespace or the\ngeneric's registry.\n","example_call":"getS3method(f, class, optional = FALSE, envir = parent.frame())"},"utils::write.table":{"description":"write.table prints its required argument x (after\nconverting it to a data frame if it is not one nor a matrix) to\na file or connection.\n","example_call":"write.table(x, file = \"\", append = FALSE, quote = TRUE, sep = \" \","},"utils::strOptions":{"description":"Compactly display the internal structure of an R object, a\ndiagnostic function and an alternative to summary\n(and to some extent, dput).  Ideally, only one line for\neach <U+2018>basic<U+2019> structure is displayed.  It is especially well suited\nto compactly display the (abbreviated) contents of (possibly nested)\nlists.  The idea is to give reasonable output for any R\nobject.  It calls args for (non-primitive) function objects.\n","example_call":"strOptions(strict.width = \"no\", digits.d = 3L, vec.len = 4L, list.len = 99L,"},"utils::rc.status":{"description":"This page documents a mechanism to generate relevant completions\nfrom a partially completed command line.  It is not intended to be\nuseful by itself, but rather in conjunction with other mechanisms that\nuse it as a backend.  The functions listed in the usage section\nprovide a simple control and query mechanism.  The actual interface\nconsists of a few unexported functions described further down.\n","example_call":"rc.status()"},"utils::asDateBuilt":{"description":"Parses and returns the <U+2018>DESCRIPTION<U+2019> file of a package as a\n\"packageDescription\".\n","example_call":"asDateBuilt(built)"},"utils::Rprofmem":{"description":"Enable or disable reporting of memory allocation in R.\n","example_call":"Rprofmem(filename = \"Rprofmem.out\", append = FALSE, threshold = 0)"},"utils::apropos":{"description":"apropos() returns a character vector giving the names of\nobjects in the search list matching (as a regular expression)\nwhat.\n","example_call":"apropos(what, where = FALSE, ignore.case = TRUE, dot_internals = FALSE,"},"utils::getSrcDirectory":{"description":"These functions extract information from source references.\n","example_call":"getSrcDirectory(x, unique = TRUE)"},"utils::as.relistable":{"description":"relist() is an S3 generic function with a few methods in order\nto allow easy inversion of unlist(obj) when that is used\nwith an object obj of (S3) class \"relistable\".\n","example_call":"as.relistable(x)"},"utils::SweaveSyntaxNoweb":{"description":"Sweave provides a flexible framework for mixing text and R/S code\nfor automatic report generation.  The basic idea is to replace the\ncode with its output, such that the final document only contains the\ntext and the output of the statistical analysis: however, the source\ncode can also be included.\n","example_call":"NULL"},"utils::SweaveSyntaxLatex":{"description":"Sweave provides a flexible framework for mixing text and R/S code\nfor automatic report generation.  The basic idea is to replace the\ncode with its output, such that the final document only contains the\ntext and the output of the statistical analysis: however, the source\ncode can also be included.\n","example_call":"NULL"},"utils::citeNatbib":{"description":"Cite a bibentry object in text.  The cite() function\nuses the cite() function from the default\nbibstyle if present, or citeNatbib() if not.\nciteNatbib() uses a style similar to that used by the LaTeX\npackage natbib.\n","example_call":"citeNatbib(keys, bib, textual = FALSE, before = NULL, after = NULL,"},"utils::read.fwf":{"description":"Read a table of fixed width formatted\ndata into a data.frame.\n","example_call":"read.fwf(file, widths, header = FALSE, sep = \"\\t\", skip = 0L,"},"utils::de.setup":{"description":"Internal utils functions\n","example_call":"de.setup(ilist, list.names, incols)"},"utils::removeSource":{"description":"When options(\"keep.source\") is TRUE, a copy of the\noriginal source code to a function is stored with it.  Similarly,\nparse() may keep formatted source for an expression.\nSuch source reference attributes are removed from the object by\nremoveSource().\n","example_call":"removeSource(fn)"},"utils::data.entry":{"description":"A spreadsheet-like editor for entering or editing data.\n","example_call":"data.entry(..., Modes = NULL, Names = NULL)"},"utils::packageVersion":{"description":"Parses and returns the <U+2018>DESCRIPTION<U+2019> file of a package as a\n\"packageDescription\".\n","example_call":"packageVersion(pkg, lib.loc = NULL)"},"utils::as.personList":{"description":"Old interface providing functionality for information about\ncollections of persons.  Since R 2.14.0 person objects\ncan be combined with the corresponding c method which\nsupersedes the personList function.\n","example_call":"as.personList(x)"},"utils::citation":{"description":"How to cite R and R packages in publications.\n","example_call":"citation(package = \"base\", lib.loc = NULL, auto = NULL)"},"utils::citHeader":{"description":"How to cite R and R packages in publications.\n","example_call":"citHeader(...)"},"utils::read.fortran":{"description":"Read fixed-format data files using Fortran-style format specifications.\n","example_call":"read.fortran(file, format, ..., as.is = TRUE, colClasses = NA)"},"utils::findCRANmirror":{"description":"Find out if a CRAN mirror has been selected for the current session.\n","example_call":"findCRANmirror(type = c(\"src\", \"web\"))"},"utils::aspell_package_R_files":{"description":"Utilities for spell checking packages via Aspell, Hunspell or Ispell.\n","example_call":"aspell_package_R_files(dir, ignore = character(), control = list(), program = NULL,"},"utils::RtangleFinish":{"description":"These functions are handy for writing Sweave drivers and are\nconsidered internal and hence not documented.  Look at the source code\nof the Sweave LaTeX driver (in this\npackage) or the HTML driver (in the R2HTML package from CRAN) to see\nhow they can be used.\n","example_call":"RtangleFinish(object, error = FALSE)"},"utils::hashtab":{"description":"Create and manipulate mutable hash tables.\n","example_call":"hashtab(type = c(\"identical\", \"address\"), size)"},"utils::rc.getOption":{"description":"This page documents a mechanism to generate relevant completions\nfrom a partially completed command line.  It is not intended to be\nuseful by itself, but rather in conjunction with other mechanisms that\nuse it as a backend.  The functions listed in the usage section\nprovide a simple control and query mechanism.  The actual interface\nconsists of a few unexported functions described further down.\n","example_call":"rc.getOption(name)"},"utils::RtangleWritedoc":{"description":"These functions are handy for writing Sweave drivers and are\nconsidered internal and hence not documented.  Look at the source code\nof the Sweave LaTeX driver (in this\npackage) or the HTML driver (in the R2HTML package from CRAN) to see\nhow they can be used.\n","example_call":"RtangleWritedoc(object, chunk)"},"utils::readCitationFile":{"description":"How to cite R and R packages in publications.\n","example_call":"readCitationFile(file, meta = NULL)"},"utils::stack":{"description":"Stacking vectors concatenates multiple vectors into a single vector\nalong with a factor indicating where each observation originated.\nUnstacking reverses this operation.\n","example_call":"stack(x, ...)"},"utils::package.skeleton":{"description":"package.skeleton automates some of the setup for a new source\npackage.  It creates directories, saves functions, data, and R code files to\nappropriate places, and creates skeleton help files and a\n<U+2018>Read-and-delete-me<U+2019> file describing further steps in packaging.\n","example_call":"package.skeleton(name = \"anRpackage\", list = character(), environment = .GlobalEnv,"},"utils::memory.size":{"description":"These functions are currently stubs which report infinity\n(Inf) with a warning on all platforms.  OS's own facilities\ncan be used on some systems to limit memory allocation.\n\n","example_call":"memory.size(max = FALSE)"},"utils::de.ncols":{"description":"Internal utils functions\n","example_call":"de.ncols(inlist)"},"utils::file.edit":{"description":"Edit one or more files in a text editor.","example_call":"file.edit(..., title = file, editor = getOption(\"editor\"), fileEncoding = \"\")"},"utils::sessionInfo":{"description":"Get and report version information about R, the OS and attached or\nloaded packages.\n","example_call":"sessionInfo(package = NULL)"},"utils::SweaveSyntConv":{"description":"This function converts the syntax of files in Sweave\nformat to another Sweave syntax definition.\n","example_call":"SweaveSyntConv(file, syntax, output = NULL)"},"utils::RweaveLatex":{"description":"A driver for Sweave that translates R code chunks in\nLaTeX files by <U+201C>running them<U+201D>, i.e., parse() and\neval() each.\n","example_call":"RweaveLatex()"},"utils::help":{"description":"help is the primary interface to the help systems.\n","example_call":"help(topic, package = NULL, lib.loc = NULL, verbose = getOption(\"verbose\"),"},"utils::prompt":{"description":"Facilitate the constructing of files documenting R objects.\n","example_call":"prompt(object, filename = NULL, name = NULL, ...)"},"utils::getParseText":{"description":"If the \"keep.source\" option is TRUE, R's parser\nwill attach detailed information on the object it has parsed.  These\nfunctions retrieve that information.\n","example_call":"getParseText(parseData, id)"},"utils::.AtNames":{"description":"This page documents a mechanism to generate relevant completions\nfrom a partially completed command line.  It is not intended to be\nuseful by itself, but rather in conjunction with other mechanisms that\nuse it as a backend.  The functions listed in the usage section\nprovide a simple control and query mechanism.  The actual interface\nconsists of a few unexported functions described further down.\n","example_call":".AtNames(x, pattern)"},"utils::url.show":{"description":"Extension of file.show to display text files from a remote\nserver.\n","example_call":"url.show(url, title = url, file = tempfile(), delete.file = TRUE,"},"utils::getCRANmirrors":{"description":"Interact with the user to choose a CRAN mirror.\n","example_call":"getCRANmirrors(all = FALSE, local.only = FALSE)"},"utils::head":{"description":"Returns the first or last parts of a vector, matrix, table, data frame\nor function.  Since head() and tail() are generic\nfunctions, they may also have been extended to other classes.\n","example_call":"head(x, ...)"},"utils::localeToCharset":{"description":"This functions aims to find a suitable coding for the locale named, by\ndefault the current locale, and if it is a UTF-8 locale a suitable\nsingle-byte encoding.\n","example_call":"localeToCharset(locale = Sys.getlocale(\"LC_CTYPE\"))"},"utils::Rprof":{"description":"Enable or disable profiling of the execution of R expressions.\n","example_call":"Rprof(filename = \"Rprof.out\", append = FALSE, interval = 0.02,"},"utils::getParseData":{"description":"If the \"keep.source\" option is TRUE, R's parser\nwill attach detailed information on the object it has parsed.  These\nfunctions retrieve that information.\n","example_call":"getParseData(x, includeText = NA)"},"utils::RweaveLatexSetup":{"description":"A driver for Sweave that translates R code chunks in\nLaTeX files by <U+201C>running them<U+201D>, i.e., parse() and\neval() each.\n","example_call":"RweaveLatexSetup(file, syntax, output = NULL, quiet = FALSE, debug = FALSE,"},"utils::formatOL":{"description":"Format unordered (itemize) and ordered (enumerate) lists.\n","example_call":"formatOL(x, type = \"arabic\", offset = 0, start = 1, width = 0.9 *"},"utils::dump.frames":{"description":"Functions to dump the evaluation environments (frames) and to examine\ndumped frames.\n","example_call":"dump.frames(dumpto = \"last.dump\", to.file = FALSE, include.GlobalEnv = FALSE)"},"utils::read.table":{"description":"Reads a file in table format and creates a data frame from it, with\ncases corresponding to lines and variables to fields in the file.\n","example_call":"read.table(file, header = FALSE, sep = \"\", quote = \"\\\"'\", dec = \".\","},"utils::URLdecode":{"description":"Functions to percent-encode or decode characters in URLs.\n","example_call":"URLdecode(URL)"},"utils::numhash":{"description":"Create and manipulate mutable hash tables.\n","example_call":"numhash(h)"},"utils::isS3method":{"description":"Checks if method is the name of a valid / registered S3\nmethod.  Alternatively, when f and class are specified,\nit is checked if f is the name of an S3 generic function and\npaste(f, class, sep=\".\") is a valid S3 method.\n","example_call":"isS3method(method, f, class, envir = parent.frame())"},"utils::compareVersion":{"description":"Compare two package version numbers to see which is later.\n","example_call":"compareVersion(a, b)"},"utils::count.fields":{"description":"count.fields counts the number of fields, as separated by\nsep, in each of the lines of file read.\n","example_call":"count.fields(file, sep = \"\", quote = \"\\\"'\", skip = 0, blank.lines.skip = TRUE,"},"utils::tar":{"description":"Create a tar archive.\n","example_call":"tar(tarfile, files = NULL, compression = c(\"none\", \"gzip\","},"utils::setRepositories":{"description":"Interact with the user to choose the package repositories to be used.\n","example_call":"setRepositories(graphics = getOption(\"menu.graphics\"), ind = NULL,"},"utils::edit":{"description":"Invoke a text editor on an R object.\n","example_call":"edit(name, ...)"},"utils::mirror2html":{"description":"Functions helping to maintain CRAN, some of them may also be useful\nfor administrators of other repository networks.\n","example_call":"mirror2html(mirrors = NULL, file = \"mirrors.html\", head = \"mirrors-head.html\","},"utils::relist":{"description":"relist() is an S3 generic function with a few methods in order\nto allow easy inversion of unlist(obj) when that is used\nwith an object obj of (S3) class \"relistable\".\n","example_call":"relist(flesh, skeleton = attr(flesh, \"skeleton\"))"},"utils::chooseBioCmirror":{"description":"Interact with the user to choose a Bioconductor mirror.\n","example_call":"chooseBioCmirror(graphics = getOption(\"menu.graphics\"), ind = NULL,"},"utils::available.packages":{"description":"available.packages returns a matrix of details corresponding to\npackages currently available at one or more repositories. The\ncurrent list of packages is downloaded over the internet (or copied\nfrom a local mirror).\n","example_call":"available.packages(contriburl = contrib.url(repos, type), method, fields = NULL,"},"utils::aspell_write_personal_dictionary_file":{"description":"Utilities for spell checking packages via Aspell, Hunspell or Ispell.\n","example_call":"aspell_write_personal_dictionary_file(x, out, language = \"en\", program = NULL)"},"utils::getAnywhere":{"description":"These functions locate all objects with name matching their argument,\nwhether visible on the search path, registered as an S3 method or in a\nnamespace but not exported.  getAnywhere() returns the objects\nand argsAnywhere() returns the arguments of any objects that\nare functions.\n","example_call":"getAnywhere(x)"},"utils::hsearch_db":{"description":"Utilities for searching the help system.\n","example_call":"hsearch_db(package = NULL, lib.loc = NULL, types = getOption(\"help.search.types\"),"},"utils::personList":{"description":"Old interface providing functionality for information about\ncollections of persons.  Since R 2.14.0 person objects\ncan be combined with the corresponding c method which\nsupersedes the personList function.\n","example_call":"personList(...)"},"utils::fileSnapshot":{"description":"fileSnapshot takes a snapshot of a selection of files,\nrecording summary information about each.  changedFiles\ncompares two snapshots, or compares one snapshot to the current state\nof the file system.  The snapshots need not be the same directory;\nthis could be used to compare two directories.\n","example_call":"fileSnapshot(path = \".\", file.info = TRUE, timestamp = NULL, md5sum = FALSE,"},"utils::combn":{"description":"Generate all combinations of the elements of x taken m\nat a time.  If x is a positive integer, returns all\ncombinations of the elements of seq(x) taken m at a\ntime.  If argument FUN is not NULL, applies a function given\nby the argument to each point.  If simplify is FALSE,  returns\na list; otherwise returns an array, typically a\nmatrix.  ... are passed unchanged to the\nFUN function, if specified.\n","example_call":"combn(x, m, FUN = NULL, simplify = TRUE, ...)"},"utils::packageStatus":{"description":"Summarize information about installed packages and packages\navailable at various repositories, and automatically upgrade outdated\npackages.\n","example_call":"packageStatus(lib.loc = NULL, repositories = NULL, method, type = getOption(\"pkgType\"),"},"utils::read.socket":{"description":"read.socket reads a string from the specified socket,\nwrite.socket writes to the specified socket.  There is very\nlittle error checking done by either.\n","example_call":"read.socket(socket, maxlen = 256L, loop = FALSE)"},"utils::find":{"description":"apropos() returns a character vector giving the names of\nobjects in the search list matching (as a regular expression)\nwhat.\n","example_call":"find(what, mode = \"any\", numeric = FALSE, simple.words = TRUE)"},"utils::RweaveLatexOptions":{"description":"These functions are handy for writing Sweave drivers and are\nconsidered internal and hence not documented.  Look at the source code\nof the Sweave LaTeX driver (in this\npackage) or the HTML driver (in the R2HTML package from CRAN) to see\nhow they can be used.\n","example_call":"RweaveLatexOptions(options)"},"utils::page":{"description":"Displays a representation of the object named by x in a pager\nvia file.show.\n","example_call":"page(x, method = c(\"dput\", \"print\"), ...)"},"utils::write.csv":{"description":"write.table prints its required argument x (after\nconverting it to a data frame if it is not one nor a matrix) to\na file or connection.\n","example_call":"write.csv(...)"},"utils::dataentry":{"description":"A spreadsheet-like editor for entering or editing data.\n","example_call":"dataentry(data, modes)"},"utils::getSrcFilename":{"description":"These functions extract information from source references.\n","example_call":"getSrcFilename(x, full.names = FALSE, unique = TRUE)"},"utils::packageDescription":{"description":"Parses and returns the <U+2018>DESCRIPTION<U+2019> file of a package as a\n\"packageDescription\".\n","example_call":"packageDescription(pkg, lib.loc = NULL, fields = NULL, drop = TRUE, encoding = \"\")"},"utils::file_test":{"description":"Utility for shell-style file tests.\n","example_call":"file_test(op, x, y)"},"utils::toBibtex":{"description":"These methods convert R objects to character vectors with\nBibTeX or LaTeX markup.\n","example_call":"toBibtex(object, ...)"},"utils::browseVignettes":{"description":"List available vignettes in an HTML browser with links to PDF,\nLaTeX/Noweb source, and (tangled) R code (if available).\n","example_call":"browseVignettes(package = NULL, lib.loc = NULL, all = TRUE)"},"utils::setBreakpoint":{"description":"These functions locate objects containing particular lines of source\ncode, using the information saved when the code was parsed with\nkeep.source = TRUE.\n","example_call":"setBreakpoint(srcfile, line, nameonly = TRUE, envir = parent.frame(),"},"utils::download.packages":{"description":"These functions can be used to automatically compare the version\nnumbers of installed packages with the newest available version on\nthe repositories and update outdated packages on the fly.\n","example_call":"download.packages(pkgs, destdir, available = NULL, repos = getOption(\"repos\"),"},"utils::remove.packages":{"description":"Removes installed packages/bundles and updates index information\nas necessary.\n","example_call":"remove.packages(pkgs, lib)"},"utils::RweaveLatexFinish":{"description":"These functions are handy for writing Sweave drivers and are\nconsidered internal and hence not documented.  Look at the source code\nof the Sweave LaTeX driver (in this\npackage) or the HTML driver (in the R2HTML package from CRAN) to see\nhow they can be used.\n","example_call":"RweaveLatexFinish(object, error = FALSE)"},"utils::chooseCRANmirror":{"description":"Interact with the user to choose a CRAN mirror.\n","example_call":"chooseCRANmirror(graphics = getOption(\"menu.graphics\"), ind = NULL,"},"utils::upgrade":{"description":"Upgrade objects.","example_call":"upgrade(object, ...)"},"utils::de":{"description":"A spreadsheet-like editor for entering or editing data.\n","example_call":"de(..., Modes = list(), Names = NULL)"},"utils::.RtangleCodeLabel":{"description":"These functions are handy for writing Sweave drivers and are\nconsidered internal and hence not documented.  Look at the source code\nof the Sweave LaTeX driver (in this\npackage) or the HTML driver (in the R2HTML package from CRAN) to see\nhow they can be used.\n","example_call":".RtangleCodeLabel(chunk)"},"utils::formatUL":{"description":"Format unordered (itemize) and ordered (enumerate) lists.\n","example_call":"formatUL(x, label = \"*\", offset = 0, width = 0.9 * getOption(\"width\"))"},"utils::de.restore":{"description":"Internal utils functions\n","example_call":"de.restore(inlist, ncols, coltypes, argnames, args)"},"utils::promptPackage":{"description":"Generates a prototype of a package overview help page\nusing Rd macros that dynamically extract information\nfrom package metadata when building the package.\n","example_call":"promptPackage(package, lib.loc = NULL, filename = NULL, name = NULL,"},"utils::write.csv2":{"description":"write.table prints its required argument x (after\nconverting it to a data frame if it is not one nor a matrix) to\na file or connection.\n","example_call":"write.csv2(...)"},"utils::Rtangle":{"description":"A driver for Stangle that extracts R code chunks.\nNotably all RtangleSetup() arguments may be used as arguments\nin the Stangle() call.\n","example_call":"Rtangle()"},"utils::packageName":{"description":"Many environments are associated with a package; this function\nattempts to determine that package.\n","example_call":"packageName(env = parent.frame())"},"utils::glob2rx":{"description":"Change wildcard aka globbing patterns into the\ncorresponding regular expressions (regexp).\n","example_call":"glob2rx(pattern, trim.head = FALSE, trim.tail = TRUE)"},"utils::unstack":{"description":"Stacking vectors concatenates multiple vectors into a single vector\nalong with a factor indicating where each observation originated.\nUnstacking reverses this operation.\n","example_call":"unstack(x, ...)"},"utils::read.DIF":{"description":"Reads a file in Data Interchange Format (DIF) and creates a\ndata frame from it.  DIF is a format for data matrices such as\nsingle spreadsheets. \n","example_call":"read.DIF(file, header = FALSE, dec = \".\", numerals = c(\"allow.loss\","},"utils::savehistory":{"description":"Load or save or display the commands history.\n","example_call":"savehistory(file = \".Rhistory\")"},"utils::vignette":{"description":"View a specified package vignette, or list the available ones;\ndisplay it rendered in a viewer, and get or edit its R source file.\n","example_call":"vignette(topic, package = NULL, lib.loc = NULL, all = TRUE)"},"utils::install.packages":{"description":"Download and install packages from CRAN-like repositories or from\nlocal files.\n","example_call":"install.packages(pkgs, lib, repos = getOption(\"repos\"), contriburl = contrib.url(repos,"},"utils::.S3methods":{"description":"List all available methods for a S3 and S4 generic function, or all\nmethods for an S3 or S4 class.\n","example_call":".S3methods(generic.function, class, envir = parent.frame(), all.names = FALSE,"},"utils::argsAnywhere":{"description":"These functions locate all objects with name matching their argument,\nwhether visible on the search path, registered as an S3 method or in a\nnamespace but not exported.  getAnywhere() returns the objects\nand argsAnywhere() returns the arguments of any objects that\nare functions.\n","example_call":"argsAnywhere(x)"},"utils::help.search":{"description":"Allows for searching the help system for documentation matching a\ngiven character string in the (file) name, alias, title, concept or\nkeyword entries (or any combination thereof), using either\nfuzzy matching or regular expression matching.  Names\nand titles of the matched help entries are displayed nicely formatted.\n","example_call":"help.search(pattern, fields = c(\"alias\", \"concept\", \"title\"), apropos,"},"utils::getSrcref":{"description":"These functions extract information from source references.\n","example_call":"getSrcref(x)"},"utils::makeRweaveLatexCodeRunner":{"description":"These functions are handy for writing Sweave drivers and are\nconsidered internal and hence not documented.  Look at the source code\nof the Sweave LaTeX driver (in this\npackage) or the HTML driver (in the R2HTML package from CRAN) to see\nhow they can be used.\n","example_call":"makeRweaveLatexCodeRunner(evalFunc = RweaveEvalWithOpt)"},"utils::RweaveEvalWithOpt":{"description":"These functions are handy for writing Sweave drivers and are\nconsidered internal and hence not documented.  Look at the source code\nof the Sweave LaTeX driver (in this\npackage) or the HTML driver (in the R2HTML package from CRAN) to see\nhow they can be used.\n","example_call":"RweaveEvalWithOpt(expr, options)"},"utils::lsf.str":{"description":"ls.str and lsf.str are variations of ls\napplying str() to each matched name: see section Value.\n","example_call":"lsf.str(pos = -1, envir, ...)"},"utils::select.list":{"description":"Select item(s) from a character vector.\n","example_call":"select.list(choices, preselect = NULL, multiple = FALSE, title = NULL,"},"utils::cite":{"description":"Cite a bibentry object in text.  The cite() function\nuses the cite() function from the default\nbibstyle if present, or citeNatbib() if not.\nciteNatbib() uses a style similar to that used by the LaTeX\npackage natbib.\n","example_call":"cite(keys, bib, ...)"},"utils::recover":{"description":"This function allows the user to browse directly on any of the\ncurrently active function calls, and is suitable as an error option.\nThe expression options(error = recover) will make this\nthe error option.\n","example_call":"recover()"},"utils::fix":{"description":"fix invokes edit on x and then assigns the new\n(edited) version of x in the user's workspace.\n","example_call":"fix(x, ...)"},"utils::new.packages":{"description":"old.packages indicates packages which have a (suitable) later\nversion on the repositories whereas update.packages offers to\ndownload and install such packages.\n","example_call":"new.packages(lib.loc = NULL, repos = getOption(\"repos\"), contriburl = contrib.url(repos,"},"utils::aspell_package_Rd_files":{"description":"Utilities for spell checking packages via Aspell, Hunspell or Ispell.\n","example_call":"aspell_package_Rd_files(dir, drop = c(\"\\\\abbr\", \"\\\\acronym\", \"\\\\author\", \"\\\\references\"),"},"utils::str":{"description":"Compactly display the internal structure of an R object, a\ndiagnostic function and an alternative to summary\n(and to some extent, dput).  Ideally, only one line for\neach <U+2018>basic<U+2019> structure is displayed.  It is especially well suited\nto compactly display the (abbreviated) contents of (possibly nested)\nlists.  The idea is to give reasonable output for any R\nobject.  It calls args for (non-primitive) function objects.\n","example_call":"str(object, ...)"},"utils::RtangleRuncode":{"description":"These functions are handy for writing Sweave drivers and are\nconsidered internal and hence not documented.  Look at the source code\nof the Sweave LaTeX driver (in this\npackage) or the HTML driver (in the R2HTML package from CRAN) to see\nhow they can be used.\n","example_call":"RtangleRuncode(object, chunk, options)"},"utils::process.events":{"description":"R front ends like the Windows GUI handle key presses and mouse clicks\nthrough <U+201C>events<U+201D> generated by the OS. These are processed\nautomatically by R at intervals during computations, but in some cases\nit may be desirable to trigger immediate event handling.  The\nprocess.events function does that.\n","example_call":"process.events()"},"utils::example":{"description":"Run all the R code from the Examples part of R's online help\ntopic topic, with possible exceptions due to <U+2060>\\dontrun<U+2060>,\n<U+2060>\\dontshow<U+2060>, and <U+2060>\\donttest<U+2060> tags, see <U+2018>Details<U+2019> below.\n","example_call":"example(topic, package = NULL, lib.loc = NULL, character.only = FALSE,"},"utils::warnErrList":{"description":"Collect errors (class \"error\", typically from tryCatch)\nfrom a list x into a <U+201C>summary warning<U+201D>, by default\nproduce a warning and keep that message as\n\"warningMsg\" attribute.\n","example_call":"warnErrList(x, warn = TRUE, errValue = NULL)"},"utils::getSrcLocation":{"description":"These functions extract information from source references.\n","example_call":"getSrcLocation(x, which = c(\"line\", \"column\", \"byte\", \"parse\"), first = TRUE)"},"utils::flush.console":{"description":"This does nothing except on console-based versions of R.\nOn the macOS and Windows GUIs, it ensures that the display of\noutput in the console is current, even if output buffering is on.\n","example_call":"flush.console()"},"utils::maphash":{"description":"Create and manipulate mutable hash tables.\n","example_call":"maphash(h, FUN)"},"utils::timestamp":{"description":"Load or save or display the commands history.\n","example_call":"timestamp(stamp = date(), prefix = \"##------ \", suffix = \" ------##\","},"utils::make.packages.html":{"description":"Re-create the HTML list of packages.\n","example_call":"make.packages.html(lib.loc = .libPaths(), temp = FALSE, verbose = TRUE,"},"utils::rc.options":{"description":"This page documents a mechanism to generate relevant completions\nfrom a partially completed command line.  It is not intended to be\nuseful by itself, but rather in conjunction with other mechanisms that\nuse it as a backend.  The functions listed in the usage section\nprovide a simple control and query mechanism.  The actual interface\nconsists of a few unexported functions described further down.\n","example_call":"rc.options(...)"},"utils::getFromNamespace":{"description":"Utility functions to access and replace the non-exported functions in\na namespace, for use in developing packages with namespaces.\n","example_call":"getFromNamespace(x, ns, pos = -1, envir = as.environment(pos))"},"utils::clrhash":{"description":"Create and manipulate mutable hash tables.\n","example_call":"clrhash(h)"},"utils::adist":{"description":"Compute the approximate string distance between character vectors.\nThe distance is a generalized Levenshtein (edit) distance, giving the\nminimal possibly weighted number of insertions, deletions and\nsubstitutions needed to transform one string into another.\n","example_call":"adist(x, y = NULL, costs = NULL, counts = FALSE, fixed = TRUE,"},"utils::contrib.url":{"description":"contrib.url adds the appropriate type-specific path within a\nrepository to each URL in repos.\n","example_call":"contrib.url(repos, type = getOption(\"pkgType\"))"},"utils::URLencode":{"description":"Functions to percent-encode or decode characters in URLs.\n","example_call":"URLencode(URL, reserved = FALSE, repeated = FALSE)"},"utils::rc.settings":{"description":"This page documents a mechanism to generate relevant completions\nfrom a partially completed command line.  It is not intended to be\nuseful by itself, but rather in conjunction with other mechanisms that\nuse it as a backend.  The functions listed in the usage section\nprovide a simple control and query mechanism.  The actual interface\nconsists of a few unexported functions described further down.\n","example_call":"rc.settings(ops, ns, args, dots, func, ipck, S3, data, help, argdb,"},"utils::help.start":{"description":"Start the hypertext (currently HTML) version of R's online\ndocumentation.\n","example_call":"help.start(update = FALSE, gui = \"irrelevant\", browser = getOption(\"browser\"),"},"utils::unzip":{"description":"Extract files from or list a zip archive.\n","example_call":"unzip(zipfile, files = NULL, list = FALSE, overwrite = TRUE,"},"utils::pico":{"description":"Invoke a text editor on an R object.\n","example_call":"pico(name = NULL, file = \"\")"},"vctrs::vec_cast.list":{"description":"vec_cast() provides directional conversions from one type of\nvector to another. Along with vec_ptype2(), this generic forms\nthe foundation of type coercions in vctrs.\n","example_call":"vec_cast.list(x, to, ...)"},"vctrs::vec_cast.logical":{"description":"vec_cast() provides directional conversions from one type of\nvector to another. Along with vec_ptype2(), this generic forms\nthe foundation of type coercions in vctrs.\n","example_call":"vec_cast.logical(x, to, ...)"},"vctrs::vec_ptype_abbr":{"description":"vec_ptype_full() displays the full type of the vector. vec_ptype_abbr()\nprovides an abbreviated summary suitable for use in a column heading.\n","example_call":"vec_ptype_abbr(x, ..., prefix_named = FALSE, suffix_shape = TRUE)"},"vctrs::unspecified":{"description":"This is a partial type used to represent logical vectors\nthat only contain NA. These require special handling because we want to\nallow NA to specify missingness without requiring a type.\n","example_call":"unspecified(n = 0)"},"vctrs::vec_set_names":{"description":"These functions work like rlang::names2(), names() and names<-(),\nexcept that they return or modify the the rowwise names of the vector. These are:\n","example_call":"vec_set_names(x, names)"},"vctrs::vec_locate_sorted_groups":{"description":"\n","example_call":"vec_locate_sorted_groups(x, ..., direction = \"asc\", na_value = \"largest\", nan_distinct = FALSE,"},"vctrs::vec_ptype_common":{"description":"vec_ptype() returns the unfinalised prototype of a single vector.\nvec_ptype_common() finds the common type of multiple vectors.\nvec_ptype_show() nicely prints the common type of any number of\ninputs, and is designed for interactive exploration.\n","example_call":"vec_ptype_common(..., .ptype = NULL, .arg = \"\", .call = caller_env())"},"vctrs::vec_recycle_common":{"description":"vec_recycle(x, size) recycles a single vector to a given size.\nvec_recycle_common(...) recycles multiple vectors to their common size. All\nfunctions obey the vctrs recycling rules, and will\nthrow an error if recycling is not possible. See vec_size() for the precise\ndefinition of size.\n","example_call":"vec_recycle_common(..., .size = NULL, .arg = \"\", .call = caller_env())"},"vctrs::vec_type":{"description":"\n","example_call":"vec_type(x)"},"vctrs::vec_proxy_order":{"description":"vec_proxy_compare() and vec_proxy_order() return proxy objects, i.e.\nan atomic vector or data frame of atomic vectors.\n","example_call":"vec_proxy_order(x, ...)"},"vctrs::vec_run_sizes":{"description":"Unlike base::rle(), adjacent missing values are considered identical when\nconstructing runs. For example, vec_identify_runs(c(NA, NA)) will return\nc(1, 1), not c(1, 2).\n","example_call":"vec_run_sizes(x)"},"vctrs::vec_cast.ordered":{"description":"A factor is an integer with attribute levels, a character vector. There\nshould be one level for each integer between 1 and max(x).\nAn ordered factor has the same properties as a factor, but possesses\nan extra class that marks levels as having a total ordering.\n","example_call":"vec_cast.ordered(x, to, ...)"},"vctrs::vec_as_index":{"description":"\n","example_call":"vec_as_index(i, n, names = NULL)"},"vctrs::vec_interleave":{"description":"vec_interleave() combines multiple vectors together, much like vec_c(),\nbut does so in such a way that the elements of each vector are interleaved\ntogether.\n","example_call":"vec_interleave(..., .ptype = NULL, .name_spec = NULL, .name_repair = c(\"minimal\","},"vctrs::list_all_vectors":{"description":"Notably, data frames and S3 record style classes like POSIXlt are not\nconsidered lists.\n","example_call":"list_all_vectors(x)"},"vctrs::vec_seq_along":{"description":"vec_seq_along() is equivalent to seq_along() but uses size, not length.\nvec_init_along() creates a vector of missing values with size matching\nan existing object.\n","example_call":"vec_seq_along(x)"},"vctrs::vec_names2":{"description":"These functions work like rlang::names2(), names() and names<-(),\nexcept that they return or modify the the rowwise names of the vector. These are:\n","example_call":"vec_names2(x, ..., repair = c(\"minimal\", \"unique\", \"universal\","},"vctrs::vec_ptype2.list":{"description":"vec_ptype2() defines the coercion hierarchy for a set of related\nvector types. Along with vec_cast(), this generic forms the\nfoundation of type coercions in vctrs.\n","example_call":"vec_ptype2.list(x, y, ..., x_arg = \"\", y_arg = \"\")"},"vctrs::vec_ptype2.raw":{"description":"vec_ptype2() defines the coercion hierarchy for a set of related\nvector types. Along with vec_cast(), this generic forms the\nfoundation of type coercions in vctrs.\n","example_call":"vec_ptype2.raw(x, y, ..., x_arg = \"\", y_arg = \"\")"},"vctrs::vec_unique":{"description":"In most cases, missing values are not considered to be equal, i.e.\nNA == NA is not TRUE. This behaviour would be unappealing here,\nso these functions consider all NAs to be equal. (Similarly,\nall NaN are also considered to be equal.)\n","example_call":"vec_unique(x)"},"vctrs::vec_ptype2.POSIXlt":{"description":"These function help the base Date, POSIXct, and difftime classes fit\ninto the vctrs type system by providing constructors, coercion functions,\nand casting functions.\n","example_call":"vec_ptype2.POSIXlt(x, y, ...)"},"vctrs::obj_print":{"description":"These are constructed to be more easily extensible since you can override\nthe <U+2060>_header()<U+2060>, <U+2060>_data()<U+2060> or <U+2060>_footer()<U+2060> components individually. The\ndefault methods are built on top of format().\n","example_call":"obj_print(x, ...)"},"vctrs::obj_str_footer":{"description":"These are constructed to be more easily extensible since you can override\nthe <U+2060>_header()<U+2060>, <U+2060>_data()<U+2060> or <U+2060>_footer()<U+2060> components individually. The\ndefault methods are built on top of format().\n","example_call":"obj_str_footer(x, ...)"},"vctrs::vec_arith.logical":{"description":"This generic provides a common double dispatch mechanism for all infix\noperators (+, -, /, *, ^, %%, %/%, !, &, |). It is used\nto power the default arithmetic and boolean operators for vctrs objects,\novercoming the limitations of the base Ops generic.\n","example_call":"vec_arith.logical(op, x, y, ...)"},"vctrs::vec_cast":{"description":"vec_cast() provides directional conversions from one type of\nvector to another. Along with vec_ptype2(), this generic forms\nthe foundation of type coercions in vctrs.\n","example_call":"vec_cast(x, to, ..., x_arg = caller_arg(x), to_arg = \"\", call = caller_env())"},"vctrs::vec_assert":{"description":"\n","example_call":"vec_assert(x, ptype = NULL, size = NULL, arg = caller_arg(x),"},"vctrs::list_drop_empty":{"description":"list_drop_empty() removes empty elements from a list. This includes NULL\nelements along with empty vectors, like integer(0). This is equivalent to,\nbut faster than, vec_slice(x, list_sizes(x) != 0L).\n","example_call":"list_drop_empty(x)"},"vctrs::obj_check_vector":{"description":"Informally, a vector is a collection that makes sense to use as column in a\ndata frame. The following rules define whether or not x is considered a\nvector.\n","example_call":"obj_check_vector(x, ..., arg = caller_arg(x), call = caller_env())"},"vctrs::vec_ptype2.AsIs":{"description":"These functions help the base AsIs class fit into the vctrs type system\nby providing coercion and casting functions.\n","example_call":"vec_ptype2.AsIs(x, y, ..., x_arg = \"\", y_arg = \"\")"},"vctrs::vec_check_size":{"description":"Informally, a vector is a collection that makes sense to use as column in a\ndata frame. The following rules define whether or not x is considered a\nvector.\n","example_call":"vec_check_size(x, size, ..., arg = caller_arg(x), call = caller_env())"},"vctrs::vec_init_along":{"description":"vec_seq_along() is equivalent to seq_along() but uses size, not length.\nvec_init_along() creates a vector of missing values with size matching\nan existing object.\n","example_call":"vec_init_along(x, y = x)"},"vctrs::vec_cbind_frame_ptype":{"description":"\n","example_call":"vec_cbind_frame_ptype(x, ...)"},"vctrs::vec_as_subscript":{"description":"\n","example_call":"vec_as_subscript(i, ..., logical = c(\"cast\", \"error\"), numeric = c(\"cast\","},"vctrs::vec_cbind":{"description":"This pair of functions binds together data frames (and vectors), either\nrow-wise or column-wise. Row-binding creates a data frame with common type\nacross all arguments. Column-binding creates a data frame with common length\nacross all arguments.\n","example_call":"vec_cbind(..., .ptype = NULL, .size = NULL, .name_repair = c(\"unique\","},"vctrs::s3_register":{"description":"Generally, the recommend way to register an S3 method is to use the\nS3Method() namespace directive (often generated automatically by the\n<U+2060>@export<U+2060> roxygen2 tag). However, this technique requires that the generic\nbe in an imported package, and sometimes you want to suggest a package,\nand only provide a method when that package is loaded. s3_register()\ncan be called from your package's .onLoad() to dynamically register\na method only if the generic's package is loaded.\n","example_call":"s3_register(generic, class, method = NULL)"},"vctrs::vec_duplicate_detect":{"description":"In most cases, missing values are not considered to be equal, i.e.\nNA == NA is not TRUE. This behaviour would be unappealing here,\nso these functions consider all NAs to be equal. (Similarly,\nall NaN are also considered to be equal.)\n","example_call":"vec_duplicate_detect(x)"},"vctrs::vec_data":{"description":"\n","example_call":"vec_data(x)"},"vctrs::vec_equal_na":{"description":"\n","example_call":"vec_equal_na(x)"},"vctrs::stop_incompatible_op":{"description":"These functions are called for their side effect of raising\nerrors and warnings.\nThese conditions have custom classes and structures to make\ntesting easier.\n","example_call":"stop_incompatible_op(op, x, y, details = NULL, ..., message = NULL, class = NULL,"},"vctrs::vec_locate_matches":{"description":"\n","example_call":"vec_locate_matches(needles, haystack, ..., condition = \"==\", filter = \"none\","},"vctrs::vec_unique_loc":{"description":"In most cases, missing values are not considered to be equal, i.e.\nNA == NA is not TRUE. This behaviour would be unappealing here,\nso these functions consider all NAs to be equal. (Similarly,\nall NaN are also considered to be equal.)\n","example_call":"vec_unique_loc(x)"},"vctrs::n_fields":{"description":"A rcrd behaves like a vector, so length(), names(), and $ can\nnot provide access to the fields of the underlying list. These helpers do:\nfields() is equivalent to names(); n_fields() is equivalent to\nlength(); field() is equivalent to $.\n","example_call":"n_fields(x)"},"vctrs::vec_math":{"description":"This generic provides a common dispatch mechanism for all regular unary\nmathematical functions. It is used as a common wrapper around many of the\nSummary group generics, the Math group generics, and a handful of other\nmathematical functions like mean() (but not var() or sd()).\n","example_call":"vec_math(.fn, .x, ...)"},"vctrs::vec_empty":{"description":"\n","example_call":"vec_empty(x)"},"vctrs::vec_ptype_show":{"description":"vec_ptype() returns the unfinalised prototype of a single vector.\nvec_ptype_common() finds the common type of multiple vectors.\nvec_ptype_show() nicely prints the common type of any number of\ninputs, and is designed for interactive exploration.\n","example_call":"vec_ptype_show(...)"},"vctrs::vec_ptype2.logical":{"description":"vec_ptype2() defines the coercion hierarchy for a set of related\nvector types. Along with vec_cast(), this generic forms the\nfoundation of type coercions in vctrs.\n","example_call":"vec_ptype2.logical(x, y, ..., x_arg = \"\", y_arg = \"\")"},"vctrs::new_rcrd":{"description":"The rcrd class extends vctr. A rcrd is composed of 1 or more fields,\nwhich must be vectors of the same length. Is designed specifically for\nclasses that can naturally be decomposed into multiple vectors of the same\nlength, like POSIXlt, but where the organisation should be considered\nan implementation detail invisible to the user (unlike a data.frame).\n","example_call":"new_rcrd(fields, ..., class = character())"},"vctrs::obj_is_vector":{"description":"Informally, a vector is a collection that makes sense to use as column in a\ndata frame. The following rules define whether or not x is considered a\nvector.\n","example_call":"obj_is_vector(x)"},"vctrs::list_all_size":{"description":"Notably, data frames and S3 record style classes like POSIXlt are not\nconsidered lists.\n","example_call":"list_all_size(x, size)"},"vctrs::vec_set_intersect":{"description":"Because these are set operations, these functions only return unique values\nfrom x and y, returned in the order they first appeared in the original\ninput. Names of x and y are retained on the result, but names are always\ntaken from x if the value appears in both inputs.\n","example_call":"vec_set_intersect(x, y, ..., ptype = NULL, x_arg = \"x\", y_arg = \"y\","},"vctrs::list_sizes":{"description":"vec_size(x) returns the size of a vector. vec_is_empty()\nreturns TRUE if the size is zero, FALSE otherwise.\n","example_call":"list_sizes(x)"},"vctrs::vec_size":{"description":"vec_size(x) returns the size of a vector. vec_is_empty()\nreturns TRUE if the size is zero, FALSE otherwise.\n","example_call":"vec_size(x)"},"vctrs::vec_ptype2.integer":{"description":"vec_ptype2() defines the coercion hierarchy for a set of related\nvector types. Along with vec_cast(), this generic forms the\nfoundation of type coercions in vctrs.\n","example_call":"vec_ptype2.integer(x, y, ..., x_arg = \"\", y_arg = \"\")"},"vctrs::MISSING":{"description":"This generic provides a common double dispatch mechanism for all infix\noperators (+, -, /, *, ^, %%, %/%, !, &, |). It is used\nto power the default arithmetic and boolean operators for vctrs objects,\novercoming the limitations of the base Ops generic.\n","example_call":"MISSING()"},"vctrs::vec_fill_missing":{"description":"\n","example_call":"vec_fill_missing(x, direction = c(\"down\", \"up\", \"downup\", \"updown\"),"},"vctrs::vec_ptype2.Date":{"description":"These function help the base Date, POSIXct, and difftime classes fit\ninto the vctrs type system by providing constructors, coercion functions,\nand casting functions.\n","example_call":"vec_ptype2.Date(x, y, ...)"},"vctrs::vec_cast.integer64":{"description":"A integer64 is a 64 bits integer vector, implemented in the bit64 package.\n","example_call":"vec_cast.integer64(x, to, ...)"},"vctrs::vec_recycle":{"description":"vec_recycle(x, size) recycles a single vector to a given size.\nvec_recycle_common(...) recycles multiple vectors to their common size. All\nfunctions obey the vctrs recycling rules, and will\nthrow an error if recycling is not possible. See vec_size() for the precise\ndefinition of size.\n","example_call":"vec_recycle(x, size, ..., x_arg = \"\", call = caller_env())"},"vctrs::field<-":{"description":"A rcrd behaves like a vector, so length(), names(), and $ can\nnot provide access to the fields of the underlying list. These helpers do:\nfields() is equivalent to names(); n_fields() is equivalent to\nlength(); field() is equivalent to $.\n","example_call":"field<-(x, i, value)"},"vctrs::vec_equal":{"description":"vec_equal() tests if two vectors are equal.\n","example_call":"vec_equal(x, y, na_equal = FALSE, .ptype = NULL)"},"vctrs::vec_ptype2.POSIXct":{"description":"These function help the base Date, POSIXct, and difftime classes fit\ninto the vctrs type system by providing constructors, coercion functions,\nand casting functions.\n","example_call":"vec_ptype2.POSIXct(x, y, ...)"},"vctrs::vec_ptype2":{"description":"vec_ptype2() defines the coercion hierarchy for a set of related\nvector types. Along with vec_cast(), this generic forms the\nfoundation of type coercions in vctrs.\n","example_call":"vec_ptype2(x, y, ..., x_arg = caller_arg(x), y_arg = caller_arg(y),"},"vctrs::vec_as_subscript2":{"description":"\n","example_call":"vec_as_subscript2(i, ..., numeric = c(\"cast\", \"error\"), character = c(\"cast\","},"vctrs::vec_restore":{"description":"\n","example_call":"vec_restore(x, to, ...)"},"vctrs::vec_rbind":{"description":"This pair of functions binds together data frames (and vectors), either\nrow-wise or column-wise. Row-binding creates a data frame with common type\nacross all arguments. Column-binding creates a data frame with common length\nacross all arguments.\n","example_call":"vec_rbind(..., .ptype = NULL, .names_to = rlang::zap(), .name_repair = c(\"unique\","},"vctrs::vec_names":{"description":"These functions work like rlang::names2(), names() and names<-(),\nexcept that they return or modify the the rowwise names of the vector. These are:\n","example_call":"vec_names(x)"},"vctrs::new_data_frame":{"description":"new_data_frame() constructs a new data frame from an existing list. It is\nmeant to be performant, and does not check the inputs for correctness in any\nway. It is only safe to use after a call to df_list(), which collects and\nvalidates the columns used to construct the data frame.\n","example_call":"new_data_frame(x = list(), n = NULL, ..., class = NULL)"},"vctrs::vec_cast.double":{"description":"vec_cast() provides directional conversions from one type of\nvector to another. Along with vec_ptype2(), this generic forms\nthe foundation of type coercions in vctrs.\n","example_call":"vec_cast.double(x, to, ...)"},"vctrs::vec_repeat":{"description":"\n","example_call":"vec_repeat(x, each = 1L, times = 1L)"},"vctrs::vec_cast.integer":{"description":"vec_cast() provides directional conversions from one type of\nvector to another. Along with vec_ptype2(), this generic forms\nthe foundation of type coercions in vctrs.\n","example_call":"vec_cast.integer(x, to, ...)"},"vctrs::obj_str_data":{"description":"These are constructed to be more easily extensible since you can override\nthe <U+2060>_header()<U+2060>, <U+2060>_data()<U+2060> or <U+2060>_footer()<U+2060> components individually. The\ndefault methods are built on top of format().\n","example_call":"obj_str_data(x, ...)"},"vctrs::vec_detect_complete":{"description":"vec_detect_complete() detects \"complete\" observations. An observation is\nconsidered complete if it is non-missing. For most vectors, this implies that\nvec_detect_complete(x) == !vec_detect_missing(x).\n","example_call":"vec_detect_complete(x)"},"vctrs::vec_identify_runs":{"description":"Unlike base::rle(), adjacent missing values are considered identical when\nconstructing runs. For example, vec_identify_runs(c(NA, NA)) will return\nc(1, 1), not c(1, 2).\n","example_call":"vec_identify_runs(x)"},"vctrs::vec_ptype2.data.frame":{"description":"These functions help the base data.frame class fit into the vctrs type system\nby providing coercion and casting functions.\n","example_call":"vec_ptype2.data.frame(x, y, ...)"},"vctrs::vec_cast.difftime":{"description":"These function help the base Date, POSIXct, and difftime classes fit\ninto the vctrs type system by providing constructors, coercion functions,\nand casting functions.\n","example_call":"vec_cast.difftime(x, to, ...)"},"vctrs::vec_compare":{"description":"Compare two vectors\n","example_call":"vec_compare(x, y, na_equal = FALSE, .ptype = NULL)"},"vctrs::vec_cast.vctrs_list_of":{"description":"A list_of object is a list where each element has the same type.\nModifying the list with $, [, and [[ preserves the constraint\nby coercing all input items.\n","example_call":"vec_cast.vctrs_list_of(x, to, ...)"},"vctrs::vec_ptype2.vctrs_list_of":{"description":"A list_of object is a list where each element has the same type.\nModifying the list with $, [, and [[ preserves the constraint\nby coercing all input items.\n","example_call":"vec_ptype2.vctrs_list_of(x, y, ..., x_arg = \"\", y_arg = \"\")"},"vctrs::vec_set_symmetric_difference":{"description":"Because these are set operations, these functions only return unique values\nfrom x and y, returned in the order they first appeared in the original\ninput. Names of x and y are retained on the result, but names are always\ntaken from x if the value appears in both inputs.\n","example_call":"vec_set_symmetric_difference(x, y, ..., ptype = NULL, x_arg = \"x\", y_arg = \"y\","},"vctrs::fields":{"description":"A rcrd behaves like a vector, so length(), names(), and $ can\nnot provide access to the fields of the underlying list. These helpers do:\nfields() is equivalent to names(); n_fields() is equivalent to\nlength(); field() is equivalent to $.\n","example_call":"fields(x)"},"vctrs::maybe_lossy_cast":{"description":"\n","example_call":"maybe_lossy_cast(result, x, to, lossy = NULL, locations = NULL, ...,"},"vctrs::vec_as_location":{"description":"These helpers provide a means of standardizing common indexing\nmethods such as integer, character or logical indexing.\n","example_call":"vec_as_location(i, n, names = NULL, ..., missing = c(\"propagate\", \"remove\","},"vctrs::new_partial":{"description":"\n","example_call":"new_partial(..., class = character())"},"vctrs::obj_print_data":{"description":"These are constructed to be more easily extensible since you can override\nthe <U+2060>_header()<U+2060>, <U+2060>_data()<U+2060> or <U+2060>_footer()<U+2060> components individually. The\ndefault methods are built on top of format().\n","example_call":"obj_print_data(x, ...)"},"vctrs::vec_unrep":{"description":"Using vec_unrep() and vec_rep_each() together is similar to using\nbase::rle() and base::inverse.rle(). The following invariant shows\nthe relationship between the two functions:\n","example_call":"vec_unrep(x)"},"vctrs::vec_sort":{"description":"Order and sort vectors\n","example_call":"vec_sort(x, ..., direction = c(\"asc\", \"desc\"), na_value = c(\"largest\","},"vctrs::vec_slice":{"description":"This provides a common interface to extracting and modifying observations\nfor all vector types, regardless of dimensionality. It is an analog to [\nthat matches vec_size() instead of length().\n","example_call":"vec_slice(x, i, ..., error_call = current_env())"},"vctrs::vec_cast.factor":{"description":"A factor is an integer with attribute levels, a character vector. There\nshould be one level for each integer between 1 and max(x).\nAn ordered factor has the same properties as a factor, but possesses\nan extra class that marks levels as having a total ordering.\n","example_call":"vec_cast.factor(x, to, ...)"},"vctrs::vec_set_union":{"description":"Because these are set operations, these functions only return unique values\nfrom x and y, returned in the order they first appeared in the original\ninput. Names of x and y are retained on the result, but names are always\ntaken from x if the value appears in both inputs.\n","example_call":"vec_set_union(x, y, ..., ptype = NULL, x_arg = \"x\", y_arg = \"y\","},"vctrs::vec_group_id":{"description":"\n","example_call":"vec_group_id(x)"},"vctrs::vec_unchop":{"description":"\n","example_call":"vec_unchop(x, indices = NULL, ptype = NULL, name_spec = NULL,"},"vctrs::vec_ptype2.ordered":{"description":"A factor is an integer with attribute levels, a character vector. There\nshould be one level for each integer between 1 and max(x).\nAn ordered factor has the same properties as a factor, but possesses\nan extra class that marks levels as having a total ordering.\n","example_call":"vec_ptype2.ordered(x, y, ...)"},"vctrs::new_date":{"description":"These function help the base Date, POSIXct, and difftime classes fit\ninto the vctrs type system by providing constructors, coercion functions,\nand casting functions.\n","example_call":"new_date(x = double())"},"vctrs::new_ordered":{"description":"A factor is an integer with attribute levels, a character vector. There\nshould be one level for each integer between 1 and max(x).\nAn ordered factor has the same properties as a factor, but possesses\nan extra class that marks levels as having a total ordering.\n","example_call":"new_ordered(x = integer(), levels = character())"},"vctrs::allow_lossy_cast":{"description":"These functions are called for their side effect of raising\nerrors and warnings.\nThese conditions have custom classes and structures to make\ntesting easier.\n","example_call":"allow_lossy_cast(expr, x_ptype = NULL, to_ptype = NULL)"},"vctrs::vec_ptype2.factor":{"description":"A factor is an integer with attribute levels, a character vector. There\nshould be one level for each integer between 1 and max(x).\nAn ordered factor has the same properties as a factor, but possesses\nan extra class that marks levels as having a total ordering.\n","example_call":"vec_ptype2.factor(x, y, ...)"},"vctrs::vec_c":{"description":"Combine all arguments into a new vector of common type.\n","example_call":"vec_c(..., .ptype = NULL, .name_spec = NULL, .name_repair = c(\"minimal\","},"vctrs::vec_rank":{"description":"vec_rank() computes the sample ranks of a vector. For data frames, ranks\nare computed along the rows, using all columns after the first to break\nties.\n","example_call":"vec_rank(x, ..., ties = c(\"min\", \"max\", \"sequential\", \"dense\"),"},"vctrs::df_list":{"description":"df_list() constructs the data structure underlying a data\nframe, a named list of equal-length vectors. It is often used in\ncombination with new_data_frame() to safely and consistently create\na helper function for data frame subclasses.\n","example_call":"df_list(..., .size = NULL, .unpack = TRUE, .name_repair = c(\"check_unique\","},"vctrs::vec_assign":{"description":"This provides a common interface to extracting and modifying observations\nfor all vector types, regardless of dimensionality. It is an analog to [\nthat matches vec_size() instead of length().\n","example_call":"vec_assign(x, i, value, ..., x_arg = \"\", value_arg = \"\")"},"vctrs::list_check_all_size":{"description":"Notably, data frames and S3 record style classes like POSIXlt are not\nconsidered lists.\n","example_call":"list_check_all_size(x, size, ..., arg = caller_arg(x), call = caller_env())"},"vctrs::vec_any_missing":{"description":"Data frame rows are only considered missing if every element in the row is\nmissing. Similarly, record vector elements are only considered\nmissing if every field in the record is missing. Put another way, rows with\nany missing values are considered incomplete, but\nonly rows with all missing values are considered missing.\n","example_call":"vec_any_missing(x)"},"vctrs::vec_as_names":{"description":"vec_as_names() takes a character vector of names and repairs it\naccording to the repair argument. It is the r-lib and tidyverse\nequivalent of base::make.names().\n","example_call":"vec_as_names(names, ..., repair = c(\"minimal\", \"unique\", \"universal\","},"vctrs::tib_cast":{"description":"df_ptype2() and df_cast() are the two functions you need to\ncall from vec_ptype2() and vec_cast() methods for data frame\nsubclasses. See ?howto-faq-coercion-data-frame.\nTheir main job is to determine the common type of two data frames,\nadding and coercing columns as needed, or throwing an incompatible\ntype error when the columns are not compatible.\n","example_call":"tib_cast(x, to, ..., x_arg = \"\", to_arg = \"\", call = caller_env())"},"vctrs::vec_math_base":{"description":"This generic provides a common dispatch mechanism for all regular unary\nmathematical functions. It is used as a common wrapper around many of the\nSummary group generics, the Math group generics, and a handful of other\nmathematical functions like mean() (but not var() or sd()).\n","example_call":"vec_math_base(.fn, .x, ...)"},"vctrs::vec_ptype_full":{"description":"vec_ptype_full() displays the full type of the vector. vec_ptype_abbr()\nprovides an abbreviated summary suitable for use in a column heading.\n","example_call":"vec_ptype_full(x, ...)"},"vctrs::new_factor":{"description":"A factor is an integer with attribute levels, a character vector. There\nshould be one level for each integer between 1 and max(x).\nAn ordered factor has the same properties as a factor, but possesses\nan extra class that marks levels as having a total ordering.\n","example_call":"new_factor(x = integer(), levels = character(), ..., class = character())"},"vctrs::vec_size_common":{"description":"vec_size(x) returns the size of a vector. vec_is_empty()\nreturns TRUE if the size is zero, FALSE otherwise.\n","example_call":"vec_size_common(..., .size = NULL, .absent = 0L, .arg = \"\", .call = caller_env())"},"vctrs::vec_as_names_legacy":{"description":"This standardises names with the legacy approach that was used in\ntidyverse packages (such as tibble, tidyr, and readxl) before\nvec_as_names() was implemented. This tool is meant to help\ntransitioning to the new name repairing standard and will be\ndeprecated and removed from the package some time in the future.\n","example_call":"vec_as_names_legacy(names, prefix = \"V\", sep = \"\")"},"vctrs::stop_incompatible_type":{"description":"These functions are called for their side effect of raising\nerrors and warnings.\nThese conditions have custom classes and structures to make\ntesting easier.\n","example_call":"stop_incompatible_type(x, y, ..., x_arg, y_arg, action = c(\"combine\", \"convert\"),"},"vctrs::obj_str_header":{"description":"These are constructed to be more easily extensible since you can override\nthe <U+2060>_header()<U+2060>, <U+2060>_data()<U+2060> or <U+2060>_footer()<U+2060> components individually. The\ndefault methods are built on top of format().\n","example_call":"obj_str_header(x, ...)"},"vctrs::vec_count":{"description":"Count the number of unique values in a vector. vec_count() has two\nimportant differences to table(): it returns a data frame, and when\ngiven multiple inputs (as a data frame), it only counts combinations that\nappear in the input.\n","example_call":"vec_count(x, sort = c(\"count\", \"key\", \"location\", \"none\"))"},"vctrs::vec_arith.difftime":{"description":"These function help the base Date, POSIXct, and difftime classes fit\ninto the vctrs type system by providing constructors, coercion functions,\nand casting functions.\n","example_call":"vec_arith.difftime(op, x, y, ...)"},"vctrs::new_duration":{"description":"These function help the base Date, POSIXct, and difftime classes fit\ninto the vctrs type system by providing constructors, coercion functions,\nand casting functions.\n","example_call":"new_duration(x = double(), units = c(\"secs\", \"mins\", \"hours\", \"days\","},"vctrs::vec_ptype2.complex":{"description":"vec_ptype2() defines the coercion hierarchy for a set of related\nvector types. Along with vec_cast(), this generic forms the\nfoundation of type coercions in vctrs.\n","example_call":"vec_ptype2.complex(x, y, ..., x_arg = \"\", y_arg = \"\")"},"vctrs::obj_str":{"description":"These are constructed to be more easily extensible since you can override\nthe <U+2060>_header()<U+2060>, <U+2060>_data()<U+2060> or <U+2060>_footer()<U+2060> components individually. The\ndefault methods are built on top of format().\n","example_call":"obj_str(x, ...)"},"vctrs::vec_ptype_finalise":{"description":"\n","example_call":"vec_ptype_finalise(x, ...)"},"vctrs::is_list_of":{"description":"A list_of object is a list where each element has the same type.\nModifying the list with $, [, and [[ preserves the constraint\nby coercing all input items.\n","example_call":"is_list_of(x)"},"vctrs::vec_cast.raw":{"description":"vec_cast() provides directional conversions from one type of\nvector to another. Along with vec_ptype2(), this generic forms\nthe foundation of type coercions in vctrs.\n","example_call":"vec_cast.raw(x, to, ...)"},"vctrs::vec_is_list":{"description":"\n","example_call":"vec_is_list(x)"},"vctrs::vec_arith.POSIXlt":{"description":"These function help the base Date, POSIXct, and difftime classes fit\ninto the vctrs type system by providing constructors, coercion functions,\nand casting functions.\n","example_call":"vec_arith.POSIXlt(op, x, y, ...)"},"vctrs::vec_type2":{"description":"\n","example_call":"vec_type2(x, y, ...)"},"vctrs::vec_ptype2.character":{"description":"vec_ptype2() defines the coercion hierarchy for a set of related\nvector types. Along with vec_cast(), this generic forms the\nfoundation of type coercions in vctrs.\n","example_call":"vec_ptype2.character(x, y, ..., x_arg = \"\", y_arg = \"\")"},"vctrs::vec_duplicate_id":{"description":"In most cases, missing values are not considered to be equal, i.e.\nNA == NA is not TRUE. This behaviour would be unappealing here,\nso these functions consider all NAs to be equal. (Similarly,\nall NaN are also considered to be equal.)\n","example_call":"vec_duplicate_id(x)"},"vctrs::vec_expand_grid":{"description":"vec_expand_grid() creates a new data frame by creating a grid of all\npossible combinations of the input vectors. It is inspired by\nexpand.grid(). Compared with expand.grid(), it:\n","example_call":"vec_expand_grid(..., .vary = \"slowest\", .name_repair = \"check_unique\","},"vctrs::list_unchop":{"description":"If indices selects every value in x exactly once, in any order, then\nlist_unchop() is the inverse of vec_chop() and the following invariant\nholds:\n","example_call":"list_unchop(x, ..., indices = NULL, ptype = NULL, name_spec = NULL,"},"vctrs::field":{"description":"A rcrd behaves like a vector, so length(), names(), and $ can\nnot provide access to the fields of the underlying list. These helpers do:\nfields() is equivalent to names(); n_fields() is equivalent to\nlength(); field() is equivalent to $.\n","example_call":"field(x, i)"},"vctrs::obj_is_list":{"description":"Notably, data frames and S3 record style classes like POSIXlt are not\nconsidered lists.\n","example_call":"obj_is_list(x)"},"vctrs::data_frame":{"description":"data_frame() constructs a data frame. It is similar to\nbase::data.frame(), but there are a few notable differences that make it\nmore in line with vctrs principles. The Properties section outlines these.\n","example_call":"data_frame(..., .size = NULL, .name_repair = c(\"check_unique\","},"vctrs::obj_print_footer":{"description":"These are constructed to be more easily extensible since you can override\nthe <U+2060>_header()<U+2060>, <U+2060>_data()<U+2060> or <U+2060>_footer()<U+2060> components individually. The\ndefault methods are built on top of format().\n","example_call":"obj_print_footer(x, ...)"},"vctrs::vec_unique_count":{"description":"In most cases, missing values are not considered to be equal, i.e.\nNA == NA is not TRUE. This behaviour would be unappealing here,\nso these functions consider all NAs to be equal. (Similarly,\nall NaN are also considered to be equal.)\n","example_call":"vec_unique_count(x)"},"vctrs::vec_default_cast":{"description":"These functions are automatically called when no vec_ptype2() or\nvec_cast() method is implemented for a pair of types.\n","example_call":"vec_default_cast(x, to, ..., x_arg = \"\", to_arg = \"\", call = caller_env())"},"vctrs::vec_in":{"description":"vec_in() returns a logical vector based on whether needle is found in\nhaystack. vec_match() returns an integer vector giving location of\nneedle in haystack, or NA if it's not found.\n","example_call":"vec_in(needles, haystack, ..., na_equal = TRUE, needles_arg = \"\","},"vctrs::vec_proxy":{"description":"\n","example_call":"vec_proxy(x, ...)"},"vctrs::vec_split":{"description":"This is a generalisation of split() that can split by any type of vector,\nnot just factors. Instead of returning the keys in the character names,\nthe are returned in a separate parallel vector.\n","example_call":"vec_split(x, by)"},"vctrs::vec_order":{"description":"Order and sort vectors\n","example_call":"vec_order(x, ..., direction = c(\"asc\", \"desc\"), na_value = c(\"largest\","},"vctrs::vec_arith.Date":{"description":"These function help the base Date, POSIXct, and difftime classes fit\ninto the vctrs type system by providing constructors, coercion functions,\nand casting functions.\n","example_call":"vec_arith.Date(op, x, y, ...)"},"vctrs::vec_proxy_compare":{"description":"vec_proxy_compare() and vec_proxy_order() return proxy objects, i.e.\nan atomic vector or data frame of atomic vectors.\n","example_call":"vec_proxy_compare(x, ...)"},"vctrs::partial_factor":{"description":"\n","example_call":"partial_factor(levels = character())"},"vctrs::vec_ptype":{"description":"vec_ptype() returns the unfinalised prototype of a single vector.\nvec_ptype_common() finds the common type of multiple vectors.\nvec_ptype_show() nicely prints the common type of any number of\ninputs, and is designed for interactive exploration.\n","example_call":"vec_ptype(x, ..., x_arg = \"\", call = caller_env())"},"vctrs::vec_is":{"description":"\n","example_call":"vec_is(x, ptype = NULL, size = NULL)"},"vctrs::vec_rep":{"description":"Using vec_unrep() and vec_rep_each() together is similar to using\nbase::rle() and base::inverse.rle(). The following invariant shows\nthe relationship between the two functions:\n","example_call":"vec_rep(x, times, ..., error_call = current_env(), x_arg = \"x\","},"vctrs::vec_is_empty":{"description":"vec_size(x) returns the size of a vector. vec_is_empty()\nreturns TRUE if the size is zero, FALSE otherwise.\n","example_call":"vec_is_empty(x)"},"vctrs::vec_arith_base":{"description":"This generic provides a common double dispatch mechanism for all infix\noperators (+, -, /, *, ^, %%, %/%, !, &, |). It is used\nto power the default arithmetic and boolean operators for vctrs objects,\novercoming the limitations of the base Ops generic.\n","example_call":"vec_arith_base(op, x, y)"},"vctrs::vec_group_loc":{"description":"\n","example_call":"vec_group_loc(x)"},"vctrs::tib_ptype2":{"description":"df_ptype2() and df_cast() are the two functions you need to\ncall from vec_ptype2() and vec_cast() methods for data frame\nsubclasses. See ?howto-faq-coercion-data-frame.\nTheir main job is to determine the common type of two data frames,\nadding and coercing columns as needed, or throwing an incompatible\ntype error when the columns are not compatible.\n","example_call":"tib_ptype2(x, y, ..., x_arg = \"\", y_arg = \"\", call = caller_env())"},"vctrs::obj_print_header":{"description":"These are constructed to be more easily extensible since you can override\nthe <U+2060>_header()<U+2060>, <U+2060>_data()<U+2060> or <U+2060>_footer()<U+2060> components individually. The\ndefault methods are built on top of format().\n","example_call":"obj_print_header(x, ...)"},"vctrs::df_ptype2":{"description":"df_ptype2() and df_cast() are the two functions you need to\ncall from vec_ptype2() and vec_cast() methods for data frame\nsubclasses. See ?howto-faq-coercion-data-frame.\nTheir main job is to determine the common type of two data frames,\nadding and coercing columns as needed, or throwing an incompatible\ntype error when the columns are not compatible.\n","example_call":"df_ptype2(x, y, ..., x_arg = \"\", y_arg = \"\", call = caller_env())"},"vctrs::is_partial":{"description":"\n","example_call":"is_partial(x)"},"vctrs::vec_ptype2.integer64":{"description":"A integer64 is a 64 bits integer vector, implemented in the bit64 package.\n","example_call":"vec_ptype2.integer64(x, y, ...)"},"vctrs::vec_cast.Date":{"description":"These function help the base Date, POSIXct, and difftime classes fit\ninto the vctrs type system by providing constructors, coercion functions,\nand casting functions.\n","example_call":"vec_cast.Date(x, to, ...)"},"vctrs::vec_ptype2.difftime":{"description":"These function help the base Date, POSIXct, and difftime classes fit\ninto the vctrs type system by providing constructors, coercion functions,\nand casting functions.\n","example_call":"vec_ptype2.difftime(x, y, ...)"},"vctrs::vec_slice<-":{"description":"This provides a common interface to extracting and modifying observations\nfor all vector types, regardless of dimensionality. It is an analog to [\nthat matches vec_size() instead of length().\n","example_call":"vec_slice<-(x, i, value)"},"vctrs::vec_rep_each":{"description":"Using vec_unrep() and vec_rep_each() together is similar to using\nbase::rle() and base::inverse.rle(). The following invariant shows\nthe relationship between the two functions:\n","example_call":"vec_rep_each(x, times, ..., error_call = current_env(), x_arg = \"x\","},"vctrs::vec_cast.data.frame":{"description":"These functions help the base data.frame class fit into the vctrs type system\nby providing coercion and casting functions.\n","example_call":"vec_cast.data.frame(x, to, ...)"},"vctrs::vec_chop":{"description":"If indices selects every value in x exactly once, in any order, then\nlist_unchop() is the inverse of vec_chop() and the following invariant\nholds:\n","example_call":"vec_chop(x, ..., indices = NULL, sizes = NULL)"},"vctrs::vec_default_ptype2":{"description":"These functions are automatically called when no vec_ptype2() or\nvec_cast() method is implemented for a pair of types.\n","example_call":"vec_default_ptype2(x, y, ..., x_arg = \"\", y_arg = \"\", call = caller_env())"},"vctrs::vec_cast.POSIXct":{"description":"These function help the base Date, POSIXct, and difftime classes fit\ninto the vctrs type system by providing constructors, coercion functions,\nand casting functions.\n","example_call":"vec_cast.POSIXct(x, to, ...)"},"vctrs::vec_group_rle":{"description":"\n","example_call":"vec_group_rle(x)"},"vctrs::vec_proxy_equal":{"description":"Returns a proxy object (i.e. an atomic vector or data frame of atomic\nvectors). For vctrs, this determines the behaviour of == and\n!= (via vec_equal()); unique(), duplicated() (via\nvec_unique() and vec_duplicate_detect()); is.na() and anyNA()\n(via vec_detect_missing()).\n","example_call":"vec_proxy_equal(x, ...)"},"vctrs::stop_incompatible_size":{"description":"These functions are called for their side effect of raising\nerrors and warnings.\nThese conditions have custom classes and structures to make\ntesting easier.\n","example_call":"stop_incompatible_size(x, y, x_size, y_size, ..., x_arg, y_arg, details = NULL,"},"vctrs::vec_set_difference":{"description":"Because these are set operations, these functions only return unique values\nfrom x and y, returned in the order they first appeared in the original\ninput. Names of x and y are retained on the result, but names are always\ntaken from x if the value appears in both inputs.\n","example_call":"vec_set_difference(x, y, ..., ptype = NULL, x_arg = \"x\", y_arg = \"y\","},"vctrs::vec_cast.character":{"description":"vec_cast() provides directional conversions from one type of\nvector to another. Along with vec_ptype2(), this generic forms\nthe foundation of type coercions in vctrs.\n","example_call":"vec_cast.character(x, to, ...)"},"vctrs::vec_ptype2.double":{"description":"vec_ptype2() defines the coercion hierarchy for a set of related\nvector types. Along with vec_cast(), this generic forms the\nfoundation of type coercions in vctrs.\n","example_call":"vec_ptype2.double(x, y, ..., x_arg = \"\", y_arg = \"\")"},"vctrs::vec_cast.complex":{"description":"vec_cast() provides directional conversions from one type of\nvector to another. Along with vec_ptype2(), this generic forms\nthe foundation of type coercions in vctrs.\n","example_call":"vec_cast.complex(x, to, ...)"},"vctrs::list_of":{"description":"A list_of object is a list where each element has the same type.\nModifying the list with $, [, and [[ preserves the constraint\nby coercing all input items.\n","example_call":"list_of(..., .ptype = NULL)"},"vctrs::vec_cast_common":{"description":"vec_cast() provides directional conversions from one type of\nvector to another. Along with vec_ptype2(), this generic forms\nthe foundation of type coercions in vctrs.\n","example_call":"vec_cast_common(..., .to = NULL, .arg = \"\", .call = caller_env())"},"vctrs::vec_cast.POSIXlt":{"description":"These function help the base Date, POSIXct, and difftime classes fit\ninto the vctrs type system by providing constructors, coercion functions,\nand casting functions.\n","example_call":"vec_cast.POSIXlt(x, to, ...)"},"vctrs::vec_init":{"description":"Initialize a vector\n","example_call":"vec_init(x, n = 1L)"},"vctrs::vec_arith":{"description":"This generic provides a common double dispatch mechanism for all infix\noperators (+, -, /, *, ^, %%, %/%, !, &, |). It is used\nto power the default arithmetic and boolean operators for vctrs objects,\novercoming the limitations of the base Ops generic.\n","example_call":"vec_arith(op, x, y, ...)"},"vctrs::vec_match":{"description":"vec_in() returns a logical vector based on whether needle is found in\nhaystack. vec_match() returns an integer vector giving location of\nneedle in haystack, or NA if it's not found.\n","example_call":"vec_match(needles, haystack, ..., na_equal = TRUE, needles_arg = \"\","},"vctrs::partial_frame":{"description":"\n","example_call":"partial_frame(...)"},"vctrs::num_as_location2":{"description":"These helpers provide a means of standardizing common indexing\nmethods such as integer, character or logical indexing.\n","example_call":"num_as_location2(i, n, ..., negative = c(\"error\", \"ignore\"), missing = c(\"error\","},"vctrs::stop_incompatible_cast":{"description":"These functions are called for their side effect of raising\nerrors and warnings.\nThese conditions have custom classes and structures to make\ntesting easier.\n","example_call":"stop_incompatible_cast(x, to, ..., x_arg, to_arg, details = NULL, message = NULL,"},"vctrs::as_list_of":{"description":"A list_of object is a list where each element has the same type.\nModifying the list with $, [, and [[ preserves the constraint\nby coercing all input items.\n","example_call":"as_list_of(x, ...)"},"vctrs::vec_arith.POSIXct":{"description":"These function help the base Date, POSIXct, and difftime classes fit\ninto the vctrs type system by providing constructors, coercion functions,\nand casting functions.\n","example_call":"vec_arith.POSIXct(op, x, y, ...)"},"vctrs::vec_detect_missing":{"description":"Data frame rows are only considered missing if every element in the row is\nmissing. Similarly, record vector elements are only considered\nmissing if every field in the record is missing. Put another way, rows with\nany missing values are considered incomplete, but\nonly rows with all missing values are considered missing.\n","example_call":"vec_detect_missing(x)"},"vctrs::vec_arith.numeric":{"description":"This generic provides a common double dispatch mechanism for all infix\noperators (+, -, /, *, ^, %%, %/%, !, &, |). It is used\nto power the default arithmetic and boolean operators for vctrs objects,\novercoming the limitations of the base Ops generic.\n","example_call":"vec_arith.numeric(op, x, y, ...)"},"vctrs::obj_check_list":{"description":"Notably, data frames and S3 record style classes like POSIXlt are not\nconsidered lists.\n","example_call":"obj_check_list(x, ..., arg = caller_arg(x), call = caller_env())"},"vctrs::new_datetime":{"description":"These function help the base Date, POSIXct, and difftime classes fit\ninto the vctrs type system by providing constructors, coercion functions,\nand casting functions.\n","example_call":"new_datetime(x = double(), tzone = \"\")"},"vctrs::vec_duplicate_any":{"description":"In most cases, missing values are not considered to be equal, i.e.\nNA == NA is not TRUE. This behaviour would be unappealing here,\nso these functions consider all NAs to be equal. (Similarly,\nall NaN are also considered to be equal.)\n","example_call":"vec_duplicate_any(x)"},"vctrs::vec_check_list":{"description":"\n","example_call":"vec_check_list(x, ..., arg = caller_arg(x), call = caller_env())"},"vctrs::new_list_of":{"description":"Create list_of subclass\n","example_call":"new_list_of(x = list(), ptype = logical(), ..., class = character())"},"vctrs::list_check_all_vectors":{"description":"Notably, data frames and S3 record style classes like POSIXlt are not\nconsidered lists.\n","example_call":"list_check_all_vectors(x, ..., arg = caller_arg(x), call = caller_env())"},"vctrs::%0%":{"description":"Use this inline operator when you need to provide a default value for\nempty (as defined by vec_is_empty()) vectors.\n","example_call":"%0%(x, y)"},"vctrs::num_as_location":{"description":"These helpers provide a means of standardizing common indexing\nmethods such as integer, character or logical indexing.\n","example_call":"num_as_location(i, n, ..., missing = c(\"propagate\", \"remove\", \"error\"),"},"vctrs::df_cast":{"description":"df_ptype2() and df_cast() are the two functions you need to\ncall from vec_ptype2() and vec_cast() methods for data frame\nsubclasses. See ?howto-faq-coercion-data-frame.\nTheir main job is to determine the common type of two data frames,\nadding and coercing columns as needed, or throwing an incompatible\ntype error when the columns are not compatible.\n","example_call":"df_cast(x, to, ..., x_arg = \"\", to_arg = \"\", call = caller_env())"},"vctrs::vec_as_location2":{"description":"These helpers provide a means of standardizing common indexing\nmethods such as integer, character or logical indexing.\n","example_call":"vec_as_location2(i, n, names = NULL, ..., missing = c(\"error\", \"propagate\"),"},"vctrs::vec_type_common":{"description":"\n","example_call":"vec_type_common(..., .ptype = NULL)"},"vctrs::new_vctr":{"description":"This abstract class provides a set of useful default methods that makes it\nconsiderably easier to get started with a new S3 vector class. See\nvignette(\"s3-vector\") to learn how to use it to create your own S3\nvector classes.\n","example_call":"new_vctr(.data, ..., class = character(), inherit_base_type = NULL)"},"viridisLite::plasma":{"description":"This function creates a vector of n equally spaced colors\nalong the selected color map.\n","example_call":"plasma(n, alpha = 1, begin = 0, end = 1, direction = 1)"},"viridisLite::inferno":{"description":"This function creates a vector of n equally spaced colors\nalong the selected color map.\n","example_call":"inferno(n, alpha = 1, begin = 0, end = 1, direction = 1)"},"viridisLite::viridis.map":{"description":"A data set containing the RGB values of the color maps included\nin the package. These are:\n","example_call":"NULL"},"viridisLite::magma":{"description":"This function creates a vector of n equally spaced colors\nalong the selected color map.\n","example_call":"magma(n, alpha = 1, begin = 0, end = 1, direction = 1)"},"viridisLite::viridisMap":{"description":"This function creates a vector of n equally spaced colors\nalong the selected color map.\n","example_call":"viridisMap(n = 256, alpha = 1, begin = 0, end = 1, direction = 1,"},"viridisLite::rocket":{"description":"This function creates a vector of n equally spaced colors\nalong the selected color map.\n","example_call":"rocket(n, alpha = 1, begin = 0, end = 1, direction = 1)"},"viridisLite::cividis":{"description":"This function creates a vector of n equally spaced colors\nalong the selected color map.\n","example_call":"cividis(n, alpha = 1, begin = 0, end = 1, direction = 1)"},"viridisLite::mako":{"description":"This function creates a vector of n equally spaced colors\nalong the selected color map.\n","example_call":"mako(n, alpha = 1, begin = 0, end = 1, direction = 1)"},"viridisLite::turbo":{"description":"This function creates a vector of n equally spaced colors\nalong the selected color map.\n","example_call":"turbo(n, alpha = 1, begin = 0, end = 1, direction = 1)"},"viridisLite::viridis":{"description":"This function creates a vector of n equally spaced colors\nalong the selected color map.\n","example_call":"viridis(n, alpha = 1, begin = 0, end = 1, direction = 1, option = \"D\")"},"vroom::vroom_write":{"description":"Write a data frame to a delimited file\n","example_call":"vroom_write(x, file, delim = \"\\t\", eol = \"\\n\", na = \"NA\", col_names = !append,"},"vroom::vroom_example":{"description":"vroom comes bundled with a number of sample files in\nits 'inst/extdata' directory. Use vroom_examples() to list all the\navailable examples and vroom_example() to retrieve the path to one\nexample.\n","example_call":"vroom_example(path)"},"vroom::gen_datetime":{"description":"Generate individual vectors of the types supported by vroom\n","example_call":"gen_datetime(n, min = as.POSIXct(\"2001-01-01\"), max = as.POSIXct(\"2021-01-01\"),"},"vroom::col_datetime":{"description":"cols() includes all columns in the input data, guessing the column types\nas the default. cols_only() includes only the columns you explicitly\nspecify, skipping the rest.\n","example_call":"col_datetime(format = \"\", ...)"},"vroom::gen_character":{"description":"Generate individual vectors of the types supported by vroom\n","example_call":"gen_character(n, min = 5, max = 25, values = c(letters, LETTERS,"},"vroom::vroom_lines":{"description":"vroom_lines() is similar to readLines(), however it reads the lines\nlazily like vroom(), so operations like length(), head(), tail() and sample()\ncan be done much more efficiently without reading all the data into R.\n","example_call":"vroom_lines(file, n_max = Inf, skip = 0, na = character(), skip_empty_rows = FALSE,"},"vroom::cols":{"description":"cols() includes all columns in the input data, guessing the column types\nas the default. cols_only() includes only the columns you explicitly\nspecify, skipping the rest.\n","example_call":"cols(..., .default = col_guess(), .delim = NULL)"},"vroom::col_time":{"description":"cols() includes all columns in the input data, guessing the column types\nas the default. cols_only() includes only the columns you explicitly\nspecify, skipping the rest.\n","example_call":"col_time(format = \"\", ...)"},"vroom::cols_only":{"description":"cols() includes all columns in the input data, guessing the column types\nas the default. cols_only() includes only the columns you explicitly\nspecify, skipping the rest.\n","example_call":"cols_only(...)"},"vroom::gen_time":{"description":"Generate individual vectors of the types supported by vroom\n","example_call":"gen_time(n, min = 0, max = hms::hms(days = 1), fractional = FALSE,"},"vroom::gen_name":{"description":"Generate individual vectors of the types supported by vroom\n","example_call":"gen_name(n)"},"vroom::gen_double":{"description":"Generate individual vectors of the types supported by vroom\n","example_call":"gen_double(n, f = stats::rnorm, ...)"},"vroom::cols_condense":{"description":"cols_condense() takes a spec object and condenses its definition by setting\nthe default column type to the most frequent type and only listing columns\nwith a different type.\n","example_call":"cols_condense(x)"},"vroom::vroom_write_lines":{"description":"Write lines to a file\n","example_call":"vroom_write_lines(x, file, eol = \"\\n\", na = \"NA\", append = FALSE, num_threads = vroom_threads())"},"vroom::vroom_progress":{"description":"By default, vroom shows progress bars. However, progress reporting is\nsuppressed if any of the following conditions hold:\n","example_call":"vroom_progress()"},"vroom::vroom_altrep":{"description":"vroom_altrep() can be used directly as input to the altrep\nargument of vroom().\n","example_call":"vroom_altrep(which = NULL)"},"vroom::fwf_empty":{"description":"Read a fixed width file into a tibble\n","example_call":"fwf_empty(file, skip = 0, col_names = NULL, comment = \"\", n = 100L)"},"vroom::gen_date":{"description":"Generate individual vectors of the types supported by vroom\n","example_call":"gen_date(n, min = as.Date(\"2001-01-01\"), max = as.Date(\"2021-01-01\"),"},"vroom::fwf_cols":{"description":"Read a fixed width file into a tibble\n","example_call":"fwf_cols(...)"},"vroom::fwf_widths":{"description":"Read a fixed width file into a tibble\n","example_call":"fwf_widths(widths, col_names = NULL)"},"vroom::date_names":{"description":"When parsing dates, you often need to know how weekdays of the week and\nmonths are represented as text. This pair of functions allows you to either\ncreate your own, or retrieve from a standard list. The standard list is\nderived from ICU (<U+2060>https://site.icu-project.org<U+2060>) via the stringi package.\n","example_call":"date_names(mon, mon_ab = mon, day, day_ab = day, am_pm = c(\"AM\","},"vroom::col_skip":{"description":"cols() includes all columns in the input data, guessing the column types\nas the default. cols_only() includes only the columns you explicitly\nspecify, skipping the rest.\n","example_call":"col_skip(...)"},"vroom::col_factor":{"description":"cols() includes all columns in the input data, guessing the column types\nas the default. cols_only() includes only the columns you explicitly\nspecify, skipping the rest.\n","example_call":"col_factor(levels = NULL, ordered = FALSE, include_na = FALSE,"},"vroom::gen_number":{"description":"Generate individual vectors of the types supported by vroom\n","example_call":"gen_number(n, f = stats::rnorm, ...)"},"vroom::vroom_examples":{"description":"vroom comes bundled with a number of sample files in\nits 'inst/extdata' directory. Use vroom_examples() to list all the\navailable examples and vroom_example() to retrieve the path to one\nexample.\n","example_call":"vroom_examples(pattern = NULL)"},"vroom::date_names_lang":{"description":"When parsing dates, you often need to know how weekdays of the week and\nmonths are represented as text. This pair of functions allows you to either\ncreate your own, or retrieve from a standard list. The standard list is\nderived from ICU (<U+2060>https://site.icu-project.org<U+2060>) via the stringi package.\n","example_call":"date_names_lang(language)"},"vroom::col_character":{"description":"cols() includes all columns in the input data, guessing the column types\nas the default. cols_only() includes only the columns you explicitly\nspecify, skipping the rest.\n","example_call":"col_character(...)"},"vroom::vroom_altrep_opts":{"description":"\nThis function is deprecated in favor of vroom_altrep().\n","example_call":"vroom_altrep_opts(which = NULL)"},"vroom::vroom_format":{"description":"This is equivalent to vroom_write(), but instead of writing to\ndisk, it returns a string. It is primarily useful for examples and for\ntesting.\n","example_call":"vroom_format(x, delim = \"\\t\", eol = \"\\n\", na = \"NA\", col_names = TRUE,"},"vroom::gen_tbl":{"description":"This is useful for benchmarking, but also for bug reports when you cannot\nshare the real dataset.\n","example_call":"gen_tbl(rows, cols = NULL, col_types = NULL, locale = default_locale(),"},"vroom::vroom":{"description":"Read a delimited file into a tibble\n","example_call":"vroom(file, delim = NULL, col_names = TRUE, col_types = NULL,"},"vroom::locale":{"description":"A locale object tries to capture all the defaults that can vary between\ncountries. You set the locale in once, and the details are automatically\npassed on down to the columns parsers. The defaults have been chosen to\nmatch R (i.e. US English) as closely as possible. See\nvignette(\"locales\") for more details.\n","example_call":"locale(date_names = \"en\", date_format = \"%AD\", time_format = \"%AT\","},"vroom::col_date":{"description":"cols() includes all columns in the input data, guessing the column types\nas the default. cols_only() includes only the columns you explicitly\nspecify, skipping the rest.\n","example_call":"col_date(format = \"\", ...)"},"vroom::col_double":{"description":"cols() includes all columns in the input data, guessing the column types\nas the default. cols_only() includes only the columns you explicitly\nspecify, skipping the rest.\n","example_call":"col_double(...)"},"vroom::col_integer":{"description":"cols() includes all columns in the input data, guessing the column types\nas the default. cols_only() includes only the columns you explicitly\nspecify, skipping the rest.\n","example_call":"col_integer(...)"},"vroom::col_number":{"description":"cols() includes all columns in the input data, guessing the column types\nas the default. cols_only() includes only the columns you explicitly\nspecify, skipping the rest.\n","example_call":"col_number(...)"},"vroom::gen_factor":{"description":"Generate individual vectors of the types supported by vroom\n","example_call":"gen_factor(n, levels = NULL, ordered = FALSE, num_levels = gen_integer(1L,"},"vroom::gen_integer":{"description":"Generate individual vectors of the types supported by vroom\n","example_call":"gen_integer(n, min = 1L, max = .Machine$integer.max, prob = NULL,"},"vroom::col_guess":{"description":"cols() includes all columns in the input data, guessing the column types\nas the default. cols_only() includes only the columns you explicitly\nspecify, skipping the rest.\n","example_call":"col_guess(...)"},"vroom::as.col_spec":{"description":"This is most useful for generating a specification using the short form or coercing from a list.\n","example_call":"as.col_spec(x)"},"vroom::fwf_positions":{"description":"Read a fixed width file into a tibble\n","example_call":"fwf_positions(start, end = NULL, col_names = NULL)"},"vroom::col_big_integer":{"description":"cols() includes all columns in the input data, guessing the column types\nas the default. cols_only() includes only the columns you explicitly\nspecify, skipping the rest.\n","example_call":"col_big_integer(...)"},"vroom::problems":{"description":"vroom will only fail to parse a file if the file is invalid in a way that is\nunrecoverable. However there are a number of non-fatal problems that you\nmight want to know about. You can retrieve a data frame of these problems\nwith this function.\n","example_call":"problems(x = .Last.value, lazy = FALSE)"},"vroom::date_names_langs":{"description":"When parsing dates, you often need to know how weekdays of the week and\nmonths are represented as text. This pair of functions allows you to either\ncreate your own, or retrieve from a standard list. The standard list is\nderived from ICU (<U+2060>https://site.icu-project.org<U+2060>) via the stringi package.\n","example_call":"date_names_langs()"},"vroom::spec":{"description":"cols_condense() takes a spec object and condenses its definition by setting\nthe default column type to the most frequent type and only listing columns\nwith a different type.\n","example_call":"spec(x)"},"vroom::col_logical":{"description":"cols() includes all columns in the input data, guessing the column types\nas the default. cols_only() includes only the columns you explicitly\nspecify, skipping the rest.\n","example_call":"col_logical(...)"},"vroom::output_column":{"description":"This is a generic function that applied to each column before it is saved\nto disk. It provides a hook for S3 classes that need special handling.\n","example_call":"output_column(x)"},"vroom::gen_logical":{"description":"Generate individual vectors of the types supported by vroom\n","example_call":"gen_logical(n, ...)"},"vroom::guess_type":{"description":"Guess the type of a vector\n","example_call":"guess_type(x, na = c(\"\", \"NA\"), locale = default_locale(), guess_integer = FALSE)"},"vroom::default_locale":{"description":"A locale object tries to capture all the defaults that can vary between\ncountries. You set the locale in once, and the details are automatically\npassed on down to the columns parsers. The defaults have been chosen to\nmatch R (i.e. US English) as closely as possible. See\nvignette(\"locales\") for more details.\n","example_call":"default_locale()"},"vroom::vroom_str":{"description":"Similar to str() but with more information for Altrep objects.\n","example_call":"vroom_str(x)"},"vroom::vroom_fwf":{"description":"Read a fixed width file into a tibble\n","example_call":"vroom_fwf(file, col_positions = fwf_empty(file, skip, n = guess_max),"},"waldo::compare":{"description":"This compares two R objects, identifying the key differences. It:\n","example_call":"compare(x, y, ..., x_arg = \"old\", y_arg = \"new\", tolerance = NULL,"},"waldo::compare_proxy":{"description":"Use this generic to override waldo's default comparison if you need to\noverride the defaults (typically because your object stores data in an\nexternal pointer).\n","example_call":"compare_proxy(x, path = \"x\")"},"webr::library_shim":{"description":"When loading R packages using library_shim() or require_shim(), if a\npackage is missing an attempt will be made to download and install the\nmissing package from the default webR binary repo.\n","example_call":"library_shim(pkg, ..., show_menu = getOption(\"webr.show_menu\"))"},"webr::eval_js":{"description":"This function evaluates the given character string as JavaScript code. The\nresult is returned as an integer.\n","example_call":"eval_js(code)"},"webr::syncfs":{"description":"Uses the Emscripten filesystem API to synchronise all mounted virtual\nfilesystems with their backing storage, where it exists. The populate\nargument controls the direction of the synchronisation between Emscripten's\ninternal data and the file system's persistent store.\n","example_call":"syncfs(populate)"},"webr::mount":{"description":"Uses the Emscripten filesystem API to mount a filesystem object onto a given\ndirectory in the virtual filesystem. The mountpoint will be created if it\ndoes not already exist.\n","example_call":"mount(mountpoint, source, type = \"workerfs\")"},"webr::unmount":{"description":"Uses the Emscripten filesystem API to mount a filesystem object onto a given\ndirectory in the virtual filesystem. The mountpoint will be created if it\ndoes not already exist.\n","example_call":"unmount(mountpoint)"},"webr::global_prompt_install":{"description":"When enabled, packageNotFoundError errors invoke a global handler to\ndownload missing R packages from the default webR binary repo.\n","example_call":"global_prompt_install()"},"webr::viewer_install":{"description":"When enabled, the R viewer option is set so that a request to display\na URL generates a webR output message. The request is forwarded to the main\nthread to be handled by the application loading webR.\n","example_call":"viewer_install()"},"webr::canvas_purge":{"description":"canvas_cache() returns an integer vector containing the current canvas\ncache IDs.\n","example_call":"canvas_purge()"},"webr::pager_install":{"description":"When enabled, the R pager function is replaced so that a request to display\na file's contents instead generates a webR output message. The request is\nforwarded to the main thread to be handled by the application loading webR.\n","example_call":"pager_install()"},"webr::canvas_install":{"description":"Set R options so that the webR canvas graphics device is used as the default\ngraphics device for new plots.\n","example_call":"canvas_install(...)"},"webr::install":{"description":"Install one or more packages from a webR binary package repo\n","example_call":"install(packages, repos = NULL, info = NULL, lib = NULL, quiet = FALSE,"},"webr::test_package":{"description":"This function runs R package examples and tests. The implementation is based\non tools::testInstalledPackage(), with modifications for webR where the\nsystem() function cannot be used.\n","example_call":"test_package(pkg)"},"webr::canvas_cache":{"description":"canvas_cache() returns an integer vector containing the current canvas\ncache IDs.\n","example_call":"canvas_cache()"},"webr::canvas":{"description":"A graphics device that generates HTML canvas API calls and executes them on\nthe worker thread using a JavaScript OffscreenCanvas. Throughout plotting,\nand if capture is FALSE, JavaScript ImageBitmap objects are transmitted\nto the main webR thread for display.\n","example_call":"canvas(width = 504, height = 504, pointsize = 12, bg = \"transparent\","},"webr::shim_install":{"description":"Replace base R functions with implementations\nthat work in the webR environment.\n","example_call":"shim_install()"},"webr::canvas_destroy":{"description":"canvas_cache() returns an integer vector containing the current canvas\ncache IDs.\n","example_call":"canvas_destroy(ids)"},"webr::require_shim":{"description":"When loading R packages using library_shim() or require_shim(), if a\npackage is missing an attempt will be made to download and install the\nmissing package from the default webR binary repo.\n","example_call":"require_shim(pkg, ..., show_menu = getOption(\"webr.show_menu\"))"},"webr::eval_r":{"description":"This function evaluates the provided R code, call, or expression with various\nsettings in place to configure behavior. The function is intended to be used\nby the webR evalR API, rather than invoked directly by the end user.\n","example_call":"eval_r(expr, conditions = TRUE, streams = FALSE, autoprint = FALSE,"},"withr::with_makevars":{"description":"Temporarily change contents of an existing Makevars file.\n","example_call":"with_makevars(new, code, path = makevars_user(), assignment = c(\"=\","},"withr::local_postscript":{"description":"Temporarily use a graphics device.\n","example_call":"local_postscript(new, ..., .local_envir = parent.frame())"},"withr::local_libpaths":{"description":"Temporarily change library paths.\n","example_call":"local_libpaths(new = list(), action = \"replace\", .local_envir = parent.frame())"},"withr::local_package":{"description":"with_package() attaches a package to the search path, executes the code, then\nremoves the package from the search path. The package namespace is not\nunloaded however. with_namespace() does the same thing, but attaches the\npackage namespace to the search path, so all objects (even unexported ones) are also\navailable on the search path.\n","example_call":"local_package(package, pos = 2, lib.loc = NULL, character.only = TRUE,"},"withr::with_png":{"description":"Temporarily use a graphics device.\n","example_call":"with_png(new, code, ...)"},"withr::with_jpeg":{"description":"Temporarily use a graphics device.\n","example_call":"with_jpeg(new, code, ...)"},"withr::with_libpaths":{"description":"Temporarily change library paths.\n","example_call":"with_libpaths(new, code, action = \"replace\")"},"withr::with_temp_libpaths":{"description":"Temporarily prepend a new temporary directory to the library paths.\n","example_call":"with_temp_libpaths(code, action = \"prefix\")"},"withr::set_makevars":{"description":"You probably want with_makevars() instead of this function.\n","example_call":"set_makevars(variables, old_path = makevars_user(), new_path = tempfile(),"},"withr::local_rng_version":{"description":"Change the RNG version and restore it afterwards.\n","example_call":"local_rng_version(version, .local_envir = parent.frame())"},"withr::makevars_user":{"description":"Shim for tools::makevars_user()\n","example_call":"makevars_user()"},"withr::local_seed":{"description":"with_seed() runs code with a specific random seed and resets it afterwards.\n","example_call":"local_seed(seed, .local_envir = parent.frame(), .rng_kind = NULL,"},"withr::local_dir":{"description":"Temporarily change the current working directory.\n","example_call":"local_dir(new = list(), .local_envir = parent.frame())"},"withr::local_svg":{"description":"Temporarily use a graphics device.\n","example_call":"local_svg(new, ..., .local_envir = parent.frame())"},"withr::local_namespace":{"description":"with_package() attaches a package to the search path, executes the code, then\nremoves the package from the search path. The package namespace is not\nunloaded however. with_namespace() does the same thing, but attaches the\npackage namespace to the search path, so all objects (even unexported ones) are also\navailable on the search path.\n","example_call":"local_namespace(package, .local_envir = parent.frame(), warn.conflicts = FALSE)"},"withr::with_collate":{"description":"Temporarily change collation order by changing the value of the\nLC_COLLATE locale.\n","example_call":"with_collate(new, code)"},"withr::with_environment":{"description":"with_package() attaches a package to the search path, executes the code, then\nremoves the package from the search path. The package namespace is not\nunloaded however. with_namespace() does the same thing, but attaches the\npackage namespace to the search path, so all objects (even unexported ones) are also\navailable on the search path.\n","example_call":"with_environment(env, code, pos = 2L, name = format(env), warn.conflicts = FALSE)"},"withr::with_":{"description":"These are constructors for with_... or local_... functions.\nThey are only needed if you want to alter some global state which is not\ncovered by the existing with_... functions, see withr\nfor an overview.\n","example_call":"with_(set, reset = set, get = NULL, ..., envir = parent.frame(),"},"withr::local_options":{"description":"Temporarily change global options.\n","example_call":"local_options(.new = list(), ..., .local_envir = parent.frame())"},"withr::local_collate":{"description":"Temporarily change collation order by changing the value of the\nLC_COLLATE locale.\n","example_call":"local_collate(new = list(), .local_envir = parent.frame())"},"withr::local_cairo_pdf":{"description":"Temporarily use a graphics device.\n","example_call":"local_cairo_pdf(new, ..., .local_envir = parent.frame())"},"withr::local_bmp":{"description":"Temporarily use a graphics device.\n","example_call":"local_bmp(new, ..., .local_envir = parent.frame())"},"withr::with_file":{"description":"Create files, which are then automatically removed afterwards.\n","example_call":"with_file(file, code)"},"withr::deferred_run":{"description":"Similar to on.exit(), but allows one to attach\nan expression to be evaluated when exiting any frame currently\non the stack. This provides a nice mechanism for scoping side\neffects for the duration of a function's execution.\n","example_call":"deferred_run(envir = parent.frame())"},"withr::local_message_sink":{"description":"Temporarily divert output to a file via sink().  For\nsinks of type message, an error is raised if such a sink is already\nactive.\n","example_call":"local_message_sink(new = list(), append = FALSE, .local_envir = parent.frame())"},"withr::local_locale":{"description":"Temporarily change locale settings.\n","example_call":"local_locale(.new = list(), ..., .local_envir = parent.frame())"},"withr::local_path":{"description":"Temporarily change the system search path.\n","example_call":"local_path(new = list(), action = c(\"prefix\", \"suffix\", \"replace\"),"},"withr::with_preserve_seed":{"description":"with_seed() runs code with a specific random seed and resets it afterwards.\n","example_call":"with_preserve_seed(code)"},"withr::local_pdf":{"description":"Temporarily use a graphics device.\n","example_call":"local_pdf(new, ..., .local_envir = parent.frame())"},"withr::with_locale":{"description":"Temporarily change locale settings.\n","example_call":"with_locale(new, code)"},"withr::with_pdf":{"description":"Temporarily use a graphics device.\n","example_call":"with_pdf(new, code, ...)"},"withr::defer_parent":{"description":"Similar to on.exit(), but allows one to attach\nan expression to be evaluated when exiting any frame currently\non the stack. This provides a nice mechanism for scoping side\neffects for the duration of a function's execution.\n","example_call":"defer_parent(expr, priority = c(\"first\", \"last\"))"},"withr::local_tempdir":{"description":"Temporarily create a file or directory, which will automatically deleted\nonce you're finished with it.\n","example_call":"local_tempdir(pattern = \"file\", tmpdir = tempdir(), fileext = \"\","},"withr::local_envvar":{"description":"Temporarily change system environment variables.\n","example_call":"local_envvar(.new = list(), ..., action = \"replace\", .local_envir = parent.frame())"},"withr::with_db_connection":{"description":"Connections to Database Management Systems which automatically disconnect. In\nparticular connections which are created with DBI::dbConnect() and closed\nwith DBI::dbDisconnect().\n","example_call":"with_db_connection(con, code)"},"withr::with_message_sink":{"description":"Temporarily divert output to a file via sink().  For\nsinks of type message, an error is raised if such a sink is already\nactive.\n","example_call":"with_message_sink(new, code, append = FALSE)"},"withr::with_namespace":{"description":"with_package() attaches a package to the search path, executes the code, then\nremoves the package from the search path. The package namespace is not\nunloaded however. with_namespace() does the same thing, but attaches the\npackage namespace to the search path, so all objects (even unexported ones) are also\navailable on the search path.\n","example_call":"with_namespace(package, code, warn.conflicts = FALSE)"},"withr::local_environment":{"description":"with_package() attaches a package to the search path, executes the code, then\nremoves the package from the search path. The package namespace is not\nunloaded however. with_namespace() does the same thing, but attaches the\npackage namespace to the search path, so all objects (even unexported ones) are also\navailable on the search path.\n","example_call":"local_environment(env, pos = 2L, name = format(env), warn.conflicts = FALSE,"},"withr::local_output_sink":{"description":"Temporarily divert output to a file via sink().  For\nsinks of type message, an error is raised if such a sink is already\nactive.\n","example_call":"local_output_sink(new = list(), append = FALSE, split = FALSE, .local_envir = parent.frame())"},"withr::with_postscript":{"description":"Temporarily use a graphics device.\n","example_call":"with_postscript(new, code, ...)"},"withr::local_file":{"description":"Create files, which are then automatically removed afterwards.\n","example_call":"local_file(.file, ..., .local_envir = parent.frame())"},"withr::local_temp_libpaths":{"description":"Temporarily prepend a new temporary directory to the library paths.\n","example_call":"local_temp_libpaths(action = \"prefix\", .local_envir = parent.frame())"},"withr::local_cairo_ps":{"description":"Temporarily use a graphics device.\n","example_call":"local_cairo_ps(new, ..., .local_envir = parent.frame())"},"withr::local_db_connection":{"description":"Connections to Database Management Systems which automatically disconnect. In\nparticular connections which are created with DBI::dbConnect() and closed\nwith DBI::dbDisconnect().\n","example_call":"local_db_connection(con, .local_envir = parent.frame())"},"withr::with_cairo_ps":{"description":"Temporarily use a graphics device.\n","example_call":"with_cairo_ps(new, code, ...)"},"withr::with_cairo_pdf":{"description":"Temporarily use a graphics device.\n","example_call":"with_cairo_pdf(new, code, ...)"},"withr::global_defer":{"description":"This function is mostly internal. It is exported to be called in\nstandalone defer() implementations to defer expressions from the\nglobal environment.\n","example_call":"global_defer(expr, priority = c(\"first\", \"last\"))"},"withr::with_path":{"description":"Temporarily change the system search path.\n","example_call":"with_path(new, code, action = c(\"prefix\", \"suffix\", \"replace\"))"},"withr::local_tiff":{"description":"Temporarily use a graphics device.\n","example_call":"local_tiff(new, ..., .local_envir = parent.frame())"},"withr::with_tempdir":{"description":"Temporarily create a file or directory, which will automatically deleted\nonce you're finished with it.\n","example_call":"with_tempdir(code, clean = TRUE, pattern = \"file\", tmpdir = tempdir(),"},"withr::local_tempfile":{"description":"Temporarily create a file or directory, which will automatically deleted\nonce you're finished with it.\n","example_call":"local_tempfile(new = NULL, lines = NULL, envir = parent.frame(), .local_envir = parent.frame(),"},"withr::local_preserve_seed":{"description":"with_seed() runs code with a specific random seed and resets it afterwards.\n","example_call":"local_preserve_seed(.local_envir = parent.frame())"},"withr::with_language":{"description":"Temporarily change the language used for translations.\n","example_call":"with_language(lang, code)"},"withr::local_":{"description":"These are constructors for with_... or local_... functions.\nThey are only needed if you want to alter some global state which is not\ncovered by the existing with_... functions, see withr\nfor an overview.\n","example_call":"local_(set, reset = set, get = NULL, ..., envir = parent.frame(),"},"withr::with_svg":{"description":"Temporarily use a graphics device.\n","example_call":"with_svg(new, code, ...)"},"withr::with_dir":{"description":"Temporarily change the current working directory.\n","example_call":"with_dir(new, code)"},"withr::with_package":{"description":"with_package() attaches a package to the search path, executes the code, then\nremoves the package from the search path. The package namespace is not\nunloaded however. with_namespace() does the same thing, but attaches the\npackage namespace to the search path, so all objects (even unexported ones) are also\navailable on the search path.\n","example_call":"with_package(package, code, pos = 2, lib.loc = NULL, character.only = TRUE,"},"withr::with_xfig":{"description":"Temporarily use a graphics device.\n","example_call":"with_xfig(new, code, ...)"},"withr::with_rng_version":{"description":"Change the RNG version and restore it afterwards.\n","example_call":"with_rng_version(version, code)"},"withr::with_output_sink":{"description":"Temporarily divert output to a file via sink().  For\nsinks of type message, an error is raised if such a sink is already\nactive.\n","example_call":"with_output_sink(new, code, append = FALSE, split = FALSE)"},"withr::local_connection":{"description":"R file connections which are automatically closed.\n","example_call":"local_connection(con, .local_envir = parent.frame())"},"withr::with_options":{"description":"Temporarily change global options.\n","example_call":"with_options(new, code)"},"withr::local_makevars":{"description":"Temporarily change contents of an existing Makevars file.\n","example_call":"local_makevars(.new = list(), ..., .path = makevars_user(), .assignment = c(\"=\","},"withr::local_par":{"description":"Temporarily change graphics parameters.\n","example_call":"local_par(.new = list(), ..., no.readonly = FALSE, .local_envir = parent.frame())"},"withr::local_timezone":{"description":"Change the time zone, and restore it afterwards.\n","example_call":"local_timezone(tz, .local_envir = parent.frame())"},"withr::with_bmp":{"description":"Temporarily use a graphics device.\n","example_call":"with_bmp(new, code, ...)"},"withr::with_envvar":{"description":"Temporarily change system environment variables.\n","example_call":"with_envvar(new, code, action = \"replace\")"},"withr::with_timezone":{"description":"Change the time zone, and restore it afterwards.\n","example_call":"with_timezone(tz, code)"},"withr::local_jpeg":{"description":"Temporarily use a graphics device.\n","example_call":"local_jpeg(new, ..., .local_envir = parent.frame())"},"withr::with_par":{"description":"Temporarily change graphics parameters.\n","example_call":"with_par(new, code, no.readonly = FALSE)"},"withr::with_connection":{"description":"R file connections which are automatically closed.\n","example_call":"with_connection(con, code)"},"withr::local_png":{"description":"Temporarily use a graphics device.\n","example_call":"local_png(new, ..., .local_envir = parent.frame())"},"withr::local_xfig":{"description":"Temporarily use a graphics device.\n","example_call":"local_xfig(new, ..., .local_envir = parent.frame())"},"withr::local_language":{"description":"Temporarily change the language used for translations.\n","example_call":"local_language(lang, .local_envir = parent.frame())"},"withr::defer":{"description":"Similar to on.exit(), but allows one to attach\nan expression to be evaluated when exiting any frame currently\non the stack. This provides a nice mechanism for scoping side\neffects for the duration of a function's execution.\n","example_call":"defer(expr, envir = parent.frame(), priority = c(\"first\","},"withr::with_tempfile":{"description":"Temporarily create a file or directory, which will automatically deleted\nonce you're finished with it.\n","example_call":"with_tempfile(new, code, envir = parent.frame(), .local_envir = parent.frame(),"},"withr::deferred_clear":{"description":"Similar to on.exit(), but allows one to attach\nan expression to be evaluated when exiting any frame currently\non the stack. This provides a nice mechanism for scoping side\neffects for the duration of a function's execution.\n","example_call":"deferred_clear(envir = parent.frame())"},"withr::with_seed":{"description":"with_seed() runs code with a specific random seed and resets it afterwards.\n","example_call":"with_seed(seed, code, .rng_kind = NULL, .rng_normal_kind = NULL,"},"withr::with_tiff":{"description":"Temporarily use a graphics device.\n","example_call":"with_tiff(new, code, ...)"},"yaml::as.yaml":{"description":"Convert an R object into a YAML string\n","example_call":"as.yaml(x, line.sep = c(\"\\n\", \"\\r\\n\", \"\\r\"), indent = 2, omap = FALSE,"},"yaml::write_yaml":{"description":"Write the YAML representation of an R object to a file\n","example_call":"write_yaml(x, file, fileEncoding = \"UTF-8\", ...)"},"yaml::yaml.load":{"description":"Parse a YAML string and return R objects.\n","example_call":"yaml.load(string, as.named.list = TRUE, handlers = NULL, error.label = NULL,"},"yaml::yaml.load_file":{"description":"Parse a YAML string and return R objects.\n","example_call":"yaml.load_file(input, error.label, readLines.warn = TRUE, ...)"},"yaml::verbatim_logical":{"description":"A yaml handler function that causes logical vectors to emit \ntrue/false instead of yes/no values.\n","example_call":"verbatim_logical(x)"},"yaml::read_yaml":{"description":"Read a YAML document from a file and create an R object from it\n","example_call":"read_yaml(file, fileEncoding = \"UTF-8\", text, error.label, readLines.warn = TRUE,"},"zip::zipr":{"description":"zip() creates a new zip archive file.\n","example_call":"zipr(zipfile, files, recurse = TRUE, compression_level = 9,"},"zip::unzip":{"description":"unzip() always restores modification times of the extracted files and\ndirectories.\n","example_call":"unzip(zipfile, files = NULL, overwrite = TRUE, junkpaths = FALSE,"},"zip::zip_process":{"description":"zip_process() returns an R6 class that represents a zip process.\nIt is implemented as a subclass of processx::process.\n","example_call":"zip_process()"},"zip::zip_list":{"description":"List Files in a 'zip' Archive\n","example_call":"zip_list(zipfile)"},"zip::unzip_process":{"description":"unzip_process() returns an R6 class that represents an unzip process.\nIt is implemented as a subclass of processx::process.\n","example_call":"unzip_process()"},"zip::zipr_append":{"description":"zip() creates a new zip archive file.\n","example_call":"zipr_append(zipfile, files, recurse = TRUE, compression_level = 9,"},"zip::zip_append":{"description":"zip() creates a new zip archive file.\n","example_call":"zip_append(zipfile, files, recurse = TRUE, compression_level = 9,"},"zip::deflate":{"description":"Compress a raw GZIP stream\n","example_call":"deflate(buffer, level = 6L, pos = 1L, size = NULL)"},"zip::zip":{"description":"zip() creates a new zip archive file.\n","example_call":"zip(zipfile, files, recurse = TRUE, compression_level = 9,"},"zip::inflate":{"description":"Uncompress a raw GZIP stream\n","example_call":"inflate(buffer, pos = 1L, size = NULL)"}}